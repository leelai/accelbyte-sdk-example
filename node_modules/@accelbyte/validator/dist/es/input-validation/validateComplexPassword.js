import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';

const ValidateComplexPasswordErrorType = z.enum([CommonValidationErrorType.enum.empty, CommonValidationErrorType.enum.invalidFormat]);
const validateComplexPassword = (value, { isRequired = true } = {}) => {
  const REGEX = (
    // tslint:disable-next-line
    '^(?:(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))(?!.*(.)\\1{2,})[A-Za-z0-9!~<>,;:_=?*+#."&\xA7%\xB0()\\|\\[\\]\\-\\$\\^\\@\\/]{8,32}$'
  );
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateComplexPasswordErrorType.enum.empty;
  }
  if (!matches(value, REGEX)) {
    return ValidateComplexPasswordErrorType.enum.invalidFormat;
  }
  return null;
};

export { ValidateComplexPasswordErrorType, validateComplexPassword };
//# sourceMappingURL=validateComplexPassword.js.map
//# sourceMappingURL=validateComplexPassword.js.map