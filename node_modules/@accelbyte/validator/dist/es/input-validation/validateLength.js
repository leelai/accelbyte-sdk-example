import isEmpty from 'validator/lib/isEmpty.js';
import { z } from 'zod';
import { CommonValidationErrorType, ThrownErrorType } from './constant/errorType';
import { MAX_SHORT_TEXT_LENGTH } from './constant/numbers';

const ValidateLengthErrorType = z.enum([
  CommonValidationErrorType.enum.empty,
  CommonValidationErrorType.enum.lessThanLengthLimit,
  CommonValidationErrorType.enum.exceedLengthLimit
]);
const VALIDATE_LENGTH_DEFAULT_MAX_LENGTH = MAX_SHORT_TEXT_LENGTH;
const validateLength = (value, { min = 1, max = VALIDATE_LENGTH_DEFAULT_MAX_LENGTH, isRequired = true } = {}) => {
  const isMinOptionMinus = min < 0;
  const isMaxOptionMinus = max < 0;
  const isMaxOptionSmallerThanMinOption = max < min;
  if (isMinOptionMinus || isMaxOptionMinus || isMaxOptionSmallerThanMinOption) {
    throw new Error(ThrownErrorType.enum.invalidOption);
  }
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateLengthErrorType.enum.empty;
  }
  if (value && value.length < min) {
    return ValidateLengthErrorType.enum.lessThanLengthLimit;
  }
  if (value && value.length > max) {
    return ValidateLengthErrorType.enum.exceedLengthLimit;
  }
  return null;
};

export { VALIDATE_LENGTH_DEFAULT_MAX_LENGTH, ValidateLengthErrorType, validateLength };
//# sourceMappingURL=validateLength.js.map
//# sourceMappingURL=validateLength.js.map