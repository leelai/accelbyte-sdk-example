import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { MAX_DISPLAY_NAME_LENGTH } from './constant/numbers';
import { ValidateLengthErrorType, validateLength } from './validateLength';
import { REGEX_ALPHANUMERIC_WITH_HYPHEN, REGEX_SPECIAL_CHARACTER_WITH_ALLOW_SPACE, REGEX_ALL_SPECIAL_CHARACTERS, REGEX_LETTER_CASE, REGEX_LOWERCASE, REGEX_UPPERCASE, REGEX_MIXED_LETTER_CASE } from './constant/regex';
import { ValidateBadWordsErrorType, tokenizeAndValidateBadWords } from './validateBadWords';

const ValidateUserNameErrorType = z.enum([
  ...ValidateLengthErrorType.options,
  CommonValidationErrorType.enum.invalidFormat,
  ValidateBadWordsErrorType.enum.containsBadWords
]);
const MIN_USERNAME_LENGTH = 3;
const validateUserName = (value, {
  isRequired = true,
  maxLength = MAX_DISPLAY_NAME_LENGTH,
  minLength = MIN_USERNAME_LENGTH,
  isCustomRegex,
  customRegex,
  specialCharacterLocation,
  allowSpace,
  allowAllSpecialCharacters,
  specialCharacters,
  letterCase,
  validateBadWord = false
} = {}) => {
  if (isRequired && isEmpty(value)) return ValidateUserNameErrorType.enum.empty;
  if (isCustomRegex) {
    if (!matches(value, customRegex || REGEX_ALPHANUMERIC_WITH_HYPHEN)) {
      return ValidateUserNameErrorType.enum.invalidFormat;
    }
  }
  if (!allowSpace) {
    const isSpaceFound = /\s/.test(value);
    if (isSpaceFound) return ValidateUserNameErrorType.enum.invalidFormat;
  }
  if (!allowAllSpecialCharacters && specialCharacters?.length === 0) {
    const regex = REGEX_ALL_SPECIAL_CHARACTERS;
    if (regex.test(value)) return ValidateUserNameErrorType.enum.invalidFormat;
  }
  if (specialCharacters && specialCharacters.length > 0) {
    const hasOtherSpecialCharacter = new RegExp(REGEX_SPECIAL_CHARACTER_WITH_ALLOW_SPACE(specialCharacters, allowSpace)).test(value);
    if (hasOtherSpecialCharacter) return ValidateUserNameErrorType.enum.invalidFormat;
    if (specialCharacterLocation === "middle") {
      const regex = new RegExp(`^[${specialCharacters.join("")}]|[${specialCharacters.join("")}]$`);
      if (regex.test(value)) return ValidateUserNameErrorType.enum.invalidFormat;
    }
  }
  let letterCaseRegex = REGEX_LETTER_CASE;
  switch (letterCase) {
    case "mixed":
      letterCaseRegex = REGEX_MIXED_LETTER_CASE;
      break;
    case "uppercase":
      letterCaseRegex = REGEX_UPPERCASE;
      break;
    case "lowercase":
      letterCaseRegex = REGEX_LOWERCASE;
      break;
  }
  if (letterCase !== "any" && !letterCaseRegex.test(value)) {
    return ValidateUserNameErrorType.enum.invalidFormat;
  }
  if (validateBadWord) {
    const hasBadWord = tokenizeAndValidateBadWords(value);
    if (hasBadWord) return ValidateUserNameErrorType.Enum.containsBadWords;
  }
  return validateLength(value, {
    max: maxLength,
    min: minLength
  });
};

export { MIN_USERNAME_LENGTH, ValidateUserNameErrorType, validateUserName };
//# sourceMappingURL=validateUserName.js.map
//# sourceMappingURL=validateUserName.js.map