import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateDomainErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validateDomain = (value, { maxLength = 63, isRequired = true, isSubdomainOnly = false } = {}) => {
  const REGEX = isSubdomainOnly ? "^\\w[\\w.-]+\\w$" : "^\\b((?=[a-z0-9-]{1,63}\\.)[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,63}\\b$";
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateDomainErrorType.enum.empty;
  }
  if (!matches(value, REGEX) && value.length <= maxLength) {
    return ValidateDomainErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max: maxLength });
};

export { ValidateDomainErrorType, validateDomain };
//# sourceMappingURL=validateDomain.js.map
//# sourceMappingURL=validateDomain.js.map