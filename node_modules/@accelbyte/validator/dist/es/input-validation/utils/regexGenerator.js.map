{"version":3,"sources":["../../../../src/input-validation/utils/regexGenerator.ts"],"names":[],"mappings":";;AAUa,MAAA,cAAA,GAAiB,EAAE,IAAK,CAAA,CAAC,aAAa,WAAa,EAAA,OAAA,EAAS,KAAK,CAAC,EAAA;AAExE,MAAM,wBAAwB,CAAE,CAAA,IAAA,CAAK,CAAC,UAAA,EAAY,QAAQ,CAAC,EAAA;AAGlE,MAAM,eAAkB,GAAA,mBAAA,CAAA;AACxB,MAAM,cAAiB,GAAA,KAAA,CAAA;AACvB,MAAM,iBAAoB,GAAA,KAAA,CAAA;AAC1B,MAAM,iBAAoB,GAAA,KAAA,CAAA;AAC1B,MAAM,eAAkB,GAAA,QAAA,CAAA;AACjB,MAAM,qBAAwB,GAAA;AAAA,EACnC,KAAO,EAAA,IAAA;AAAA,EACP,oBAAsB,EAAA,CAAA;AAAA,EACtB,4BAA8B,EAAA,CAAA;AAAA,EAC9B,WAAa,EAAA,CAAA;AAAA,EACb,UAAA,EAAY,eAAe,IAAK,CAAA,GAAA;AAAA,EAChC,wBAAA,EAA0B,sBAAsB,IAAK,CAAA,MAAA;AAAA,EACrD,YAAc,EAAA,KAAA;AAAA,EACd,WAAa,EAAA,IAAA;AAAA,EACb,UAAY,EAAA,IAAA;AAAA,EACZ,UAAY,EAAA,KAAA;AAAA,EACZ,yBAA2B,EAAA,KAAA;AAAA,EAC3B,aAAe,EAAA,KAAA;AAAA,EACf,iBAAA,EAAmB,CAAC,GAAA,EAAK,GAAG,CAAA;AAAA,EAC5B,aAAa,EAAC;AAChB,EAAA;AACO,MAAM,wBAA2B,GAAA;AAAA,EACtC,KAAO,EAAA,IAAA;AAAA,EACP,oBAAsB,EAAA,CAAA;AAAA,EACtB,4BAA8B,EAAA,CAAA;AAAA,EAC9B,WAAa,EAAA,CAAA;AAAA,EACb,UAAA,EAAY,eAAe,IAAK,CAAA,GAAA;AAAA,EAChC,wBAAA,EAA0B,sBAAsB,IAAK,CAAA,MAAA;AAAA,EACrD,YAAc,EAAA,KAAA;AAAA,EACd,WAAa,EAAA,IAAA;AAAA,EACb,UAAY,EAAA,IAAA;AAAA,EACZ,UAAY,EAAA,IAAA;AAAA,EACZ,yBAA2B,EAAA,KAAA;AAAA,EAC3B,aAAe,EAAA,KAAA;AAAA,EACf,iBAAmB,EAAA,CAAC,GAAK,EAAA,GAAA,EAAK,KAAK,GAAG,CAAA;AAAA,EACtC,aAAa,EAAC;AAChB,EAAA;AACO,MAAM,qBAAwB,GAAA;AAAA,EACnC,KAAO,EAAA,IAAA;AAAA,EACP,oBAAsB,EAAA,CAAA;AAAA,EACtB,4BAA8B,EAAA,CAAA;AAAA,EAC9B,WAAa,EAAA,CAAA;AAAA,EACb,UAAA,EAAY,eAAe,IAAK,CAAA,KAAA;AAAA,EAChC,wBAAA,EAA0B,sBAAsB,IAAK,CAAA,QAAA;AAAA,EACrD,YAAc,EAAA,KAAA;AAAA,EACd,WAAa,EAAA,IAAA;AAAA,EACb,UAAY,EAAA,IAAA;AAAA,EACZ,UAAY,EAAA,KAAA;AAAA,EACZ,yBAA2B,EAAA,IAAA;AAAA,EAC3B,aAAe,EAAA,KAAA;AAAA,EACf,aAAa,EAAC;AAAA,EACd,iBAAmB,EAAA;AAAA,IACjkBAAqB,GAAA;AAAA,EAChC,KAAO,EAAA,IAAA;AAAA,EACP,oBAAsB,EAAA,EAAA;AAAA,EACtB,4BAA8B,EAAA,CAAA;AAAA,EAC9B,WAAa,EAAA,CAAA;AAAA,EACb,UAAA,EAAY,eAAe,IAAK,CAAA,GAAA;AAAA,EAChC,wBAAA,EAA0B,sBAAsB,IAAK,CAAA,MAAA;AAAA,EACrD,YAAc,EAAA,KAAA;AAAA,EACd,WAAa,EAAA,IAAA;AAAA,EACb,UAAY,EAAA,IAAA;AAAA,EACZ,UAAY,EAAA,KAAA;AAAA,EACZ,yBAA2B,EAAA,KAAA;AAAA,EAC3B,aAAe,EAAA,KAAA;AAAA,EACf,mBAAmB,CAAC,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAG,CAAA;AAAA,EAC3C,aAAa,EAAC;AAChB,EAAA;AAEO,MAAM,kBAAqB,GAAA,wCAAA;AAkB3B,MAAM,kBAAkB,CAAC;AAAA,EAC9B,KAAA;AAAA,EACA,oBAAA;AAAA,EACA,4BAAA;AAAA,EACA,WAAA;AAAA,EACA,UAAA;AAAA,EACA,wBAAA;AAAA,EACA,YAAA;AAAA,EACA,WAAA;AAAA,EACA,UAAA;AAAA,EACA,UAAA;AAAA,EACA,yBAAA;AAAA,EACA,aAAA;AAAA,EACA,iBAAA;AACF,CAAmC,KAAA;AACjC,EAAA,IAAI,aAAe,EAAA;AACjB,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAA,IAAI,YAAc,EAAA;AAChB,IAAO,OAAA,eAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,uBAAiC,EAAC,CAAA;AACtC,EAAA,IAAI,sBAAyB,GAAA,EAAA,CAAA;AAE7B,EAAA,IAAI,WAAa,EAAA;AACf,IAAA,QAAQ,UAAY;AAAA,MAClB,KAAK,eAAe,IAAK,CAAA,SAAA;AACvB,QAA0B,sBAAA,IAAA,iBAAA,CAAA;AAC1B,QAAA,oBAAA,GAAuB,CAAC,GAAG,oBAAsB,EAAA,uBAAA,CAAwB,iBAAiB,CAAC,CAAA,CAAA;AAC3F,QAAA,MAAA;AAAA,MACF,KAAK,eAAe,IAAK,CAAA,SAAA;AACvB,QAA0B,sBAAA,IAAA,iBAAA,CAAA;AAC1B,QAAA,oBAAA,GAAuB,CAAC,GAAG,oBAAsB,EAAA,uBAAA,CAAwB,iBAAiB,CAAC,CAAA,CAAA;AAC3F,QAAA,MAAA;AAAA,MACF,KAAK,eAAe,IAAK,CAAA,KAAA;AACvB,QAA0B,sBAAA,IAAA,iBAAA,CAAA;AAC1B,QAA0B,sBAAA,IAAA,iBAAA,CAAA;AAC1B,QAAuB,oBAAA,GAAA;AAAA,UACrB,GAAG,oBAAA;AAAA,UACH,wBAAwB,iBAAiB,CAAA;AAAA,UACzC,wBAAwB,iBAAiB,CAAA;AAAA,SAC3C,CAAA;AACA,QAAA,MAAA;AAAA,MACF,KAAK,eAAe,IAAK,CAAA,GAAA;AACvB,QAA0B,sBAAA,IAAA,eAAA,CAAA;AAC1B,QAAA,oBAAA,GAAuB,CAAC,GAAG,oBAAsB,EAAA,uBAAA,CAAwB,eAAe,CAAC,CAAA,CAAA;AACzF,QAAA,MAAA;AAAA,MACF;AACE,QAA0B,sBAAA,IAAA,EAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAEA,EAAA,IAAI,UAAY,EAAA;AACd,IAA0B,sBAAA,IAAA,cAAA,CAAA;AAC1B,IAAA,oBAAA,GAAuB,CAAC,GAAG,oBAAsB,EAAA,uBAAA,CAAwB,cAAc,CAAC,CAAA,CAAA;AAAA,GAC1F;AAEA,EAAA,IAAI,YAAe,GAAA,EAAA,CAAA;AACnB,EAAA,IAAI,mBAAsB,GAAA,EAAA,CAAA;AAE1B,EAAA,IAAI,yBAA2B,EAAA;AAC7B,IAAe,YAAA,GAAA,MAAA,CAAA;AACf,IAAA,iBAAA,GAAoB,CAAC,YAAY,CAAA,CAAA;AAAA,GACnC;AAEA,EAAI,IAAA,iBAAA,CAAkB,SAAS,CAAG,EAAA;AAChC,IAAe,YAAA,GAAA,iBAAA,CAAkB,KAAK,EAAE,CAAA,CAAA;AACxC,IAAA,IAAI,UAAa,GAAA,GAAA,CAAA;AACjB,IAAA,IAAI,iCAAiC,CAAG,EAAA;AACtC,MAAa,UAAA,GAAA,GAAA,CAAA;AAAA,KACf;AAEA,IAAA,QAAQ,wBAA0B;AAAA,MAChC,KAAK,sBAAsB,IAAK,CAAA,QAAA;AAC9B,QAA0B,sBAAA,IAAA,YAAA,CAAA;AAC1B,QAAA,MAAA;AAAA,MACF,KAAK,sBAAsB,IAAK,CAAA,MAAA;AAC9B,QAAsB,mBAAA,GAAA,kBAAA,CAAmB,YAAY,CAAI,GAAA,UAAA,CAAA;AACzD,QAAA,MAAA;AAAA,MACF;AACE,QAA0B,sBAAA,IAAA,YAAA,CAAA;AAAA,KAC9B;AAEA,IAAA,oBAAA,GAAuB,CAAC,GAAG,oBAAsB,EAAA,uBAAA,CAAwB,YAAY,CAAC,CAAA,CAAA;AAAA,GACxF;AAEA,EAAA,sBAAA,GAAyB,mBAAmB,sBAAsB,CAAA,CAAA;AAElE,EAAM,MAAA,YAAA,GAAe,iBAAkB,CAAA,oBAAA,EAAsB,WAAW,CAAA,CAAA;AACxE,EAAA,IAAI,MAAS,GAAA,GAAA,CAAA;AAEb,EAAI,IAAA,YAAA,CAAa,SAAS,CAAG,EAAA;AAC3B,IAAA,MAAA,IAAU,uBAAwB,CAAA,YAAA,CAAa,IAAK,CAAA,GAAG,CAAC,CAAA,CAAA;AAAA,GAC1D;AAEA,EAAA,IAAI,iBAAoB,GAAA,CAAA,CAAA;AACxB,EAAA,IAAI,2BAA2B,EAAI,EAAA;AACjC,IAAA,IAAI,uBAAuB,CAAG,EAAA;AAC5B,MAAA,MAAA,IAAU,uBAAuB,iBAAkB,CAAA,QAAA,EAAU,CAAI,CAAA,EAAA,oBAAA,CAAqB,UAAU,CAAA,GAAA,CAAA,CAAA;AAChG,MAAA,iBAAA,EAAA,CAAA;AAAA,KACF;AAEA,IAAA,IAAI,UAAY,EAAA;AAEd,MAAA,IAAI,CAAC,mBAAqB,EAAA;AACxB,QAAsB,mBAAA,GAAA,CAAA,EAAG,kBAAmB,CAAA,GAAG,CAAC,CAAA,CAAA,CAAA,CAAA;AAAA,OAC3C,MAAA;AACL,QAAsB,mBAAA,GAAA,kBAAA,CAAmB,GAAG,CAAA,GAAI,IAAY,GAAA,mBAAA,CAAA;AAAA,OAC9D;AAAA,KACF;AAAA,GACF;AAEA,EAAA,IAAI,YAAe,GAAA,sBAAA,CAAA;AACnB,EAAA,IAAI,mBAAqB,EAAA;AACvB,IAAA,IAAI,2BAA2B,EAAI,EAAA;AACjC,MAAgB,YAAA,IAAA,CAAA,EAAG,oBAAqB,CAAA,mBAAmB,CAAC,CAAA,CAAA,CAAA,CAAA;AAC5D,MAAgB,YAAA,IAAA,CAAA,EAAG,sBAAsB,CAAA,EAAA,EAAK,sBAAsB,CAAA,CAAA,CAAA;AAAA,KAC/D,MAAA;AACL,MAAgB,YAAA,IAAA,mBAAA,CAAA;AAAA,KAClB;AAAA,GACF;AAEA,EAAA,IAAI,4BAA+B,GAAA,CAAA,IAAK,iBAAkB,CAAA,MAAA,GAAS,CAAG,EAAA;AACpE,IAAM,MAAA,QAAA,GAAW,iBAAkB,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAC1C,IAAA,IAAI,yBAA2B,EAAA;AAC7B,MAAA,MAAA,IAAU,kBAAkB,iBAAkB,CAAA,QAAA,EAAU,CAAI,CAAA,EAAA,4BAAA,CAA6B,UAAU,CAAA,GAAA,CAAA,CAAA;AAAA,KAC9F,MAAA;AACL,MAAU,MAAA,IAAA,CAAA,OAAA,EAAU,QAAQ,CAAO,IAAA,EAAA,iBAAA,CAAkB,UAAU,CAAA,CAAA,EAAI,4BAA6B,CAAA,QAAA,EAAU,CAAA,GAAA,CAAA,CAAA;AAAA,KAC5G;AAAA,GACF;AAEA,EAAA,MAAA,IAAU,qBAAqB,YAAY,CAAA,CAAA;AAE3C,EAAI,IAAA,CAAC,cAAc,yBAA2B,EAAA;AAC5C,IAAA,MAAA,IAAU,qBAAqB,CAAQ,MAAA,CAAA,CAAA,CAAA;AAAA,GACzC;AAEA,EAAA,IAAI,2BAA2B,EAAI,EAAA;AACjC,IAAU,MAAA,IAAA,GAAA,CAAA;AAAA,GACZ;AACA,EAAU,MAAA,IAAA,GAAA,CAAA;AAEV,EAAO,OAAA,MAAA,CAAA;AACT,EAAA;AAEA,MAAM,kBAAA,GAAqB,CAAC,KAA0B,KAAA;AACpD,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAA,OAAO,IAAI,KAAK,CAAA,CAAA,CAAA,CAAA;AAClB,CAAA,CAAA;AAEA,MAAM,uBAAA,GAA0B,CAAC,KAA0B,KAAA;AACzD,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAO,OAAA,CAAA,KAAA,EAAQ,kBAAmB,CAAA,KAAK,CAAC,CAAA,CAAA,CAAA,CAAA;AAC1C,CAAA,CAAA;AAEA,MAAM,uBAAA,GAA0B,CAAC,KAA0B,KAAA;AACzD,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAA,OAAO,MAAM,KAAK,CAAA,CAAA,CAAA,CAAA;AACpB,CAAA,CAAA;AAEA,MAAM,oBAAA,GAAuB,CAAC,KAA0B,KAAA;AACtD,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAA,OAAO,IAAI,KAAK,CAAA,CAAA,CAAA,CAAA;AAClB,CAAA,CAAA;AAEA,MAAM,iBAAA,GAAoB,CAAC,IAAA,EAAgB,MAAmB,KAAA;AAC5D,EAAA,IAAI,SAAmB,EAAC,CAAA;AACxB,EAAA,IAAI,iBAAoB,GAAA,MAAA,CAAA;AACxB,EAAA,MAAM,aAAa,IAAK,CAAA,MAAA,CAAA;AAExB,EAAA,IAAI,oBAAoB,UAAY,EAAA;AAClC,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACA,EAAA,IAAI,WAAW,CAAG,EAAA;AAChB,IAAoB,iBAAA,GAAA,CAAA,CAAA;AAAA,GACtB;AAEA,EAAA,MAAM,OAAU,GAAA,KAAA,CAAM,iBAAiB,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAE/C,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,CAAK,EAAA,EAAA;AACvC,IAAA,OAAA,CAAQ,CAAC,CAAI,GAAA,CAAA,CAAA;AAAA,GACf;AAEA,EAAA,IAAI,QAAW,GAAA,EAAA,CAAA;AAEf,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,CAAK,EAAA,EAAA;AACvC,IAAA,QAAA,IAAY,KAAK,CAAC,CAAA,CAAA;AAAA,GACpB;AAEA,EAAS,MAAA,GAAA,CAAC,GAAG,MAAA,EAAQ,QAAQ,CAAA,CAAA;AAE7B,EAAA,OAAO,IAAM,EAAA;AACX,IAAA,IAAI,GAAM,GAAA,CAAA,CAAA,CAAA;AACV,IAAA,KAAA,IAAS,CAAI,GAAA,iBAAA,GAAoB,CAAG,EAAA,CAAA,GAAI,IAAI,CAAK,EAAA,EAAA;AAC/C,MAAA,IAAI,OAAQ,CAAA,CAAC,CAAM,KAAA,CAAA,GAAI,aAAa,iBAAmB,EAAA;AACrD,QAAM,GAAA,GAAA,CAAA,CAAA;AACN,QAAA,MAAA;AAAA,OACF;AAAA,KACF;AAEA,IAAA,IAAI,QAAQ,CAAI,CAAA,EAAA;AACd,MAAA,MAAA;AAAA,KACF;AAEA,IAAA,OAAA,CAAQ,GAAG,CAAA,EAAA,CAAA;AACX,IAAA,KAAA,IAAS,CAAI,GAAA,GAAA,GAAM,CAAG,EAAA,CAAA,GAAI,mBAAmB,CAAK,EAAA,EAAA;AAChD,MAAA,OAAA,CAAQ,CAAC,CAAA,GAAI,OAAQ,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,CAAA,CAAA;AAAA,KAChC;AAEA,IAAW,QAAA,GAAA,EAAA,CAAA;AACX,IAAA,KAAA,MAAW,KAAK,OAAS,EAAA;AACvB,MAAA,QAAA,IAAY,KAAK,CAAC,CAAA,CAAA;AAAA,KACpB;AAEA,IAAS,MAAA,GAAA,CAAC,GAAG,MAAA,EAAQ,QAAQ,CAAA,CAAA;AAAA,GAC/B;AAEA,EAAO,OAAA,MAAA,CAAA;AACT,CAAA","file":"regexGenerator.js","sourcesContent":["/*\n *\n *  Copyright (c) 2021-2023 AccelByte Inc. All Rights Reserved.\n *  This is licensed software from AccelByte Inc, for limitations\n *  and restrictions contact your company contract manager.\n *\n */\n\nimport { z } from 'zod'\n\nexport const LetterCaseEnum = z.enum(['lowercase', 'uppercase', 'mixed', 'any'])\nexport type LetterCaseType = z.infer<typeof LetterCaseEnum>\nexport const CharacterLocationEnum = z.enum(['anywhere', 'middle'])\nexport type CharacterLocationType = z.infer<typeof CharacterLocationEnum>\n\nconst UNICODE_PATTERN = '^[\\\\pL\\\\pN\\\\pM]*$'\nconst NUMBER_PATTERN = '0-9'\nconst LOWERCASE_PATTERN = 'a-z'\nconst UPPERCASE_PATTERN = 'A-Z'\nconst ANYCASE_PATTERN = 'A-Za-z'\nexport const DEFAULT_USERNAME_RULE = {\n  regex: '()',\n  maxRepeatingAlphaNum: 0,\n  maxRepeatingSpecialCharacter: 0,\n  minCharType: 0,\n  letterCase: LetterCaseEnum.enum.any,\n  specialCharacterLocation: CharacterLocationEnum.enum.middle,\n  allowUnicode: false,\n  allowLetter: true,\n  allowDigit: true,\n  allowSpace: false,\n  allowAllSpecialCharacters: false,\n  isCustomRegex: false,\n  specialCharacters: ['_', '-'],\n  blockedWord: []\n}\nexport const DEFAULT_DISPLAYNAME_RULE = {\n  regex: '()',\n  maxRepeatingAlphaNum: 0,\n  maxRepeatingSpecialCharacter: 1,\n  minCharType: 0,\n  letterCase: LetterCaseEnum.enum.any,\n  specialCharacterLocation: CharacterLocationEnum.enum.middle,\n  allowUnicode: false,\n  allowLetter: true,\n  allowDigit: true,\n  allowSpace: true,\n  allowAllSpecialCharacters: false,\n  isCustomRegex: false,\n  specialCharacters: [\"'\", ',', '.', '-'],\n  blockedWord: []\n}\nexport const DEFAULT_PASSWORD_RULE = {\n  regex: '()',\n  maxRepeatingAlphaNum: 2,\n  maxRepeatingSpecialCharacter: 2,\n  minCharType: 3,\n  letterCase: LetterCaseEnum.enum.mixed,\n  specialCharacterLocation: CharacterLocationEnum.enum.anywhere,\n  allowUnicode: false,\n  allowLetter: true,\n  allowDigit: true,\n  allowSpace: false,\n  allowAllSpecialCharacters: true,\n  isCustomRegex: false,\n  blockedWord: [],\n  specialCharacters: [\n    '!',\n    '~',\n    '<',\n    '>',\n    ',',\n    ';',\n    ':',\n    '_',\n    '=',\n    '?',\n    '*',\n    '+',\n    '#',\n    '.',\n    '\"',\n    '&',\n    '§',\n    '%',\n    '°',\n    '(',\n    ')',\n    '\\\\|',\n    '\\\\[',\n    '\\\\]',\n    '\\\\-',\n    '\\\\$',\n    '\\\\^',\n    '\\\\@',\n    '\\\\/',\n    '\\\\\\\\',\n    '\\\\`',\n    \"\\\\'\",\n    '\\\\{',\n    '\\\\}'\n  ]\n}\nexport const DEFAULT_EMAIL_RULE = {\n  regex: '()',\n  maxRepeatingAlphaNum: 10,\n  maxRepeatingSpecialCharacter: 5,\n  minCharType: 0,\n  letterCase: LetterCaseEnum.enum.any,\n  specialCharacterLocation: CharacterLocationEnum.enum.middle,\n  allowUnicode: false,\n  allowLetter: true,\n  allowDigit: true,\n  allowSpace: false,\n  allowAllSpecialCharacters: false,\n  isCustomRegex: false,\n  specialCharacters: ['@', '.', '+', '_', '-'],\n  blockedWord: []\n}\n\nexport const EMAIL_DOMAIN_REGEX = '^(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,15}$'\n\nexport interface RegexGeneratorParam {\n  regex: string\n  maxRepeatingAlphaNum: number\n  maxRepeatingSpecialCharacter: number\n  minCharType: number\n  letterCase: string\n  specialCharacterLocation: string\n  allowUnicode: boolean\n  allowLetter: boolean\n  allowDigit: boolean\n  allowSpace: boolean\n  allowAllSpecialCharacters?: boolean\n  isCustomRegex: boolean\n  specialCharacters: string[]\n}\n\nexport const generatePattern = ({\n  regex,\n  maxRepeatingAlphaNum,\n  maxRepeatingSpecialCharacter,\n  minCharType,\n  letterCase,\n  specialCharacterLocation,\n  allowUnicode,\n  allowLetter,\n  allowDigit,\n  allowSpace,\n  allowAllSpecialCharacters,\n  isCustomRegex,\n  specialCharacters\n}: RegexGeneratorParam): string => {\n  if (isCustomRegex) {\n    return regex\n  }\n  if (allowUnicode) {\n    return UNICODE_PATTERN\n  }\n\n  let allowedCharacterList: string[] = []\n  let allowedCharacterString = ''\n\n  if (allowLetter) {\n    switch (letterCase) {\n      case LetterCaseEnum.enum.uppercase:\n        allowedCharacterString += UPPERCASE_PATTERN\n        allowedCharacterList = [...allowedCharacterList, createPositiveLookahead(UPPERCASE_PATTERN)]\n        break\n      case LetterCaseEnum.enum.lowercase:\n        allowedCharacterString += LOWERCASE_PATTERN\n        allowedCharacterList = [...allowedCharacterList, createPositiveLookahead(LOWERCASE_PATTERN)]\n        break\n      case LetterCaseEnum.enum.mixed:\n        allowedCharacterString += UPPERCASE_PATTERN\n        allowedCharacterString += LOWERCASE_PATTERN\n        allowedCharacterList = [\n          ...allowedCharacterList,\n          createPositiveLookahead(UPPERCASE_PATTERN),\n          createPositiveLookahead(LOWERCASE_PATTERN)\n        ]\n        break\n      case LetterCaseEnum.enum.any:\n        allowedCharacterString += ANYCASE_PATTERN\n        allowedCharacterList = [...allowedCharacterList, createPositiveLookahead(ANYCASE_PATTERN)]\n        break\n      default:\n        allowedCharacterString += ''\n    }\n  }\n\n  if (allowDigit) {\n    allowedCharacterString += NUMBER_PATTERN\n    allowedCharacterList = [...allowedCharacterList, createPositiveLookahead(NUMBER_PATTERN)]\n  }\n\n  let specialChars = ''\n  let allowedSpecialChars = ''\n\n  if (allowAllSpecialCharacters) {\n    specialChars = '_\\\\W'\n    specialCharacters = [specialChars]\n  }\n\n  if (specialCharacters.length > 0) {\n    specialChars = specialCharacters.join('')\n    let quantifier = '*'\n    if (maxRepeatingSpecialCharacter === 1) {\n      quantifier = '?'\n    }\n\n    switch (specialCharacterLocation) {\n      case CharacterLocationEnum.enum.anywhere:\n        allowedCharacterString += specialChars\n        break\n      case CharacterLocationEnum.enum.middle:\n        allowedSpecialChars = createCharacterSet(specialChars) + quantifier\n        break\n      default:\n        allowedCharacterString += specialChars\n    }\n\n    allowedCharacterList = [...allowedCharacterList, createPositiveLookahead(specialChars)]\n  }\n\n  allowedCharacterString = createCharacterSet(allowedCharacterString)\n\n  const combinations = createCombination(allowedCharacterList, minCharType)\n  let result = '^'\n\n  if (combinations.length > 0) {\n    result += createNonCapturingGroup(combinations.join('|'))\n  }\n\n  let capturingGroupNum = 1\n  if (allowedCharacterString !== '') {\n    if (maxRepeatingAlphaNum > 0) {\n      result += `(?!.*([A-Za-z0-9])\\\\${capturingGroupNum.toString()}{${maxRepeatingAlphaNum.toString()},})`\n      capturingGroupNum++\n    }\n\n    if (allowSpace) {\n      // tslint:disable-next-line:prefer-conditional-expression\n      if (!allowedSpecialChars) {\n        allowedSpecialChars = `${createCharacterSet(' ')}?`\n      } else {\n        allowedSpecialChars = createCharacterSet(' ') + '?' + '|' + allowedSpecialChars\n      }\n    }\n  }\n\n  let allowedChars = allowedCharacterString\n  if (allowedSpecialChars) {\n    if (allowedCharacterString !== '') {\n      allowedChars += `${createCapturingGroup(allowedSpecialChars)}?`\n      allowedChars += `${allowedCharacterString}+|${allowedCharacterString}`\n    } else {\n      allowedChars += allowedSpecialChars\n    }\n  }\n\n  if (maxRepeatingSpecialCharacter > 0 && specialCharacters.length > 0) {\n    const specials = specialCharacters.join('')\n    if (allowAllSpecialCharacters) {\n      result += `(?!.*([_\\\\W])\\\\${capturingGroupNum.toString()}{${maxRepeatingSpecialCharacter.toString()},})`\n    } else {\n      result += `(?!.*([${specials}])\\\\${capturingGroupNum.toString()}{${maxRepeatingSpecialCharacter.toString()},})`\n    }\n  }\n\n  result += createCapturingGroup(allowedChars)\n\n  if (!allowSpace && allowAllSpecialCharacters) {\n    result += createCapturingGroup(`[^\\\\s]`)\n  }\n\n  if (allowedCharacterString !== '') {\n    result += '*'\n  }\n  result += '$'\n\n  return result\n}\n\nconst createCharacterSet = (input: string): string => {\n  if (!input) {\n    return input\n  }\n  return `[${input}]`\n}\n\nconst createPositiveLookahead = (input: string): string => {\n  if (!input) {\n    return input\n  }\n  return `(?=.*${createCharacterSet(input)})`\n}\n\nconst createNonCapturingGroup = (input: string): string => {\n  if (!input) {\n    return input\n  }\n  return `(?:${input})`\n}\n\nconst createCapturingGroup = (input: string): string => {\n  if (!input) {\n    return input\n  }\n  return `(${input})`\n}\n\nconst createCombination = (pool: string[], length: number) => {\n  let result: string[] = []\n  let combinationLength = length\n  const poolLength = pool.length\n\n  if (combinationLength > poolLength) {\n    return result\n  }\n  if (length === 0) {\n    combinationLength = 1\n  }\n\n  const indices = Array(combinationLength).fill(0)\n\n  for (let i = 0; i < indices.length; i++) {\n    indices[i] = i\n  }\n\n  let combined = ''\n\n  for (let i = 0; i < indices.length; i++) {\n    combined += pool[i]\n  }\n\n  result = [...result, combined]\n\n  while (true) {\n    let idx = -1\n    for (let i = combinationLength - 1; i > -1; i--) {\n      if (indices[i] !== i + poolLength - combinationLength) {\n        idx = i\n        break\n      }\n    }\n\n    if (idx === -1) {\n      break\n    }\n\n    indices[idx]++\n    for (let j = idx + 1; j < combinationLength; j++) {\n      indices[j] = indices[j - 1] + 1\n    }\n\n    combined = ''\n    for (const i of indices) {\n      combined += pool[i]\n    }\n\n    result = [...result, combined]\n  }\n\n  return result\n}\n"]}