import isEmpty from 'validator/lib/isEmpty.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';

const ValidateForbiddenWordsErrorType = z.enum([
  CommonValidationErrorType.enum.empty,
  CommonValidationErrorType.enum.containsForbiddenWords
]);
const validateForbiddenWords = (value, forbiddenWords, { isRequired = true, isCaseSensitive = false } = {}) => {
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateForbiddenWordsErrorType.enum.empty;
  }
  const filteredForbiddenWords = forbiddenWords.filter(Boolean).map((word) => isCaseSensitive ? word : word.toLowerCase());
  const finalValue = isCaseSensitive ? value : value.toLowerCase();
  const isForbidden = filteredForbiddenWords.some((word) => finalValue.includes(word));
  return isForbidden ? ValidateForbiddenWordsErrorType.enum.containsForbiddenWords : null;
};

export { ValidateForbiddenWordsErrorType, validateForbiddenWords };
//# sourceMappingURL=validateForbiddenWords.js.map
//# sourceMappingURL=validateForbiddenWords.js.map