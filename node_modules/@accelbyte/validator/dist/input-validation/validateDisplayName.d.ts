import { z } from 'zod';

declare const ValidateDisplayNameErrorType: z.ZodEnum<["empty", "lessThanLengthLimit", "exceedLengthLimit", "invalidFormat", "containsBadWords", "containsForbiddenWords"]>;
type ValidateDisplayNameErrorType = z.infer<typeof ValidateDisplayNameErrorType>;
interface ValidateDisplayNameOptions {
    blockedWord?: string[];
    allowUnicode?: boolean;
    isRequired?: boolean;
    maxLength?: number;
    minLength?: number;
    isCustomRegex?: boolean;
    customRegex?: string;
    letterCase?: string;
    allowSpace?: boolean;
    allowAllSpecialCharacters?: boolean;
    specialCharacterLocation?: string;
    maxRepeatingSpecialCharacter?: number;
    specialCharacters?: string[];
    validateBadWord?: boolean;
}
/**
 *
 * @param value
 * @param allowUnicode (true: Allow various language character, false: only allow Alpha Numeric character)
 * @param isRequired
 * @param maxLength
 * @param minLength
 * @param isCustomRegex
 * @param letterCase
 * @param allowSpace
 * @param allowAllSpecialCharacters
 * @param specialCharacterLocation
 * @param maxRepeatingSpecialCharacter
 * @param specialCharacters
 * @param validateBadWord validate bad word
 *
 * @default allowUnicode false
 * @default isRequired true
 * @default maxLength MAX_DISPLAY_NAME_LENGTH = 48
 * @default minLength MIN_DISPLAY_NAME_LENGTH = 3
 * @default specialCharacterLocation middle
 * @default maxRepeatingSpecialCharacter 1
 * @default allowSpace true
 * @default specialCharacters ["\'", "\,", "\.", "\-"]
 * @default letterCase any
 * @default validateBadWord false
 */
declare const validateDisplayName: (value: string, { blockedWord, allowUnicode, isRequired, maxLength, minLength, isCustomRegex, customRegex, specialCharacterLocation, allowSpace, allowAllSpecialCharacters, maxRepeatingSpecialCharacter, specialCharacters, letterCase, validateBadWord }?: ValidateDisplayNameOptions) => "empty" | "lessThanLengthLimit" | "exceedLengthLimit" | "invalidFormat" | "containsBadWords" | "containsForbiddenWords" | null;

export { ValidateDisplayNameErrorType, type ValidateDisplayNameOptions, validateDisplayName };
