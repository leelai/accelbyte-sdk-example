{"version":3,"sources":["../../../src/input-validation/validateFile.ts"],"names":[],"mappings":";;;;AAUa,MAAA,qBAAA,GAAwB,EAAE,IAAK,CAAA;AAAA,EAC1C,0BAA0B,IAAK,CAAA,KAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,qBAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,qBAAA;AACjC,CAAC,EAAA;AASY,MAAA,YAAA,GAAe,CAAC,IAAA,EAAmB,EAAE,UAAA,GAAa,MAAM,sBAAwB,EAAA,WAAA,EAAoC,GAAA,EAAO,KAAA;AACtI,EAAM,MAAA,aAAA,GAAgB,IAAO,GAAA,CAAA,CAAA,EAAI,IAAK,CAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAE,GAAI,EAAC,CAAK,CAAA,GAAA,EAAA,CAAA;AAChE,EAAM,MAAA,QAAA,GAAW,IAAO,GAAA,IAAA,CAAK,IAAO,GAAA,CAAA,CAAA;AAEpC,EAAI,IAAA,UAAA,IAAc,CAAC,IAAM,EAAA;AACvB,IAAA,OAAO,sBAAsB,IAAK,CAAA,KAAA,CAAA;AAAA,GACpC;AAEA,EAAI,IAAA,sBAAA,KAA2B,QAAQ,aAAa,CAAA,IAAK,uBAAuB,OAAQ,CAAA,aAAa,MAAM,CAAK,CAAA,CAAA,EAAA;AAC9G,IAAA,OAAO,sBAAsB,IAAK,CAAA,qBAAA,CAAA;AAAA,GACpC;AAEA,EAAI,IAAA,WAAA,IAAe,WAAW,WAAa,EAAA;AACzC,IAAA,OAAO,sBAAsB,IAAK,CAAA,qBAAA,CAAA;AAAA,GACpC;AAEA,EAAO,OAAA,IAAA,CAAA;AACT","file":"validateFile.js","sourcesContent":["/*\n * Copyright (c) 2021-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\n\nexport const ValidateFileErrorType = z.enum([\n  CommonValidationErrorType.enum.empty,\n  CommonValidationErrorType.enum.invalidFileExtensions,\n  CommonValidationErrorType.enum.exceedMaximumFileSize\n])\nexport type ValidateFileErrorType = z.infer<typeof ValidateFileErrorType>\n\nexport interface ValidateFileOption {\n  isRequired?: boolean\n  acceptedFileExtensions?: string[]\n  maxFileSize?: number\n}\n\nexport const validateFile = (file: File | null, { isRequired = true, acceptedFileExtensions, maxFileSize }: ValidateFileOption = {}) => {\n  const fileExtension = file ? `.${file.name.split('.').pop()}` : ''\n  const fileSize = file ? file.size : 0\n\n  if (isRequired && !file) {\n    return ValidateFileErrorType.enum.empty\n  }\n\n  if (acceptedFileExtensions && (isEmpty(fileExtension) || acceptedFileExtensions.indexOf(fileExtension) === -1)) {\n    return ValidateFileErrorType.enum.invalidFileExtensions\n  }\n\n  if (maxFileSize && fileSize > maxFileSize) {\n    return ValidateFileErrorType.enum.exceedMaximumFileSize\n  }\n\n  return null\n}\n"]}