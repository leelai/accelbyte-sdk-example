{"version":3,"sources":["../../../src/input-validation/validateAlpha.ts"],"names":[],"mappings":";;;;;;;;AAea,MAAA,sBAAA,GAAyB,CAAE,CAAA,IAAA,CAAK,CAAC,GAAG,wBAAwB,OAAS,EAAA,yBAAA,CAA0B,IAAK,CAAA,aAAa,CAAC,EAAA;AAUxH,MAAM,aAAgB,GAAA,CAC3B,KACA,EAAA,EAAE,YAAY,GAAK,EAAA,UAAA,GAAa,IAAM,EAAA,eAAA,GAAkB,KAAO,EAAA,eAAA,GAAkB,KAAM,EAAA,GAA0B,EAC9G,KAAA;AACH,EAAA,IAAI,mBAAmB,eAAiB,EAAA;AACtC,IAAA,MAAM,IAAI,KAAA,CAAM,eAAgB,CAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAAA,GACpD;AACA,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,uBAAuB,IAAK,CAAA,KAAA,CAAA;AAAA,GACrC;AACA,EAAA,IAAI,eAAmB,IAAA,CAAC,WAAY,CAAA,KAAK,CAAG,EAAA;AAC1C,IAAA,OAAO,uBAAuB,IAAK,CAAA,aAAA,CAAA;AAAA,GACrC;AACA,EAAA,IAAI,eAAmB,IAAA,CAAC,WAAY,CAAA,KAAK,CAAG,EAAA;AAC1C,IAAA,OAAO,uBAAuB,IAAK,CAAA,aAAA,CAAA;AAAA,GACrC;AACA,EAAI,IAAA,CAAC,OAAQ,CAAA,KAAK,CAAG,EAAA;AACnB,IAAA,OAAO,uBAAuB,IAAK,CAAA,aAAA,CAAA;AAAA,GACrC;AACA,EAAA,OAAO,cAAe,CAAA,KAAA,EAAO,EAAE,GAAA,EAAK,WAAW,CAAA,CAAA;AACjD","file":"validateAlpha.js","sourcesContent":["/*\n * Copyright (c) 2019-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isAlpha from 'validator/lib/isAlpha.js'\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport isLowercase from 'validator/lib/isLowercase.js'\nimport isUppercase from 'validator/lib/isUppercase.js'\n\nimport { z } from 'zod'\nimport { CommonValidationErrorType, ThrownErrorType } from './constant/errorType'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\n\nexport const ValidateAlphaErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat])\nexport type ValidateAlphaErrorType = z.infer<typeof ValidateAlphaErrorType>\n\nexport interface ValidateAlphaOptions {\n  maxLength?: number\n  isRequired?: boolean\n  isUppercaseOnly?: boolean\n  isLowercaseOnly?: boolean\n}\n\nexport const validateAlpha = (\n  value: string,\n  { maxLength = 256, isRequired = true, isUppercaseOnly = false, isLowercaseOnly = false }: ValidateAlphaOptions = {}\n) => {\n  if (isLowercaseOnly && isUppercaseOnly) {\n    throw new Error(ThrownErrorType.enum.invalidOption)\n  }\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateAlphaErrorType.enum.empty\n  }\n  if (isUppercaseOnly && !isUppercase(value)) {\n    return ValidateAlphaErrorType.enum.invalidFormat\n  }\n  if (isLowercaseOnly && !isLowercase(value)) {\n    return ValidateAlphaErrorType.enum.invalidFormat\n  }\n  if (!isAlpha(value)) {\n    return ValidateAlphaErrorType.enum.invalidFormat\n  }\n  return validateLength(value, { max: maxLength })\n}\n"]}