import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { MAX_SHORT_TEXT_LENGTH } from './constant/numbers';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateLegalDocumentNameErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validateLegalDocumentName = (value, { isRequired = true, maxLength = MAX_SHORT_TEXT_LENGTH } = {}) => {
  const REGEX = /^[a-zA-Z]+([\s][a-zA-Z]+)*$/;
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateLegalDocumentNameErrorType.enum.empty;
  }
  if (!matches(value, REGEX)) {
    return ValidateLegalDocumentNameErrorType.enum.invalidFormat;
  }
  return validateLength(value, {
    max: maxLength
  });
};

export { ValidateLegalDocumentNameErrorType, validateLegalDocumentName };
//# sourceMappingURL=validateLegalDocumentName.js.map
//# sourceMappingURL=validateLegalDocumentName.js.map