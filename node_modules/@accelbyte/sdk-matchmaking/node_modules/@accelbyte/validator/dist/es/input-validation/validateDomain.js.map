{"version":3,"sources":["../../../src/input-validation/validateDomain.ts"],"names":[],"mappings":";;;;;;AAYa,MAAA,uBAAA,GAA0B,CAAE,CAAA,IAAA,CAAK,CAAC,GAAG,wBAAwB,OAAS,EAAA,yBAAA,CAA0B,IAAK,CAAA,aAAa,CAAC,EAAA;AASzH,MAAM,cAAiB,GAAA,CAC5B,KACA,EAAA,EAAE,SAAY,GAAA,EAAA,EAAI,UAAa,GAAA,IAAA,EAAM,eAAkB,GAAA,KAAA,EAAiC,GAAA,EACrF,KAAA;AACH,EAAM,MAAA,KAAA,GAAQ,kBAAkB,kBAAqB,GAAA,uEAAA,CAAA;AACrD,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,wBAAwB,IAAK,CAAA,KAAA,CAAA;AAAA,GACtC;AACA,EAAA,IAAI,CAAC,OAAQ,CAAA,KAAA,EAAO,KAAK,CAAK,IAAA,KAAA,CAAM,UAAU,SAAW,EAAA;AACvD,IAAA,OAAO,wBAAwB,IAAK,CAAA,aAAA,CAAA;AAAA,GACtC;AACA,EAAA,OAAO,cAAe,CAAA,KAAA,EAAO,EAAE,GAAA,EAAK,WAAW,CAAA,CAAA;AACjD","file":"validateDomain.js","sourcesContent":["/*\n * Copyright (c) 2021-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport matches from 'validator/lib/matches.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\n\nexport const ValidateDomainErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat])\nexport type ValidateDomainErrorType = z.infer<typeof ValidateDomainErrorType>\n\nexport interface ValidateDomainOptions {\n  maxLength?: number\n  isRequired?: boolean\n  isSubdomainOnly?: boolean\n}\n\nexport const validateDomain = (\n  value: string,\n  { maxLength = 63, isRequired = true, isSubdomainOnly = false }: ValidateDomainOptions = {}\n) => {\n  const REGEX = isSubdomainOnly ? '^\\\\w[\\\\w.-]+\\\\w$' : '^\\\\b((?=[a-z0-9-]{1,63}\\\\.)[a-z0-9]+(-[a-z0-9]+)*\\\\.)+[a-z]{2,63}\\\\b$'\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateDomainErrorType.enum.empty\n  }\n  if (!matches(value, REGEX) && value.length <= maxLength) {\n    return ValidateDomainErrorType.enum.invalidFormat\n  }\n  return validateLength(value, { max: maxLength })\n}\n"]}