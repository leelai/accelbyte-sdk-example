import { z } from 'zod';

declare const ValidatePasswordErrorType: z.ZodEnum<["empty", "lessThanLengthLimit", "exceedLengthLimit", "invalidFormat"]>;
type ValidatePasswordErrorType = z.infer<typeof ValidatePasswordErrorType>;
interface ValidatePasswordOptions {
    regex?: string;
    minLength?: number;
    maxLength?: number;
    maxRepeatingAlphaNum?: number;
    maxRepeatingSpecialCharacter?: number;
    minCharType?: number;
    letterCase?: string;
    allowSpace?: boolean;
    allowLetter?: boolean;
    allowDigit?: boolean;
    allowAllSpecialCharacters?: boolean;
    isCustomRegex?: boolean;
    allowUnicode?: boolean;
    specialCharacters?: string[];
}
/**
 *
 * @param value
 * @param regex
 * @param allowUnicode (true: Allow various language character, false: only allow Alpha Numeric character)
 * @param strictlyAllowSpecialCharacters (true: allow (',. -) in the mid of value, false: Only allow Alpha Numeric)
 * @param maxLength
 * @param minLength
 * @param maxRepeatingAlphaNum
 * @param maxRepeatingSpecialCharacter
 * @param minCharType
 * @param letterCase
 * @param allowLetter
 * @param allowDigit
 * @param allowAllSpecialCharacters
 * @param isCustomRegex
 * @param specialCharacters
 *
 * @default allowUnicode false
 * @default strictlyAllowSpecialCharacters true
 * @default maxLength MAX_DISPLAY_NAME_LENGTH
 * @default minLength MIN_DISPLAY_NAME_LENGTH
 */
declare const validatePassword: (value: string, { regex, minLength, maxLength, maxRepeatingAlphaNum, maxRepeatingSpecialCharacter, minCharType, letterCase, allowSpace, allowLetter, allowDigit, allowAllSpecialCharacters, isCustomRegex, allowUnicode, specialCharacters }?: ValidatePasswordOptions) => "empty" | "lessThanLengthLimit" | "exceedLengthLimit" | "invalidFormat" | null;

export { ValidatePasswordErrorType, type ValidatePasswordOptions, validatePassword };
