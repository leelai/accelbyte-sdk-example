import {
  Backfill$,
  BackfillApi,
  BackfillCreateResponse,
  BackfillGetResponse,
  BackfillProposalResponse,
  Config$,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigApi,
  Configuration,
  DsInformation,
  EnvironmentVariable,
  EnvironmentVariables$,
  EnvironmentVariablesApi,
  GameSession,
  ListEnvironmentVariablesResponse,
  ListMatchFunctionsResponse,
  ListMatchPoolTicketsResponse,
  ListMatchPoolsResponse,
  ListRuleSetsResponse,
  Match,
  MatchFunctionConfig,
  MatchFunctionOverride,
  MatchFunctions$,
  MatchFunctionsApi,
  MatchPool,
  MatchPools$,
  MatchPoolsApi,
  MatchRuleSetNameData,
  MatchTicketRecord,
  MatchTicketResponse,
  MatchTicketStatus,
  MatchTicketStatuses,
  MatchTickets$,
  MatchTicketsApi,
  NamespaceConfig,
  NamespaceConfigList,
  Pagination,
  Party,
  PlayerData,
  PlayerMetricRecord,
  ProposedProposal,
  RuleSetPayload,
  RuleSetPayloadData,
  RuleSets$,
  RuleSetsApi,
  Server,
  Team,
  Ticket,
  TicketMetricResultRecord,
  User
} from "./chunk-RTTBJKKB.js";

// src/generated-definitions/BackFillAcceptRequest.ts
import { z } from "zod";
var BackFillAcceptRequest = z.object({
  partialAcceptTicketIDs: z.array(z.string()).nullish(),
  proposalId: z.string(),
  stop: z.boolean()
});

// src/generated-definitions/BackFillCreateRequest.ts
import { z as z2 } from "zod";
var BackFillCreateRequest = z2.object({ matchPool: z2.string(), sessionId: z2.string() });

// src/generated-definitions/BackFillRejectRequest.ts
import { z as z3 } from "zod";
var BackFillRejectRequest = z3.object({ proposalId: z3.string(), stop: z3.boolean() });

// src/generated-definitions/Error.ts
import { z as z4 } from "zod";
var Error = z4.object({ ErrorCode: z4.number().int(), ErrorMessage: z4.string() });

// src/generated-definitions/MatchFunctionRequest.ts
import { z as z5 } from "zod";
var MatchFunctionRequest = z5.object({ match_function: z5.string(), serviceAppName: z5.string().nullish(), url: z5.string() });

// src/generated-definitions/MatchPoolConfig.ts
import { z as z6 } from "zod";
var MatchPoolConfig = z6.object({
  auto_accept_backfill_proposal: z6.boolean(),
  backfill_proposal_expiration_seconds: z6.number().int(),
  backfill_ticket_expiration_seconds: z6.number().int(),
  best_latency_calculation_method: z6.string().nullish(),
  crossplay_disabled: z6.boolean().nullish(),
  match_function: z6.string(),
  match_function_override: MatchFunctionOverride,
  platform_group_enabled: z6.boolean().nullish(),
  rule_set: z6.string(),
  session_template: z6.string(),
  ticket_expiration_seconds: z6.number().int()
});

// src/generated-definitions/MatchTicketRequest.ts
import { z as z7 } from "zod";
var MatchTicketRequest = z7.object({
  attributes: z7.record(z7.any()),
  excludedSessions: z7.array(z7.string()).nullish(),
  latencies: z7.record(z7.number().int()),
  matchPool: z7.string(),
  sessionID: z7.string().nullish(),
  storage: z7.record(z7.any()).nullish()
});

// src/generated-definitions/PatchNamespaceConfigRequest.ts
import { z as z8 } from "zod";
var PatchNamespaceConfigRequest = z8.object({
  crossPlatformNoCurrentPlatform: z8.boolean().nullish(),
  extraPlatforms: z8.array(z8.string()).nullish(),
  matchAnyCommon: z8.boolean().nullish(),
  platformGroup: z8.record(z8.array(z8.string())).nullish()
});

// package.json
var name = "@accelbyte/sdk-matchmaking";
var version = "5.0.4";
var author = "AccelByte Inc";

// src/Matchmaking.ts
console.log(`${name}@${version}`);
var apis = {
  ConfigAdminApi,
  ConfigApi,
  EnvironmentVariablesApi,
  BackfillApi,
  RuleSetsApi,
  MatchPoolsApi,
  MatchTicketsApi,
  MatchFunctionsApi,
  version: () => console.log({
    version,
    name,
    author
  })
};
var Matchmaking = apis;
export {
  BackFillAcceptRequest,
  BackFillCreateRequest,
  BackFillRejectRequest,
  Backfill$,
  BackfillApi,
  BackfillCreateResponse,
  BackfillGetResponse,
  BackfillProposalResponse,
  Config$,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigApi,
  Configuration,
  DsInformation,
  EnvironmentVariable,
  EnvironmentVariables$,
  EnvironmentVariablesApi,
  Error,
  GameSession,
  ListEnvironmentVariablesResponse,
  ListMatchFunctionsResponse,
  ListMatchPoolTicketsResponse,
  ListMatchPoolsResponse,
  ListRuleSetsResponse,
  Match,
  MatchFunctionConfig,
  MatchFunctionOverride,
  MatchFunctionRequest,
  MatchFunctions$,
  MatchFunctionsApi,
  MatchPool,
  MatchPoolConfig,
  MatchPools$,
  MatchPoolsApi,
  MatchRuleSetNameData,
  MatchTicketRecord,
  MatchTicketRequest,
  MatchTicketResponse,
  MatchTicketStatus,
  MatchTicketStatuses,
  MatchTickets$,
  MatchTicketsApi,
  Matchmaking,
  NamespaceConfig,
  NamespaceConfigList,
  Pagination,
  Party,
  PatchNamespaceConfigRequest,
  PlayerData,
  PlayerMetricRecord,
  ProposedProposal,
  RuleSetPayload,
  RuleSetPayloadData,
  RuleSets$,
  RuleSetsApi,
  Server,
  Team,
  Ticket,
  TicketMetricResultRecord,
  User
};
