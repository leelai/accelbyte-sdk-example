import {
  BackfillApi,
  ConfigAdminApi,
  ConfigApi,
  EnvironmentVariablesApi,
  MatchFunctionsApi,
  MatchPoolsApi,
  MatchTicketsApi,
  RuleSetsApi
} from "./chunk-RTTBJKKB.js";

// src/generated-admin/queries/ConfigAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["ConfigLog"] = "Matchmaking.ConfigAdmin.ConfigLog";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_GetConfigLog = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfigLog();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Matchmaking.ConfigAdmin.ConfigLog" /* ConfigLog */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfigLogMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfigLog(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Matchmaking.ConfigAdmin.ConfigLog" /* ConfigLog */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Backfill.query.ts
import { useMutation as useMutation2, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_Backfill = /* @__PURE__ */ ((Key_Backfill2) => {
  Key_Backfill2["Backfill"] = "Matchmaking.Backfill.Backfill";
  Key_Backfill2["BackfillProposal"] = "Matchmaking.Backfill.BackfillProposal";
  Key_Backfill2["Backfill_ByBackfillId"] = "Matchmaking.Backfill.Backfill_ByBackfillId";
  Key_Backfill2["ProposalAccept_ByBackfillId"] = "Matchmaking.Backfill.ProposalAccept_ByBackfillId";
  Key_Backfill2["ProposalReject_ByBackfillId"] = "Matchmaking.Backfill.ProposalReject_ByBackfillId";
  return Key_Backfill2;
})(Key_Backfill || {});
var useBackfillApi_CreateBackfillMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BackfillApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBackfill(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Matchmaking.Backfill.Backfill" /* Backfill */],
    mutationFn,
    ...options
  });
};
var useBackfillApi_GetBackfillProposal = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BackfillApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBackfillProposal(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Matchmaking.Backfill.BackfillProposal" /* BackfillProposal */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBackfillApi_DeleteBackfill_ByBackfillIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BackfillApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteBackfill_ByBackfillId(
      input.backfillID
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Matchmaking.Backfill.Backfill_ByBackfillId" /* Backfill_ByBackfillId */],
    mutationFn,
    ...options
  });
};
var useBackfillApi_GetBackfill_ByBackfillId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BackfillApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBackfill_ByBackfillId(
      input2.backfillID
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Matchmaking.Backfill.Backfill_ByBackfillId" /* Backfill_ByBackfillId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBackfillApi_UpdateProposalAccept_ByBackfillIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BackfillApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProposalAccept_ByBackfillId(input.backfillID, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Matchmaking.Backfill.ProposalAccept_ByBackfillId" /* ProposalAccept_ByBackfillId */],
    mutationFn,
    ...options
  });
};
var useBackfillApi_UpdateProposalReject_ByBackfillIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BackfillApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProposalReject_ByBackfillId(input.backfillID, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Matchmaking.Backfill.ProposalReject_ByBackfillId" /* ProposalReject_ByBackfillId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Config.query.ts
import { useMutation as useMutation3, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_Config = /* @__PURE__ */ ((Key_Config2) => {
  Key_Config2["Config"] = "Matchmaking.Config.Config";
  Key_Config2["Config_ByNamespace"] = "Matchmaking.Config.Config_ByNamespace";
  return Key_Config2;
})(Key_Config || {});
var useConfigApi_GetConfig = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig();
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Matchmaking.Config.Config" /* Config */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigApi_GetConfig_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByNamespace();
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Matchmaking.Config.Config_ByNamespace" /* Config_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigApi_PatchConfig_ByNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfig_ByNamespace(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Matchmaking.Config.Config_ByNamespace" /* Config_ByNamespace */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/EnvironmentVariables.query.ts
import { useQuery as useQuery4 } from "@tanstack/react-query";
var Key_EnvironmentVariables = /* @__PURE__ */ ((Key_EnvironmentVariables2) => {
  Key_EnvironmentVariables2["EnvironmentVariables"] = "Matchmaking.EnvironmentVariables.EnvironmentVariables";
  return Key_EnvironmentVariables2;
})(Key_EnvironmentVariables || {});
var useEnvironmentVariablesApi_GetEnvironmentVariables = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EnvironmentVariablesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEnvironmentVariables();
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Matchmaking.EnvironmentVariables.EnvironmentVariables" /* EnvironmentVariables */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/MatchFunctions.query.ts
import { useMutation as useMutation4, useQuery as useQuery5 } from "@tanstack/react-query";
var Key_MatchFunctions = /* @__PURE__ */ ((Key_MatchFunctions2) => {
  Key_MatchFunctions2["MatchFunctions"] = "Matchmaking.MatchFunctions.MatchFunctions";
  Key_MatchFunctions2["MatchFunction"] = "Matchmaking.MatchFunctions.MatchFunction";
  Key_MatchFunctions2["MatchFunction_ByName"] = "Matchmaking.MatchFunctions.MatchFunction_ByName";
  return Key_MatchFunctions2;
})(Key_MatchFunctions || {});
var useMatchFunctionsApi_GetMatchFunctions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchFunctionsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchFunctions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Matchmaking.MatchFunctions.MatchFunctions" /* MatchFunctions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchFunctionsApi_CreateMatchFunctionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchFunctionsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createMatchFunction(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Matchmaking.MatchFunctions.MatchFunction" /* MatchFunction */],
    mutationFn,
    ...options
  });
};
var useMatchFunctionsApi_DeleteMatchFunction_ByNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchFunctionsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteMatchFunction_ByName(input.name);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Matchmaking.MatchFunctions.MatchFunction_ByName" /* MatchFunction_ByName */],
    mutationFn,
    ...options
  });
};
var useMatchFunctionsApi_UpdateMatchFunction_ByNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchFunctionsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateMatchFunction_ByName(input.name, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Matchmaking.MatchFunctions.MatchFunction_ByName" /* MatchFunction_ByName */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/MatchPools.query.ts
import { useMutation as useMutation5, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_MatchPools = /* @__PURE__ */ ((Key_MatchPools2) => {
  Key_MatchPools2["MatchPools"] = "Matchmaking.MatchPools.MatchPools";
  Key_MatchPools2["MatchPool"] = "Matchmaking.MatchPools.MatchPool";
  Key_MatchPools2["MatchPool_ByPool"] = "Matchmaking.MatchPools.MatchPool_ByPool";
  Key_MatchPools2["Metrics_ByPool"] = "Matchmaking.MatchPools.Metrics_ByPool";
  Key_MatchPools2["Tickets_ByPool"] = "Matchmaking.MatchPools.Tickets_ByPool";
  Key_MatchPools2["MetricsPlayer_ByPool"] = "Matchmaking.MatchPools.MetricsPlayer_ByPool";
  Key_MatchPools2["MetricsPlayer_ByPool_ByNS"] = "Matchmaking.MatchPools.MetricsPlayer_ByPool_ByNS";
  return Key_MatchPools2;
})(Key_MatchPools || {});
var useMatchPoolsApi_GetMatchPools = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchPoolsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchPools(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Matchmaking.MatchPools.MatchPools" /* MatchPools */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchPoolsApi_CreateMatchPoolMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchPoolsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createMatchPool(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Matchmaking.MatchPools.MatchPool" /* MatchPool */],
    mutationFn,
    ...options
  });
};
var useMatchPoolsApi_DeleteMatchPool_ByPoolMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchPoolsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteMatchPool_ByPool(
      input.pool
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Matchmaking.MatchPools.MatchPool_ByPool" /* MatchPool_ByPool */],
    mutationFn,
    ...options
  });
};
var useMatchPoolsApi_GetMatchPool_ByPool = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchPoolsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchPool_ByPool(
      input2.pool
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Matchmaking.MatchPools.MatchPool_ByPool" /* MatchPool_ByPool */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchPoolsApi_UpdateMatchPool_ByPoolMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchPoolsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateMatchPool_ByPool(
      input.pool,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Matchmaking.MatchPools.MatchPool_ByPool" /* MatchPool_ByPool */],
    mutationFn,
    ...options
  });
};
var useMatchPoolsApi_GetMetrics_ByPool = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchPoolsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMetrics_ByPool(
      input2.pool
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Matchmaking.MatchPools.Metrics_ByPool" /* Metrics_ByPool */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchPoolsApi_GetTickets_ByPool = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchPoolsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTickets_ByPool(
      input2.pool,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Matchmaking.MatchPools.Tickets_ByPool" /* Tickets_ByPool */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchPoolsApi_GetMetricsPlayer_ByPool = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchPoolsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMetricsPlayer_ByPool(
      input2.pool
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Matchmaking.MatchPools.MetricsPlayer_ByPool" /* MetricsPlayer_ByPool */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchPoolsApi_GetMetricsPlayer_ByPool_ByNS = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchPoolsApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMetricsPlayer_ByPool_ByNS(input2.pool);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Matchmaking.MatchPools.MetricsPlayer_ByPool_ByNS" /* MetricsPlayer_ByPool_ByNS */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/MatchTickets.query.ts
import { useMutation as useMutation6, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_MatchTickets = /* @__PURE__ */ ((Key_MatchTickets2) => {
  Key_MatchTickets2["MatchTicket"] = "Matchmaking.MatchTickets.MatchTicket";
  Key_MatchTickets2["MatchTicketsMe"] = "Matchmaking.MatchTickets.MatchTicketsMe";
  Key_MatchTickets2["MatchTicket_ByTicketid"] = "Matchmaking.MatchTickets.MatchTicket_ByTicketid";
  return Key_MatchTickets2;
})(Key_MatchTickets || {});
var useMatchTicketsApi_CreateMatchTicketMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchTicketsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createMatchTicket(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Matchmaking.MatchTickets.MatchTicket" /* MatchTicket */],
    mutationFn,
    ...options
  });
};
var useMatchTicketsApi_GetMatchTicketsMe = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchTicketsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchTicketsMe(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Matchmaking.MatchTickets.MatchTicketsMe" /* MatchTicketsMe */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMatchTicketsApi_DeleteMatchTicket_ByTicketidMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MatchTicketsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteMatchTicket_ByTicketid(input.ticketid);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Matchmaking.MatchTickets.MatchTicket_ByTicketid" /* MatchTicket_ByTicketid */],
    mutationFn,
    ...options
  });
};
var useMatchTicketsApi_GetMatchTicket_ByTicketid = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MatchTicketsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchTicket_ByTicketid(
      input2.ticketid
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Matchmaking.MatchTickets.MatchTicket_ByTicketid" /* MatchTicket_ByTicketid */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/RuleSets.query.ts
import { useMutation as useMutation7, useQuery as useQuery8 } from "@tanstack/react-query";
var Key_RuleSets = /* @__PURE__ */ ((Key_RuleSets2) => {
  Key_RuleSets2["Rulesets"] = "Matchmaking.RuleSets.Rulesets";
  Key_RuleSets2["Ruleset"] = "Matchmaking.RuleSets.Ruleset";
  Key_RuleSets2["Ruleset_ByRuleset"] = "Matchmaking.RuleSets.Ruleset_ByRuleset";
  return Key_RuleSets2;
})(Key_RuleSets || {});
var useRuleSetsApi_GetRulesets = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RuleSetsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRulesets(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Matchmaking.RuleSets.Rulesets" /* Rulesets */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRuleSetsApi_CreateRulesetMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RuleSetsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRuleset(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Matchmaking.RuleSets.Ruleset" /* Ruleset */],
    mutationFn,
    ...options
  });
};
var useRuleSetsApi_DeleteRuleset_ByRulesetMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RuleSetsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRuleset_ByRuleset(
      input.ruleset
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Matchmaking.RuleSets.Ruleset_ByRuleset" /* Ruleset_ByRuleset */],
    mutationFn,
    ...options
  });
};
var useRuleSetsApi_GetRuleset_ByRuleset = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RuleSetsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRuleset_ByRuleset(
      input2.ruleset
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Matchmaking.RuleSets.Ruleset_ByRuleset" /* Ruleset_ByRuleset */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRuleSetsApi_UpdateRuleset_ByRulesetMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RuleSetsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRuleset_ByRuleset(
      input.ruleset,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Matchmaking.RuleSets.Ruleset_ByRuleset" /* Ruleset_ByRuleset */],
    mutationFn,
    ...options
  });
};
export {
  Key_Backfill,
  Key_Config,
  Key_ConfigAdmin,
  Key_EnvironmentVariables,
  Key_MatchFunctions,
  Key_MatchPools,
  Key_MatchTickets,
  Key_RuleSets,
  useBackfillApi_CreateBackfillMutation,
  useBackfillApi_DeleteBackfill_ByBackfillIdMutation,
  useBackfillApi_GetBackfillProposal,
  useBackfillApi_GetBackfill_ByBackfillId,
  useBackfillApi_UpdateProposalAccept_ByBackfillIdMutation,
  useBackfillApi_UpdateProposalReject_ByBackfillIdMutation,
  useConfigAdminApi_GetConfigLog,
  useConfigAdminApi_PatchConfigLogMutation,
  useConfigApi_GetConfig,
  useConfigApi_GetConfig_ByNamespace,
  useConfigApi_PatchConfig_ByNamespaceMutation,
  useEnvironmentVariablesApi_GetEnvironmentVariables,
  useMatchFunctionsApi_CreateMatchFunctionMutation,
  useMatchFunctionsApi_DeleteMatchFunction_ByNameMutation,
  useMatchFunctionsApi_GetMatchFunctions,
  useMatchFunctionsApi_UpdateMatchFunction_ByNameMutation,
  useMatchPoolsApi_CreateMatchPoolMutation,
  useMatchPoolsApi_DeleteMatchPool_ByPoolMutation,
  useMatchPoolsApi_GetMatchPool_ByPool,
  useMatchPoolsApi_GetMatchPools,
  useMatchPoolsApi_GetMetricsPlayer_ByPool,
  useMatchPoolsApi_GetMetricsPlayer_ByPool_ByNS,
  useMatchPoolsApi_GetMetrics_ByPool,
  useMatchPoolsApi_GetTickets_ByPool,
  useMatchPoolsApi_UpdateMatchPool_ByPoolMutation,
  useMatchTicketsApi_CreateMatchTicketMutation,
  useMatchTicketsApi_DeleteMatchTicket_ByTicketidMutation,
  useMatchTicketsApi_GetMatchTicket_ByTicketid,
  useMatchTicketsApi_GetMatchTicketsMe,
  useRuleSetsApi_CreateRulesetMutation,
  useRuleSetsApi_DeleteRuleset_ByRulesetMutation,
  useRuleSetsApi_GetRuleset_ByRuleset,
  useRuleSetsApi_GetRulesets,
  useRuleSetsApi_UpdateRuleset_ByRulesetMutation
};
