import { z } from 'zod';

declare const Configuration: z.ZodObject<{
    clientVersion: z.ZodString;
    deployment: z.ZodString;
    inactiveTimeout: z.ZodNumber;
    inviteTimeout: z.ZodNumber;
    joinability: z.ZodString;
    maxPlayers: z.ZodNumber;
    minPlayers: z.ZodNumber;
    name: z.ZodString;
    requestedRegions: z.ZodArray<z.ZodString, "many">;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    clientVersion: string;
    deployment: string;
    inactiveTimeout: number;
    inviteTimeout: number;
    joinability: string;
    maxPlayers: number;
    minPlayers: number;
    name: string;
    requestedRegions: string[];
}, {
    type: string;
    clientVersion: string;
    deployment: string;
    inactiveTimeout: number;
    inviteTimeout: number;
    joinability: string;
    maxPlayers: number;
    minPlayers: number;
    name: string;
    requestedRegions: string[];
}>;
interface Configuration extends z.TypeOf<typeof Configuration> {
}

declare const BackFillAcceptRequest: z.ZodObject<{
    partialAcceptTicketIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    proposalId: z.ZodString;
    stop: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    proposalId: string;
    stop: boolean;
    partialAcceptTicketIDs?: string[] | null | undefined;
}, {
    proposalId: string;
    stop: boolean;
    partialAcceptTicketIDs?: string[] | null | undefined;
}>;
interface BackFillAcceptRequest extends z.TypeOf<typeof BackFillAcceptRequest> {
}

declare const BackFillCreateRequest: z.ZodObject<{
    matchPool: z.ZodString;
    sessionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    matchPool: string;
    sessionId: string;
}, {
    matchPool: string;
    sessionId: string;
}>;
interface BackFillCreateRequest extends z.TypeOf<typeof BackFillCreateRequest> {
}

declare const BackfillCreateResponse: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
interface BackfillCreateResponse extends z.TypeOf<typeof BackfillCreateResponse> {
}

declare const BackfillGetResponse: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    matchPool: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    matchSessionID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    partialMatch: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        backfill: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        clientVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        matchAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        regionPreference: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        serverName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        teams: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            Parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                partyID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                userIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            }, "strip", z.ZodTypeAny, {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }, {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }>, "many">>>;
            UserIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            Parties?: {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }[] | null | undefined;
            UserIDs?: string[] | null | undefined;
        }, {
            Parties?: {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }[] | null | undefined;
            UserIDs?: string[] | null | undefined;
        }>, "many">>>;
        tickets: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            CreatedAt: z.ZodString;
            ExcludedSessions: z.ZodArray<z.ZodString, "many">;
            IsActive: z.ZodBoolean;
            IsPivot: z.ZodBoolean;
            IsSinglePlay: z.ZodBoolean;
            Latencies: z.ZodRecord<z.ZodString, z.ZodNumber>;
            MatchPool: z.ZodString;
            MatchedAt: z.ZodString;
            Namespace: z.ZodString;
            PartySessionID: z.ZodString;
            Players: z.ZodArray<z.ZodObject<{
                Attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
                PartyID: z.ZodString;
                PlatformID: z.ZodString;
                PlayerID: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }, {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }>, "many">;
            ProposedProposal: z.ZodObject<{
                BackfillID: z.ZodString;
                ProposalID: z.ZodString;
                Status: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            }, {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            }>;
            TicketAttributes: z.ZodRecord<z.ZodString, z.ZodAny>;
            TicketID: z.ZodString;
            TicketInformation: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }, {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        clientVersion?: string | null | undefined;
        backfill?: boolean | null | undefined;
        matchAttributes?: Record<string, any> | null | undefined;
        regionPreference?: string[] | null | undefined;
        serverName?: string | null | undefined;
        teams?: {
            Parties?: {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }[] | null | undefined;
            UserIDs?: string[] | null | undefined;
        }[] | null | undefined;
        tickets?: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }[] | null | undefined;
    }, {
        clientVersion?: string | null | undefined;
        backfill?: boolean | null | undefined;
        matchAttributes?: Record<string, any> | null | undefined;
        regionPreference?: string[] | null | undefined;
        serverName?: string | null | undefined;
        teams?: {
            Parties?: {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }[] | null | undefined;
            UserIDs?: string[] | null | undefined;
        }[] | null | undefined;
        tickets?: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }[] | null | undefined;
    }>>>;
    ticketID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    matchPool?: string | null | undefined;
    createdAt?: string | null | undefined;
    matchSessionID?: string | null | undefined;
    partialMatch?: {
        clientVersion?: string | null | undefined;
        backfill?: boolean | null | undefined;
        matchAttributes?: Record<string, any> | null | undefined;
        regionPreference?: string[] | null | undefined;
        serverName?: string | null | undefined;
        teams?: {
            Parties?: {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }[] | null | undefined;
            UserIDs?: string[] | null | undefined;
        }[] | null | undefined;
        tickets?: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }[] | null | undefined;
    } | null | undefined;
    ticketID?: string | null | undefined;
}, {
    matchPool?: string | null | undefined;
    createdAt?: string | null | undefined;
    matchSessionID?: string | null | undefined;
    partialMatch?: {
        clientVersion?: string | null | undefined;
        backfill?: boolean | null | undefined;
        matchAttributes?: Record<string, any> | null | undefined;
        regionPreference?: string[] | null | undefined;
        serverName?: string | null | undefined;
        teams?: {
            Parties?: {
                partyID?: string | null | undefined;
                userIDs?: string[] | null | undefined;
            }[] | null | undefined;
            UserIDs?: string[] | null | undefined;
        }[] | null | undefined;
        tickets?: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }[] | null | undefined;
    } | null | undefined;
    ticketID?: string | null | undefined;
}>;
interface BackfillGetResponse extends z.TypeOf<typeof BackfillGetResponse> {
}

declare const BackfillProposalResponse: z.ZodObject<{
    backfillTicketID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    matchPool: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    matchSessionID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    proposalID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    proposedTeams: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        Parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            partyID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            userIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }, {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }>, "many">>>;
        UserIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }, {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }>, "many">>>;
    tickets: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        CreatedAt: z.ZodString;
        ExcludedSessions: z.ZodArray<z.ZodString, "many">;
        IsActive: z.ZodBoolean;
        IsPivot: z.ZodBoolean;
        IsSinglePlay: z.ZodBoolean;
        Latencies: z.ZodRecord<z.ZodString, z.ZodNumber>;
        MatchPool: z.ZodString;
        MatchedAt: z.ZodString;
        Namespace: z.ZodString;
        PartySessionID: z.ZodString;
        Players: z.ZodArray<z.ZodObject<{
            Attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
            PartyID: z.ZodString;
            PlatformID: z.ZodString;
            PlayerID: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            Attributes: Record<string, any>;
            PartyID: string;
            PlatformID: string;
            PlayerID: string;
        }, {
            Attributes: Record<string, any>;
            PartyID: string;
            PlatformID: string;
            PlayerID: string;
        }>, "many">;
        ProposedProposal: z.ZodObject<{
            BackfillID: z.ZodString;
            ProposalID: z.ZodString;
            Status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        }, {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        }>;
        TicketAttributes: z.ZodRecord<z.ZodString, z.ZodAny>;
        TicketID: z.ZodString;
        TicketInformation: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        CreatedAt: string;
        ExcludedSessions: string[];
        IsActive: boolean;
        IsPivot: boolean;
        IsSinglePlay: boolean;
        Latencies: Record<string, number>;
        MatchPool: string;
        MatchedAt: string;
        Namespace: string;
        PartySessionID: string;
        Players: {
            Attributes: Record<string, any>;
            PartyID: string;
            PlatformID: string;
            PlayerID: string;
        }[];
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketAttributes: Record<string, any>;
        TicketID: string;
        TicketInformation: Record<string, any>;
    }, {
        CreatedAt: string;
        ExcludedSessions: string[];
        IsActive: boolean;
        IsPivot: boolean;
        IsSinglePlay: boolean;
        Latencies: Record<string, number>;
        MatchPool: string;
        MatchedAt: string;
        Namespace: string;
        PartySessionID: string;
        Players: {
            Attributes: Record<string, any>;
            PartyID: string;
            PlatformID: string;
            PlayerID: string;
        }[];
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketAttributes: Record<string, any>;
        TicketID: string;
        TicketInformation: Record<string, any>;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    matchPool?: string | null | undefined;
    tickets?: {
        CreatedAt: string;
        ExcludedSessions: string[];
        IsActive: boolean;
        IsPivot: boolean;
        IsSinglePlay: boolean;
        Latencies: Record<string, number>;
        MatchPool: string;
        MatchedAt: string;
        Namespace: string;
        PartySessionID: string;
        Players: {
            Attributes: Record<string, any>;
            PartyID: string;
            PlatformID: string;
            PlayerID: string;
        }[];
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketAttributes: Record<string, any>;
        TicketID: string;
        TicketInformation: Record<string, any>;
    }[] | null | undefined;
    createdAt?: string | null | undefined;
    matchSessionID?: string | null | undefined;
    backfillTicketID?: string | null | undefined;
    proposalID?: string | null | undefined;
    proposedTeams?: {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }[] | null | undefined;
}, {
    matchPool?: string | null | undefined;
    tickets?: {
        CreatedAt: string;
        ExcludedSessions: string[];
        IsActive: boolean;
        IsPivot: boolean;
        IsSinglePlay: boolean;
        Latencies: Record<string, number>;
        MatchPool: string;
        MatchedAt: string;
        Namespace: string;
        PartySessionID: string;
        Players: {
            Attributes: Record<string, any>;
            PartyID: string;
            PlatformID: string;
            PlayerID: string;
        }[];
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketAttributes: Record<string, any>;
        TicketID: string;
        TicketInformation: Record<string, any>;
    }[] | null | undefined;
    createdAt?: string | null | undefined;
    matchSessionID?: string | null | undefined;
    backfillTicketID?: string | null | undefined;
    proposalID?: string | null | undefined;
    proposedTeams?: {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }[] | null | undefined;
}>;
interface BackfillProposalResponse extends z.TypeOf<typeof BackfillProposalResponse> {
}

declare const BackFillRejectRequest: z.ZodObject<{
    proposalId: z.ZodString;
    stop: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    proposalId: string;
    stop: boolean;
}, {
    proposalId: string;
    stop: boolean;
}>;
interface BackFillRejectRequest extends z.TypeOf<typeof BackFillRejectRequest> {
}

declare const GameSession: z.ZodObject<{
    DSInformation: z.ZodObject<{
        MinPlayers: z.ZodNumber;
        RequestedAt: z.ZodString;
        RequestedRegions: z.ZodArray<z.ZodString, "many">;
        Server: z.ZodObject<{
            alternate_ips: z.ZodArray<z.ZodString, "many">;
            custom_attribute: z.ZodString;
            deployment: z.ZodString;
            game_version: z.ZodString;
            image_version: z.ZodString;
            ip: z.ZodString;
            is_override_game_version: z.ZodBoolean;
            last_update: z.ZodString;
            namespace: z.ZodString;
            pod_name: z.ZodString;
            port: z.ZodNumber;
            ports: z.ZodRecord<z.ZodString, z.ZodNumber>;
            protocol: z.ZodString;
            provider: z.ZodString;
            region: z.ZodString;
            session_id: z.ZodString;
            status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            status: string;
            deployment: string;
            alternate_ips: string[];
            custom_attribute: string;
            game_version: string;
            image_version: string;
            ip: string;
            is_override_game_version: boolean;
            last_update: string;
            pod_name: string;
            port: number;
            ports: Record<string, number>;
            protocol: string;
            provider: string;
            region: string;
            session_id: string;
        }, {
            namespace: string;
            status: string;
            deployment: string;
            alternate_ips: string[];
            custom_attribute: string;
            game_version: string;
            image_version: string;
            ip: string;
            is_override_game_version: boolean;
            last_update: string;
            pod_name: string;
            port: number;
            ports: Record<string, number>;
            protocol: string;
            provider: string;
            region: string;
            session_id: string;
        }>;
        Status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Server: {
            namespace: string;
            status: string;
            deployment: string;
            alternate_ips: string[];
            custom_attribute: string;
            game_version: string;
            image_version: string;
            ip: string;
            is_override_game_version: boolean;
            last_update: string;
            pod_name: string;
            port: number;
            ports: Record<string, number>;
            protocol: string;
            provider: string;
            region: string;
            session_id: string;
        };
        Status: string;
        MinPlayers: number;
        RequestedAt: string;
        RequestedRegions: string[];
    }, {
        Server: {
            namespace: string;
            status: string;
            deployment: string;
            alternate_ips: string[];
            custom_attribute: string;
            game_version: string;
            image_version: string;
            ip: string;
            is_override_game_version: boolean;
            last_update: string;
            pod_name: string;
            port: number;
            ports: Record<string, number>;
            protocol: string;
            provider: string;
            region: string;
            session_id: string;
        };
        Status: string;
        MinPlayers: number;
        RequestedAt: string;
        RequestedRegions: string[];
    }>;
    GameMode: z.ZodString;
    IsFull: z.ZodBoolean;
    JoinType: z.ZodString;
    Members: z.ZodArray<z.ZodObject<{
        ID: z.ZodString;
        PlatformID: z.ZodString;
        PlatformUserID: z.ZodString;
        PreviousStatus: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        Status: z.ZodString;
        StatusV2: z.ZodString;
        UpdatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        PlatformID: string;
        Status: string;
        ID: string;
        PlatformUserID: string;
        StatusV2: string;
        UpdatedAt: string;
        PreviousStatus?: string | null | undefined;
    }, {
        PlatformID: string;
        Status: string;
        ID: string;
        PlatformUserID: string;
        StatusV2: string;
        UpdatedAt: string;
        PreviousStatus?: string | null | undefined;
    }>, "many">;
    attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
    backfillTicketID: z.ZodString;
    configuration: z.ZodObject<{
        clientVersion: z.ZodString;
        deployment: z.ZodString;
        inactiveTimeout: z.ZodNumber;
        inviteTimeout: z.ZodNumber;
        joinability: z.ZodString;
        maxPlayers: z.ZodNumber;
        minPlayers: z.ZodNumber;
        name: z.ZodString;
        requestedRegions: z.ZodArray<z.ZodString, "many">;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        clientVersion: string;
        deployment: string;
        inactiveTimeout: number;
        inviteTimeout: number;
        joinability: string;
        maxPlayers: number;
        minPlayers: number;
        name: string;
        requestedRegions: string[];
    }, {
        type: string;
        clientVersion: string;
        deployment: string;
        inactiveTimeout: number;
        inviteTimeout: number;
        joinability: string;
        maxPlayers: number;
        minPlayers: number;
        name: string;
        requestedRegions: string[];
    }>;
    createdAt: z.ZodString;
    id: z.ZodString;
    leaderID: z.ZodString;
    matchPool: z.ZodString;
    namespace: z.ZodString;
    teams: z.ZodArray<z.ZodObject<{
        Parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            partyID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            userIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }, {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }>, "many">>>;
        UserIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }, {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }>, "many">;
    updatedAt: z.ZodString;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    matchPool: string;
    id: string;
    teams: {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }[];
    createdAt: string;
    backfillTicketID: string;
    DSInformation: {
        Server: {
            namespace: string;
            status: string;
            deployment: string;
            alternate_ips: string[];
            custom_attribute: string;
            game_version: string;
            image_version: string;
            ip: string;
            is_override_game_version: boolean;
            last_update: string;
            pod_name: string;
            port: number;
            ports: Record<string, number>;
            protocol: string;
            provider: string;
            region: string;
            session_id: string;
        };
        Status: string;
        MinPlayers: number;
        RequestedAt: string;
        RequestedRegions: string[];
    };
    GameMode: string;
    IsFull: boolean;
    JoinType: string;
    Members: {
        PlatformID: string;
        Status: string;
        ID: string;
        PlatformUserID: string;
        StatusV2: string;
        UpdatedAt: string;
        PreviousStatus?: string | null | undefined;
    }[];
    attributes: Record<string, any>;
    configuration: {
        type: string;
        clientVersion: string;
        deployment: string;
        inactiveTimeout: number;
        inviteTimeout: number;
        joinability: string;
        maxPlayers: number;
        minPlayers: number;
        name: string;
        requestedRegions: string[];
    };
    leaderID: string;
    updatedAt: string;
    version: number;
}, {
    namespace: string;
    matchPool: string;
    id: string;
    teams: {
        Parties?: {
            partyID?: string | null | undefined;
            userIDs?: string[] | null | undefined;
        }[] | null | undefined;
        UserIDs?: string[] | null | undefined;
    }[];
    createdAt: string;
    backfillTicketID: string;
    DSInformation: {
        Server: {
            namespace: string;
            status: string;
            deployment: string;
            alternate_ips: string[];
            custom_attribute: string;
            game_version: string;
            image_version: string;
            ip: string;
            is_override_game_version: boolean;
            last_update: string;
            pod_name: string;
            port: number;
            ports: Record<string, number>;
            protocol: string;
            provider: string;
            region: string;
            session_id: string;
        };
        Status: string;
        MinPlayers: number;
        RequestedAt: string;
        RequestedRegions: string[];
    };
    GameMode: string;
    IsFull: boolean;
    JoinType: string;
    Members: {
        PlatformID: string;
        Status: string;
        ID: string;
        PlatformUserID: string;
        StatusV2: string;
        UpdatedAt: string;
        PreviousStatus?: string | null | undefined;
    }[];
    attributes: Record<string, any>;
    configuration: {
        type: string;
        clientVersion: string;
        deployment: string;
        inactiveTimeout: number;
        inviteTimeout: number;
        joinability: string;
        maxPlayers: number;
        minPlayers: number;
        name: string;
        requestedRegions: string[];
    };
    leaderID: string;
    updatedAt: string;
    version: number;
}>;
interface GameSession extends z.TypeOf<typeof GameSession> {
}

declare const ListEnvironmentVariablesResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        actualValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        defaultValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        actualValue?: string | null | undefined;
        defaultValue?: string | null | undefined;
        description?: string | null | undefined;
    }, {
        name: string;
        actualValue?: string | null | undefined;
        defaultValue?: string | null | undefined;
        description?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        name: string;
        actualValue?: string | null | undefined;
        defaultValue?: string | null | undefined;
        description?: string | null | undefined;
    }[];
}, {
    data: {
        name: string;
        actualValue?: string | null | undefined;
        defaultValue?: string | null | undefined;
        description?: string | null | undefined;
    }[];
}>;
interface ListEnvironmentVariablesResponse extends z.TypeOf<typeof ListEnvironmentVariablesResponse> {
}

declare const ListMatchFunctionsResponse: z.ZodObject<{
    configs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        match_function: z.ZodString;
        serviceAppName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        match_function: string;
        serviceAppName?: string | null | undefined;
    }, {
        url: string;
        match_function: string;
        serviceAppName?: string | null | undefined;
    }>, "many">>>;
    functions: z.ZodArray<z.ZodString, "many">;
    pagination: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    functions: string[];
    pagination: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    configs?: {
        url: string;
        match_function: string;
        serviceAppName?: string | null | undefined;
    }[] | null | undefined;
}, {
    functions: string[];
    pagination: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    configs?: {
        url: string;
        match_function: string;
        serviceAppName?: string | null | undefined;
    }[] | null | undefined;
}>;
interface ListMatchFunctionsResponse extends z.TypeOf<typeof ListMatchFunctionsResponse> {
}

declare const ListMatchPoolsResponse: z.ZodObject<{
    data: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        auto_accept_backfill_proposal: z.ZodBoolean;
        backfill_proposal_expiration_seconds: z.ZodNumber;
        backfill_ticket_expiration_seconds: z.ZodNumber;
        best_latency_calculation_method: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        crossplay_disabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        match_function: z.ZodString;
        match_function_override: z.ZodObject<{
            backfill_matches: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            enrichment: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            make_matches: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            stat_codes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            validation: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            validation?: string[] | null | undefined;
            backfill_matches?: string | null | undefined;
            enrichment?: string[] | null | undefined;
            make_matches?: string | null | undefined;
            stat_codes?: string[] | null | undefined;
        }, {
            validation?: string[] | null | undefined;
            backfill_matches?: string | null | undefined;
            enrichment?: string[] | null | undefined;
            make_matches?: string | null | undefined;
            stat_codes?: string[] | null | undefined;
        }>;
        name: z.ZodString;
        platform_group_enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        rule_set: z.ZodString;
        session_template: z.ZodString;
        ticket_expiration_seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: string;
        match_function: string;
        auto_accept_backfill_proposal: boolean;
        backfill_proposal_expiration_seconds: number;
        backfill_ticket_expiration_seconds: number;
        match_function_override: {
            validation?: string[] | null | undefined;
            backfill_matches?: string | null | undefined;
            enrichment?: string[] | null | undefined;
            make_matches?: string | null | undefined;
            stat_codes?: string[] | null | undefined;
        };
        rule_set: string;
        session_template: string;
        ticket_expiration_seconds: number;
        best_latency_calculation_method?: string | null | undefined;
        crossplay_disabled?: boolean | null | undefined;
        platform_group_enabled?: boolean | null | undefined;
    }, {
        name: string;
        match_function: string;
        auto_accept_backfill_proposal: boolean;
        backfill_proposal_expiration_seconds: number;
        backfill_ticket_expiration_seconds: number;
        match_function_override: {
            validation?: string[] | null | undefined;
            backfill_matches?: string | null | undefined;
            enrichment?: string[] | null | undefined;
            make_matches?: string | null | undefined;
            stat_codes?: string[] | null | undefined;
        };
        rule_set: string;
        session_template: string;
        ticket_expiration_seconds: number;
        best_latency_calculation_method?: string | null | undefined;
        crossplay_disabled?: boolean | null | undefined;
        platform_group_enabled?: boolean | null | undefined;
    }>, "many">>>;
    pagination: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        name: string;
        match_function: string;
        auto_accept_backfill_proposal: boolean;
        backfill_proposal_expiration_seconds: number;
        backfill_ticket_expiration_seconds: number;
        match_function_override: {
            validation?: string[] | null | undefined;
            backfill_matches?: string | null | undefined;
            enrichment?: string[] | null | undefined;
            make_matches?: string | null | undefined;
            stat_codes?: string[] | null | undefined;
        };
        rule_set: string;
        session_template: string;
        ticket_expiration_seconds: number;
        best_latency_calculation_method?: string | null | undefined;
        crossplay_disabled?: boolean | null | undefined;
        platform_group_enabled?: boolean | null | undefined;
    }[] | null | undefined;
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}, {
    data?: {
        name: string;
        match_function: string;
        auto_accept_backfill_proposal: boolean;
        backfill_proposal_expiration_seconds: number;
        backfill_ticket_expiration_seconds: number;
        match_function_override: {
            validation?: string[] | null | undefined;
            backfill_matches?: string | null | undefined;
            enrichment?: string[] | null | undefined;
            make_matches?: string | null | undefined;
            stat_codes?: string[] | null | undefined;
        };
        rule_set: string;
        session_template: string;
        ticket_expiration_seconds: number;
        best_latency_calculation_method?: string | null | undefined;
        crossplay_disabled?: boolean | null | undefined;
        platform_group_enabled?: boolean | null | undefined;
    }[] | null | undefined;
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}>;
interface ListMatchPoolsResponse extends z.TypeOf<typeof ListMatchPoolsResponse> {
}

declare const ListMatchPoolTicketsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        CreatedAt: z.ZodString;
        IsActive: z.ZodBoolean;
        PartySessionID: z.ZodString;
        ProposedProposal: z.ZodObject<{
            BackfillID: z.ZodString;
            ProposalID: z.ZodString;
            Status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        }, {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        }>;
        SessionID: z.ZodString;
        Ticket: z.ZodObject<{
            CreatedAt: z.ZodString;
            ExcludedSessions: z.ZodArray<z.ZodString, "many">;
            IsActive: z.ZodBoolean;
            IsPivot: z.ZodBoolean;
            IsSinglePlay: z.ZodBoolean;
            Latencies: z.ZodRecord<z.ZodString, z.ZodNumber>;
            MatchPool: z.ZodString;
            MatchedAt: z.ZodString;
            Namespace: z.ZodString;
            PartySessionID: z.ZodString;
            Players: z.ZodArray<z.ZodObject<{
                Attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
                PartyID: z.ZodString;
                PlatformID: z.ZodString;
                PlayerID: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }, {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }>, "many">;
            ProposedProposal: z.ZodObject<{
                BackfillID: z.ZodString;
                ProposalID: z.ZodString;
                Status: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            }, {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            }>;
            TicketAttributes: z.ZodRecord<z.ZodString, z.ZodAny>;
            TicketID: z.ZodString;
            TicketInformation: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }, {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        }>;
        TicketID: z.ZodString;
        UniqueTicketID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        CreatedAt: string;
        IsActive: boolean;
        PartySessionID: string;
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketID: string;
        SessionID: string;
        Ticket: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        };
        UniqueTicketID: string;
    }, {
        CreatedAt: string;
        IsActive: boolean;
        PartySessionID: string;
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketID: string;
        SessionID: string;
        Ticket: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        };
        UniqueTicketID: string;
    }>, "many">;
    pagination: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>>>;
    totalData: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        CreatedAt: string;
        IsActive: boolean;
        PartySessionID: string;
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketID: string;
        SessionID: string;
        Ticket: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        };
        UniqueTicketID: string;
    }[];
    totalData: number;
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}, {
    data: {
        CreatedAt: string;
        IsActive: boolean;
        PartySessionID: string;
        ProposedProposal: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        };
        TicketID: string;
        SessionID: string;
        Ticket: {
            CreatedAt: string;
            ExcludedSessions: string[];
            IsActive: boolean;
            IsPivot: boolean;
            IsSinglePlay: boolean;
            Latencies: Record<string, number>;
            MatchPool: string;
            MatchedAt: string;
            Namespace: string;
            PartySessionID: string;
            Players: {
                Attributes: Record<string, any>;
                PartyID: string;
                PlatformID: string;
                PlayerID: string;
            }[];
            ProposedProposal: {
                BackfillID: string;
                ProposalID: string;
                Status: string;
            };
            TicketAttributes: Record<string, any>;
            TicketID: string;
            TicketInformation: Record<string, any>;
        };
        UniqueTicketID: string;
    }[];
    totalData: number;
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}>;
interface ListMatchPoolTicketsResponse extends z.TypeOf<typeof ListMatchPoolTicketsResponse> {
}

declare const ListRuleSetsResponse: z.ZodObject<{
    data: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, "many">>>;
    pagination: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data?: {
        name: string;
    }[] | null | undefined;
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}, {
    data?: {
        name: string;
    }[] | null | undefined;
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}>;
interface ListRuleSetsResponse extends z.TypeOf<typeof ListRuleSetsResponse> {
}

declare const MatchFunctionConfig: z.ZodObject<{
    match_function: z.ZodString;
    serviceAppName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    match_function: string;
    serviceAppName?: string | null | undefined;
}, {
    url: string;
    match_function: string;
    serviceAppName?: string | null | undefined;
}>;
interface MatchFunctionConfig extends z.TypeOf<typeof MatchFunctionConfig> {
}

declare const MatchFunctionRequest: z.ZodObject<{
    match_function: z.ZodString;
    serviceAppName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    match_function: string;
    serviceAppName?: string | null | undefined;
}, {
    url: string;
    match_function: string;
    serviceAppName?: string | null | undefined;
}>;
interface MatchFunctionRequest extends z.TypeOf<typeof MatchFunctionRequest> {
}

declare const MatchPool: z.ZodObject<{
    auto_accept_backfill_proposal: z.ZodBoolean;
    backfill_proposal_expiration_seconds: z.ZodNumber;
    backfill_ticket_expiration_seconds: z.ZodNumber;
    best_latency_calculation_method: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    crossplay_disabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    match_function: z.ZodString;
    match_function_override: z.ZodObject<{
        backfill_matches: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        enrichment: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        make_matches: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stat_codes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        validation: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    }, {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    }>;
    name: z.ZodString;
    platform_group_enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    rule_set: z.ZodString;
    session_template: z.ZodString;
    ticket_expiration_seconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    name: string;
    match_function: string;
    auto_accept_backfill_proposal: boolean;
    backfill_proposal_expiration_seconds: number;
    backfill_ticket_expiration_seconds: number;
    match_function_override: {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    };
    rule_set: string;
    session_template: string;
    ticket_expiration_seconds: number;
    best_latency_calculation_method?: string | null | undefined;
    crossplay_disabled?: boolean | null | undefined;
    platform_group_enabled?: boolean | null | undefined;
}, {
    name: string;
    match_function: string;
    auto_accept_backfill_proposal: boolean;
    backfill_proposal_expiration_seconds: number;
    backfill_ticket_expiration_seconds: number;
    match_function_override: {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    };
    rule_set: string;
    session_template: string;
    ticket_expiration_seconds: number;
    best_latency_calculation_method?: string | null | undefined;
    crossplay_disabled?: boolean | null | undefined;
    platform_group_enabled?: boolean | null | undefined;
}>;
interface MatchPool extends z.TypeOf<typeof MatchPool> {
}

declare const MatchPoolConfig: z.ZodObject<{
    auto_accept_backfill_proposal: z.ZodBoolean;
    backfill_proposal_expiration_seconds: z.ZodNumber;
    backfill_ticket_expiration_seconds: z.ZodNumber;
    best_latency_calculation_method: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    crossplay_disabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    match_function: z.ZodString;
    match_function_override: z.ZodObject<{
        backfill_matches: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        enrichment: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        make_matches: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stat_codes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        validation: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    }, {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    }>;
    platform_group_enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    rule_set: z.ZodString;
    session_template: z.ZodString;
    ticket_expiration_seconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    match_function: string;
    auto_accept_backfill_proposal: boolean;
    backfill_proposal_expiration_seconds: number;
    backfill_ticket_expiration_seconds: number;
    match_function_override: {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    };
    rule_set: string;
    session_template: string;
    ticket_expiration_seconds: number;
    best_latency_calculation_method?: string | null | undefined;
    crossplay_disabled?: boolean | null | undefined;
    platform_group_enabled?: boolean | null | undefined;
}, {
    match_function: string;
    auto_accept_backfill_proposal: boolean;
    backfill_proposal_expiration_seconds: number;
    backfill_ticket_expiration_seconds: number;
    match_function_override: {
        validation?: string[] | null | undefined;
        backfill_matches?: string | null | undefined;
        enrichment?: string[] | null | undefined;
        make_matches?: string | null | undefined;
        stat_codes?: string[] | null | undefined;
    };
    rule_set: string;
    session_template: string;
    ticket_expiration_seconds: number;
    best_latency_calculation_method?: string | null | undefined;
    crossplay_disabled?: boolean | null | undefined;
    platform_group_enabled?: boolean | null | undefined;
}>;
interface MatchPoolConfig extends z.TypeOf<typeof MatchPoolConfig> {
}

declare const MatchTicketRequest: z.ZodObject<{
    attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
    excludedSessions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    latencies: z.ZodRecord<z.ZodString, z.ZodNumber>;
    matchPool: z.ZodString;
    sessionID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    storage: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    matchPool: string;
    attributes: Record<string, any>;
    latencies: Record<string, number>;
    excludedSessions?: string[] | null | undefined;
    sessionID?: string | null | undefined;
    storage?: Record<string, any> | null | undefined;
}, {
    matchPool: string;
    attributes: Record<string, any>;
    latencies: Record<string, number>;
    excludedSessions?: string[] | null | undefined;
    sessionID?: string | null | undefined;
    storage?: Record<string, any> | null | undefined;
}>;
interface MatchTicketRequest extends z.TypeOf<typeof MatchTicketRequest> {
}

declare const MatchTicketResponse: z.ZodObject<{
    matchTicketID: z.ZodString;
    queueTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    matchTicketID: string;
    queueTime: number;
}, {
    matchTicketID: string;
    queueTime: number;
}>;
interface MatchTicketResponse extends z.TypeOf<typeof MatchTicketResponse> {
}

declare const MatchTicketStatus: z.ZodObject<{
    isActive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    matchFound: z.ZodBoolean;
    matchPool: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    matchTicketID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    proposedProposal: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        BackfillID: z.ZodString;
        ProposalID: z.ZodString;
        Status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        BackfillID: string;
        ProposalID: string;
        Status: string;
    }, {
        BackfillID: string;
        ProposalID: string;
        Status: string;
    }>>>;
    sessionID: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sessionID: string;
    matchFound: boolean;
    matchPool?: string | null | undefined;
    matchTicketID?: string | null | undefined;
    isActive?: boolean | null | undefined;
    proposedProposal?: {
        BackfillID: string;
        ProposalID: string;
        Status: string;
    } | null | undefined;
}, {
    sessionID: string;
    matchFound: boolean;
    matchPool?: string | null | undefined;
    matchTicketID?: string | null | undefined;
    isActive?: boolean | null | undefined;
    proposedProposal?: {
        BackfillID: string;
        ProposalID: string;
        Status: string;
    } | null | undefined;
}>;
interface MatchTicketStatus extends z.TypeOf<typeof MatchTicketStatus> {
}

declare const MatchTicketStatuses: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        isActive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        matchFound: z.ZodBoolean;
        matchPool: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        matchTicketID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        proposedProposal: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            BackfillID: z.ZodString;
            ProposalID: z.ZodString;
            Status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        }, {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        }>>>;
        sessionID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sessionID: string;
        matchFound: boolean;
        matchPool?: string | null | undefined;
        matchTicketID?: string | null | undefined;
        isActive?: boolean | null | undefined;
        proposedProposal?: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        } | null | undefined;
    }, {
        sessionID: string;
        matchFound: boolean;
        matchPool?: string | null | undefined;
        matchTicketID?: string | null | undefined;
        isActive?: boolean | null | undefined;
        proposedProposal?: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        } | null | undefined;
    }>, "many">;
    pagination: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data: {
        sessionID: string;
        matchFound: boolean;
        matchPool?: string | null | undefined;
        matchTicketID?: string | null | undefined;
        isActive?: boolean | null | undefined;
        proposedProposal?: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        } | null | undefined;
    }[];
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}, {
    data: {
        sessionID: string;
        matchFound: boolean;
        matchPool?: string | null | undefined;
        matchTicketID?: string | null | undefined;
        isActive?: boolean | null | undefined;
        proposedProposal?: {
            BackfillID: string;
            ProposalID: string;
            Status: string;
        } | null | undefined;
    }[];
    pagination?: {
        first: string;
        last: string;
        next: string;
        previous: string;
    } | null | undefined;
}>;
interface MatchTicketStatuses extends z.TypeOf<typeof MatchTicketStatuses> {
}

declare const NamespaceConfig: z.ZodObject<{
    crossPlatformNoCurrentPlatform: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    extraPlatforms: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    matchAnyCommon: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    namespace: z.ZodString;
    platformGroup: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    crossPlatformNoCurrentPlatform?: boolean | null | undefined;
    extraPlatforms?: string[] | null | undefined;
    matchAnyCommon?: boolean | null | undefined;
    platformGroup?: Record<string, string[]> | null | undefined;
}, {
    namespace: string;
    crossPlatformNoCurrentPlatform?: boolean | null | undefined;
    extraPlatforms?: string[] | null | undefined;
    matchAnyCommon?: boolean | null | undefined;
    platformGroup?: Record<string, string[]> | null | undefined;
}>;
interface NamespaceConfig extends z.TypeOf<typeof NamespaceConfig> {
}

declare const NamespaceConfigList: z.ZodObject<{
    configs: z.ZodArray<z.ZodObject<{
        crossPlatformNoCurrentPlatform: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        extraPlatforms: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        matchAnyCommon: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        namespace: z.ZodString;
        platformGroup: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        crossPlatformNoCurrentPlatform?: boolean | null | undefined;
        extraPlatforms?: string[] | null | undefined;
        matchAnyCommon?: boolean | null | undefined;
        platformGroup?: Record<string, string[]> | null | undefined;
    }, {
        namespace: string;
        crossPlatformNoCurrentPlatform?: boolean | null | undefined;
        extraPlatforms?: string[] | null | undefined;
        matchAnyCommon?: boolean | null | undefined;
        platformGroup?: Record<string, string[]> | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    configs: {
        namespace: string;
        crossPlatformNoCurrentPlatform?: boolean | null | undefined;
        extraPlatforms?: string[] | null | undefined;
        matchAnyCommon?: boolean | null | undefined;
        platformGroup?: Record<string, string[]> | null | undefined;
    }[];
}, {
    configs: {
        namespace: string;
        crossPlatformNoCurrentPlatform?: boolean | null | undefined;
        extraPlatforms?: string[] | null | undefined;
        matchAnyCommon?: boolean | null | undefined;
        platformGroup?: Record<string, string[]> | null | undefined;
    }[];
}>;
interface NamespaceConfigList extends z.TypeOf<typeof NamespaceConfigList> {
}

declare const PatchNamespaceConfigRequest: z.ZodObject<{
    crossPlatformNoCurrentPlatform: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    extraPlatforms: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    matchAnyCommon: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    platformGroup: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>>>;
}, "strip", z.ZodTypeAny, {
    crossPlatformNoCurrentPlatform?: boolean | null | undefined;
    extraPlatforms?: string[] | null | undefined;
    matchAnyCommon?: boolean | null | undefined;
    platformGroup?: Record<string, string[]> | null | undefined;
}, {
    crossPlatformNoCurrentPlatform?: boolean | null | undefined;
    extraPlatforms?: string[] | null | undefined;
    matchAnyCommon?: boolean | null | undefined;
    platformGroup?: Record<string, string[]> | null | undefined;
}>;
interface PatchNamespaceConfigRequest extends z.TypeOf<typeof PatchNamespaceConfigRequest> {
}

declare const PlayerMetricRecord: z.ZodObject<{
    playerInQueue: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    playerInQueue: number;
}, {
    playerInQueue: number;
}>;
interface PlayerMetricRecord extends z.TypeOf<typeof PlayerMetricRecord> {
}

declare const RuleSetPayload: z.ZodObject<{
    data: z.ZodAny;
    enable_custom_match_function: z.ZodBoolean;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    enable_custom_match_function: boolean;
    data?: any;
}, {
    name: string;
    enable_custom_match_function: boolean;
    data?: any;
}>;
interface RuleSetPayload extends z.TypeOf<typeof RuleSetPayload> {
}

declare const TicketMetricResultRecord: z.ZodObject<{
    queueTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    queueTime: number;
}, {
    queueTime: number;
}>;
interface TicketMetricResultRecord extends z.TypeOf<typeof TicketMetricResultRecord> {
}

export { BackFillCreateRequest as B, Configuration as C, GameSession as G, ListEnvironmentVariablesResponse as L, MatchFunctionRequest as M, NamespaceConfigList as N, PatchNamespaceConfigRequest as P, RuleSetPayload as R, TicketMetricResultRecord as T, BackfillCreateResponse as a, BackfillProposalResponse as b, BackfillGetResponse as c, BackFillAcceptRequest as d, BackFillRejectRequest as e, NamespaceConfig as f, ListMatchFunctionsResponse as g, MatchFunctionConfig as h, ListMatchPoolsResponse as i, MatchPool as j, MatchPoolConfig as k, ListMatchPoolTicketsResponse as l, PlayerMetricRecord as m, MatchTicketRequest as n, MatchTicketResponse as o, MatchTicketStatuses as p, MatchTicketStatus as q, ListRuleSetsResponse as r };
