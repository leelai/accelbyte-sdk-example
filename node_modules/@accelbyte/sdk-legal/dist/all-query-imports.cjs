"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/all-query-imports.ts
var all_query_imports_exports = {};
__export(all_query_imports_exports, {
  Key_Agreement: () => Key_Agreement,
  Key_AgreementAdmin: () => Key_AgreementAdmin,
  Key_AgreementWithNamespaceAdmin: () => Key_AgreementWithNamespaceAdmin,
  Key_AnonymizationAdmin: () => Key_AnonymizationAdmin,
  Key_BaseLegalPoliciesAdmin: () => Key_BaseLegalPoliciesAdmin,
  Key_BaseLegalPoliciesWithNamespaceAdmin: () => Key_BaseLegalPoliciesWithNamespaceAdmin,
  Key_Eligibilities: () => Key_Eligibilities,
  Key_LocalizedPolicyVersions: () => Key_LocalizedPolicyVersions,
  Key_LocalizedPolicyVersionsAdmin: () => Key_LocalizedPolicyVersionsAdmin,
  Key_LocalizedPolicyVersionsWithNamespace: () => Key_LocalizedPolicyVersionsWithNamespace,
  Key_LocalizedPolicyVersionsWithNamespaceAdmin: () => Key_LocalizedPolicyVersionsWithNamespaceAdmin,
  Key_Policies: () => Key_Policies,
  Key_PoliciesAdmin: () => Key_PoliciesAdmin,
  Key_PoliciesWithNamespaceAdmin: () => Key_PoliciesWithNamespaceAdmin,
  Key_PolicyVersionsAdmin: () => Key_PolicyVersionsAdmin,
  Key_PolicyVersionsWithNamespaceAdmin: () => Key_PolicyVersionsWithNamespaceAdmin,
  Key_UserAgreementAdmin: () => Key_UserAgreementAdmin,
  Key_UserEligibilitiesAdmin: () => Key_UserEligibilitiesAdmin,
  Key_UserInfoAdmin: () => Key_UserInfoAdmin,
  Key_Utility: () => Key_Utility,
  useAgreementAdminApi_GetAgreementPolicyUser_ByUserId: () => useAgreementAdminApi_GetAgreementPolicyUser_ByUserId,
  useAgreementAdminApi_GetAgreementsPolicyVersionsUsers: () => useAgreementAdminApi_GetAgreementsPolicyVersionsUsers,
  useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation: () => useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation,
  useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation: () => useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useAgreementApi_CreateAgreementPolicyMutation: () => useAgreementApi_CreateAgreementPolicyMutation,
  useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation: () => useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation,
  useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation: () => useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation,
  useAgreementApi_GetAgreementsPolicies: () => useAgreementApi_GetAgreementsPolicies,
  useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation: () => useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation,
  useAgreementWithNamespaceAdminApi_CreateAgreementMutation: () => useAgreementWithNamespaceAdminApi_CreateAgreementMutation,
  useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation: () => useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation,
  useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId: () => useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId,
  useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers: () => useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers,
  useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload: () => useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload,
  useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation: () => useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation,
  useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation: () => useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation,
  useBaseLegalPoliciesAdminApi_GetBasePolicies: () => useBaseLegalPoliciesAdminApi_GetBasePolicies,
  useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId: () => useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId,
  useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode: () => useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode,
  useBaseLegalPoliciesAdminApi_GetPolicyTypes: () => useBaseLegalPoliciesAdminApi_GetPolicyTypes,
  useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation: () => useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation,
  useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation: () => useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies: () => useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId: () => useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode: () => useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes: () => useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes,
  useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation: () => useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation,
  useEligibilitiesApi_GetEligibility_ByNamespace: () => useEligibilitiesApi_GetEligibility_ByNamespace,
  useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId: () => useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId,
  useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation: () => useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation: () => useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId: () => useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId,
  useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: () => useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation: () => useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation: () => useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: () => useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation: () => useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation: () => useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId: () => useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: () => useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation: () => useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation: () => useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: () => useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  usePoliciesAdminApi_GetPolicyCountry_ByCountryCode: () => usePoliciesAdminApi_GetPolicyCountry_ByCountryCode,
  usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation: () => usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation,
  usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation: () => usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation,
  usePoliciesApi_GetPoliciesCountriesList: () => usePoliciesApi_GetPoliciesCountriesList,
  usePoliciesApi_GetPolicyCountry_ByCountryCode: () => usePoliciesApi_GetPolicyCountry_ByCountryCode,
  usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS: () => usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS,
  usePoliciesApi_GetPolicy_ByNamespace: () => usePoliciesApi_GetPolicy_ByNamespace,
  usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation: () => usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation,
  usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation: () => usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation,
  usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation: () => usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation,
  usePolicyVersionsAdminApi_GetVersions_ByPolicyId: () => usePolicyVersionsAdminApi_GetVersions_ByPolicyId,
  usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation: () => usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation,
  usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation: () => usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation: () => usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId: () => usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId,
  usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation: () => usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation: () => usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation,
  useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation: () => useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation,
  useUserEligibilitiesAdminApi_GetEligibilities_ByUserId: () => useUserEligibilitiesAdminApi_GetEligibilities_ByUserId,
  useUserInfoAdminApi_DeleteUserInfoMutation: () => useUserInfoAdminApi_DeleteUserInfoMutation,
  useUserInfoAdminApi_GetUserInfo: () => useUserInfoAdminApi_GetUserInfo,
  useUserInfoAdminApi_UpdateUserInfoMutation: () => useUserInfoAdminApi_UpdateUserInfoMutation,
  useUtilityApi_GetReadiness: () => useUtilityApi_GetReadiness
});
module.exports = __toCommonJS(all_query_imports_exports);

// src/generated-admin/queries/AgreementAdmin.query.ts
var import_react_query = require("@tanstack/react-query");

// src/generated-admin/AgreementAdminApi.ts
var import_sdk2 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/AgreementAdmin$.ts
var import_sdk = require("@accelbyte/sdk");
var import_zod7 = require("zod");

// src/generated-definitions/PagedRetrieveUserAcceptedAgreementResponse.ts
var import_zod4 = require("zod");

// src/generated-definitions/Paging.ts
var import_zod = require("zod");
var Paging = import_zod.z.object({ next: import_zod.z.string().nullish(), previous: import_zod.z.string().nullish() });

// src/generated-definitions/RetrieveUserAcceptedAgreementResponse.ts
var import_zod3 = require("zod");

// src/generated-definitions/LocalizedPolicyVersionObject.ts
var import_zod2 = require("zod");
var LocalizedPolicyVersionObject = import_zod2.z.object({
  attachmentChecksum: import_zod2.z.string().nullish(),
  attachmentLocation: import_zod2.z.string().nullish(),
  attachmentVersionIdentifier: import_zod2.z.string().nullish(),
  contentType: import_zod2.z.string().nullish(),
  createdAt: import_zod2.z.string().nullish(),
  description: import_zod2.z.string().nullish(),
  id: import_zod2.z.string(),
  isDefaultSelection: import_zod2.z.boolean(),
  localeCode: import_zod2.z.string(),
  publishedDate: import_zod2.z.string().nullish(),
  status: import_zod2.z.string().nullish(),
  updatedAt: import_zod2.z.string().nullish()
});

// src/generated-definitions/RetrieveUserAcceptedAgreementResponse.ts
var RetrieveUserAcceptedAgreementResponse = import_zod3.z.object({
  createdAt: import_zod3.z.string().nullish(),
  displayName: import_zod3.z.string().nullish(),
  email: import_zod3.z.string().nullish(),
  id: import_zod3.z.string(),
  isAccepted: import_zod3.z.boolean().nullish(),
  localizedPolicyVersion: LocalizedPolicyVersionObject.nullish(),
  namespace: import_zod3.z.string().nullish(),
  policyName: import_zod3.z.string().nullish(),
  policyType: import_zod3.z.string().nullish(),
  publisherUserId: import_zod3.z.string().nullish(),
  signingDate: import_zod3.z.string().nullish(),
  updatedAt: import_zod3.z.string().nullish(),
  userId: import_zod3.z.string().nullish(),
  username: import_zod3.z.string().nullish()
});

// src/generated-definitions/PagedRetrieveUserAcceptedAgreementResponse.ts
var PagedRetrieveUserAcceptedAgreementResponse = import_zod4.z.object({
  data: import_zod4.z.array(RetrieveUserAcceptedAgreementResponse).nullish(),
  paging: Paging.nullish()
});

// src/generated-definitions/RetrieveAcceptedAgreementResponseArray.ts
var import_zod6 = require("zod");

// src/generated-definitions/RetrieveAcceptedAgreementResponse.ts
var import_zod5 = require("zod");
var RetrieveAcceptedAgreementResponse = import_zod5.z.object({
  countryCode: import_zod5.z.string().nullish(),
  createdAt: import_zod5.z.string().nullish(),
  description: import_zod5.z.string().nullish(),
  displayVersion: import_zod5.z.string().nullish(),
  id: import_zod5.z.string(),
  isAccepted: import_zod5.z.boolean().nullish(),
  localizedPolicyVersion: LocalizedPolicyVersionObject.nullish(),
  namespace: import_zod5.z.string().nullish(),
  policyId: import_zod5.z.string().nullish(),
  policyName: import_zod5.z.string().nullish(),
  policyType: import_zod5.z.string().nullish(),
  signingDate: import_zod5.z.string().nullish(),
  tags: import_zod5.z.array(import_zod5.z.string()).nullish(),
  updatedAt: import_zod5.z.string().nullish(),
  userId: import_zod5.z.string().nullish()
});

// src/generated-definitions/RetrieveAcceptedAgreementResponseArray.ts
var RetrieveAcceptedAgreementResponseArray = import_zod6.z.array(RetrieveAcceptedAgreementResponse);

// src/generated-admin/endpoints/AgreementAdmin$.ts
var AgreementAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * This API will return users who has accepted a specific policy version.
   */
  getAgreementsPolicyVersionsUsers(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/agreement/admin/agreements/policy-versions/users";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      PagedRetrieveUserAcceptedAgreementResponse,
      "PagedRetrieveUserAcceptedAgreementResponse"
    );
  }
  /**
   * This API will return all accepted Legal Agreements for specified user
   */
  getAgreementPolicyUser_ByUserId(userId) {
    const params = {};
    const url = "/agreement/admin/agreements/policies/users/{userId}".replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveAcceptedAgreementResponseArray,
      "RetrieveAcceptedAgreementResponseArray"
    );
  }
  /**
   * This API will Update Preference Consent
   */
  patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId(userId, data) {
    const params = {};
    const url = "/agreement/admin/agreements/localized-policy-versions/preferences/namespaces/{namespace}/userId/{userId}".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod7.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/AgreementAdminApi.ts
function AgreementAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk2.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk2.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getAgreementsPolicyVersionsUsers(queryParams) {
    const $ = new AgreementAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getAgreementsPolicyVersionsUsers(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getAgreementPolicyUser_ByUserId(userId) {
    const $ = new AgreementAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getAgreementPolicyUser_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId(userId, data) {
    const $ = new AgreementAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * This API will return users who has accepted a specific policy version.
     */
    getAgreementsPolicyVersionsUsers,
    /**
     * This API will return all accepted Legal Agreements for specified user
     */
    getAgreementPolicyUser_ByUserId,
    /**
     * This API will Update Preference Consent
     */
    patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId
  };
}

// src/generated-admin/queries/AgreementAdmin.query.ts
var Key_AgreementAdmin = /* @__PURE__ */ ((Key_AgreementAdmin2) => {
  Key_AgreementAdmin2["AgreementsPolicyVersionsUsers"] = "Legal.AgreementAdmin.AgreementsPolicyVersionsUsers";
  Key_AgreementAdmin2["AgreementPolicyUser_ByUserId"] = "Legal.AgreementAdmin.AgreementPolicyUser_ByUserId";
  Key_AgreementAdmin2["AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId"] = "Legal.AgreementAdmin.AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId";
  return Key_AgreementAdmin2;
})(Key_AgreementAdmin || {});
var useAgreementAdminApi_GetAgreementsPolicyVersionsUsers = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementsPolicyVersionsUsers(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Legal.AgreementAdmin.AgreementsPolicyVersionsUsers" /* AgreementsPolicyVersionsUsers */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementAdminApi_GetAgreementPolicyUser_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementPolicyUser_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Legal.AgreementAdmin.AgreementPolicyUser_ByUserId" /* AgreementPolicyUser_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query.useMutation)({
    mutationKey: ["Legal.AgreementAdmin.AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId" /* AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/AgreementWithNamespaceAdmin.query.ts
var import_react_query2 = require("@tanstack/react-query");

// src/generated-admin/AgreementWithNamespaceAdminApi.ts
var import_sdk4 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/AgreementWithNamespaceAdmin$.ts
var import_sdk3 = require("@accelbyte/sdk");

// src/generated-definitions/DownloadExportedAgreementsInCsvResponse.ts
var import_zod8 = require("zod");
var DownloadExportedAgreementsInCsvResponse = import_zod8.z.object({ done: import_zod8.z.boolean(), downloadUrl: import_zod8.z.string().nullish() });

// src/generated-definitions/InitiateExportAgreementsToCsvResponse.ts
var import_zod9 = require("zod");
var InitiateExportAgreementsToCsvResponse = import_zod9.z.object({ exportId: import_zod9.z.string(), processing: import_zod9.z.boolean() });

// src/generated-definitions/UserAgreementsResponseArray.ts
var import_zod11 = require("zod");

// src/generated-definitions/UserAgreementsResponse.ts
var import_zod10 = require("zod");
var UserAgreementsResponse = import_zod10.z.object({
  agreements: import_zod10.z.array(RetrieveAcceptedAgreementResponse).nullish(),
  userId: import_zod10.z.string().nullish()
});

// src/generated-definitions/UserAgreementsResponseArray.ts
var UserAgreementsResponseArray = import_zod11.z.array(UserAgreementsResponse);

// src/generated-admin/endpoints/AgreementWithNamespaceAdmin$.ts
var AgreementWithNamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * This API will return all accepted Legal Agreements for each user, including agreements of game users if publisher user has corresponding game account.
   */
  createAgreement(data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/agreements".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserAgreementsResponseArray,
      "UserAgreementsResponseArray"
    );
  }
  /**
   * This API will return all users who has accepted a specific policy version.
   */
  getAgreementsPolicyVersionsUsers(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/agreements/policy-versions/users".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      PagedRetrieveUserAcceptedAgreementResponse,
      "PagedRetrieveUserAcceptedAgreementResponse"
    );
  }
  /**
   * This API will return all accepted Legal Agreements for specified user.
   */
  getAgreementPolicyUser_ByUserId(userId, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/agreements/policies/users/{userId}".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveAcceptedAgreementResponseArray,
      "RetrieveAcceptedAgreementResponseArray"
    );
  }
  /**
   * This API will check the status of export process.&lt;br&gt;If the export process has been completed, the response body will include the download url.
   */
  getAgreementsPolicyVersionsUsersExportCsvDownload(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download".replace(
      "{namespace}",
      this.namespace
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      DownloadExportedAgreementsInCsvResponse,
      "DownloadExportedAgreementsInCsvResponse"
    );
  }
  /**
   * This API will initiate a worker to export list of users who has accepted a specific policy version into a CSV file.&lt;br&gt;To check the export state after initialize it, use `GET /admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download` API.&lt;br/&gt;&lt;br/&gt;This Initiate API is &lt;b&gt;not allow&lt;/b&gt; multiple export worker running for the same namespace, it will return 409 http error if so.&lt;br/&gt;
   */
  createAgreementPolicyVersionUserExportCsvInitiate(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/initiate".replace(
      "{namespace}",
      this.namespace
    );
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      InitiateExportAgreementsToCsvResponse,
      "InitiateExportAgreementsToCsvResponse"
    );
  }
};

// src/generated-admin/AgreementWithNamespaceAdminApi.ts
function AgreementWithNamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk4.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk4.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createAgreement(data) {
    const $ = new AgreementWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAgreement(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getAgreementsPolicyVersionsUsers(queryParams) {
    const $ = new AgreementWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getAgreementsPolicyVersionsUsers(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getAgreementPolicyUser_ByUserId(userId, queryParams) {
    const $ = new AgreementWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getAgreementPolicyUser_ByUserId(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getAgreementsPolicyVersionsUsersExportCsvDownload(queryParams) {
    const $ = new AgreementWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getAgreementsPolicyVersionsUsersExportCsvDownload(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createAgreementPolicyVersionUserExportCsvInitiate(queryParams) {
    const $ = new AgreementWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAgreementPolicyVersionUserExportCsvInitiate(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * This API will return all accepted Legal Agreements for each user, including agreements of game users if publisher user has corresponding game account.
     */
    createAgreement,
    /**
     * This API will return all users who has accepted a specific policy version.
     */
    getAgreementsPolicyVersionsUsers,
    /**
     * This API will return all accepted Legal Agreements for specified user.
     */
    getAgreementPolicyUser_ByUserId,
    /**
     * This API will check the status of export process.&lt;br&gt;If the export process has been completed, the response body will include the download url.
     */
    getAgreementsPolicyVersionsUsersExportCsvDownload,
    /**
     * This API will initiate a worker to export list of users who has accepted a specific policy version into a CSV file.&lt;br&gt;To check the export state after initialize it, use `GET /admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download` API.&lt;br/&gt;&lt;br/&gt;This Initiate API is &lt;b&gt;not allow&lt;/b&gt; multiple export worker running for the same namespace, it will return 409 http error if so.&lt;br/&gt;
     */
    createAgreementPolicyVersionUserExportCsvInitiate
  };
}

// src/generated-admin/queries/AgreementWithNamespaceAdmin.query.ts
var Key_AgreementWithNamespaceAdmin = /* @__PURE__ */ ((Key_AgreementWithNamespaceAdmin2) => {
  Key_AgreementWithNamespaceAdmin2["Agreement"] = "Legal.AgreementWithNamespaceAdmin.Agreement";
  Key_AgreementWithNamespaceAdmin2["AgreementsPolicyVersionsUsers"] = "Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsers";
  Key_AgreementWithNamespaceAdmin2["AgreementPolicyUser_ByUserId"] = "Legal.AgreementWithNamespaceAdmin.AgreementPolicyUser_ByUserId";
  Key_AgreementWithNamespaceAdmin2["AgreementsPolicyVersionsUsersExportCsvDownload"] = "Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsersExportCsvDownload";
  Key_AgreementWithNamespaceAdmin2["AgreementPolicyVersionUserExportCsvInitiate"] = "Legal.AgreementWithNamespaceAdmin.AgreementPolicyVersionUserExportCsvInitiate";
  return Key_AgreementWithNamespaceAdmin2;
})(Key_AgreementWithNamespaceAdmin || {});
var useAgreementWithNamespaceAdminApi_CreateAgreementMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreement(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Legal.AgreementWithNamespaceAdmin.Agreement" /* Agreement */],
    mutationFn,
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementsPolicyVersionsUsers(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsers" /* AgreementsPolicyVersionsUsers */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementPolicyUser_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Legal.AgreementWithNamespaceAdmin.AgreementPolicyUser_ByUserId" /* AgreementPolicyUser_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementsPolicyVersionsUsersExportCsvDownload(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsersExportCsvDownload" /* AgreementsPolicyVersionsUsersExportCsvDownload */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementPolicyVersionUserExportCsvInitiate(input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Legal.AgreementWithNamespaceAdmin.AgreementPolicyVersionUserExportCsvInitiate" /* AgreementPolicyVersionUserExportCsvInitiate */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/AnonymizationAdmin.query.ts
var import_react_query3 = require("@tanstack/react-query");

// src/generated-admin/AnonymizationAdminApi.ts
var import_sdk6 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/AnonymizationAdmin$.ts
var import_sdk5 = require("@accelbyte/sdk");
var import_zod12 = require("zod");
var AnonymizationAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * This API will anonymize agreement record for specified user.
   */
  deleteAnonymizationAgreement_ByUserId(userId) {
    const params = {};
    const url = "/agreement/admin/users/{userId}/anonymization/agreements".replace("{userId}", userId);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod12.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/AnonymizationAdminApi.ts
function AnonymizationAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk6.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk6.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function deleteAnonymizationAgreement_ByUserId(userId) {
    const $ = new AnonymizationAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteAnonymizationAgreement_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * This API will anonymize agreement record for specified user.
     */
    deleteAnonymizationAgreement_ByUserId
  };
}

// src/generated-admin/queries/AnonymizationAdmin.query.ts
var Key_AnonymizationAdmin = /* @__PURE__ */ ((Key_AnonymizationAdmin2) => {
  Key_AnonymizationAdmin2["AnonymizationAgreement_ByUserId"] = "Legal.AnonymizationAdmin.AnonymizationAgreement_ByUserId";
  return Key_AnonymizationAdmin2;
})(Key_AnonymizationAdmin || {});
var useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationAgreement_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query3.useMutation)({
    mutationKey: ["Legal.AnonymizationAdmin.AnonymizationAgreement_ByUserId" /* AnonymizationAgreement_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/BaseLegalPoliciesAdmin.query.ts
var import_react_query4 = require("@tanstack/react-query");

// src/generated-admin/BaseLegalPoliciesAdminApi.ts
var import_sdk8 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/BaseLegalPoliciesAdmin$.ts
var import_sdk7 = require("@accelbyte/sdk");

// src/generated-definitions/CreateBasePolicyResponse.ts
var import_zod13 = require("zod");
var CreateBasePolicyResponse = import_zod13.z.object({
  affectedClientIds: import_zod13.z.array(import_zod13.z.string()).nullish(),
  affectedCountries: import_zod13.z.array(import_zod13.z.string()).nullish(),
  createdAt: import_zod13.z.string().nullish(),
  description: import_zod13.z.string().nullish(),
  globalPolicyName: import_zod13.z.string().nullish(),
  id: import_zod13.z.string(),
  isHidden: import_zod13.z.boolean().nullish(),
  isHiddenPublic: import_zod13.z.boolean().nullish(),
  namespace: import_zod13.z.string().nullish(),
  policyId: import_zod13.z.string().nullish(),
  tags: import_zod13.z.array(import_zod13.z.string()).nullish(),
  typeId: import_zod13.z.string().nullish(),
  updatedAt: import_zod13.z.string().nullish()
});

// src/generated-definitions/RetrieveBasePolicyResponse.ts
var import_zod15 = require("zod");

// src/generated-definitions/PolicyObject.ts
var import_zod14 = require("zod");
var PolicyObject = import_zod14.z.object({
  countryCode: import_zod14.z.string(),
  countryGroupCode: import_zod14.z.string().nullish(),
  createdAt: import_zod14.z.string().nullish(),
  description: import_zod14.z.string().nullish(),
  id: import_zod14.z.string(),
  isDefaultOpted: import_zod14.z.boolean(),
  isDefaultSelection: import_zod14.z.boolean(),
  isMandatory: import_zod14.z.boolean(),
  policyName: import_zod14.z.string(),
  readableId: import_zod14.z.string().nullish(),
  shouldNotifyOnUpdate: import_zod14.z.boolean(),
  updatedAt: import_zod14.z.string().nullish()
});

// src/generated-definitions/RetrieveBasePolicyResponse.ts
var RetrieveBasePolicyResponse = import_zod15.z.object({
  affectedClientIds: import_zod15.z.array(import_zod15.z.string()).nullish(),
  basePolicyName: import_zod15.z.string(),
  createdAt: import_zod15.z.string().nullish(),
  description: import_zod15.z.string().nullish(),
  id: import_zod15.z.string(),
  isHidden: import_zod15.z.boolean().nullish(),
  isHiddenPublic: import_zod15.z.boolean().nullish(),
  namespace: import_zod15.z.string(),
  policies: import_zod15.z.array(PolicyObject).nullish(),
  policyTypeId: import_zod15.z.string().nullish(),
  policyTypeName: import_zod15.z.string().nullish(),
  tags: import_zod15.z.array(import_zod15.z.string()).nullish(),
  updatedAt: import_zod15.z.string().nullish()
});

// src/generated-definitions/RetrieveBasePolicyResponseArray.ts
var import_zod16 = require("zod");
var RetrieveBasePolicyResponseArray = import_zod16.z.array(RetrieveBasePolicyResponse);

// src/generated-definitions/RetrievePolicyResponse.ts
var import_zod18 = require("zod");

// src/generated-definitions/PolicyVersionObject.ts
var import_zod17 = require("zod");
var PolicyVersionObject = import_zod17.z.object({
  createdAt: import_zod17.z.string().nullish(),
  description: import_zod17.z.string().nullish(),
  displayVersion: import_zod17.z.string(),
  id: import_zod17.z.string(),
  isCommitted: import_zod17.z.boolean(),
  isInEffect: import_zod17.z.boolean(),
  publishedDate: import_zod17.z.string().nullish(),
  status: import_zod17.z.string().nullish(),
  updatedAt: import_zod17.z.string().nullish()
});

// src/generated-definitions/RetrievePolicyResponse.ts
var RetrievePolicyResponse = import_zod18.z.object({
  countryCode: import_zod18.z.string(),
  countryGroupCode: import_zod18.z.string().nullish(),
  createdAt: import_zod18.z.string().nullish(),
  description: import_zod18.z.string().nullish(),
  id: import_zod18.z.string(),
  isDefaultOpted: import_zod18.z.boolean(),
  isDefaultSelection: import_zod18.z.boolean(),
  isMandatory: import_zod18.z.boolean(),
  policyName: import_zod18.z.string(),
  policyVersions: import_zod18.z.array(PolicyVersionObject).nullish(),
  readableId: import_zod18.z.string().nullish(),
  shouldNotifyOnUpdate: import_zod18.z.boolean(),
  updatedAt: import_zod18.z.string().nullish()
});

// src/generated-definitions/RetrievePolicyTypeResponseArray.ts
var import_zod20 = require("zod");

// src/generated-definitions/RetrievePolicyTypeResponse.ts
var import_zod19 = require("zod");
var RetrievePolicyTypeResponse = import_zod19.z.object({
  createdAt: import_zod19.z.string().nullish(),
  description: import_zod19.z.string().nullish(),
  id: import_zod19.z.string(),
  isNeedDocument: import_zod19.z.boolean(),
  policyTypeName: import_zod19.z.string(),
  updatedAt: import_zod19.z.string().nullish()
});

// src/generated-definitions/RetrievePolicyTypeResponseArray.ts
var RetrievePolicyTypeResponseArray = import_zod20.z.array(RetrievePolicyTypeResponse);

// src/generated-definitions/UpdateBasePolicyResponse.ts
var import_zod21 = require("zod");
var UpdateBasePolicyResponse = import_zod21.z.object({
  affectedClientIds: import_zod21.z.array(import_zod21.z.string()).nullish(),
  affectedCountries: import_zod21.z.array(import_zod21.z.string()).nullish(),
  createdAt: import_zod21.z.string().nullish(),
  description: import_zod21.z.string().nullish(),
  globalPolicyName: import_zod21.z.string().nullish(),
  id: import_zod21.z.string(),
  isHidden: import_zod21.z.boolean().nullish(),
  isHiddenPublic: import_zod21.z.boolean().nullish(),
  namespace: import_zod21.z.string().nullish(),
  policyId: import_zod21.z.string().nullish(),
  tags: import_zod21.z.array(import_zod21.z.string()).nullish(),
  typeId: import_zod21.z.string().nullish(),
  updatedAt: import_zod21.z.string().nullish()
});

// src/generated-admin/endpoints/BaseLegalPoliciesAdmin$.ts
var BaseLegalPoliciesAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve all supported policy types.
   */
  getPolicyTypes(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/policy-types";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyTypeResponseArray,
      "RetrievePolicyTypeResponseArray"
    );
  }
  /**
   * Retrieve all base policies.
   */
  getBasePolicies(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/base-policies";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveBasePolicyResponseArray,
      "RetrieveBasePolicyResponseArray"
    );
  }
  /**
   * Create a legal policy.
   */
  createBasePolicy(data) {
    const params = {};
    const url = "/agreement/admin/base-policies";
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CreateBasePolicyResponse,
      "CreateBasePolicyResponse"
    );
  }
  /**
   * Retrieve a base policy.
   */
  getBasePolicy_ByBasePolicyId(basePolicyId) {
    const params = {};
    const url = "/agreement/admin/base-policies/{basePolicyId}".replace("{basePolicyId}", basePolicyId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveBasePolicyResponse,
      "RetrieveBasePolicyResponse"
    );
  }
  /**
   * Update an existing base policy.
   */
  patchBasePolicy_ByBasePolicyId(basePolicyId, data) {
    const params = {};
    const url = "/agreement/admin/base-policies/{basePolicyId}".replace("{basePolicyId}", basePolicyId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UpdateBasePolicyResponse,
      "UpdateBasePolicyResponse"
    );
  }
  /**
   * Retrieve a Base Legal Policy based on a Particular Country.
   */
  getCountry_ByBasePolicyId_ByCountryCode(basePolicyId, countryCode) {
    const params = {};
    const url = "/agreement/admin/base-policies/{basePolicyId}/countries/{countryCode}".replace("{basePolicyId}", basePolicyId).replace("{countryCode}", countryCode);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyResponse,
      "RetrievePolicyResponse"
    );
  }
};

// src/generated-admin/BaseLegalPoliciesAdminApi.ts
function BaseLegalPoliciesAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk8.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk8.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getPolicyTypes(queryParams) {
    const $ = new BaseLegalPoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPolicyTypes(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getBasePolicies(queryParams) {
    const $ = new BaseLegalPoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getBasePolicies(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createBasePolicy(data) {
    const $ = new BaseLegalPoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createBasePolicy(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getBasePolicy_ByBasePolicyId(basePolicyId) {
    const $ = new BaseLegalPoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getBasePolicy_ByBasePolicyId(basePolicyId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchBasePolicy_ByBasePolicyId(basePolicyId, data) {
    const $ = new BaseLegalPoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchBasePolicy_ByBasePolicyId(basePolicyId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getCountry_ByBasePolicyId_ByCountryCode(basePolicyId, countryCode) {
    const $ = new BaseLegalPoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getCountry_ByBasePolicyId_ByCountryCode(basePolicyId, countryCode);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve all supported policy types.
     */
    getPolicyTypes,
    /**
     * Retrieve all base policies.
     */
    getBasePolicies,
    /**
     * Create a legal policy.
     */
    createBasePolicy,
    /**
     * Retrieve a base policy.
     */
    getBasePolicy_ByBasePolicyId,
    /**
     * Update an existing base policy.
     */
    patchBasePolicy_ByBasePolicyId,
    /**
     * Retrieve a Base Legal Policy based on a Particular Country.
     */
    getCountry_ByBasePolicyId_ByCountryCode
  };
}

// src/generated-admin/queries/BaseLegalPoliciesAdmin.query.ts
var Key_BaseLegalPoliciesAdmin = /* @__PURE__ */ ((Key_BaseLegalPoliciesAdmin2) => {
  Key_BaseLegalPoliciesAdmin2["PolicyTypes"] = "Legal.BaseLegalPoliciesAdmin.PolicyTypes";
  Key_BaseLegalPoliciesAdmin2["BasePolicies"] = "Legal.BaseLegalPoliciesAdmin.BasePolicies";
  Key_BaseLegalPoliciesAdmin2["BasePolicy"] = "Legal.BaseLegalPoliciesAdmin.BasePolicy";
  Key_BaseLegalPoliciesAdmin2["BasePolicy_ByBasePolicyId"] = "Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId";
  Key_BaseLegalPoliciesAdmin2["Country_ByBasePolicyId_ByCountryCode"] = "Legal.BaseLegalPoliciesAdmin.Country_ByBasePolicyId_ByCountryCode";
  return Key_BaseLegalPoliciesAdmin2;
})(Key_BaseLegalPoliciesAdmin || {});
var useBaseLegalPoliciesAdminApi_GetPolicyTypes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPolicyTypes(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.PolicyTypes" /* PolicyTypes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_GetBasePolicies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBasePolicies(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicies" /* BasePolicies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBasePolicy(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query4.useMutation)({
    mutationKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicy" /* BasePolicy */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBasePolicy_ByBasePolicyId(input2.basePolicyId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchBasePolicy_ByBasePolicyId(input.basePolicyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query4.useMutation)({
    mutationKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCountry_ByBasePolicyId_ByCountryCode(input2.basePolicyId, input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.Country_ByBasePolicyId_ByCountryCode" /* Country_ByBasePolicyId_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/BaseLegalPoliciesWithNamespaceAdmin.query.ts
var import_react_query5 = require("@tanstack/react-query");

// src/generated-admin/BaseLegalPoliciesWithNamespaceAdminApi.ts
var import_sdk10 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/BaseLegalPoliciesWithNamespaceAdmin$.ts
var import_sdk9 = require("@accelbyte/sdk");
var BaseLegalPoliciesWithNamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve all supported policy types.
   */
  getPolicyTypes(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/policy-types".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyTypeResponseArray,
      "RetrievePolicyTypeResponseArray"
    );
  }
  /**
   * Retrieve all base policies in the namespace.
   */
  getBasePolicies(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/base-policies".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveBasePolicyResponseArray,
      "RetrieveBasePolicyResponseArray"
    );
  }
  /**
   * Create a legal policy.
   */
  createBasePolicy(data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/base-policies".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CreateBasePolicyResponse,
      "CreateBasePolicyResponse"
    );
  }
  /**
   * Retrieve a base policy.
   */
  getBasePolicy_ByBasePolicyId(basePolicyId) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/base-policies/{basePolicyId}".replace("{namespace}", this.namespace).replace("{basePolicyId}", basePolicyId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveBasePolicyResponse,
      "RetrieveBasePolicyResponse"
    );
  }
  /**
   * Update an existing base policy.
   */
  patchBasePolicy_ByBasePolicyId(basePolicyId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/base-policies/{basePolicyId}".replace("{namespace}", this.namespace).replace("{basePolicyId}", basePolicyId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UpdateBasePolicyResponse,
      "UpdateBasePolicyResponse"
    );
  }
  /**
   * Retrieve a Base Legal Policy based on a Particular Country.
   */
  getCountry_ByBasePolicyId_ByCountryCode(basePolicyId, countryCode) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/base-policies/{basePolicyId}/countries/{countryCode}".replace("{namespace}", this.namespace).replace("{basePolicyId}", basePolicyId).replace("{countryCode}", countryCode);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyResponse,
      "RetrievePolicyResponse"
    );
  }
};

// src/generated-admin/BaseLegalPoliciesWithNamespaceAdminApi.ts
function BaseLegalPoliciesWithNamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk10.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk10.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getPolicyTypes(queryParams) {
    const $ = new BaseLegalPoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPolicyTypes(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getBasePolicies(queryParams) {
    const $ = new BaseLegalPoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getBasePolicies(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createBasePolicy(data) {
    const $ = new BaseLegalPoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createBasePolicy(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getBasePolicy_ByBasePolicyId(basePolicyId) {
    const $ = new BaseLegalPoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getBasePolicy_ByBasePolicyId(basePolicyId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchBasePolicy_ByBasePolicyId(basePolicyId, data) {
    const $ = new BaseLegalPoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchBasePolicy_ByBasePolicyId(basePolicyId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getCountry_ByBasePolicyId_ByCountryCode(basePolicyId, countryCode) {
    const $ = new BaseLegalPoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getCountry_ByBasePolicyId_ByCountryCode(basePolicyId, countryCode);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve all supported policy types.
     */
    getPolicyTypes,
    /**
     * Retrieve all base policies in the namespace.
     */
    getBasePolicies,
    /**
     * Create a legal policy.
     */
    createBasePolicy,
    /**
     * Retrieve a base policy.
     */
    getBasePolicy_ByBasePolicyId,
    /**
     * Update an existing base policy.
     */
    patchBasePolicy_ByBasePolicyId,
    /**
     * Retrieve a Base Legal Policy based on a Particular Country.
     */
    getCountry_ByBasePolicyId_ByCountryCode
  };
}

// src/generated-admin/queries/BaseLegalPoliciesWithNamespaceAdmin.query.ts
var Key_BaseLegalPoliciesWithNamespaceAdmin = /* @__PURE__ */ ((Key_BaseLegalPoliciesWithNamespaceAdmin2) => {
  Key_BaseLegalPoliciesWithNamespaceAdmin2["PolicyTypes"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.PolicyTypes";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["BasePolicies"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicies";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["BasePolicy"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["BasePolicy_ByBasePolicyId"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["Country_ByBasePolicyId_ByCountryCode"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.Country_ByBasePolicyId_ByCountryCode";
  return Key_BaseLegalPoliciesWithNamespaceAdmin2;
})(Key_BaseLegalPoliciesWithNamespaceAdmin || {});
var useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyTypes(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.PolicyTypes" /* PolicyTypes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBasePolicies(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicies" /* BasePolicies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBasePolicy(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query5.useMutation)({
    mutationKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy" /* BasePolicy */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBasePolicy_ByBasePolicyId(input2.basePolicyId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchBasePolicy_ByBasePolicyId(input.basePolicyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query5.useMutation)({
    mutationKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCountry_ByBasePolicyId_ByCountryCode(input2.basePolicyId, input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.Country_ByBasePolicyId_ByCountryCode" /* Country_ByBasePolicyId_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/LocalizedPolicyVersionsAdmin.query.ts
var import_react_query6 = require("@tanstack/react-query");

// src/generated-admin/LocalizedPolicyVersionsAdminApi.ts
var import_sdk12 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/LocalizedPolicyVersionsAdmin$.ts
var import_sdk11 = require("@accelbyte/sdk");
var import_zod27 = require("zod");

// src/generated-definitions/CreateLocalizedPolicyVersionResponse.ts
var import_zod22 = require("zod");
var CreateLocalizedPolicyVersionResponse = import_zod22.z.object({
  createdAt: import_zod22.z.string().nullish(),
  description: import_zod22.z.string().nullish(),
  id: import_zod22.z.string(),
  localeCode: import_zod22.z.string().nullish(),
  updatedAt: import_zod22.z.string().nullish()
});

// src/generated-definitions/RetrieveLocalizedPolicyVersionResponse.ts
var import_zod23 = require("zod");
var RetrieveLocalizedPolicyVersionResponse = import_zod23.z.object({
  attachmentChecksum: import_zod23.z.string().nullish(),
  attachmentLocation: import_zod23.z.string().nullish(),
  attachmentVersionIdentifier: import_zod23.z.string().nullish(),
  baseUrls: import_zod23.z.array(import_zod23.z.string()).nullish(),
  contentType: import_zod23.z.string().nullish(),
  createdAt: import_zod23.z.string().nullish(),
  description: import_zod23.z.string().nullish(),
  id: import_zod23.z.string(),
  localeCode: import_zod23.z.string(),
  policy: PolicyObject.nullish(),
  policyVersion: PolicyVersionObject,
  updatedAt: import_zod23.z.string().nullish()
});

// src/generated-definitions/RetrieveLocalizedPolicyVersionResponseArray.ts
var import_zod24 = require("zod");
var RetrieveLocalizedPolicyVersionResponseArray = import_zod24.z.array(RetrieveLocalizedPolicyVersionResponse);

// src/generated-definitions/UpdateLocalizedPolicyVersionResponse.ts
var import_zod25 = require("zod");
var UpdateLocalizedPolicyVersionResponse = import_zod25.z.object({
  attachmentChecksum: import_zod25.z.string().nullish(),
  attachmentLocation: import_zod25.z.string().nullish(),
  attachmentVersionIdentifier: import_zod25.z.string().nullish(),
  contentType: import_zod25.z.string().nullish(),
  createdAt: import_zod25.z.string().nullish(),
  description: import_zod25.z.string().nullish(),
  id: import_zod25.z.string(),
  localeCode: import_zod25.z.string().nullish(),
  updatedAt: import_zod25.z.string().nullish()
});

// src/generated-definitions/UploadLocalizedPolicyVersionAttachmentResponse.ts
var import_zod26 = require("zod");
var UploadLocalizedPolicyVersionAttachmentResponse = import_zod26.z.object({
  attachmentChecksum: import_zod26.z.string().nullish(),
  attachmentLocation: import_zod26.z.string().nullish(),
  attachmentUploadUrl: import_zod26.z.string().nullish()
});

// src/generated-admin/endpoints/LocalizedPolicyVersionsAdmin$.ts
var LocalizedPolicyVersionsAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve a version of a particular country-specific policy.
   */
  getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/admin/localized-policy-versions/{localizedPolicyVersionId}".replace(
      "{localizedPolicyVersionId}",
      localizedPolicyVersionId
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveLocalizedPolicyVersionResponse,
      "RetrieveLocalizedPolicyVersionResponse"
    );
  }
  /**
   * Update a version of a particular country-specific policy.
   */
  updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/localized-policy-versions/{localizedPolicyVersionId}".replace(
      "{localizedPolicyVersionId}",
      localizedPolicyVersionId
    );
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UpdateLocalizedPolicyVersionResponse,
      "UpdateLocalizedPolicyVersionResponse"
    );
  }
  /**
   * Retrieve versions of a particular country-specific policy.
   */
  getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId) {
    const params = {};
    const url = "/agreement/admin/localized-policy-versions/versions/{policyVersionId}".replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveLocalizedPolicyVersionResponseArray,
      "RetrieveLocalizedPolicyVersionResponseArray"
    );
  }
  /**
   * Create a version of a particular country-specific policy.
   */
  createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/localized-policy-versions/versions/{policyVersionId}".replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CreateLocalizedPolicyVersionResponse,
      "CreateLocalizedPolicyVersionResponse"
    );
  }
  /**
   * Update a localized version policy to be the default.
   */
  patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/admin/localized-policy-versions/{localizedPolicyVersionId}/default".replace(
      "{localizedPolicyVersionId}",
      localizedPolicyVersionId
    );
    const resultPromise = this.axiosInstance.patch(url, null, { params });
    return import_sdk11.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod27.z.unknown(), "z.unknown()");
  }
  /**
   * Request presigned URL for upload attachment for a particular localized version of base policy.
   */
  createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/localized-policy-versions/{localizedPolicyVersionId}/attachments".replace(
      "{localizedPolicyVersionId}",
      localizedPolicyVersionId
    );
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UploadLocalizedPolicyVersionAttachmentResponse,
      "UploadLocalizedPolicyVersionAttachmentResponse"
    );
  }
};

// src/generated-admin/LocalizedPolicyVersionsAdminApi.ts
function LocalizedPolicyVersionsAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk12.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk12.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new LocalizedPolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const $ = new LocalizedPolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId) {
    const $ = new LocalizedPolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId, data) {
    const $ = new LocalizedPolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new LocalizedPolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const $ = new LocalizedPolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve a version of a particular country-specific policy.
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
    /**
     * Update a version of a particular country-specific policy.
     */
    updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
    /**
     * Retrieve versions of a particular country-specific policy.
     */
    getLocalizedPolicyVersionVersion_ByPolicyVersionId,
    /**
     * Create a version of a particular country-specific policy.
     */
    createLocalizedPolicyVersionVersion_ByPolicyVersionId,
    /**
     * Update a localized version policy to be the default.
     */
    patchDefault_ByLocalizedPolicyVersionId,
    /**
     * Request presigned URL for upload attachment for a particular localized version of base policy.
     */
    createAttachment_ByLocalizedPolicyVersionId
  };
}

// src/generated-admin/queries/LocalizedPolicyVersionsAdmin.query.ts
var Key_LocalizedPolicyVersionsAdmin = /* @__PURE__ */ ((Key_LocalizedPolicyVersionsAdmin2) => {
  Key_LocalizedPolicyVersionsAdmin2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsAdmin2["LocalizedPolicyVersionVersion_ByPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId";
  Key_LocalizedPolicyVersionsAdmin2["Default_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.Default_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsAdmin2["Attachment_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.Attachment_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersionsAdmin2;
})(Key_LocalizedPolicyVersionsAdmin || {});
var useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query6.useQuery)({
    queryKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersionVersion_ByPolicyVersionId(input2.policyVersionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query6.useQuery)({
    queryKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createLocalizedPolicyVersionVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDefault_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.Default_ByLocalizedPolicyVersionId" /* Default_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAttachment_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.Attachment_ByLocalizedPolicyVersionId" /* Attachment_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/LocalizedPolicyVersionsWithNamespaceAdmin.query.ts
var import_react_query7 = require("@tanstack/react-query");

// src/generated-admin/LocalizedPolicyVersionsWithNamespaceAdminApi.ts
var import_sdk14 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/LocalizedPolicyVersionsWithNamespaceAdmin$.ts
var import_sdk13 = require("@accelbyte/sdk");
var import_zod28 = require("zod");
var LocalizedPolicyVersionsWithNamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve a version of a particular country-specific policy.
   */
  getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/localized-policy-versions/{localizedPolicyVersionId}".replace("{namespace}", this.namespace).replace("{localizedPolicyVersionId}", localizedPolicyVersionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk13.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveLocalizedPolicyVersionResponse,
      "RetrieveLocalizedPolicyVersionResponse"
    );
  }
  /**
   * Update a version of a particular country-specific policy.
   */
  updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/localized-policy-versions/{localizedPolicyVersionId}".replace("{namespace}", this.namespace).replace("{localizedPolicyVersionId}", localizedPolicyVersionId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk13.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UpdateLocalizedPolicyVersionResponse,
      "UpdateLocalizedPolicyVersionResponse"
    );
  }
  /**
   * Retrieve versions of a particular country-specific policy.
   */
  getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/localized-policy-versions/versions/{policyVersionId}".replace("{namespace}", this.namespace).replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk13.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveLocalizedPolicyVersionResponseArray,
      "RetrieveLocalizedPolicyVersionResponseArray"
    );
  }
  /**
   * Create a version of a particular country-specific policy.
   */
  createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/localized-policy-versions/versions/{policyVersionId}".replace("{namespace}", this.namespace).replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk13.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CreateLocalizedPolicyVersionResponse,
      "CreateLocalizedPolicyVersionResponse"
    );
  }
  /**
   * Update a localized version policy to be the default.
   */
  patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/localized-policy-versions/{localizedPolicyVersionId}/default".replace("{namespace}", this.namespace).replace("{localizedPolicyVersionId}", localizedPolicyVersionId);
    const resultPromise = this.axiosInstance.patch(url, null, { params });
    return import_sdk13.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod28.z.unknown(), "z.unknown()");
  }
  /**
   * Request presigned URL for upload attachment for a particular localized version of base policy.
   */
  createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/localized-policy-versions/{localizedPolicyVersionId}/attachments".replace("{namespace}", this.namespace).replace("{localizedPolicyVersionId}", localizedPolicyVersionId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk13.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UploadLocalizedPolicyVersionAttachmentResponse,
      "UploadLocalizedPolicyVersionAttachmentResponse"
    );
  }
};

// src/generated-admin/LocalizedPolicyVersionsWithNamespaceAdminApi.ts
function LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk14.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk14.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new LocalizedPolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const $ = new LocalizedPolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId) {
    const $ = new LocalizedPolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId, data) {
    const $ = new LocalizedPolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new LocalizedPolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data) {
    const $ = new LocalizedPolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve a version of a particular country-specific policy.
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
    /**
     * Update a version of a particular country-specific policy.
     */
    updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
    /**
     * Retrieve versions of a particular country-specific policy.
     */
    getLocalizedPolicyVersionVersion_ByPolicyVersionId,
    /**
     * Create a version of a particular country-specific policy.
     */
    createLocalizedPolicyVersionVersion_ByPolicyVersionId,
    /**
     * Update a localized version policy to be the default.
     */
    patchDefault_ByLocalizedPolicyVersionId,
    /**
     * Request presigned URL for upload attachment for a particular localized version of base policy.
     */
    createAttachment_ByLocalizedPolicyVersionId
  };
}

// src/generated-admin/queries/LocalizedPolicyVersionsWithNamespaceAdmin.query.ts
var Key_LocalizedPolicyVersionsWithNamespaceAdmin = /* @__PURE__ */ ((Key_LocalizedPolicyVersionsWithNamespaceAdmin2) => {
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["LocalizedPolicyVersionVersion_ByPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId";
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["Default_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Default_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["Attachment_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Attachment_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersionsWithNamespaceAdmin2;
})(Key_LocalizedPolicyVersionsWithNamespaceAdmin || {});
var useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query7.useQuery)({
    queryKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query7.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersionVersion_ByPolicyVersionId(input2.policyVersionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query7.useQuery)({
    queryKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createLocalizedPolicyVersionVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query7.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDefault_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query7.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Default_ByLocalizedPolicyVersionId" /* Default_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAttachment_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query7.useMutation)({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Attachment_ByLocalizedPolicyVersionId" /* Attachment_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PoliciesAdmin.query.ts
var import_react_query8 = require("@tanstack/react-query");

// src/generated-admin/PoliciesAdminApi.ts
var import_sdk16 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/PoliciesAdmin$.ts
var import_sdk15 = require("@accelbyte/sdk");
var import_zod30 = require("zod");

// src/generated-definitions/RetrievePolicyResponseArray.ts
var import_zod29 = require("zod");
var RetrievePolicyResponseArray = import_zod29.z.array(RetrievePolicyResponse);

// src/generated-admin/endpoints/PoliciesAdmin$.ts
var PoliciesAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Update country-specific policy.
   */
  patchPolicy_ByPolicyId(policyId, data) {
    const params = {};
    const url = "/agreement/admin/policies/{policyId}".replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk15.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod30.z.unknown(), "z.unknown()");
  }
  /**
   * Update a policy to be the default.
   */
  patchDefault_ByPolicyId(policyId) {
    const params = {};
    const url = "/agreement/admin/policies/{policyId}/default".replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.patch(url, null, { params });
    return import_sdk15.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod30.z.unknown(), "z.unknown()");
  }
  /**
   * Retrieve all active policies based on a country.
   */
  getPolicyCountry_ByCountryCode(countryCode) {
    const params = {};
    const url = "/agreement/admin/policies/countries/{countryCode}".replace("{countryCode}", countryCode);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk15.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyResponseArray,
      "RetrievePolicyResponseArray"
    );
  }
};

// src/generated-admin/PoliciesAdminApi.ts
function PoliciesAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk16.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk16.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function patchPolicy_ByPolicyId(policyId, data) {
    const $ = new PoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchPolicy_ByPolicyId(policyId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchDefault_ByPolicyId(policyId) {
    const $ = new PoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchDefault_ByPolicyId(policyId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPolicyCountry_ByCountryCode(countryCode) {
    const $ = new PoliciesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPolicyCountry_ByCountryCode(countryCode);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Update country-specific policy.
     */
    patchPolicy_ByPolicyId,
    /**
     * Update a policy to be the default.
     */
    patchDefault_ByPolicyId,
    /**
     * Retrieve all active policies based on a country.
     */
    getPolicyCountry_ByCountryCode
  };
}

// src/generated-admin/queries/PoliciesAdmin.query.ts
var Key_PoliciesAdmin = /* @__PURE__ */ ((Key_PoliciesAdmin2) => {
  Key_PoliciesAdmin2["Policy_ByPolicyId"] = "Legal.PoliciesAdmin.Policy_ByPolicyId";
  Key_PoliciesAdmin2["Default_ByPolicyId"] = "Legal.PoliciesAdmin.Default_ByPolicyId";
  Key_PoliciesAdmin2["PolicyCountry_ByCountryCode"] = "Legal.PoliciesAdmin.PolicyCountry_ByCountryCode";
  return Key_PoliciesAdmin2;
})(Key_PoliciesAdmin || {});
var usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchPolicy_ByPolicyId(
      input.policyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query8.useMutation)({
    mutationKey: ["Legal.PoliciesAdmin.Policy_ByPolicyId" /* Policy_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchDefault_ByPolicyId(
      input.policyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query8.useMutation)({
    mutationKey: ["Legal.PoliciesAdmin.Default_ByPolicyId" /* Default_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePoliciesAdminApi_GetPolicyCountry_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyCountry_ByCountryCode(input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query8.useQuery)({
    queryKey: ["Legal.PoliciesAdmin.PolicyCountry_ByCountryCode" /* PolicyCountry_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PoliciesWithNamespaceAdmin.query.ts
var import_react_query9 = require("@tanstack/react-query");

// src/generated-admin/PoliciesWithNamespaceAdminApi.ts
var import_sdk18 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/PoliciesWithNamespaceAdmin$.ts
var import_sdk17 = require("@accelbyte/sdk");
var import_zod31 = require("zod");
var PoliciesWithNamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Update country-specific policy.
   */
  patchPolicy_ByPolicyId(policyId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/policies/{policyId}".replace("{namespace}", this.namespace).replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk17.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod31.z.unknown(), "z.unknown()");
  }
  /**
   * Update a policy to be the default.
   */
  patchDefault_ByPolicyId(policyId) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/policies/{policyId}/default".replace("{namespace}", this.namespace).replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.patch(url, null, { params });
    return import_sdk17.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod31.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/PoliciesWithNamespaceAdminApi.ts
function PoliciesWithNamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk18.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk18.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function patchPolicy_ByPolicyId(policyId, data) {
    const $ = new PoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchPolicy_ByPolicyId(policyId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchDefault_ByPolicyId(policyId) {
    const $ = new PoliciesWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchDefault_ByPolicyId(policyId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Update country-specific policy.
     */
    patchPolicy_ByPolicyId,
    /**
     * Update a policy to be the default.
     */
    patchDefault_ByPolicyId
  };
}

// src/generated-admin/queries/PoliciesWithNamespaceAdmin.query.ts
var Key_PoliciesWithNamespaceAdmin = /* @__PURE__ */ ((Key_PoliciesWithNamespaceAdmin2) => {
  Key_PoliciesWithNamespaceAdmin2["Policy_ByPolicyId"] = "Legal.PoliciesWithNamespaceAdmin.Policy_ByPolicyId";
  Key_PoliciesWithNamespaceAdmin2["Default_ByPolicyId"] = "Legal.PoliciesWithNamespaceAdmin.Default_ByPolicyId";
  return Key_PoliciesWithNamespaceAdmin2;
})(Key_PoliciesWithNamespaceAdmin || {});
var usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchPolicy_ByPolicyId(input.policyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query9.useMutation)({
    mutationKey: ["Legal.PoliciesWithNamespaceAdmin.Policy_ByPolicyId" /* Policy_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDefault_ByPolicyId(input.policyId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query9.useMutation)({
    mutationKey: ["Legal.PoliciesWithNamespaceAdmin.Default_ByPolicyId" /* Default_ByPolicyId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PolicyVersionsAdmin.query.ts
var import_react_query10 = require("@tanstack/react-query");

// src/generated-admin/PolicyVersionsAdminApi.ts
var import_sdk20 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/PolicyVersionsAdmin$.ts
var import_sdk19 = require("@accelbyte/sdk");
var import_zod36 = require("zod");

// src/generated-definitions/CreatePolicyVersionResponse.ts
var import_zod32 = require("zod");
var CreatePolicyVersionResponse = import_zod32.z.object({
  basePolicyId: import_zod32.z.string().nullish(),
  createdAt: import_zod32.z.string().nullish(),
  description: import_zod32.z.string().nullish(),
  displayVersion: import_zod32.z.string().nullish(),
  id: import_zod32.z.string(),
  isCommitted: import_zod32.z.boolean().nullish(),
  updatedAt: import_zod32.z.string().nullish()
});

// src/generated-definitions/RetrievePolicyVersionResponseArray.ts
var import_zod34 = require("zod");

// src/generated-definitions/RetrievePolicyVersionResponse.ts
var import_zod33 = require("zod");
var RetrievePolicyVersionResponse = import_zod33.z.object({
  basePolicyId: import_zod33.z.string().nullish(),
  createdAt: import_zod33.z.string().nullish(),
  description: import_zod33.z.string().nullish(),
  displayVersion: import_zod33.z.string(),
  id: import_zod33.z.string(),
  isCommitted: import_zod33.z.boolean(),
  isInEffect: import_zod33.z.boolean(),
  localizedPolicyVersions: import_zod33.z.array(LocalizedPolicyVersionObject).nullish(),
  policyId: import_zod33.z.string().nullish(),
  publishedDate: import_zod33.z.string().nullish(),
  status: import_zod33.z.string().nullish(),
  updatedAt: import_zod33.z.string().nullish()
});

// src/generated-definitions/RetrievePolicyVersionResponseArray.ts
var RetrievePolicyVersionResponseArray = import_zod34.z.array(RetrievePolicyVersionResponse);

// src/generated-definitions/UpdatePolicyVersionResponse.ts
var import_zod35 = require("zod");
var UpdatePolicyVersionResponse = import_zod35.z.object({
  basePolicyId: import_zod35.z.string().nullish(),
  createdAt: import_zod35.z.string().nullish(),
  description: import_zod35.z.string().nullish(),
  displayVersion: import_zod35.z.string().nullish(),
  id: import_zod35.z.string(),
  isCommitted: import_zod35.z.boolean().nullish(),
  publishedDate: import_zod35.z.string().nullish(),
  status: import_zod35.z.string().nullish(),
  updatedAt: import_zod35.z.string().nullish()
});

// src/generated-admin/endpoints/PolicyVersionsAdmin$.ts
var PolicyVersionsAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
   */
  getVersions_ByPolicyId(policyId, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/policies/{policyId}/versions".replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyVersionResponseArray,
      "RetrievePolicyVersionResponseArray"
    );
  }
  /**
   * Create a version of a particular country-specific policy.
   */
  createVersion_ByPolicyId(policyId, data) {
    const params = {};
    const url = "/agreement/admin/policies/{policyId}/versions".replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CreatePolicyVersionResponse,
      "CreatePolicyVersionResponse"
    );
  }
  /**
   * Update a particular policy version.
   */
  patchPolicyVersion_ByPolicyVersionId(policyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/policies/versions/{policyVersionId}".replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UpdatePolicyVersionResponse,
      "UpdatePolicyVersionResponse"
    );
  }
  /**
   * Manually publish a version of a particular country-specific policy.
   */
  patchLatestPolicy_ByPolicyVersionId(policyVersionId, queryParams) {
    const params = { shouldNotify: true, ...queryParams };
    const url = "/agreement/admin/policies/versions/{policyVersionId}/latest".replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.patch(url, null, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod36.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/PolicyVersionsAdminApi.ts
function PolicyVersionsAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk20.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk20.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getVersions_ByPolicyId(policyId, queryParams) {
    const $ = new PolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getVersions_ByPolicyId(policyId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createVersion_ByPolicyId(policyId, data) {
    const $ = new PolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createVersion_ByPolicyId(policyId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchPolicyVersion_ByPolicyVersionId(policyVersionId, data) {
    const $ = new PolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchPolicyVersion_ByPolicyVersionId(policyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchLatestPolicy_ByPolicyVersionId(policyVersionId, queryParams) {
    const $ = new PolicyVersionsAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchLatestPolicy_ByPolicyVersionId(policyVersionId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
     */
    getVersions_ByPolicyId,
    /**
     * Create a version of a particular country-specific policy.
     */
    createVersion_ByPolicyId,
    /**
     * Update a particular policy version.
     */
    patchPolicyVersion_ByPolicyVersionId,
    /**
     * Manually publish a version of a particular country-specific policy.
     */
    patchLatestPolicy_ByPolicyVersionId
  };
}

// src/generated-admin/queries/PolicyVersionsAdmin.query.ts
var Key_PolicyVersionsAdmin = /* @__PURE__ */ ((Key_PolicyVersionsAdmin2) => {
  Key_PolicyVersionsAdmin2["Versions_ByPolicyId"] = "Legal.PolicyVersionsAdmin.Versions_ByPolicyId";
  Key_PolicyVersionsAdmin2["Version_ByPolicyId"] = "Legal.PolicyVersionsAdmin.Version_ByPolicyId";
  Key_PolicyVersionsAdmin2["PolicyVersion_ByPolicyVersionId"] = "Legal.PolicyVersionsAdmin.PolicyVersion_ByPolicyVersionId";
  Key_PolicyVersionsAdmin2["LatestPolicy_ByPolicyVersionId"] = "Legal.PolicyVersionsAdmin.LatestPolicy_ByPolicyVersionId";
  return Key_PolicyVersionsAdmin2;
})(Key_PolicyVersionsAdmin || {});
var usePolicyVersionsAdminApi_GetVersions_ByPolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PolicyVersionsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getVersions_ByPolicyId(input2.policyId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Legal.PolicyVersionsAdmin.Versions_ByPolicyId" /* Versions_ByPolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createVersion_ByPolicyId(input.policyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Legal.PolicyVersionsAdmin.Version_ByPolicyId" /* Version_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchPolicyVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Legal.PolicyVersionsAdmin.PolicyVersion_ByPolicyVersionId" /* PolicyVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchLatestPolicy_ByPolicyVersionId(input.policyVersionId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Legal.PolicyVersionsAdmin.LatestPolicy_ByPolicyVersionId" /* LatestPolicy_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PolicyVersionsWithNamespaceAdmin.query.ts
var import_react_query11 = require("@tanstack/react-query");

// src/generated-admin/PolicyVersionsWithNamespaceAdminApi.ts
var import_sdk22 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/PolicyVersionsWithNamespaceAdmin$.ts
var import_sdk21 = require("@accelbyte/sdk");
var import_zod37 = require("zod");
var PolicyVersionsWithNamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
   */
  getVersions_ByPolicyId(policyId, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/policies/{policyId}/versions".replace("{namespace}", this.namespace).replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk21.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyVersionResponseArray,
      "RetrievePolicyVersionResponseArray"
    );
  }
  /**
   * Create a version of a particular country-specific policy.
   */
  createVersion_ByPolicyId(policyId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/policies/{policyId}/versions".replace("{namespace}", this.namespace).replace("{policyId}", policyId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk21.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CreatePolicyVersionResponse,
      "CreatePolicyVersionResponse"
    );
  }
  /**
   * Update a particular policy version.
   */
  patchPolicyVersion_ByPolicyVersionId(policyVersionId, data) {
    const params = {};
    const url = "/agreement/admin/namespaces/{namespace}/policies/versions/{policyVersionId}".replace("{namespace}", this.namespace).replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk21.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UpdatePolicyVersionResponse,
      "UpdatePolicyVersionResponse"
    );
  }
  /**
   * Manually publish a version of a particular country-specific policy.
   */
  patchLatestPolicy_ByPolicyVersionId(policyVersionId, queryParams) {
    const params = { shouldNotify: true, ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/policies/versions/{policyVersionId}/latest".replace("{namespace}", this.namespace).replace("{policyVersionId}", policyVersionId);
    const resultPromise = this.axiosInstance.patch(url, null, { params });
    return import_sdk21.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod37.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/PolicyVersionsWithNamespaceAdminApi.ts
function PolicyVersionsWithNamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk22.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk22.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getVersions_ByPolicyId(policyId, queryParams) {
    const $ = new PolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getVersions_ByPolicyId(policyId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createVersion_ByPolicyId(policyId, data) {
    const $ = new PolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createVersion_ByPolicyId(policyId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchPolicyVersion_ByPolicyVersionId(policyVersionId, data) {
    const $ = new PolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchPolicyVersion_ByPolicyVersionId(policyVersionId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchLatestPolicy_ByPolicyVersionId(policyVersionId, queryParams) {
    const $ = new PolicyVersionsWithNamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchLatestPolicy_ByPolicyVersionId(policyVersionId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
     */
    getVersions_ByPolicyId,
    /**
     * Create a version of a particular country-specific policy.
     */
    createVersion_ByPolicyId,
    /**
     * Update a particular policy version.
     */
    patchPolicyVersion_ByPolicyVersionId,
    /**
     * Manually publish a version of a particular country-specific policy.
     */
    patchLatestPolicy_ByPolicyVersionId
  };
}

// src/generated-admin/queries/PolicyVersionsWithNamespaceAdmin.query.ts
var Key_PolicyVersionsWithNamespaceAdmin = /* @__PURE__ */ ((Key_PolicyVersionsWithNamespaceAdmin2) => {
  Key_PolicyVersionsWithNamespaceAdmin2["Versions_ByPolicyId"] = "Legal.PolicyVersionsWithNamespaceAdmin.Versions_ByPolicyId";
  Key_PolicyVersionsWithNamespaceAdmin2["Version_ByPolicyId"] = "Legal.PolicyVersionsWithNamespaceAdmin.Version_ByPolicyId";
  Key_PolicyVersionsWithNamespaceAdmin2["PolicyVersion_ByPolicyVersionId"] = "Legal.PolicyVersionsWithNamespaceAdmin.PolicyVersion_ByPolicyVersionId";
  Key_PolicyVersionsWithNamespaceAdmin2["LatestPolicy_ByPolicyVersionId"] = "Legal.PolicyVersionsWithNamespaceAdmin.LatestPolicy_ByPolicyVersionId";
  return Key_PolicyVersionsWithNamespaceAdmin2;
})(Key_PolicyVersionsWithNamespaceAdmin || {});
var usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getVersions_ByPolicyId(input2.policyId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query11.useQuery)({
    queryKey: ["Legal.PolicyVersionsWithNamespaceAdmin.Versions_ByPolicyId" /* Versions_ByPolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createVersion_ByPolicyId(input.policyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query11.useMutation)({
    mutationKey: ["Legal.PolicyVersionsWithNamespaceAdmin.Version_ByPolicyId" /* Version_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchPolicyVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query11.useMutation)({
    mutationKey: ["Legal.PolicyVersionsWithNamespaceAdmin.PolicyVersion_ByPolicyVersionId" /* PolicyVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchLatestPolicy_ByPolicyVersionId(input.policyVersionId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query11.useMutation)({
    mutationKey: ["Legal.PolicyVersionsWithNamespaceAdmin.LatestPolicy_ByPolicyVersionId" /* LatestPolicy_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/UserAgreementAdmin.query.ts
var import_react_query12 = require("@tanstack/react-query");

// src/generated-admin/UserAgreementAdminApi.ts
var import_sdk24 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/UserAgreementAdmin$.ts
var import_sdk23 = require("@accelbyte/sdk");

// src/generated-definitions/AcceptAgreementResponse.ts
var import_zod38 = require("zod");
var AcceptAgreementResponse = import_zod38.z.object({ comply: import_zod38.z.boolean(), proceed: import_zod38.z.boolean() });

// src/generated-admin/endpoints/UserAgreementAdmin$.ts
var UserAgreementAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement.
   */
  createAgreementPolicy_ByUserId(userId, data, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/users/{userId}/agreements/policies".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk23.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      AcceptAgreementResponse,
      "AcceptAgreementResponse"
    );
  }
};

// src/generated-admin/UserAgreementAdminApi.ts
function UserAgreementAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk24.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk24.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createAgreementPolicy_ByUserId(userId, data, queryParams) {
    const $ = new UserAgreementAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAgreementPolicy_ByUserId(userId, data, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement.
     */
    createAgreementPolicy_ByUserId
  };
}

// src/generated-admin/queries/UserAgreementAdmin.query.ts
var Key_UserAgreementAdmin = /* @__PURE__ */ ((Key_UserAgreementAdmin2) => {
  Key_UserAgreementAdmin2["AgreementPolicy_ByUserId"] = "Legal.UserAgreementAdmin.AgreementPolicy_ByUserId";
  return Key_UserAgreementAdmin2;
})(Key_UserAgreementAdmin || {});
var useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserAgreementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementPolicy_ByUserId(input.userId, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query12.useMutation)({
    mutationKey: ["Legal.UserAgreementAdmin.AgreementPolicy_ByUserId" /* AgreementPolicy_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/UserEligibilitiesAdmin.query.ts
var import_react_query13 = require("@tanstack/react-query");

// src/generated-admin/UserEligibilitiesAdminApi.ts
var import_sdk26 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/UserEligibilitiesAdmin$.ts
var import_sdk25 = require("@accelbyte/sdk");

// src/generated-definitions/RetrieveUserEligibilitiesIndirectResponse.ts
var import_zod39 = require("zod");
var RetrieveUserEligibilitiesIndirectResponse = import_zod39.z.object({ isComply: import_zod39.z.boolean() });

// src/generated-admin/endpoints/UserEligibilitiesAdmin$.ts
var UserEligibilitiesAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
   */
  getEligibilities_ByUserId(userId, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/namespaces/{namespace}/users/{userId}/eligibilities".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk25.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveUserEligibilitiesIndirectResponse,
      "RetrieveUserEligibilitiesIndirectResponse"
    );
  }
};

// src/generated-admin/UserEligibilitiesAdminApi.ts
function UserEligibilitiesAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk26.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk26.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getEligibilities_ByUserId(userId, queryParams) {
    const $ = new UserEligibilitiesAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getEligibilities_ByUserId(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
     */
    getEligibilities_ByUserId
  };
}

// src/generated-admin/queries/UserEligibilitiesAdmin.query.ts
var Key_UserEligibilitiesAdmin = /* @__PURE__ */ ((Key_UserEligibilitiesAdmin2) => {
  Key_UserEligibilitiesAdmin2["Eligibilities_ByUserId"] = "Legal.UserEligibilitiesAdmin.Eligibilities_ByUserId";
  return Key_UserEligibilitiesAdmin2;
})(Key_UserEligibilitiesAdmin || {});
var useUserEligibilitiesAdminApi_GetEligibilities_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserEligibilitiesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEligibilities_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query13.useQuery)({
    queryKey: ["Legal.UserEligibilitiesAdmin.Eligibilities_ByUserId" /* Eligibilities_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/UserInfoAdmin.query.ts
var import_react_query14 = require("@tanstack/react-query");

// src/generated-admin/UserInfoAdminApi.ts
var import_sdk28 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/UserInfoAdmin$.ts
var import_sdk27 = require("@accelbyte/sdk");
var import_zod42 = require("zod");

// src/generated-definitions/RetrieveUserInfoCacheStatusResponseArray.ts
var import_zod41 = require("zod");

// src/generated-definitions/RetrieveUserInfoCacheStatusResponse.ts
var import_zod40 = require("zod");
var RetrieveUserInfoCacheStatusResponse = import_zod40.z.object({ lastUpdatedAt: import_zod40.z.string(), namespace: import_zod40.z.string() });

// src/generated-definitions/RetrieveUserInfoCacheStatusResponseArray.ts
var RetrieveUserInfoCacheStatusResponseArray = import_zod41.z.array(RetrieveUserInfoCacheStatusResponse);

// src/generated-admin/endpoints/UserInfoAdmin$.ts
var UserInfoAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * @deprecated
   * Invalidate user info cache in agreement service.
   */
  deleteUserInfo(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/userInfo";
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk27.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod42.z.unknown(), "z.unknown()");
  }
  /**
   * Get user info cache last updated time per namespace.&lt;br&gt;The query parameter namespaces can be a list of namespace separated by comma.&lt;br&gt;If query parameter namespaces is empty, user info cache status for all available namespaces will be returned.
   */
  getUserInfo(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/userInfo";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk27.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveUserInfoCacheStatusResponseArray,
      "RetrieveUserInfoCacheStatusResponseArray"
    );
  }
  /**
   * @deprecated
   * Sync user info cache in agreement service with iam service.
   */
  updateUserInfo(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/admin/userInfo";
    const resultPromise = this.axiosInstance.put(url, null, { params });
    return import_sdk27.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod42.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/UserInfoAdminApi.ts
function UserInfoAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk28.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk28.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function deleteUserInfo(queryParams) {
    const $ = new UserInfoAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteUserInfo(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUserInfo(queryParams) {
    const $ = new UserInfoAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUserInfo(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateUserInfo(queryParams) {
    const $ = new UserInfoAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateUserInfo(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * @deprecated
     * Invalidate user info cache in agreement service.
     */
    deleteUserInfo,
    /**
     * Get user info cache last updated time per namespace.&lt;br&gt;The query parameter namespaces can be a list of namespace separated by comma.&lt;br&gt;If query parameter namespaces is empty, user info cache status for all available namespaces will be returned.
     */
    getUserInfo,
    /**
     * @deprecated
     * Sync user info cache in agreement service with iam service.
     */
    updateUserInfo
  };
}

// src/generated-admin/queries/UserInfoAdmin.query.ts
var Key_UserInfoAdmin = /* @__PURE__ */ ((Key_UserInfoAdmin2) => {
  Key_UserInfoAdmin2["UserInfo"] = "Legal.UserInfoAdmin.UserInfo";
  return Key_UserInfoAdmin2;
})(Key_UserInfoAdmin || {});
var useUserInfoAdminApi_DeleteUserInfoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserInfoAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUserInfo(
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query14.useMutation)({
    mutationKey: ["Legal.UserInfoAdmin.UserInfo" /* UserInfo */],
    mutationFn,
    ...options
  });
};
var useUserInfoAdminApi_GetUserInfo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserInfoAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUserInfo(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query14.useQuery)({
    queryKey: ["Legal.UserInfoAdmin.UserInfo" /* UserInfo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserInfoAdminApi_UpdateUserInfoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserInfoAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserInfo(
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query14.useMutation)({
    mutationKey: ["Legal.UserInfoAdmin.UserInfo" /* UserInfo */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Agreement.query.ts
var import_react_query15 = require("@tanstack/react-query");

// src/generated-public/AgreementApi.ts
var import_sdk30 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Agreement$.ts
var import_sdk29 = require("@accelbyte/sdk");
var import_zod43 = require("zod");
var Agreement$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve accepted Legal Agreements.
   */
  getAgreementsPolicies() {
    const params = {};
    const url = "/agreement/public/agreements/policies";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk29.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveAcceptedAgreementResponseArray,
      "RetrieveAcceptedAgreementResponseArray"
    );
  }
  /**
   * Accepts many legal policy versions all at once. Supply with localized version policy id to accept an agreement.
   */
  createAgreementPolicy(data) {
    const params = {};
    const url = "/agreement/public/agreements/policies";
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk29.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      AcceptAgreementResponse,
      "AcceptAgreementResponse"
    );
  }
  /**
   * @deprecated
   * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.
   */
  createAgreementPolicyUser_ByUserId(userId, data) {
    const params = {};
    const url = "/agreement/public/agreements/policies/users/{userId}".replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk29.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      AcceptAgreementResponse,
      "AcceptAgreementResponse"
    );
  }
  /**
   * Change marketing preference consent.
   */
  patchAgreementLocalizedPolicyVersionPreference(data) {
    const params = {};
    const url = "/agreement/public/agreements/localized-policy-versions/preferences";
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk29.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod43.z.unknown(), "z.unknown()");
  }
  /**
   * Accepts a legal policy version. Supply with localized version policy id to accept an agreement
   */
  createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/public/agreements/localized-policy-versions/{localizedPolicyVersionId}".replace(
      "{localizedPolicyVersionId}",
      localizedPolicyVersionId
    );
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return import_sdk29.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod43.z.unknown(), "z.unknown()");
  }
  /**
   * @deprecated
   * Accepts many legal policy versions all at once. Supply with localized version policy id, version policy id, policy id, userId, namespace, country code and client id to accept an agreement. This endpoint used by APIGateway during new user registration.
   */
  createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId(countryCode, clientId, userId, data) {
    const params = {};
    const url = "/agreement/public/agreements/policies/namespaces/{namespace}/countries/{countryCode}/clients/{clientId}/users/{userId}".replace("{namespace}", this.namespace).replace("{countryCode}", countryCode).replace("{clientId}", clientId).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk29.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      AcceptAgreementResponse,
      "AcceptAgreementResponse"
    );
  }
};

// src/generated-public/AgreementApi.ts
function AgreementApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk30.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk30.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getAgreementsPolicies() {
    const $ = new Agreement$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getAgreementsPolicies();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createAgreementPolicy(data) {
    const $ = new Agreement$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAgreementPolicy(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createAgreementPolicyUser_ByUserId(userId, data) {
    const $ = new Agreement$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAgreementPolicyUser_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchAgreementLocalizedPolicyVersionPreference(data) {
    const $ = new Agreement$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchAgreementLocalizedPolicyVersionPreference(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new Agreement$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId(countryCode, clientId, userId, data) {
    const $ = new Agreement$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId(countryCode, clientId, userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve accepted Legal Agreements.
     */
    getAgreementsPolicies,
    /**
     * Accepts many legal policy versions all at once. Supply with localized version policy id to accept an agreement.
     */
    createAgreementPolicy,
    /**
     * @deprecated
     * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.
     */
    createAgreementPolicyUser_ByUserId,
    /**
     * Change marketing preference consent.
     */
    patchAgreementLocalizedPolicyVersionPreference,
    /**
     * Accepts a legal policy version. Supply with localized version policy id to accept an agreement
     */
    createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
    /**
     * @deprecated
     * Accepts many legal policy versions all at once. Supply with localized version policy id, version policy id, policy id, userId, namespace, country code and client id to accept an agreement. This endpoint used by APIGateway during new user registration.
     */
    createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId
  };
}

// src/generated-public/queries/Agreement.query.ts
var Key_Agreement = /* @__PURE__ */ ((Key_Agreement2) => {
  Key_Agreement2["AgreementsPolicies"] = "Legal.Agreement.AgreementsPolicies";
  Key_Agreement2["AgreementPolicy"] = "Legal.Agreement.AgreementPolicy";
  Key_Agreement2["AgreementPolicyUser_ByUserId"] = "Legal.Agreement.AgreementPolicyUser_ByUserId";
  Key_Agreement2["AgreementLocalizedPolicyVersionPreference"] = "Legal.Agreement.AgreementLocalizedPolicyVersionPreference";
  Key_Agreement2["AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.Agreement.AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  Key_Agreement2["UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId"] = "Legal.Agreement.UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId";
  return Key_Agreement2;
})(Key_Agreement || {});
var useAgreementApi_GetAgreementsPolicies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAgreementsPolicies();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query15.useQuery)({
    queryKey: ["Legal.Agreement.AgreementsPolicies" /* AgreementsPolicies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementApi_CreateAgreementPolicyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createAgreementPolicy(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query15.useMutation)({
    mutationKey: ["Legal.Agreement.AgreementPolicy" /* AgreementPolicy */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementPolicyUser_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query15.useMutation)({
    mutationKey: ["Legal.Agreement.AgreementPolicyUser_ByUserId" /* AgreementPolicyUser_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchAgreementLocalizedPolicyVersionPreference(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query15.useMutation)({
    mutationKey: ["Legal.Agreement.AgreementLocalizedPolicyVersionPreference" /* AgreementLocalizedPolicyVersionPreference */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query15.useMutation)({
    mutationKey: ["Legal.Agreement.AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId(input.countryCode, input.clientId, input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query15.useMutation)({
    mutationKey: ["Legal.Agreement.UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId" /* UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Eligibilities.query.ts
var import_react_query16 = require("@tanstack/react-query");

// src/generated-public/EligibilitiesApi.ts
var import_sdk32 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Eligibilities$.ts
var import_sdk31 = require("@accelbyte/sdk");

// src/generated-definitions/RetrieveUserEligibilitiesResponseArray.ts
var import_zod46 = require("zod");

// src/generated-definitions/RetrieveUserEligibilitiesResponse.ts
var import_zod45 = require("zod");

// src/generated-definitions/PolicyVersionWithLocalizedVersionObject.ts
var import_zod44 = require("zod");
var PolicyVersionWithLocalizedVersionObject = import_zod44.z.object({
  createdAt: import_zod44.z.string().nullish(),
  description: import_zod44.z.string().nullish(),
  displayVersion: import_zod44.z.string(),
  id: import_zod44.z.string(),
  isCommitted: import_zod44.z.boolean(),
  isInEffect: import_zod44.z.boolean(),
  localizedPolicyVersions: import_zod44.z.array(LocalizedPolicyVersionObject).nullish(),
  publishedDate: import_zod44.z.string().nullish(),
  status: import_zod44.z.string().nullish(),
  updatedAt: import_zod44.z.string().nullish()
});

// src/generated-definitions/RetrieveUserEligibilitiesResponse.ts
var RetrieveUserEligibilitiesResponse = import_zod45.z.object({
  baseUrls: import_zod45.z.array(import_zod45.z.string()).nullish(),
  countryCode: import_zod45.z.string(),
  countryGroupCode: import_zod45.z.string().nullish(),
  description: import_zod45.z.string().nullish(),
  isAccepted: import_zod45.z.boolean(),
  isHiddenPublic: import_zod45.z.boolean().nullish(),
  isMandatory: import_zod45.z.boolean(),
  namespace: import_zod45.z.string(),
  policyId: import_zod45.z.string(),
  policyName: import_zod45.z.string(),
  policyType: import_zod45.z.string(),
  policyVersions: import_zod45.z.array(PolicyVersionWithLocalizedVersionObject).nullish(),
  readableId: import_zod45.z.string().nullish()
});

// src/generated-definitions/RetrieveUserEligibilitiesResponseArray.ts
var RetrieveUserEligibilitiesResponseArray = import_zod46.z.array(RetrieveUserEligibilitiesResponse);

// src/generated-public/endpoints/Eligibilities$.ts
var Eligibilities$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process supports cross-namespace checking, that means if the active policy already accepted by the same user in other namespace, then it will be considered as eligible.
   */
  getEligibility_ByNamespace() {
    const params = {};
    const url = "/agreement/public/eligibilities/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk31.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveUserEligibilitiesResponseArray,
      "RetrieveUserEligibilitiesResponseArray"
    );
  }
  /**
   * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
   */
  getUserEligibility_ByCountryCode_ByClientId_ByUserId(countryCode, clientId, userId) {
    const params = {};
    const url = "/agreement/public/eligibilities/namespaces/{namespace}/countries/{countryCode}/clients/{clientId}/users/{userId}".replace("{namespace}", this.namespace).replace("{countryCode}", countryCode).replace("{clientId}", clientId).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk31.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveUserEligibilitiesIndirectResponse,
      "RetrieveUserEligibilitiesIndirectResponse"
    );
  }
};

// src/generated-public/EligibilitiesApi.ts
function EligibilitiesApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk32.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk32.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getEligibility_ByNamespace() {
    const $ = new Eligibilities$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getEligibility_ByNamespace();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUserEligibility_ByCountryCode_ByClientId_ByUserId(countryCode, clientId, userId) {
    const $ = new Eligibilities$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUserEligibility_ByCountryCode_ByClientId_ByUserId(countryCode, clientId, userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process supports cross-namespace checking, that means if the active policy already accepted by the same user in other namespace, then it will be considered as eligible.
     */
    getEligibility_ByNamespace,
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
     */
    getUserEligibility_ByCountryCode_ByClientId_ByUserId
  };
}

// src/generated-public/queries/Eligibilities.query.ts
var Key_Eligibilities = /* @__PURE__ */ ((Key_Eligibilities2) => {
  Key_Eligibilities2["Eligibility_ByNamespace"] = "Legal.Eligibilities.Eligibility_ByNamespace";
  Key_Eligibilities2["UserEligibility_ByCountryCode_ByClientId_ByUserId"] = "Legal.Eligibilities.UserEligibility_ByCountryCode_ByClientId_ByUserId";
  return Key_Eligibilities2;
})(Key_Eligibilities || {});
var useEligibilitiesApi_GetEligibility_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EligibilitiesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEligibility_ByNamespace();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query16.useQuery)({
    queryKey: ["Legal.Eligibilities.Eligibility_ByNamespace" /* Eligibility_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EligibilitiesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUserEligibility_ByCountryCode_ByClientId_ByUserId(input2.countryCode, input2.clientId, input2.userId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query16.useQuery)({
    queryKey: ["Legal.Eligibilities.UserEligibility_ByCountryCode_ByClientId_ByUserId" /* UserEligibility_ByCountryCode_ByClientId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/LocalizedPolicyVersions.query.ts
var import_react_query17 = require("@tanstack/react-query");

// src/generated-public/LocalizedPolicyVersionsApi.ts
var import_sdk34 = require("@accelbyte/sdk");

// src/generated-public/endpoints/LocalizedPolicyVersions$.ts
var import_sdk33 = require("@accelbyte/sdk");

// src/generated-definitions/RetrieveLocalizedPolicyVersionPublicResponse.ts
var import_zod47 = require("zod");
var RetrieveLocalizedPolicyVersionPublicResponse = import_zod47.z.object({
  attachmentChecksum: import_zod47.z.string().nullish(),
  attachmentLocation: import_zod47.z.string().nullish(),
  attachmentVersionIdentifier: import_zod47.z.string().nullish(),
  basePolicyId: import_zod47.z.string().nullish(),
  baseUrls: import_zod47.z.array(import_zod47.z.string()).nullish(),
  contentType: import_zod47.z.string().nullish(),
  createdAt: import_zod47.z.string().nullish(),
  description: import_zod47.z.string().nullish(),
  id: import_zod47.z.string(),
  isHidden: import_zod47.z.boolean().nullish(),
  localeCode: import_zod47.z.string(),
  namespace: import_zod47.z.string(),
  policy: PolicyObject,
  policyVersion: PolicyVersionObject,
  tags: import_zod47.z.array(import_zod47.z.string()).nullish(),
  updatedAt: import_zod47.z.string().nullish()
});

// src/generated-public/endpoints/LocalizedPolicyVersions$.ts
var LocalizedPolicyVersions$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
   */
  getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/public/localized-policy-versions/{localizedPolicyVersionId}".replace(
      "{localizedPolicyVersionId}",
      localizedPolicyVersionId
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk33.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveLocalizedPolicyVersionPublicResponse,
      "RetrieveLocalizedPolicyVersionPublicResponse"
    );
  }
};

// src/generated-public/LocalizedPolicyVersionsApi.ts
function LocalizedPolicyVersionsApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk34.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk34.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new LocalizedPolicyVersions$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId
  };
}

// src/generated-public/queries/LocalizedPolicyVersions.query.ts
var Key_LocalizedPolicyVersions = /* @__PURE__ */ ((Key_LocalizedPolicyVersions2) => {
  Key_LocalizedPolicyVersions2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersions.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersions2;
})(Key_LocalizedPolicyVersions || {});
var useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query17.useQuery)({
    queryKey: ["Legal.LocalizedPolicyVersions.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/LocalizedPolicyVersionsWithNamespace.query.ts
var import_react_query18 = require("@tanstack/react-query");

// src/generated-public/LocalizedPolicyVersionsWithNamespaceApi.ts
var import_sdk36 = require("@accelbyte/sdk");

// src/generated-public/endpoints/LocalizedPolicyVersionsWithNamespace$.ts
var import_sdk35 = require("@accelbyte/sdk");
var LocalizedPolicyVersionsWithNamespace$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
   */
  getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const params = {};
    const url = "/agreement/public/namespaces/{namespace}/localized-policy-versions/{localizedPolicyVersionId}".replace("{namespace}", this.namespace).replace("{localizedPolicyVersionId}", localizedPolicyVersionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk35.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveLocalizedPolicyVersionPublicResponse,
      "RetrieveLocalizedPolicyVersionPublicResponse"
    );
  }
};

// src/generated-public/LocalizedPolicyVersionsWithNamespaceApi.ts
function LocalizedPolicyVersionsWithNamespaceApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk36.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk36.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId) {
    const $ = new LocalizedPolicyVersionsWithNamespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId
  };
}

// src/generated-public/queries/LocalizedPolicyVersionsWithNamespace.query.ts
var Key_LocalizedPolicyVersionsWithNamespace = /* @__PURE__ */ ((Key_LocalizedPolicyVersionsWithNamespace2) => {
  Key_LocalizedPolicyVersionsWithNamespace2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespace.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersionsWithNamespace2;
})(Key_LocalizedPolicyVersionsWithNamespace || {});
var useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsWithNamespaceApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query18.useQuery)({
    queryKey: ["Legal.LocalizedPolicyVersionsWithNamespace.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Policies.query.ts
var import_react_query19 = require("@tanstack/react-query");

// src/generated-public/PoliciesApi.ts
var import_sdk38 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Policies$.ts
var import_sdk37 = require("@accelbyte/sdk");
var import_zod50 = require("zod");

// src/generated-definitions/RetrievePolicyPublicResponseArray.ts
var import_zod49 = require("zod");

// src/generated-definitions/RetrievePolicyPublicResponse.ts
var import_zod48 = require("zod");
var RetrievePolicyPublicResponse = import_zod48.z.object({
  basePolicyId: import_zod48.z.string(),
  baseUrls: import_zod48.z.array(import_zod48.z.string()).nullish(),
  countryCode: import_zod48.z.string(),
  countryGroupCode: import_zod48.z.string().nullish(),
  createdAt: import_zod48.z.string().nullish(),
  description: import_zod48.z.string().nullish(),
  id: import_zod48.z.string(),
  isDefaultOpted: import_zod48.z.boolean(),
  isDefaultSelection: import_zod48.z.boolean(),
  isMandatory: import_zod48.z.boolean(),
  namespace: import_zod48.z.string(),
  policyName: import_zod48.z.string(),
  policyType: import_zod48.z.string(),
  policyVersions: import_zod48.z.array(PolicyVersionWithLocalizedVersionObject).nullish(),
  readableId: import_zod48.z.string().nullish(),
  shouldNotifyOnUpdate: import_zod48.z.boolean(),
  tags: import_zod48.z.array(import_zod48.z.string()).nullish(),
  updatedAt: import_zod48.z.string().nullish()
});

// src/generated-definitions/RetrievePolicyPublicResponseArray.ts
var RetrievePolicyPublicResponseArray = import_zod49.z.array(RetrievePolicyPublicResponse);

// src/generated-public/endpoints/Policies$.ts
var Policies$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Retrieve List of Countries that have Active and Visible Legal Policies.
   */
  getPoliciesCountriesList() {
    const params = {};
    const url = "/agreement/public/policies/countries/list";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk37.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod50.z.unknown(), "z.unknown()");
  }
  /**
   * Retrieve all active latest policies based on a namespace and country. The country will be read from user token.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
   */
  getPolicy_ByNamespace(queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/public/policies/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk37.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyPublicResponseArray,
      "RetrievePolicyPublicResponseArray"
    );
  }
  /**
   * Retrieve all active latest policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
   */
  getPolicyCountry_ByCountryCode(countryCode, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/public/policies/countries/{countryCode}".replace("{countryCode}", countryCode);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk37.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyPublicResponseArray,
      "RetrievePolicyPublicResponseArray"
    );
  }
  /**
   * Retrieve all active latest policies based on a namespace and country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;
   */
  getPolicyCountry_ByCountryCode_ByNS(countryCode, queryParams) {
    const params = { ...queryParams };
    const url = "/agreement/public/policies/namespaces/{namespace}/countries/{countryCode}".replace("{namespace}", this.namespace).replace("{countryCode}", countryCode);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk37.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrievePolicyPublicResponseArray,
      "RetrievePolicyPublicResponseArray"
    );
  }
};

// src/generated-public/PoliciesApi.ts
function PoliciesApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk38.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk38.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getPoliciesCountriesList() {
    const $ = new Policies$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPoliciesCountriesList();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPolicy_ByNamespace(queryParams) {
    const $ = new Policies$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPolicy_ByNamespace(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPolicyCountry_ByCountryCode(countryCode, queryParams) {
    const $ = new Policies$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPolicyCountry_ByCountryCode(countryCode, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPolicyCountry_ByCountryCode_ByNS(countryCode, queryParams) {
    const $ = new Policies$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPolicyCountry_ByCountryCode_ByNS(countryCode, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Retrieve List of Countries that have Active and Visible Legal Policies.
     */
    getPoliciesCountriesList,
    /**
     * Retrieve all active latest policies based on a namespace and country. The country will be read from user token.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicy_ByNamespace,
    /**
     * Retrieve all active latest policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicyCountry_ByCountryCode,
    /**
     * Retrieve all active latest policies based on a namespace and country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicyCountry_ByCountryCode_ByNS
  };
}

// src/generated-public/queries/Policies.query.ts
var Key_Policies = /* @__PURE__ */ ((Key_Policies2) => {
  Key_Policies2["PoliciesCountriesList"] = "Legal.Policies.PoliciesCountriesList";
  Key_Policies2["Policy_ByNamespace"] = "Legal.Policies.Policy_ByNamespace";
  Key_Policies2["PolicyCountry_ByCountryCode"] = "Legal.Policies.PolicyCountry_ByCountryCode";
  Key_Policies2["PolicyCountry_ByCountryCode_ByNS"] = "Legal.Policies.PolicyCountry_ByCountryCode_ByNS";
  return Key_Policies2;
})(Key_Policies || {});
var usePoliciesApi_GetPoliciesCountriesList = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPoliciesCountriesList();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query19.useQuery)({
    queryKey: ["Legal.Policies.PoliciesCountriesList" /* PoliciesCountriesList */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePoliciesApi_GetPolicy_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPolicy_ByNamespace(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query19.useQuery)({
    queryKey: ["Legal.Policies.Policy_ByNamespace" /* Policy_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePoliciesApi_GetPolicyCountry_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyCountry_ByCountryCode(input2.countryCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query19.useQuery)({
    queryKey: ["Legal.Policies.PolicyCountry_ByCountryCode" /* PolicyCountry_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyCountry_ByCountryCode_ByNS(input2.countryCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query19.useQuery)({
    queryKey: ["Legal.Policies.PolicyCountry_ByCountryCode_ByNS" /* PolicyCountry_ByCountryCode_ByNS */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Utility.query.ts
var import_react_query20 = require("@tanstack/react-query");

// src/generated-public/UtilityApi.ts
var import_sdk40 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Utility$.ts
var import_sdk39 = require("@accelbyte/sdk");

// src/generated-definitions/LegalReadinessStatusResponse.ts
var import_zod51 = require("zod");
var LegalReadinessStatusResponse = import_zod51.z.object({ isReady: import_zod51.z.boolean().nullish() });

// src/generated-public/endpoints/Utility$.ts
var Utility$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Readiness status defined as at least one legal basePolicy is present and having active basePolicy.
   */
  getReadiness() {
    const params = {};
    const url = "/agreement/public/readiness";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk39.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      LegalReadinessStatusResponse,
      "LegalReadinessStatusResponse"
    );
  }
};

// src/generated-public/UtilityApi.ts
function UtilityApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk40.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk40.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getReadiness() {
    const $ = new Utility$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getReadiness();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Readiness status defined as at least one legal basePolicy is present and having active basePolicy.
     */
    getReadiness
  };
}

// src/generated-public/queries/Utility.query.ts
var Key_Utility = /* @__PURE__ */ ((Key_Utility2) => {
  Key_Utility2["Readiness"] = "Legal.Utility.Readiness";
  return Key_Utility2;
})(Key_Utility || {});
var useUtilityApi_GetReadiness = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UtilityApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getReadiness();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query20.useQuery)({
    queryKey: ["Legal.Utility.Readiness" /* Readiness */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Key_Agreement,
  Key_AgreementAdmin,
  Key_AgreementWithNamespaceAdmin,
  Key_AnonymizationAdmin,
  Key_BaseLegalPoliciesAdmin,
  Key_BaseLegalPoliciesWithNamespaceAdmin,
  Key_Eligibilities,
  Key_LocalizedPolicyVersions,
  Key_LocalizedPolicyVersionsAdmin,
  Key_LocalizedPolicyVersionsWithNamespace,
  Key_LocalizedPolicyVersionsWithNamespaceAdmin,
  Key_Policies,
  Key_PoliciesAdmin,
  Key_PoliciesWithNamespaceAdmin,
  Key_PolicyVersionsAdmin,
  Key_PolicyVersionsWithNamespaceAdmin,
  Key_UserAgreementAdmin,
  Key_UserEligibilitiesAdmin,
  Key_UserInfoAdmin,
  Key_Utility,
  useAgreementAdminApi_GetAgreementPolicyUser_ByUserId,
  useAgreementAdminApi_GetAgreementsPolicyVersionsUsers,
  useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation,
  useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useAgreementApi_CreateAgreementPolicyMutation,
  useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation,
  useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation,
  useAgreementApi_GetAgreementsPolicies,
  useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation,
  useAgreementWithNamespaceAdminApi_CreateAgreementMutation,
  useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation,
  useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId,
  useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers,
  useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload,
  useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation,
  useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation,
  useBaseLegalPoliciesAdminApi_GetBasePolicies,
  useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId,
  useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode,
  useBaseLegalPoliciesAdminApi_GetPolicyTypes,
  useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation,
  useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes,
  useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation,
  useEligibilitiesApi_GetEligibility_ByNamespace,
  useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId,
  useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId,
  useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  usePoliciesAdminApi_GetPolicyCountry_ByCountryCode,
  usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation,
  usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation,
  usePoliciesApi_GetPoliciesCountriesList,
  usePoliciesApi_GetPolicyCountry_ByCountryCode,
  usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS,
  usePoliciesApi_GetPolicy_ByNamespace,
  usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation,
  usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation,
  usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation,
  usePolicyVersionsAdminApi_GetVersions_ByPolicyId,
  usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation,
  usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId,
  usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation,
  useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation,
  useUserEligibilitiesAdminApi_GetEligibilities_ByUserId,
  useUserInfoAdminApi_DeleteUserInfoMutation,
  useUserInfoAdminApi_GetUserInfo,
  useUserInfoAdminApi_UpdateUserInfoMutation,
  useUtilityApi_GetReadiness
});
