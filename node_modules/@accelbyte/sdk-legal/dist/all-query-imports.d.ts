import { AccelByteSDK, SdkSetConfigParam, ApiError } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseQueryOptions, UseQueryResult, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
import { P as PagedRetrieveUserAcceptedAgreementResponse, R as RetrieveAcceptedAgreementResponseArray, A as AcceptAgreementRequest, a as UserAgreementsResponseArray, U as UsersAgreementsRequest, D as DownloadExportedAgreementsInCsvResponse, I as InitiateExportAgreementsToCsvResponse, b as RetrievePolicyTypeResponseArray, c as RetrieveBasePolicyResponseArray, d as CreateBasePolicyResponse, C as CreateBasePolicyRequest, e as RetrieveBasePolicyResponse, g as UpdateBasePolicyResponse, f as UpdateBasePolicyRequest, h as RetrievePolicyResponse, i as CreateBasePolicyRequestV2, j as UpdateBasePolicyRequestV2, k as RetrieveLocalizedPolicyVersionResponse, m as UpdateLocalizedPolicyVersionResponse, l as UpdateLocalizedPolicyVersionRequest, n as RetrieveLocalizedPolicyVersionResponseArray, p as CreateLocalizedPolicyVersionResponse, o as CreateLocalizedPolicyVersionRequest, r as UploadLocalizedPolicyVersionAttachmentResponse, q as UploadPolicyVersionAttachmentRequest, s as UpdatePolicyRequest, t as RetrievePolicyResponseArray, u as RetrievePolicyVersionResponseArray, w as CreatePolicyVersionResponse, v as CreatePolicyVersionRequest, y as UpdatePolicyVersionResponse, x as UpdatePolicyVersionRequest, z as AcceptAgreementResponse, B as RetrieveUserEligibilitiesIndirectResponse, E as RetrieveUserInfoCacheStatusResponseArray, F as RetrieveUserEligibilitiesResponseArray, G as RetrieveLocalizedPolicyVersionPublicResponse, H as RetrievePolicyPublicResponseArray, L as LegalReadinessStatusResponse } from './RetrieveUserEligibilitiesResponseArray-CxhSaZvl.js';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_AgreementAdmin {
    AgreementsPolicyVersionsUsers = "Legal.AgreementAdmin.AgreementsPolicyVersionsUsers",
    AgreementPolicyUser_ByUserId = "Legal.AgreementAdmin.AgreementPolicyUser_ByUserId",
    AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId = "Legal.AgreementAdmin.AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId"
}
/**
 * This API will return users who has accepted a specific policy version.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementAdmin.AgreementsPolicyVersionsUsers, input]
 * }
 * ```
 */
declare const useAgreementAdminApi_GetAgreementsPolicyVersionsUsers: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        policyVersionId: string | null;
        keyword?: string | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<PagedRetrieveUserAcceptedAgreementResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PagedRetrieveUserAcceptedAgreementResponse>) => void) => UseQueryResult<PagedRetrieveUserAcceptedAgreementResponse, AxiosError<ApiError>>;
/**
 * This API will return all accepted Legal Agreements for specified user
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementAdmin.AgreementPolicyUser_ByUserId, input]
 * }
 * ```
 */
declare const useAgreementAdminApi_GetAgreementPolicyUser_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<RetrieveAcceptedAgreementResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveAcceptedAgreementResponseArray>) => void) => UseQueryResult<RetrieveAcceptedAgreementResponseArray, AxiosError<ApiError>>;
/**
 * This API will Update Preference Consent
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementAdmin.AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId, input]
 * }
 * ```
 */
declare const useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AcceptAgreementRequest[];
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AcceptAgreementRequest[];
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_AgreementWithNamespaceAdmin {
    Agreement = "Legal.AgreementWithNamespaceAdmin.Agreement",
    AgreementsPolicyVersionsUsers = "Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsers",
    AgreementPolicyUser_ByUserId = "Legal.AgreementWithNamespaceAdmin.AgreementPolicyUser_ByUserId",
    AgreementsPolicyVersionsUsersExportCsvDownload = "Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsersExportCsvDownload",
    AgreementPolicyVersionUserExportCsvInitiate = "Legal.AgreementWithNamespaceAdmin.AgreementPolicyVersionUserExportCsvInitiate"
}
/**
 * This API will return all accepted Legal Agreements for each user, including agreements of game users if publisher user has corresponding game account.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementWithNamespaceAdmin.Agreement, input]
 * }
 * ```
 */
declare const useAgreementWithNamespaceAdminApi_CreateAgreementMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UserAgreementsResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UsersAgreementsRequest;
}>, "mutationKey">, callback?: (data: UserAgreementsResponseArray) => void) => UseMutationResult<UserAgreementsResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UsersAgreementsRequest;
}>;
/**
 * This API will return all users who has accepted a specific policy version.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsers, input]
 * }
 * ```
 */
declare const useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        policyVersionId: string | null;
        convertGameUserId?: boolean | null;
        keyword?: string | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<PagedRetrieveUserAcceptedAgreementResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PagedRetrieveUserAcceptedAgreementResponse>) => void) => UseQueryResult<PagedRetrieveUserAcceptedAgreementResponse, AxiosError<ApiError>>;
/**
 * This API will return all accepted Legal Agreements for specified user.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementWithNamespaceAdmin.AgreementPolicyUser_ByUserId, input]
 * }
 * ```
 */
declare const useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        excludeOtherNamespacesPolicies?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<RetrieveAcceptedAgreementResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveAcceptedAgreementResponseArray>) => void) => UseQueryResult<RetrieveAcceptedAgreementResponseArray, AxiosError<ApiError>>;
/**
 * This API will check the status of export process.&lt;br&gt;If the export process has been completed, the response body will include the download url.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsersExportCsvDownload, input]
 * }
 * ```
 */
declare const useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        exportId: string | null;
    };
}, options?: Omit<UseQueryOptions<DownloadExportedAgreementsInCsvResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DownloadExportedAgreementsInCsvResponse>) => void) => UseQueryResult<DownloadExportedAgreementsInCsvResponse, AxiosError<ApiError>>;
/**
 * This API will initiate a worker to export list of users who has accepted a specific policy version into a CSV file.&lt;br&gt;To check the export state after initialize it, use `GET /admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download` API.&lt;br/&gt;&lt;br/&gt;This Initiate API is &lt;b&gt;not allow&lt;/b&gt; multiple export worker running for the same namespace, it will return 409 http error if so.&lt;br/&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AgreementWithNamespaceAdmin.AgreementPolicyVersionUserExportCsvInitiate, input]
 * }
 * ```
 */
declare const useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<InitiateExportAgreementsToCsvResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams: {
        policyVersionId: string | null;
        start: string | null;
        end?: string | null;
    };
}>, "mutationKey">, callback?: (data: InitiateExportAgreementsToCsvResponse) => void) => UseMutationResult<InitiateExportAgreementsToCsvResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams: {
        policyVersionId: string | null;
        start: string | null;
        end?: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_AnonymizationAdmin {
    AnonymizationAgreement_ByUserId = "Legal.AnonymizationAdmin.AnonymizationAgreement_ByUserId"
}
/**
 * This API will anonymize agreement record for specified user.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationAgreement_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_BaseLegalPoliciesAdmin {
    PolicyTypes = "Legal.BaseLegalPoliciesAdmin.PolicyTypes",
    BasePolicies = "Legal.BaseLegalPoliciesAdmin.BasePolicies",
    BasePolicy = "Legal.BaseLegalPoliciesAdmin.BasePolicy",
    BasePolicy_ByBasePolicyId = "Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId",
    Country_ByBasePolicyId_ByCountryCode = "Legal.BaseLegalPoliciesAdmin.Country_ByBasePolicyId_ByCountryCode"
}
/**
 * Retrieve all supported policy types.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesAdmin.PolicyTypes, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesAdminApi_GetPolicyTypes: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        limit: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyTypeResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyTypeResponseArray>) => void) => UseQueryResult<RetrievePolicyTypeResponseArray, AxiosError<ApiError>>;
/**
 * Retrieve all base policies.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesAdmin.BasePolicies, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesAdminApi_GetBasePolicies: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        visibleOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<RetrieveBasePolicyResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveBasePolicyResponseArray>) => void) => UseQueryResult<RetrieveBasePolicyResponseArray, AxiosError<ApiError>>;
/**
 * Create a legal policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesAdmin.BasePolicy, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateBasePolicyRequest;
}>, "mutationKey">, callback?: (data: CreateBasePolicyResponse) => void) => UseMutationResult<CreateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateBasePolicyRequest;
}>;
/**
 * Retrieve a base policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    basePolicyId: string;
}, options?: Omit<UseQueryOptions<RetrieveBasePolicyResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveBasePolicyResponse>) => void) => UseQueryResult<RetrieveBasePolicyResponse, AxiosError<ApiError>>;
/**
 * Update an existing base policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    basePolicyId: string;
    data: UpdateBasePolicyRequest;
}>, "mutationKey">, callback?: (data: UpdateBasePolicyResponse) => void) => UseMutationResult<UpdateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    basePolicyId: string;
    data: UpdateBasePolicyRequest;
}>;
/**
 * Retrieve a Base Legal Policy based on a Particular Country.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesAdmin.Country_ByBasePolicyId_ByCountryCode, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    basePolicyId: string;
    countryCode: string;
}, options?: Omit<UseQueryOptions<RetrievePolicyResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyResponse>) => void) => UseQueryResult<RetrievePolicyResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_BaseLegalPoliciesWithNamespaceAdmin {
    PolicyTypes = "Legal.BaseLegalPoliciesWithNamespaceAdmin.PolicyTypes",
    BasePolicies = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicies",
    BasePolicy = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy",
    BasePolicy_ByBasePolicyId = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId",
    Country_ByBasePolicyId_ByCountryCode = "Legal.BaseLegalPoliciesWithNamespaceAdmin.Country_ByBasePolicyId_ByCountryCode"
}
/**
 * Retrieve all supported policy types.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesWithNamespaceAdmin.PolicyTypes, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        limit: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyTypeResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyTypeResponseArray>) => void) => UseQueryResult<RetrievePolicyTypeResponseArray, AxiosError<ApiError>>;
/**
 * Retrieve all base policies in the namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesWithNamespaceAdmin.BasePolicies, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        visibleOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<RetrieveBasePolicyResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveBasePolicyResponseArray>) => void) => UseQueryResult<RetrieveBasePolicyResponseArray, AxiosError<ApiError>>;
/**
 * Create a legal policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesWithNamespaceAdmin.BasePolicy, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateBasePolicyRequestV2;
}>, "mutationKey">, callback?: (data: CreateBasePolicyResponse) => void) => UseMutationResult<CreateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateBasePolicyRequestV2;
}>;
/**
 * Retrieve a base policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    basePolicyId: string;
}, options?: Omit<UseQueryOptions<RetrieveBasePolicyResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveBasePolicyResponse>) => void) => UseQueryResult<RetrieveBasePolicyResponse, AxiosError<ApiError>>;
/**
 * Update an existing base policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    basePolicyId: string;
    data: UpdateBasePolicyRequestV2;
}>, "mutationKey">, callback?: (data: UpdateBasePolicyResponse) => void) => UseMutationResult<UpdateBasePolicyResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    basePolicyId: string;
    data: UpdateBasePolicyRequestV2;
}>;
/**
 * Retrieve a Base Legal Policy based on a Particular Country.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_BaseLegalPoliciesWithNamespaceAdmin.Country_ByBasePolicyId_ByCountryCode, input]
 * }
 * ```
 */
declare const useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    basePolicyId: string;
    countryCode: string;
}, options?: Omit<UseQueryOptions<RetrievePolicyResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyResponse>) => void) => UseQueryResult<RetrievePolicyResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_LocalizedPolicyVersionsAdmin {
    LocalizedPolicyVersion_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId",
    LocalizedPolicyVersionVersion_ByPolicyVersionId = "Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId",
    Default_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsAdmin.Default_ByLocalizedPolicyVersionId",
    Attachment_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsAdmin.Attachment_ByLocalizedPolicyVersionId"
}
/**
 * Retrieve a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}, options?: Omit<UseQueryOptions<RetrieveLocalizedPolicyVersionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveLocalizedPolicyVersionResponse>) => void) => UseQueryResult<RetrieveLocalizedPolicyVersionResponse, AxiosError<ApiError>>;
/**
 * Update a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UpdateLocalizedPolicyVersionRequest;
}>, "mutationKey">, callback?: (data: UpdateLocalizedPolicyVersionResponse) => void) => UseMutationResult<UpdateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UpdateLocalizedPolicyVersionRequest;
}>;
/**
 * Retrieve versions of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    policyVersionId: string;
}, options?: Omit<UseQueryOptions<RetrieveLocalizedPolicyVersionResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveLocalizedPolicyVersionResponseArray>) => void) => UseQueryResult<RetrieveLocalizedPolicyVersionResponseArray, AxiosError<ApiError>>;
/**
 * Create a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: CreateLocalizedPolicyVersionRequest;
}>, "mutationKey">, callback?: (data: CreateLocalizedPolicyVersionResponse) => void) => UseMutationResult<CreateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: CreateLocalizedPolicyVersionRequest;
}>;
/**
 * Update a localized version policy to be the default.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsAdmin.Default_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}>;
/**
 * Request presigned URL for upload attachment for a particular localized version of base policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsAdmin.Attachment_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadLocalizedPolicyVersionAttachmentResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UploadPolicyVersionAttachmentRequest;
}>, "mutationKey">, callback?: (data: UploadLocalizedPolicyVersionAttachmentResponse) => void) => UseMutationResult<UploadLocalizedPolicyVersionAttachmentResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UploadPolicyVersionAttachmentRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_LocalizedPolicyVersionsWithNamespaceAdmin {
    LocalizedPolicyVersion_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId",
    LocalizedPolicyVersionVersion_ByPolicyVersionId = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId",
    Default_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Default_ByLocalizedPolicyVersionId",
    Attachment_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Attachment_ByLocalizedPolicyVersionId"
}
/**
 * Retrieve a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}, options?: Omit<UseQueryOptions<RetrieveLocalizedPolicyVersionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveLocalizedPolicyVersionResponse>) => void) => UseQueryResult<RetrieveLocalizedPolicyVersionResponse, AxiosError<ApiError>>;
/**
 * Update a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UpdateLocalizedPolicyVersionRequest;
}>, "mutationKey">, callback?: (data: UpdateLocalizedPolicyVersionResponse) => void) => UseMutationResult<UpdateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UpdateLocalizedPolicyVersionRequest;
}>;
/**
 * Retrieve versions of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    policyVersionId: string;
}, options?: Omit<UseQueryOptions<RetrieveLocalizedPolicyVersionResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveLocalizedPolicyVersionResponseArray>) => void) => UseQueryResult<RetrieveLocalizedPolicyVersionResponseArray, AxiosError<ApiError>>;
/**
 * Create a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: CreateLocalizedPolicyVersionRequest;
}>, "mutationKey">, callback?: (data: CreateLocalizedPolicyVersionResponse) => void) => UseMutationResult<CreateLocalizedPolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: CreateLocalizedPolicyVersionRequest;
}>;
/**
 * Update a localized version policy to be the default.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespaceAdmin.Default_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}>;
/**
 * Request presigned URL for upload attachment for a particular localized version of base policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespaceAdmin.Attachment_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadLocalizedPolicyVersionAttachmentResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UploadPolicyVersionAttachmentRequest;
}>, "mutationKey">, callback?: (data: UploadLocalizedPolicyVersionAttachmentResponse) => void) => UseMutationResult<UploadLocalizedPolicyVersionAttachmentResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
    data: UploadPolicyVersionAttachmentRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PoliciesAdmin {
    Policy_ByPolicyId = "Legal.PoliciesAdmin.Policy_ByPolicyId",
    Default_ByPolicyId = "Legal.PoliciesAdmin.Default_ByPolicyId",
    PolicyCountry_ByCountryCode = "Legal.PoliciesAdmin.PolicyCountry_ByCountryCode"
}
/**
 * Update country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PoliciesAdmin.Policy_ByPolicyId, input]
 * }
 * ```
 */
declare const usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: UpdatePolicyRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: UpdatePolicyRequest;
}>;
/**
 * Update a policy to be the default.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PoliciesAdmin.Default_ByPolicyId, input]
 * }
 * ```
 */
declare const usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
}>;
/**
 * Retrieve all active policies based on a country.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PoliciesAdmin.PolicyCountry_ByCountryCode, input]
 * }
 * ```
 */
declare const usePoliciesAdminApi_GetPolicyCountry_ByCountryCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    countryCode: string;
}, options?: Omit<UseQueryOptions<RetrievePolicyResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyResponseArray>) => void) => UseQueryResult<RetrievePolicyResponseArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PoliciesWithNamespaceAdmin {
    Policy_ByPolicyId = "Legal.PoliciesWithNamespaceAdmin.Policy_ByPolicyId",
    Default_ByPolicyId = "Legal.PoliciesWithNamespaceAdmin.Default_ByPolicyId"
}
/**
 * Update country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PoliciesWithNamespaceAdmin.Policy_ByPolicyId, input]
 * }
 * ```
 */
declare const usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: UpdatePolicyRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: UpdatePolicyRequest;
}>;
/**
 * Update a policy to be the default.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PoliciesWithNamespaceAdmin.Default_ByPolicyId, input]
 * }
 * ```
 */
declare const usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PolicyVersionsAdmin {
    Versions_ByPolicyId = "Legal.PolicyVersionsAdmin.Versions_ByPolicyId",
    Version_ByPolicyId = "Legal.PolicyVersionsAdmin.Version_ByPolicyId",
    PolicyVersion_ByPolicyVersionId = "Legal.PolicyVersionsAdmin.PolicyVersion_ByPolicyVersionId",
    LatestPolicy_ByPolicyVersionId = "Legal.PolicyVersionsAdmin.LatestPolicy_ByPolicyVersionId"
}
/**
 * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsAdmin.Versions_ByPolicyId, input]
 * }
 * ```
 */
declare const usePolicyVersionsAdminApi_GetVersions_ByPolicyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    policyId: string;
    queryParams?: {
        versionId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyVersionResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyVersionResponseArray>) => void) => UseQueryResult<RetrievePolicyVersionResponseArray, AxiosError<ApiError>>;
/**
 * Create a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsAdmin.Version_ByPolicyId, input]
 * }
 * ```
 */
declare const usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: CreatePolicyVersionRequest;
}>, "mutationKey">, callback?: (data: CreatePolicyVersionResponse) => void) => UseMutationResult<CreatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: CreatePolicyVersionRequest;
}>;
/**
 * Update a particular policy version.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsAdmin.PolicyVersion_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: UpdatePolicyVersionRequest;
}>, "mutationKey">, callback?: (data: UpdatePolicyVersionResponse) => void) => UseMutationResult<UpdatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: UpdatePolicyVersionRequest;
}>;
/**
 * Manually publish a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsAdmin.LatestPolicy_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    queryParams?: {
        shouldNotify?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    queryParams?: {
        shouldNotify?: boolean | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PolicyVersionsWithNamespaceAdmin {
    Versions_ByPolicyId = "Legal.PolicyVersionsWithNamespaceAdmin.Versions_ByPolicyId",
    Version_ByPolicyId = "Legal.PolicyVersionsWithNamespaceAdmin.Version_ByPolicyId",
    PolicyVersion_ByPolicyVersionId = "Legal.PolicyVersionsWithNamespaceAdmin.PolicyVersion_ByPolicyVersionId",
    LatestPolicy_ByPolicyVersionId = "Legal.PolicyVersionsWithNamespaceAdmin.LatestPolicy_ByPolicyVersionId"
}
/**
 * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsWithNamespaceAdmin.Versions_ByPolicyId, input]
 * }
 * ```
 */
declare const usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    policyId: string;
    queryParams?: {
        versionId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyVersionResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyVersionResponseArray>) => void) => UseQueryResult<RetrievePolicyVersionResponseArray, AxiosError<ApiError>>;
/**
 * Create a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsWithNamespaceAdmin.Version_ByPolicyId, input]
 * }
 * ```
 */
declare const usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: CreatePolicyVersionRequest;
}>, "mutationKey">, callback?: (data: CreatePolicyVersionResponse) => void) => UseMutationResult<CreatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyId: string;
    data: CreatePolicyVersionRequest;
}>;
/**
 * Update a particular policy version.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsWithNamespaceAdmin.PolicyVersion_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: UpdatePolicyVersionRequest;
}>, "mutationKey">, callback?: (data: UpdatePolicyVersionResponse) => void) => UseMutationResult<UpdatePolicyVersionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    data: UpdatePolicyVersionRequest;
}>;
/**
 * Manually publish a version of a particular country-specific policy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PolicyVersionsWithNamespaceAdmin.LatestPolicy_ByPolicyVersionId, input]
 * }
 * ```
 */
declare const usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    queryParams?: {
        shouldNotify?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    policyVersionId: string;
    queryParams?: {
        shouldNotify?: boolean | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_UserAgreementAdmin {
    AgreementPolicy_ByUserId = "Legal.UserAgreementAdmin.AgreementPolicy_ByUserId"
}
/**
 * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_UserAgreementAdmin.AgreementPolicy_ByUserId, input]
 * }
 * ```
 */
declare const useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AcceptAgreementRequest[];
    queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    };
}>, "mutationKey">, callback?: (data: AcceptAgreementResponse) => void) => UseMutationResult<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AcceptAgreementRequest[];
    queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_UserEligibilitiesAdmin {
    Eligibilities_ByUserId = "Legal.UserEligibilitiesAdmin.Eligibilities_ByUserId"
}
/**
 * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_UserEligibilitiesAdmin.Eligibilities_ByUserId, input]
 * }
 * ```
 */
declare const useUserEligibilitiesAdminApi_GetEligibilities_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RetrieveUserEligibilitiesIndirectResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveUserEligibilitiesIndirectResponse>) => void) => UseQueryResult<RetrieveUserEligibilitiesIndirectResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_UserInfoAdmin {
    UserInfo = "Legal.UserInfoAdmin.UserInfo"
}
/**
 * @deprecated
 * Invalidate user info cache in agreement service.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_UserInfoAdmin.UserInfo, input]
 * }
 * ```
 */
declare const useUserInfoAdminApi_DeleteUserInfoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams?: {
        namespace?: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams?: {
        namespace?: string | null;
    };
}>;
/**
 * Get user info cache last updated time per namespace.&lt;br&gt;The query parameter namespaces can be a list of namespace separated by comma.&lt;br&gt;If query parameter namespaces is empty, user info cache status for all available namespaces will be returned.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_UserInfoAdmin.UserInfo, input]
 * }
 * ```
 */
declare const useUserInfoAdminApi_GetUserInfo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        namespaces?: string | null;
    };
}, options?: Omit<UseQueryOptions<RetrieveUserInfoCacheStatusResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveUserInfoCacheStatusResponseArray>) => void) => UseQueryResult<RetrieveUserInfoCacheStatusResponseArray, AxiosError<ApiError>>;
/**
 * @deprecated
 * Sync user info cache in agreement service with iam service.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_UserInfoAdmin.UserInfo, input]
 * }
 * ```
 */
declare const useUserInfoAdminApi_UpdateUserInfoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams: {
        namespace: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams: {
        namespace: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Agreement {
    AgreementsPolicies = "Legal.Agreement.AgreementsPolicies",
    AgreementPolicy = "Legal.Agreement.AgreementPolicy",
    AgreementPolicyUser_ByUserId = "Legal.Agreement.AgreementPolicyUser_ByUserId",
    AgreementLocalizedPolicyVersionPreference = "Legal.Agreement.AgreementLocalizedPolicyVersionPreference",
    AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId = "Legal.Agreement.AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId",
    UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId = "Legal.Agreement.UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId"
}
/**
 * Retrieve accepted Legal Agreements.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Agreement.AgreementsPolicies, input]
 * }
 * ```
 */
declare const useAgreementApi_GetAgreementsPolicies: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<RetrieveAcceptedAgreementResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveAcceptedAgreementResponseArray>) => void) => UseQueryResult<RetrieveAcceptedAgreementResponseArray, AxiosError<ApiError>>;
/**
 * Accepts many legal policy versions all at once. Supply with localized version policy id to accept an agreement.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Agreement.AgreementPolicy, input]
 * }
 * ```
 */
declare const useAgreementApi_CreateAgreementPolicyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AcceptAgreementRequest[];
}>, "mutationKey">, callback?: (data: AcceptAgreementResponse) => void) => UseMutationResult<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AcceptAgreementRequest[];
}>;
/**
 * @deprecated
 * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Agreement.AgreementPolicyUser_ByUserId, input]
 * }
 * ```
 */
declare const useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AcceptAgreementRequest[];
}>, "mutationKey">, callback?: (data: AcceptAgreementResponse) => void) => UseMutationResult<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AcceptAgreementRequest[];
}>;
/**
 * Change marketing preference consent.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Agreement.AgreementLocalizedPolicyVersionPreference, input]
 * }
 * ```
 */
declare const useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AcceptAgreementRequest[];
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AcceptAgreementRequest[];
}>;
/**
 * Accepts a legal policy version. Supply with localized version policy id to accept an agreement
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Agreement.AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}>;
/**
 * @deprecated
 * Accepts many legal policy versions all at once. Supply with localized version policy id, version policy id, policy id, userId, namespace, country code and client id to accept an agreement. This endpoint used by APIGateway during new user registration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Agreement.UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId, input]
 * }
 * ```
 */
declare const useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    countryCode: string;
    clientId: string;
    userId: string;
    data: AcceptAgreementRequest[];
}>, "mutationKey">, callback?: (data: AcceptAgreementResponse) => void) => UseMutationResult<AcceptAgreementResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    countryCode: string;
    clientId: string;
    userId: string;
    data: AcceptAgreementRequest[];
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Eligibilities {
    Eligibility_ByNamespace = "Legal.Eligibilities.Eligibility_ByNamespace",
    UserEligibility_ByCountryCode_ByClientId_ByUserId = "Legal.Eligibilities.UserEligibility_ByCountryCode_ByClientId_ByUserId"
}
/**
 * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process supports cross-namespace checking, that means if the active policy already accepted by the same user in other namespace, then it will be considered as eligible.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Eligibilities.Eligibility_ByNamespace, input]
 * }
 * ```
 */
declare const useEligibilitiesApi_GetEligibility_ByNamespace: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<RetrieveUserEligibilitiesResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveUserEligibilitiesResponseArray>) => void) => UseQueryResult<RetrieveUserEligibilitiesResponseArray, AxiosError<ApiError>>;
/**
 * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Eligibilities.UserEligibility_ByCountryCode_ByClientId_ByUserId, input]
 * }
 * ```
 */
declare const useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    countryCode: string;
    clientId: string;
    userId: string;
}, options?: Omit<UseQueryOptions<RetrieveUserEligibilitiesIndirectResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveUserEligibilitiesIndirectResponse>) => void) => UseQueryResult<RetrieveUserEligibilitiesIndirectResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_LocalizedPolicyVersions {
    LocalizedPolicyVersion_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersions.LocalizedPolicyVersion_ByLocalizedPolicyVersionId"
}
/**
 * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersions.LocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}, options?: Omit<UseQueryOptions<RetrieveLocalizedPolicyVersionPublicResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveLocalizedPolicyVersionPublicResponse>) => void) => UseQueryResult<RetrieveLocalizedPolicyVersionPublicResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_LocalizedPolicyVersionsWithNamespace {
    LocalizedPolicyVersion_ByLocalizedPolicyVersionId = "Legal.LocalizedPolicyVersionsWithNamespace.LocalizedPolicyVersion_ByLocalizedPolicyVersionId"
}
/**
 * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LocalizedPolicyVersionsWithNamespace.LocalizedPolicyVersion_ByLocalizedPolicyVersionId, input]
 * }
 * ```
 */
declare const useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    localizedPolicyVersionId: string;
}, options?: Omit<UseQueryOptions<RetrieveLocalizedPolicyVersionPublicResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrieveLocalizedPolicyVersionPublicResponse>) => void) => UseQueryResult<RetrieveLocalizedPolicyVersionPublicResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Policies {
    PoliciesCountriesList = "Legal.Policies.PoliciesCountriesList",
    Policy_ByNamespace = "Legal.Policies.Policy_ByNamespace",
    PolicyCountry_ByCountryCode = "Legal.Policies.PolicyCountry_ByCountryCode",
    PolicyCountry_ByCountryCode_ByNS = "Legal.Policies.PolicyCountry_ByCountryCode_ByNS"
}
/**
 * Retrieve List of Countries that have Active and Visible Legal Policies.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Policies.PoliciesCountriesList, input]
 * }
 * ```
 */
declare const usePoliciesApi_GetPoliciesCountriesList: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * Retrieve all active latest policies based on a namespace and country. The country will be read from user token.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Policies.Policy_ByNamespace, input]
 * }
 * ```
 */
declare const usePoliciesApi_GetPolicy_ByNamespace: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        alwaysIncludeDefault?: boolean | null;
        defaultOnEmpty?: boolean | null;
        policyType?: "LEGAL_DOCUMENT_TYPE" | "MARKETING_PREFERENCE_TYPE";
        tags?: string | null;
        visibleOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyPublicResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyPublicResponseArray>) => void) => UseQueryResult<RetrievePolicyPublicResponseArray, AxiosError<ApiError>>;
/**
 * Retrieve all active latest policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Policies.PolicyCountry_ByCountryCode, input]
 * }
 * ```
 */
declare const usePoliciesApi_GetPolicyCountry_ByCountryCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    countryCode: string;
    queryParams?: {
        defaultOnEmpty?: boolean | null;
        policyType?: "LEGAL_DOCUMENT_TYPE" | "MARKETING_PREFERENCE_TYPE";
        tags?: string | null;
        visibleOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyPublicResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyPublicResponseArray>) => void) => UseQueryResult<RetrievePolicyPublicResponseArray, AxiosError<ApiError>>;
/**
 * Retrieve all active latest policies based on a namespace and country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Policies.PolicyCountry_ByCountryCode_ByNS, input]
 * }
 * ```
 */
declare const usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    countryCode: string;
    queryParams?: {
        alwaysIncludeDefault?: boolean | null;
        defaultOnEmpty?: boolean | null;
        policyType?: "LEGAL_DOCUMENT_TYPE" | "MARKETING_PREFERENCE_TYPE";
        tags?: string | null;
        visibleOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<RetrievePolicyPublicResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RetrievePolicyPublicResponseArray>) => void) => UseQueryResult<RetrievePolicyPublicResponseArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Utility {
    Readiness = "Legal.Utility.Readiness"
}
/**
 * Readiness status defined as at least one legal basePolicy is present and having active basePolicy.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Utility.Readiness, input]
 * }
 * ```
 */
declare const useUtilityApi_GetReadiness: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<LegalReadinessStatusResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<LegalReadinessStatusResponse>) => void) => UseQueryResult<LegalReadinessStatusResponse, AxiosError<ApiError>>;

export { Key_Agreement, Key_AgreementAdmin, Key_AgreementWithNamespaceAdmin, Key_AnonymizationAdmin, Key_BaseLegalPoliciesAdmin, Key_BaseLegalPoliciesWithNamespaceAdmin, Key_Eligibilities, Key_LocalizedPolicyVersions, Key_LocalizedPolicyVersionsAdmin, Key_LocalizedPolicyVersionsWithNamespace, Key_LocalizedPolicyVersionsWithNamespaceAdmin, Key_Policies, Key_PoliciesAdmin, Key_PoliciesWithNamespaceAdmin, Key_PolicyVersionsAdmin, Key_PolicyVersionsWithNamespaceAdmin, Key_UserAgreementAdmin, Key_UserEligibilitiesAdmin, Key_UserInfoAdmin, Key_Utility, useAgreementAdminApi_GetAgreementPolicyUser_ByUserId, useAgreementAdminApi_GetAgreementsPolicyVersionsUsers, useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation, useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation, useAgreementApi_CreateAgreementPolicyMutation, useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation, useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation, useAgreementApi_GetAgreementsPolicies, useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation, useAgreementWithNamespaceAdminApi_CreateAgreementMutation, useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation, useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId, useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers, useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload, useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation, useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation, useBaseLegalPoliciesAdminApi_GetBasePolicies, useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId, useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode, useBaseLegalPoliciesAdminApi_GetPolicyTypes, useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation, useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation, useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies, useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId, useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode, useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes, useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation, useEligibilitiesApi_GetEligibility_ByNamespace, useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId, useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation, useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation, useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId, useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId, useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation, useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation, useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId, useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation, useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation, useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId, useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId, useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation, useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation, useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId, usePoliciesAdminApi_GetPolicyCountry_ByCountryCode, usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation, usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation, usePoliciesApi_GetPoliciesCountriesList, usePoliciesApi_GetPolicyCountry_ByCountryCode, usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS, usePoliciesApi_GetPolicy_ByNamespace, usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation, usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation, usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation, usePolicyVersionsAdminApi_GetVersions_ByPolicyId, usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation, usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation, usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation, usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId, usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation, usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation, useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation, useUserEligibilitiesAdminApi_GetEligibilities_ByUserId, useUserInfoAdminApi_DeleteUserInfoMutation, useUserInfoAdminApi_GetUserInfo, useUserInfoAdminApi_UpdateUserInfoMutation, useUtilityApi_GetReadiness };
