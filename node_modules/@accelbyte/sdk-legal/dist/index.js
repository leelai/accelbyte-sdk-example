import {
  AcceptAgreementResponse,
  Agreement$,
  AgreementAdmin$,
  AgreementAdminApi,
  AgreementApi,
  AgreementWithNamespaceAdmin$,
  AgreementWithNamespaceAdminApi,
  AnonymizationAdmin$,
  AnonymizationAdminApi,
  BaseLegalPoliciesAdmin$,
  BaseLegalPoliciesAdminApi,
  BaseLegalPoliciesWithNamespaceAdmin$,
  BaseLegalPoliciesWithNamespaceAdminApi,
  CreateBasePolicyResponse,
  CreateLocalizedPolicyVersionResponse,
  CreatePolicyVersionResponse,
  DownloadExportedAgreementsInCsvResponse,
  Eligibilities$,
  EligibilitiesApi,
  InitiateExportAgreementsToCsvResponse,
  LegalReadinessStatusResponse,
  LocalizedPolicyVersionObject,
  LocalizedPolicyVersions$,
  LocalizedPolicyVersionsAdmin$,
  LocalizedPolicyVersionsAdminApi,
  LocalizedPolicyVersionsApi,
  LocalizedPolicyVersionsWithNamespace$,
  LocalizedPolicyVersionsWithNamespaceAdmin$,
  LocalizedPolicyVersionsWithNamespaceAdminApi,
  LocalizedPolicyVersionsWithNamespaceApi,
  PagedRetrieveUserAcceptedAgreementResponse,
  Paging,
  Policies$,
  PoliciesAdmin$,
  PoliciesAdminApi,
  PoliciesApi,
  PoliciesWithNamespaceAdmin$,
  PoliciesWithNamespaceAdminApi,
  PolicyObject,
  PolicyVersionObject,
  PolicyVersionWithLocalizedVersionObject,
  PolicyVersionsAdmin$,
  PolicyVersionsAdminApi,
  PolicyVersionsWithNamespaceAdmin$,
  PolicyVersionsWithNamespaceAdminApi,
  RetrieveAcceptedAgreementResponse,
  RetrieveAcceptedAgreementResponseArray,
  RetrieveBasePolicyResponse,
  RetrieveBasePolicyResponseArray,
  RetrieveLocalizedPolicyVersionPublicResponse,
  RetrieveLocalizedPolicyVersionResponse,
  RetrieveLocalizedPolicyVersionResponseArray,
  RetrievePolicyPublicResponse,
  RetrievePolicyPublicResponseArray,
  RetrievePolicyResponse,
  RetrievePolicyResponseArray,
  RetrievePolicyTypeResponse,
  RetrievePolicyTypeResponseArray,
  RetrievePolicyVersionResponse,
  RetrievePolicyVersionResponseArray,
  RetrieveUserAcceptedAgreementResponse,
  RetrieveUserEligibilitiesIndirectResponse,
  RetrieveUserEligibilitiesResponse,
  RetrieveUserEligibilitiesResponseArray,
  RetrieveUserInfoCacheStatusResponse,
  RetrieveUserInfoCacheStatusResponseArray,
  UpdateBasePolicyResponse,
  UpdateLocalizedPolicyVersionResponse,
  UpdatePolicyVersionResponse,
  UploadLocalizedPolicyVersionAttachmentResponse,
  UserAgreementAdmin$,
  UserAgreementAdminApi,
  UserAgreementsResponse,
  UserAgreementsResponseArray,
  UserEligibilitiesAdmin$,
  UserEligibilitiesAdminApi,
  UserInfoAdmin$,
  UserInfoAdminApi,
  Utility$,
  UtilityApi
} from "./chunk-DZZDF5DF.js";

// src/generated-definitions/AcceptAgreementRequest.ts
import { z } from "zod";
var AcceptAgreementRequest = z.object({
  isAccepted: z.boolean(),
  isNeedToSendEventMarketing: z.boolean().nullish(),
  localizedPolicyVersionId: z.string(),
  policyId: z.string(),
  policyVersionId: z.string()
});

// src/generated-definitions/CreateBasePolicyRequest.ts
import { z as z2 } from "zod";
var CreateBasePolicyRequest = z2.object({
  affectedClientIds: z2.array(z2.string()).nullish(),
  affectedCountries: z2.array(z2.string()).nullish(),
  basePolicyName: z2.string().nullish(),
  description: z2.string().nullish(),
  isHidden: z2.boolean().nullish(),
  isHiddenPublic: z2.boolean().nullish(),
  namespace: z2.string().nullish(),
  tags: z2.array(z2.string()).nullish(),
  typeId: z2.string().nullish()
});

// src/generated-definitions/CreateBasePolicyRequestV2.ts
import { z as z3 } from "zod";
var CreateBasePolicyRequestV2 = z3.object({
  affectedClientIds: z3.array(z3.string()).nullish(),
  affectedCountries: z3.array(z3.string()).nullish(),
  basePolicyName: z3.string().nullish(),
  description: z3.string().nullish(),
  isHidden: z3.boolean().nullish(),
  isHiddenPublic: z3.boolean().nullish(),
  tags: z3.array(z3.string()).nullish(),
  typeId: z3.string().nullish()
});

// src/generated-definitions/CreateLocalizedPolicyVersionRequest.ts
import { z as z4 } from "zod";
var CreateLocalizedPolicyVersionRequest = z4.object({
  contentType: z4.string().nullish(),
  description: z4.string().nullish(),
  localeCode: z4.string().nullish()
});

// src/generated-definitions/CreatePolicyVersionRequest.ts
import { z as z5 } from "zod";
var CreatePolicyVersionRequest = z5.object({
  description: z5.string().nullish(),
  displayVersion: z5.string().nullish(),
  isCommitted: z5.boolean().nullish()
});

// src/generated-definitions/ErrorEntity.ts
import { z as z7 } from "zod";

// src/generated-definitions/Permission.ts
import { z as z6 } from "zod";
var Permission = z6.object({ action: z6.number().int().nullish(), resource: z6.string().nullish() });

// src/generated-definitions/ErrorEntity.ts
var ErrorEntity = z7.object({
  devStackTrace: z7.string().nullish(),
  errorCode: z7.number().int(),
  errorMessage: z7.string(),
  messageVariables: z7.record(z7.string()).nullish(),
  requiredPermission: Permission.nullish()
});

// src/generated-definitions/FieldValidationError.ts
import { z as z8 } from "zod";
var FieldValidationError = z8.object({
  errorCode: z8.string().nullish(),
  errorField: z8.string().nullish(),
  errorMessage: z8.string().nullish(),
  errorValue: z8.string().nullish(),
  messageVariables: z8.record(z8.string()).nullish()
});

// src/generated-definitions/UpdateBasePolicyRequest.ts
import { z as z9 } from "zod";
var UpdateBasePolicyRequest = z9.object({
  affectedClientIds: z9.array(z9.string()).nullish(),
  affectedCountries: z9.array(z9.string()).nullish(),
  basePolicyName: z9.string().nullish(),
  description: z9.string().nullish(),
  isHidden: z9.boolean().nullish(),
  isHiddenPublic: z9.boolean().nullish(),
  namespace: z9.string().nullish(),
  tags: z9.array(z9.string()).nullish()
});

// src/generated-definitions/UpdateBasePolicyRequestV2.ts
import { z as z10 } from "zod";
var UpdateBasePolicyRequestV2 = z10.object({
  affectedClientIds: z10.array(z10.string()).nullish(),
  affectedCountries: z10.array(z10.string()).nullish(),
  basePolicyName: z10.string().nullish(),
  description: z10.string().nullish(),
  isHidden: z10.boolean().nullish(),
  isHiddenPublic: z10.boolean().nullish(),
  tags: z10.array(z10.string()).nullish()
});

// src/generated-definitions/UpdateLocalizedPolicyVersionRequest.ts
import { z as z11 } from "zod";
var UpdateLocalizedPolicyVersionRequest = z11.object({
  attachmentChecksum: z11.string().nullish(),
  attachmentLocation: z11.string().nullish(),
  attachmentVersionIdentifier: z11.string().nullish(),
  contentType: z11.string().nullish(),
  description: z11.string().nullish()
});

// src/generated-definitions/UpdatePolicyRequest.ts
import { z as z12 } from "zod";
var UpdatePolicyRequest = z12.object({
  description: z12.string().nullish(),
  isDefaultOpted: z12.boolean(),
  isMandatory: z12.boolean(),
  policyName: z12.string(),
  readableId: z12.string().nullish(),
  shouldNotifyOnUpdate: z12.boolean()
});

// src/generated-definitions/UpdatePolicyVersionRequest.ts
import { z as z13 } from "zod";
var UpdatePolicyVersionRequest = z13.object({ description: z13.string(), displayVersion: z13.string(), isCommitted: z13.boolean() });

// src/generated-definitions/UploadPolicyVersionAttachmentRequest.ts
import { z as z14 } from "zod";
var UploadPolicyVersionAttachmentRequest = z14.object({ contentMD5: z14.string().nullish(), contentType: z14.string().nullish() });

// src/generated-definitions/UsersAgreementsRequest.ts
import { z as z15 } from "zod";
var UsersAgreementsRequest = z15.object({ currentPublishedOnly: z15.boolean().nullish(), userIds: z15.array(z15.string()) });

// src/generated-definitions/ValidationErrorEntity.ts
import { z as z16 } from "zod";
var ValidationErrorEntity = z16.object({
  errorCode: z16.number().int(),
  errorMessage: z16.string(),
  errors: z16.array(FieldValidationError).nullish()
});

// package.json
var name = "@accelbyte/sdk-legal";
var version = "6.0.0";
var author = "AccelByte Inc";

// src/Legal.ts
console.log(`${name}@${version}`);
var apis = {
  UserInfoAdminApi,
  BaseLegalPoliciesAdminApi,
  PoliciesAdminApi,
  PolicyVersionsAdminApi,
  AgreementAdminApi,
  AgreementWithNamespaceAdminApi,
  BaseLegalPoliciesWithNamespaceAdminApi,
  AnonymizationAdminApi,
  PoliciesWithNamespaceAdminApi,
  PolicyVersionsWithNamespaceAdminApi,
  UserEligibilitiesAdminApi,
  LocalizedPolicyVersionsAdminApi,
  UserAgreementAdminApi,
  LocalizedPolicyVersionsWithNamespaceAdminApi,
  UtilityApi,
  AgreementApi,
  PoliciesApi,
  EligibilitiesApi,
  LocalizedPolicyVersionsApi,
  LocalizedPolicyVersionsWithNamespaceApi,
  version: () => console.log({
    version,
    name,
    author
  })
};
var Legal = apis;

// src/custom/clients/LegalHelper.ts
import { UrlHelper } from "@accelbyte/sdk";
import DOMPurify from "dompurify";
import isURL from "validator/lib/isURL.js";
var _LegalHelper = class _LegalHelper {
  static convertPoliciesToDisplayedPolicies(policies, namespace) {
    const displayedPolicies = [];
    for (const policy of policies) {
      if (policy.namespace === namespace && policy.policyVersions?.length) {
        const policyVersion = policy.policyVersions[0];
        if (policyVersion.localizedPolicyVersions?.length) {
          const localizedPolicyVersion = policyVersion.localizedPolicyVersions.find((localization) => localization.isDefaultSelection);
          if (localizedPolicyVersion) {
            displayedPolicies.push({
              policyName: policy.policyName,
              policyId: policy.id,
              policyVersionId: policyVersion.id,
              localizedPolicyVersionId: localizedPolicyVersion.id,
              isMandatory: policy.isMandatory,
              description: policy.description,
              policyType: policy.policyType
            });
          }
        }
      }
    }
    return displayedPolicies;
  }
  static createLegalURL({ legalBaseUrl, policyId, languageId }) {
    if (!legalBaseUrl) return `${languageId ? `/${languageId}` : ""}/legal${policyId ? `/${policyId}` : ""}`;
    if (isURL(legalBaseUrl)) {
      const { origin, pathname } = new URL(legalBaseUrl);
      const legalUrl = UrlHelper.combineURLPaths(origin, languageId || "", pathname);
      return UrlHelper.combineURLPaths(legalUrl, policyId || "");
    }
    return UrlHelper.combinePaths(legalBaseUrl, policyId || "");
  }
  static getAcceptedPolicies(eligibilities) {
    const acceptedPolicies = [];
    for (const legalEligibility of eligibilities) {
      if (legalEligibility.policyVersions) {
        for (const policyVersion of legalEligibility.policyVersions) {
          if (policyVersion.localizedPolicyVersions) {
            for (const localizedPolicyVersion of policyVersion.localizedPolicyVersions) {
              acceptedPolicies.push({
                policyId: legalEligibility.policyId,
                policyVersionId: policyVersion.id,
                localizedPolicyVersionId: localizedPolicyVersion.id,
                isAccepted: true
              });
            }
          }
        }
      }
    }
    return acceptedPolicies;
  }
};
_LegalHelper.getUnsignedPolicies = (userEligibilities) => {
  const legals = [];
  for (const legal of userEligibilities) {
    const policyVersions = _LegalHelper.getDefaultLocalizedPolicy(legal);
    if (!legal.isAccepted && legal.isMandatory && policyVersions.length > 0) {
      legals.push({ ...legal, policyVersions });
    }
  }
  return legals;
};
_LegalHelper.currentUserIsBlockedByLegal = (eligibilities) => {
  return eligibilities ? eligibilities.length > 0 : false;
};
_LegalHelper.getDefaultLocalizedPolicy = (legalEligibility) => {
  const lastVersions = legalEligibility.policyVersions?.slice(0, 1) || [];
  let localizedPolicyVersions = lastVersions[0].localizedPolicyVersions || [];
  localizedPolicyVersions = localizedPolicyVersions.filter((item) => item.isDefaultSelection);
  if (localizedPolicyVersions.length === 0) return [];
  lastVersions[0].localizedPolicyVersions = localizedPolicyVersions;
  return lastVersions;
};
_LegalHelper.sanitizeHTML = (document) => {
  const domPurifyOption = {
    WHOLE_DOCUMENT: true,
    ADD_TAGS: ["head", "meta", "link"],
    ADD_ATTR: ["content", "property", "http-equiv", "charset", "target"]
  };
  const sanitizedHTML = DOMPurify.sanitize(document, domPurifyOption);
  return sanitizedHTML;
};
var LegalHelper = _LegalHelper;

// src/custom/models/Legal.ts
import { z as z17 } from "zod";
var DisplayedPolicy = z17.object({
  policyName: z17.string(),
  policyId: z17.string(),
  policyVersionId: z17.string(),
  localizedPolicyVersionId: z17.string(),
  isMandatory: z17.boolean(),
  description: z17.string().nullish(),
  policyType: z17.string().optional()
});
var LegalPolicyType = {
  LEGAL_DOCUMENT: "Legal Document",
  MARKETING_PREFERENCE: "Marketing Preference"
};
export {
  AcceptAgreementRequest,
  AcceptAgreementResponse,
  Agreement$,
  AgreementAdmin$,
  AgreementAdminApi,
  AgreementApi,
  AgreementWithNamespaceAdmin$,
  AgreementWithNamespaceAdminApi,
  AnonymizationAdmin$,
  AnonymizationAdminApi,
  BaseLegalPoliciesAdmin$,
  BaseLegalPoliciesAdminApi,
  BaseLegalPoliciesWithNamespaceAdmin$,
  BaseLegalPoliciesWithNamespaceAdminApi,
  CreateBasePolicyRequest,
  CreateBasePolicyRequestV2,
  CreateBasePolicyResponse,
  CreateLocalizedPolicyVersionRequest,
  CreateLocalizedPolicyVersionResponse,
  CreatePolicyVersionRequest,
  CreatePolicyVersionResponse,
  DisplayedPolicy,
  DownloadExportedAgreementsInCsvResponse,
  Eligibilities$,
  EligibilitiesApi,
  ErrorEntity,
  FieldValidationError,
  InitiateExportAgreementsToCsvResponse,
  Legal,
  LegalHelper,
  LegalPolicyType,
  LegalReadinessStatusResponse,
  LocalizedPolicyVersionObject,
  LocalizedPolicyVersions$,
  LocalizedPolicyVersionsAdmin$,
  LocalizedPolicyVersionsAdminApi,
  LocalizedPolicyVersionsApi,
  LocalizedPolicyVersionsWithNamespace$,
  LocalizedPolicyVersionsWithNamespaceAdmin$,
  LocalizedPolicyVersionsWithNamespaceAdminApi,
  LocalizedPolicyVersionsWithNamespaceApi,
  PagedRetrieveUserAcceptedAgreementResponse,
  Paging,
  Permission,
  Policies$,
  PoliciesAdmin$,
  PoliciesAdminApi,
  PoliciesApi,
  PoliciesWithNamespaceAdmin$,
  PoliciesWithNamespaceAdminApi,
  PolicyObject,
  PolicyVersionObject,
  PolicyVersionWithLocalizedVersionObject,
  PolicyVersionsAdmin$,
  PolicyVersionsAdminApi,
  PolicyVersionsWithNamespaceAdmin$,
  PolicyVersionsWithNamespaceAdminApi,
  RetrieveAcceptedAgreementResponse,
  RetrieveAcceptedAgreementResponseArray,
  RetrieveBasePolicyResponse,
  RetrieveBasePolicyResponseArray,
  RetrieveLocalizedPolicyVersionPublicResponse,
  RetrieveLocalizedPolicyVersionResponse,
  RetrieveLocalizedPolicyVersionResponseArray,
  RetrievePolicyPublicResponse,
  RetrievePolicyPublicResponseArray,
  RetrievePolicyResponse,
  RetrievePolicyResponseArray,
  RetrievePolicyTypeResponse,
  RetrievePolicyTypeResponseArray,
  RetrievePolicyVersionResponse,
  RetrievePolicyVersionResponseArray,
  RetrieveUserAcceptedAgreementResponse,
  RetrieveUserEligibilitiesIndirectResponse,
  RetrieveUserEligibilitiesResponse,
  RetrieveUserEligibilitiesResponseArray,
  RetrieveUserInfoCacheStatusResponse,
  RetrieveUserInfoCacheStatusResponseArray,
  UpdateBasePolicyRequest,
  UpdateBasePolicyRequestV2,
  UpdateBasePolicyResponse,
  UpdateLocalizedPolicyVersionRequest,
  UpdateLocalizedPolicyVersionResponse,
  UpdatePolicyRequest,
  UpdatePolicyVersionRequest,
  UpdatePolicyVersionResponse,
  UploadLocalizedPolicyVersionAttachmentResponse,
  UploadPolicyVersionAttachmentRequest,
  UserAgreementAdmin$,
  UserAgreementAdminApi,
  UserAgreementsResponse,
  UserAgreementsResponseArray,
  UserEligibilitiesAdmin$,
  UserEligibilitiesAdminApi,
  UserInfoAdmin$,
  UserInfoAdminApi,
  UsersAgreementsRequest,
  Utility$,
  UtilityApi,
  ValidationErrorEntity
};
