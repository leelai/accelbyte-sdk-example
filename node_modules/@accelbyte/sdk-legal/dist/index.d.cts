import { AccelByteSDK, SdkSetConfigParam, Response } from '@accelbyte/sdk';
import { AxiosResponse, AxiosInstance } from 'axios';
import { P as PagedRetrieveUserAcceptedAgreementResponse, R as RetrieveAcceptedAgreementResponseArray, A as AcceptAgreementRequest, U as UsersAgreementsRequest, a as UserAgreementsResponseArray, D as DownloadExportedAgreementsInCsvResponse, I as InitiateExportAgreementsToCsvResponse, b as RetrievePolicyTypeResponseArray, c as RetrieveBasePolicyResponseArray, C as CreateBasePolicyRequest, d as CreateBasePolicyResponse, e as RetrieveBasePolicyResponse, f as UpdateBasePolicyRequest, g as UpdateBasePolicyResponse, h as RetrievePolicyResponse, i as CreateBasePolicyRequestV2, j as UpdateBasePolicyRequestV2, k as RetrieveLocalizedPolicyVersionResponse, l as UpdateLocalizedPolicyVersionRequest, m as UpdateLocalizedPolicyVersionResponse, n as RetrieveLocalizedPolicyVersionResponseArray, o as CreateLocalizedPolicyVersionRequest, p as CreateLocalizedPolicyVersionResponse, q as UploadPolicyVersionAttachmentRequest, r as UploadLocalizedPolicyVersionAttachmentResponse, s as UpdatePolicyRequest, t as RetrievePolicyResponseArray, u as RetrievePolicyVersionResponseArray, v as CreatePolicyVersionRequest, w as CreatePolicyVersionResponse, x as UpdatePolicyVersionRequest, y as UpdatePolicyVersionResponse, z as AcceptAgreementResponse, B as RetrieveUserEligibilitiesIndirectResponse, E as RetrieveUserInfoCacheStatusResponseArray, F as RetrieveUserEligibilitiesResponseArray, G as RetrieveLocalizedPolicyVersionPublicResponse, H as RetrievePolicyPublicResponseArray, L as LegalReadinessStatusResponse } from './RetrieveUserEligibilitiesResponseArray-CxhSaZvl.cjs';
import { z } from 'zod';
import { AcceptedPoliciesRequest } from '@accelbyte/sdk-iam';

/**
 * AUTO GENERATED
 */

declare function AgreementAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API will return users who has accepted a specific policy version.
     */
    getAgreementsPolicyVersionsUsers: (queryParams: {
        policyVersionId: string | null;
        keyword?: string | null;
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<PagedRetrieveUserAcceptedAgreementResponse>>;
    /**
     * This API will return all accepted Legal Agreements for specified user
     */
    getAgreementPolicyUser_ByUserId: (userId: string) => Promise<AxiosResponse<RetrieveAcceptedAgreementResponseArray>>;
    /**
     * This API will Update Preference Consent
     */
    patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId: (userId: string, data: AcceptAgreementRequest[]) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function AgreementWithNamespaceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API will return all accepted Legal Agreements for each user, including agreements of game users if publisher user has corresponding game account.
     */
    createAgreement: (data: UsersAgreementsRequest) => Promise<AxiosResponse<UserAgreementsResponseArray>>;
    /**
     * This API will return all users who has accepted a specific policy version.
     */
    getAgreementsPolicyVersionsUsers: (queryParams: {
        policyVersionId: string | null;
        convertGameUserId?: boolean | null;
        keyword?: string | null;
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<PagedRetrieveUserAcceptedAgreementResponse>>;
    /**
     * This API will return all accepted Legal Agreements for specified user.
     */
    getAgreementPolicyUser_ByUserId: (userId: string, queryParams?: {
        excludeOtherNamespacesPolicies?: boolean | null;
    }) => Promise<AxiosResponse<RetrieveAcceptedAgreementResponseArray>>;
    /**
     * This API will check the status of export process.&lt;br&gt;If the export process has been completed, the response body will include the download url.
     */
    getAgreementsPolicyVersionsUsersExportCsvDownload: (queryParams: {
        exportId: string | null;
    }) => Promise<AxiosResponse<DownloadExportedAgreementsInCsvResponse>>;
    /**
     * This API will initiate a worker to export list of users who has accepted a specific policy version into a CSV file.&lt;br&gt;To check the export state after initialize it, use `GET /admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download` API.&lt;br/&gt;&lt;br/&gt;This Initiate API is &lt;b&gt;not allow&lt;/b&gt; multiple export worker running for the same namespace, it will return 409 http error if so.&lt;br/&gt;
     */
    createAgreementPolicyVersionUserExportCsvInitiate: (queryParams: {
        policyVersionId: string | null;
        start: string | null;
        end?: string | null;
    }) => Promise<AxiosResponse<InitiateExportAgreementsToCsvResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function AnonymizationAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API will anonymize agreement record for specified user.
     */
    deleteAnonymizationAgreement_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function BaseLegalPoliciesAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve all supported policy types.
     */
    getPolicyTypes: (queryParams: {
        limit: number;
        offset?: number;
    }) => Promise<AxiosResponse<RetrievePolicyTypeResponseArray>>;
    /**
     * Retrieve all base policies.
     */
    getBasePolicies: (queryParams?: {
        visibleOnly?: boolean | null;
    }) => Promise<AxiosResponse<RetrieveBasePolicyResponseArray>>;
    /**
     * Create a legal policy.
     */
    createBasePolicy: (data: CreateBasePolicyRequest) => Promise<AxiosResponse<CreateBasePolicyResponse>>;
    /**
     * Retrieve a base policy.
     */
    getBasePolicy_ByBasePolicyId: (basePolicyId: string) => Promise<AxiosResponse<RetrieveBasePolicyResponse>>;
    /**
     * Update an existing base policy.
     */
    patchBasePolicy_ByBasePolicyId: (basePolicyId: string, data: UpdateBasePolicyRequest) => Promise<AxiosResponse<UpdateBasePolicyResponse>>;
    /**
     * Retrieve a Base Legal Policy based on a Particular Country.
     */
    getCountry_ByBasePolicyId_ByCountryCode: (basePolicyId: string, countryCode: string) => Promise<AxiosResponse<RetrievePolicyResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function BaseLegalPoliciesWithNamespaceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve all supported policy types.
     */
    getPolicyTypes: (queryParams: {
        limit: number;
        offset?: number;
    }) => Promise<AxiosResponse<RetrievePolicyTypeResponseArray>>;
    /**
     * Retrieve all base policies in the namespace.
     */
    getBasePolicies: (queryParams?: {
        visibleOnly?: boolean | null;
    }) => Promise<AxiosResponse<RetrieveBasePolicyResponseArray>>;
    /**
     * Create a legal policy.
     */
    createBasePolicy: (data: CreateBasePolicyRequestV2) => Promise<AxiosResponse<CreateBasePolicyResponse>>;
    /**
     * Retrieve a base policy.
     */
    getBasePolicy_ByBasePolicyId: (basePolicyId: string) => Promise<AxiosResponse<RetrieveBasePolicyResponse>>;
    /**
     * Update an existing base policy.
     */
    patchBasePolicy_ByBasePolicyId: (basePolicyId: string, data: UpdateBasePolicyRequestV2) => Promise<AxiosResponse<UpdateBasePolicyResponse>>;
    /**
     * Retrieve a Base Legal Policy based on a Particular Country.
     */
    getCountry_ByBasePolicyId_ByCountryCode: (basePolicyId: string, countryCode: string) => Promise<AxiosResponse<RetrievePolicyResponse>>;
};

/**
 * AUTO GENERATED
 */

declare class AgreementAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API will return users who has accepted a specific policy version.
     */
    getAgreementsPolicyVersionsUsers(queryParams: {
        policyVersionId: string | null;
        keyword?: string | null;
        limit?: number;
        offset?: number;
    }): Promise<Response<PagedRetrieveUserAcceptedAgreementResponse>>;
    /**
     * This API will return all accepted Legal Agreements for specified user
     */
    getAgreementPolicyUser_ByUserId(userId: string): Promise<Response<RetrieveAcceptedAgreementResponseArray>>;
    /**
     * This API will Update Preference Consent
     */
    patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId(userId: string, data: AcceptAgreementRequest[]): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class AgreementWithNamespaceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API will return all accepted Legal Agreements for each user, including agreements of game users if publisher user has corresponding game account.
     */
    createAgreement(data: UsersAgreementsRequest): Promise<Response<UserAgreementsResponseArray>>;
    /**
     * This API will return all users who has accepted a specific policy version.
     */
    getAgreementsPolicyVersionsUsers(queryParams: {
        policyVersionId: string | null;
        convertGameUserId?: boolean | null;
        keyword?: string | null;
        limit?: number;
        offset?: number;
    }): Promise<Response<PagedRetrieveUserAcceptedAgreementResponse>>;
    /**
     * This API will return all accepted Legal Agreements for specified user.
     */
    getAgreementPolicyUser_ByUserId(userId: string, queryParams?: {
        excludeOtherNamespacesPolicies?: boolean | null;
    }): Promise<Response<RetrieveAcceptedAgreementResponseArray>>;
    /**
     * This API will check the status of export process.&lt;br&gt;If the export process has been completed, the response body will include the download url.
     */
    getAgreementsPolicyVersionsUsersExportCsvDownload(queryParams: {
        exportId: string | null;
    }): Promise<Response<DownloadExportedAgreementsInCsvResponse>>;
    /**
     * This API will initiate a worker to export list of users who has accepted a specific policy version into a CSV file.&lt;br&gt;To check the export state after initialize it, use `GET /admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download` API.&lt;br/&gt;&lt;br/&gt;This Initiate API is &lt;b&gt;not allow&lt;/b&gt; multiple export worker running for the same namespace, it will return 409 http error if so.&lt;br/&gt;
     */
    createAgreementPolicyVersionUserExportCsvInitiate(queryParams: {
        policyVersionId: string | null;
        start: string | null;
        end?: string | null;
    }): Promise<Response<InitiateExportAgreementsToCsvResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class AnonymizationAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API will anonymize agreement record for specified user.
     */
    deleteAnonymizationAgreement_ByUserId(userId: string): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class BaseLegalPoliciesAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve all supported policy types.
     */
    getPolicyTypes(queryParams: {
        limit: number;
        offset?: number;
    }): Promise<Response<RetrievePolicyTypeResponseArray>>;
    /**
     * Retrieve all base policies.
     */
    getBasePolicies(queryParams?: {
        visibleOnly?: boolean | null;
    }): Promise<Response<RetrieveBasePolicyResponseArray>>;
    /**
     * Create a legal policy.
     */
    createBasePolicy(data: CreateBasePolicyRequest): Promise<Response<CreateBasePolicyResponse>>;
    /**
     * Retrieve a base policy.
     */
    getBasePolicy_ByBasePolicyId(basePolicyId: string): Promise<Response<RetrieveBasePolicyResponse>>;
    /**
     * Update an existing base policy.
     */
    patchBasePolicy_ByBasePolicyId(basePolicyId: string, data: UpdateBasePolicyRequest): Promise<Response<UpdateBasePolicyResponse>>;
    /**
     * Retrieve a Base Legal Policy based on a Particular Country.
     */
    getCountry_ByBasePolicyId_ByCountryCode(basePolicyId: string, countryCode: string): Promise<Response<RetrievePolicyResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class BaseLegalPoliciesWithNamespaceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve all supported policy types.
     */
    getPolicyTypes(queryParams: {
        limit: number;
        offset?: number;
    }): Promise<Response<RetrievePolicyTypeResponseArray>>;
    /**
     * Retrieve all base policies in the namespace.
     */
    getBasePolicies(queryParams?: {
        visibleOnly?: boolean | null;
    }): Promise<Response<RetrieveBasePolicyResponseArray>>;
    /**
     * Create a legal policy.
     */
    createBasePolicy(data: CreateBasePolicyRequestV2): Promise<Response<CreateBasePolicyResponse>>;
    /**
     * Retrieve a base policy.
     */
    getBasePolicy_ByBasePolicyId(basePolicyId: string): Promise<Response<RetrieveBasePolicyResponse>>;
    /**
     * Update an existing base policy.
     */
    patchBasePolicy_ByBasePolicyId(basePolicyId: string, data: UpdateBasePolicyRequestV2): Promise<Response<UpdateBasePolicyResponse>>;
    /**
     * Retrieve a Base Legal Policy based on a Particular Country.
     */
    getCountry_ByBasePolicyId_ByCountryCode(basePolicyId: string, countryCode: string): Promise<Response<RetrievePolicyResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class LocalizedPolicyVersionsAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve a version of a particular country-specific policy.
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<RetrieveLocalizedPolicyVersionResponse>>;
    /**
     * Update a version of a particular country-specific policy.
     */
    updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string, data: UpdateLocalizedPolicyVersionRequest): Promise<Response<UpdateLocalizedPolicyVersionResponse>>;
    /**
     * Retrieve versions of a particular country-specific policy.
     */
    getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId: string): Promise<Response<RetrieveLocalizedPolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId: string, data: CreateLocalizedPolicyVersionRequest): Promise<Response<CreateLocalizedPolicyVersionResponse>>;
    /**
     * Update a localized version policy to be the default.
     */
    patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<unknown>>;
    /**
     * Request presigned URL for upload attachment for a particular localized version of base policy.
     */
    createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string, data: UploadPolicyVersionAttachmentRequest): Promise<Response<UploadLocalizedPolicyVersionAttachmentResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class LocalizedPolicyVersionsWithNamespaceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve a version of a particular country-specific policy.
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<RetrieveLocalizedPolicyVersionResponse>>;
    /**
     * Update a version of a particular country-specific policy.
     */
    updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string, data: UpdateLocalizedPolicyVersionRequest): Promise<Response<UpdateLocalizedPolicyVersionResponse>>;
    /**
     * Retrieve versions of a particular country-specific policy.
     */
    getLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId: string): Promise<Response<RetrieveLocalizedPolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createLocalizedPolicyVersionVersion_ByPolicyVersionId(policyVersionId: string, data: CreateLocalizedPolicyVersionRequest): Promise<Response<CreateLocalizedPolicyVersionResponse>>;
    /**
     * Update a localized version policy to be the default.
     */
    patchDefault_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<unknown>>;
    /**
     * Request presigned URL for upload attachment for a particular localized version of base policy.
     */
    createAttachment_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string, data: UploadPolicyVersionAttachmentRequest): Promise<Response<UploadLocalizedPolicyVersionAttachmentResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class PoliciesAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Update country-specific policy.
     */
    patchPolicy_ByPolicyId(policyId: string, data: UpdatePolicyRequest): Promise<Response<unknown>>;
    /**
     * Update a policy to be the default.
     */
    patchDefault_ByPolicyId(policyId: string): Promise<Response<unknown>>;
    /**
     * Retrieve all active policies based on a country.
     */
    getPolicyCountry_ByCountryCode(countryCode: string): Promise<Response<RetrievePolicyResponseArray>>;
}

/**
 * AUTO GENERATED
 */

declare class PoliciesWithNamespaceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Update country-specific policy.
     */
    patchPolicy_ByPolicyId(policyId: string, data: UpdatePolicyRequest): Promise<Response<unknown>>;
    /**
     * Update a policy to be the default.
     */
    patchDefault_ByPolicyId(policyId: string): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class PolicyVersionsAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
     */
    getVersions_ByPolicyId(policyId: string, queryParams?: {
        versionId?: string | null;
    }): Promise<Response<RetrievePolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createVersion_ByPolicyId(policyId: string, data: CreatePolicyVersionRequest): Promise<Response<CreatePolicyVersionResponse>>;
    /**
     * Update a particular policy version.
     */
    patchPolicyVersion_ByPolicyVersionId(policyVersionId: string, data: UpdatePolicyVersionRequest): Promise<Response<UpdatePolicyVersionResponse>>;
    /**
     * Manually publish a version of a particular country-specific policy.
     */
    patchLatestPolicy_ByPolicyVersionId(policyVersionId: string, queryParams?: {
        shouldNotify?: boolean | null;
    }): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class PolicyVersionsWithNamespaceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
     */
    getVersions_ByPolicyId(policyId: string, queryParams?: {
        versionId?: string | null;
    }): Promise<Response<RetrievePolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createVersion_ByPolicyId(policyId: string, data: CreatePolicyVersionRequest): Promise<Response<CreatePolicyVersionResponse>>;
    /**
     * Update a particular policy version.
     */
    patchPolicyVersion_ByPolicyVersionId(policyVersionId: string, data: UpdatePolicyVersionRequest): Promise<Response<UpdatePolicyVersionResponse>>;
    /**
     * Manually publish a version of a particular country-specific policy.
     */
    patchLatestPolicy_ByPolicyVersionId(policyVersionId: string, queryParams?: {
        shouldNotify?: boolean | null;
    }): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class UserAgreementAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement.
     */
    createAgreementPolicy_ByUserId(userId: string, data: AcceptAgreementRequest[], queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    }): Promise<Response<AcceptAgreementResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class UserEligibilitiesAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
     */
    getEligibilities_ByUserId(userId: string, queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    }): Promise<Response<RetrieveUserEligibilitiesIndirectResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class UserInfoAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * @deprecated
     * Invalidate user info cache in agreement service.
     */
    deleteUserInfo(queryParams?: {
        namespace?: string | null;
    }): Promise<Response<unknown>>;
    /**
     * Get user info cache last updated time per namespace.&lt;br&gt;The query parameter namespaces can be a list of namespace separated by comma.&lt;br&gt;If query parameter namespaces is empty, user info cache status for all available namespaces will be returned.
     */
    getUserInfo(queryParams?: {
        namespaces?: string | null;
    }): Promise<Response<RetrieveUserInfoCacheStatusResponseArray>>;
    /**
     * @deprecated
     * Sync user info cache in agreement service with iam service.
     */
    updateUserInfo(queryParams: {
        namespace: string | null;
    }): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare function LocalizedPolicyVersionsAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve a version of a particular country-specific policy.
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<RetrieveLocalizedPolicyVersionResponse>>;
    /**
     * Update a version of a particular country-specific policy.
     */
    updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string, data: UpdateLocalizedPolicyVersionRequest) => Promise<AxiosResponse<UpdateLocalizedPolicyVersionResponse>>;
    /**
     * Retrieve versions of a particular country-specific policy.
     */
    getLocalizedPolicyVersionVersion_ByPolicyVersionId: (policyVersionId: string) => Promise<AxiosResponse<RetrieveLocalizedPolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createLocalizedPolicyVersionVersion_ByPolicyVersionId: (policyVersionId: string, data: CreateLocalizedPolicyVersionRequest) => Promise<AxiosResponse<CreateLocalizedPolicyVersionResponse>>;
    /**
     * Update a localized version policy to be the default.
     */
    patchDefault_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Request presigned URL for upload attachment for a particular localized version of base policy.
     */
    createAttachment_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string, data: UploadPolicyVersionAttachmentRequest) => Promise<AxiosResponse<UploadLocalizedPolicyVersionAttachmentResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function LocalizedPolicyVersionsWithNamespaceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve a version of a particular country-specific policy.
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<RetrieveLocalizedPolicyVersionResponse>>;
    /**
     * Update a version of a particular country-specific policy.
     */
    updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string, data: UpdateLocalizedPolicyVersionRequest) => Promise<AxiosResponse<UpdateLocalizedPolicyVersionResponse>>;
    /**
     * Retrieve versions of a particular country-specific policy.
     */
    getLocalizedPolicyVersionVersion_ByPolicyVersionId: (policyVersionId: string) => Promise<AxiosResponse<RetrieveLocalizedPolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createLocalizedPolicyVersionVersion_ByPolicyVersionId: (policyVersionId: string, data: CreateLocalizedPolicyVersionRequest) => Promise<AxiosResponse<CreateLocalizedPolicyVersionResponse>>;
    /**
     * Update a localized version policy to be the default.
     */
    patchDefault_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Request presigned URL for upload attachment for a particular localized version of base policy.
     */
    createAttachment_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string, data: UploadPolicyVersionAttachmentRequest) => Promise<AxiosResponse<UploadLocalizedPolicyVersionAttachmentResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function PoliciesAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Update country-specific policy.
     */
    patchPolicy_ByPolicyId: (policyId: string, data: UpdatePolicyRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Update a policy to be the default.
     */
    patchDefault_ByPolicyId: (policyId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Retrieve all active policies based on a country.
     */
    getPolicyCountry_ByCountryCode: (countryCode: string) => Promise<AxiosResponse<RetrievePolicyResponseArray>>;
};

/**
 * AUTO GENERATED
 */

declare function PoliciesWithNamespaceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Update country-specific policy.
     */
    patchPolicy_ByPolicyId: (policyId: string, data: UpdatePolicyRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Update a policy to be the default.
     */
    patchDefault_ByPolicyId: (policyId: string) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function PolicyVersionsAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
     */
    getVersions_ByPolicyId: (policyId: string, queryParams?: {
        versionId?: string | null;
    }) => Promise<AxiosResponse<RetrievePolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createVersion_ByPolicyId: (policyId: string, data: CreatePolicyVersionRequest) => Promise<AxiosResponse<CreatePolicyVersionResponse>>;
    /**
     * Update a particular policy version.
     */
    patchPolicyVersion_ByPolicyVersionId: (policyVersionId: string, data: UpdatePolicyVersionRequest) => Promise<AxiosResponse<UpdatePolicyVersionResponse>>;
    /**
     * Manually publish a version of a particular country-specific policy.
     */
    patchLatestPolicy_ByPolicyVersionId: (policyVersionId: string, queryParams?: {
        shouldNotify?: boolean | null;
    }) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function PolicyVersionsWithNamespaceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.
     */
    getVersions_ByPolicyId: (policyId: string, queryParams?: {
        versionId?: string | null;
    }) => Promise<AxiosResponse<RetrievePolicyVersionResponseArray>>;
    /**
     * Create a version of a particular country-specific policy.
     */
    createVersion_ByPolicyId: (policyId: string, data: CreatePolicyVersionRequest) => Promise<AxiosResponse<CreatePolicyVersionResponse>>;
    /**
     * Update a particular policy version.
     */
    patchPolicyVersion_ByPolicyVersionId: (policyVersionId: string, data: UpdatePolicyVersionRequest) => Promise<AxiosResponse<UpdatePolicyVersionResponse>>;
    /**
     * Manually publish a version of a particular country-specific policy.
     */
    patchLatestPolicy_ByPolicyVersionId: (policyVersionId: string, queryParams?: {
        shouldNotify?: boolean | null;
    }) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function UserAgreementAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement.
     */
    createAgreementPolicy_ByUserId: (userId: string, data: AcceptAgreementRequest[], queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    }) => Promise<AxiosResponse<AcceptAgreementResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function UserEligibilitiesAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
     */
    getEligibilities_ByUserId: (userId: string, queryParams: {
        clientId: string | null;
        countryCode: string | null;
        publisherUserId?: string | null;
    }) => Promise<AxiosResponse<RetrieveUserEligibilitiesIndirectResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function UserInfoAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * @deprecated
     * Invalidate user info cache in agreement service.
     */
    deleteUserInfo: (queryParams?: {
        namespace?: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * Get user info cache last updated time per namespace.&lt;br&gt;The query parameter namespaces can be a list of namespace separated by comma.&lt;br&gt;If query parameter namespaces is empty, user info cache status for all available namespaces will be returned.
     */
    getUserInfo: (queryParams?: {
        namespaces?: string | null;
    }) => Promise<AxiosResponse<RetrieveUserInfoCacheStatusResponseArray>>;
    /**
     * @deprecated
     * Sync user info cache in agreement service with iam service.
     */
    updateUserInfo: (queryParams: {
        namespace: string | null;
    }) => Promise<AxiosResponse<unknown>>;
};

declare const ErrorEntity: z.ZodObject<{
    devStackTrace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    requiredPermission: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        resource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    }, {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
    devStackTrace?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    requiredPermission?: {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    } | null | undefined;
}, {
    errorCode: number;
    errorMessage: string;
    devStackTrace?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    requiredPermission?: {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    } | null | undefined;
}>;
interface ErrorEntity extends z.TypeOf<typeof ErrorEntity> {
}

declare const FieldValidationError: z.ZodObject<{
    errorCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    errorCode?: string | null | undefined;
    errorMessage?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    errorField?: string | null | undefined;
    errorValue?: string | null | undefined;
}, {
    errorCode?: string | null | undefined;
    errorMessage?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    errorField?: string | null | undefined;
    errorValue?: string | null | undefined;
}>;
interface FieldValidationError extends z.TypeOf<typeof FieldValidationError> {
}

declare const LocalizedPolicyVersionObject: z.ZodObject<{
    attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    isDefaultSelection: z.ZodBoolean;
    localeCode: z.ZodString;
    publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    isDefaultSelection: boolean;
    localeCode: string;
    status?: string | null | undefined;
    attachmentChecksum?: string | null | undefined;
    attachmentLocation?: string | null | undefined;
    attachmentVersionIdentifier?: string | null | undefined;
    contentType?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
}, {
    id: string;
    isDefaultSelection: boolean;
    localeCode: string;
    status?: string | null | undefined;
    attachmentChecksum?: string | null | undefined;
    attachmentLocation?: string | null | undefined;
    attachmentVersionIdentifier?: string | null | undefined;
    contentType?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
}>;
interface LocalizedPolicyVersionObject extends z.TypeOf<typeof LocalizedPolicyVersionObject> {
}

declare const Paging: z.ZodObject<{
    next: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    previous: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    next?: string | null | undefined;
    previous?: string | null | undefined;
}, {
    next?: string | null | undefined;
    previous?: string | null | undefined;
}>;
interface Paging extends z.TypeOf<typeof Paging> {
}

declare const Permission: z.ZodObject<{
    action: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    resource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    action?: number | null | undefined;
    resource?: string | null | undefined;
}, {
    action?: number | null | undefined;
    resource?: string | null | undefined;
}>;
interface Permission extends z.TypeOf<typeof Permission> {
}

declare const PolicyObject: z.ZodObject<{
    countryCode: z.ZodString;
    countryGroupCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    isDefaultOpted: z.ZodBoolean;
    isDefaultSelection: z.ZodBoolean;
    isMandatory: z.ZodBoolean;
    policyName: z.ZodString;
    readableId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    shouldNotifyOnUpdate: z.ZodBoolean;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    isDefaultSelection: boolean;
    policyName: string;
    countryCode: string;
    isDefaultOpted: boolean;
    isMandatory: boolean;
    shouldNotifyOnUpdate: boolean;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
    countryGroupCode?: string | null | undefined;
    readableId?: string | null | undefined;
}, {
    id: string;
    isDefaultSelection: boolean;
    policyName: string;
    countryCode: string;
    isDefaultOpted: boolean;
    isMandatory: boolean;
    shouldNotifyOnUpdate: boolean;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
    countryGroupCode?: string | null | undefined;
    readableId?: string | null | undefined;
}>;
interface PolicyObject extends z.TypeOf<typeof PolicyObject> {
}

declare const PolicyVersionObject: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayVersion: z.ZodString;
    id: z.ZodString;
    isCommitted: z.ZodBoolean;
    isInEffect: z.ZodBoolean;
    publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    displayVersion: string;
    isCommitted: boolean;
    isInEffect: boolean;
    status?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
}, {
    id: string;
    displayVersion: string;
    isCommitted: boolean;
    isInEffect: boolean;
    status?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
}>;
interface PolicyVersionObject extends z.TypeOf<typeof PolicyVersionObject> {
}

declare const PolicyVersionWithLocalizedVersionObject: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayVersion: z.ZodString;
    id: z.ZodString;
    isCommitted: z.ZodBoolean;
    isInEffect: z.ZodBoolean;
    localizedPolicyVersions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        isDefaultSelection: z.ZodBoolean;
        localeCode: z.ZodString;
        publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }>, "many">>>;
    publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    displayVersion: string;
    isCommitted: boolean;
    isInEffect: boolean;
    status?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
    localizedPolicyVersions?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }[] | null | undefined;
}, {
    id: string;
    displayVersion: string;
    isCommitted: boolean;
    isInEffect: boolean;
    status?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
    localizedPolicyVersions?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }[] | null | undefined;
}>;
interface PolicyVersionWithLocalizedVersionObject extends z.TypeOf<typeof PolicyVersionWithLocalizedVersionObject> {
}

declare const RetrieveAcceptedAgreementResponse: z.ZodObject<{
    countryCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    isAccepted: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    localizedPolicyVersion: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        isDefaultSelection: z.ZodBoolean;
        localeCode: z.ZodString;
        publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }>>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    policyId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    policyName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    policyType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    signingDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    namespace?: string | null | undefined;
    isAccepted?: boolean | null | undefined;
    policyId?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
    localizedPolicyVersion?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    } | null | undefined;
    policyName?: string | null | undefined;
    policyType?: string | null | undefined;
    signingDate?: string | null | undefined;
    userId?: string | null | undefined;
    countryCode?: string | null | undefined;
    displayVersion?: string | null | undefined;
    tags?: string[] | null | undefined;
}, {
    id: string;
    namespace?: string | null | undefined;
    isAccepted?: boolean | null | undefined;
    policyId?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
    localizedPolicyVersion?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    } | null | undefined;
    policyName?: string | null | undefined;
    policyType?: string | null | undefined;
    signingDate?: string | null | undefined;
    userId?: string | null | undefined;
    countryCode?: string | null | undefined;
    displayVersion?: string | null | undefined;
    tags?: string[] | null | undefined;
}>;
interface RetrieveAcceptedAgreementResponse extends z.TypeOf<typeof RetrieveAcceptedAgreementResponse> {
}

declare const RetrievePolicyPublicResponse: z.ZodObject<{
    basePolicyId: z.ZodString;
    baseUrls: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    countryCode: z.ZodString;
    countryGroupCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    isDefaultOpted: z.ZodBoolean;
    isDefaultSelection: z.ZodBoolean;
    isMandatory: z.ZodBoolean;
    namespace: z.ZodString;
    policyName: z.ZodString;
    policyType: z.ZodString;
    policyVersions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        displayVersion: z.ZodString;
        id: z.ZodString;
        isCommitted: z.ZodBoolean;
        isInEffect: z.ZodBoolean;
        localizedPolicyVersions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            id: z.ZodString;
            isDefaultSelection: z.ZodBoolean;
            localeCode: z.ZodString;
            publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }, {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }>, "many">>>;
        publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }, {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    readableId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    shouldNotifyOnUpdate: z.ZodBoolean;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    id: string;
    isDefaultSelection: boolean;
    policyName: string;
    policyType: string;
    countryCode: string;
    isDefaultOpted: boolean;
    isMandatory: boolean;
    shouldNotifyOnUpdate: boolean;
    basePolicyId: string;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
    tags?: string[] | null | undefined;
    countryGroupCode?: string | null | undefined;
    readableId?: string | null | undefined;
    policyVersions?: {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    baseUrls?: string[] | null | undefined;
}, {
    namespace: string;
    id: string;
    isDefaultSelection: boolean;
    policyName: string;
    policyType: string;
    countryCode: string;
    isDefaultOpted: boolean;
    isMandatory: boolean;
    shouldNotifyOnUpdate: boolean;
    basePolicyId: string;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
    tags?: string[] | null | undefined;
    countryGroupCode?: string | null | undefined;
    readableId?: string | null | undefined;
    policyVersions?: {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    baseUrls?: string[] | null | undefined;
}>;
interface RetrievePolicyPublicResponse extends z.TypeOf<typeof RetrievePolicyPublicResponse> {
}

declare const RetrievePolicyTypeResponse: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    isNeedDocument: z.ZodBoolean;
    policyTypeName: z.ZodString;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    policyTypeName: string;
    isNeedDocument: boolean;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
}, {
    id: string;
    policyTypeName: string;
    isNeedDocument: boolean;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    updatedAt?: string | null | undefined;
}>;
interface RetrievePolicyTypeResponse extends z.TypeOf<typeof RetrievePolicyTypeResponse> {
}

declare const RetrievePolicyVersionResponse: z.ZodObject<{
    basePolicyId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayVersion: z.ZodString;
    id: z.ZodString;
    isCommitted: z.ZodBoolean;
    isInEffect: z.ZodBoolean;
    localizedPolicyVersions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        isDefaultSelection: z.ZodBoolean;
        localeCode: z.ZodString;
        publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }>, "many">>>;
    policyId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    displayVersion: string;
    isCommitted: boolean;
    isInEffect: boolean;
    status?: string | null | undefined;
    policyId?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
    basePolicyId?: string | null | undefined;
    localizedPolicyVersions?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }[] | null | undefined;
}, {
    id: string;
    displayVersion: string;
    isCommitted: boolean;
    isInEffect: boolean;
    status?: string | null | undefined;
    policyId?: string | null | undefined;
    createdAt?: string | null | undefined;
    description?: string | null | undefined;
    publishedDate?: string | null | undefined;
    updatedAt?: string | null | undefined;
    basePolicyId?: string | null | undefined;
    localizedPolicyVersions?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }[] | null | undefined;
}>;
interface RetrievePolicyVersionResponse extends z.TypeOf<typeof RetrievePolicyVersionResponse> {
}

declare const RetrieveUserAcceptedAgreementResponse: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    isAccepted: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    localizedPolicyVersion: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        isDefaultSelection: z.ZodBoolean;
        localeCode: z.ZodString;
        publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }, {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    }>>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    policyName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    policyType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    publisherUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    signingDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    namespace?: string | null | undefined;
    isAccepted?: boolean | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    displayName?: string | null | undefined;
    email?: string | null | undefined;
    localizedPolicyVersion?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    } | null | undefined;
    policyName?: string | null | undefined;
    policyType?: string | null | undefined;
    publisherUserId?: string | null | undefined;
    signingDate?: string | null | undefined;
    userId?: string | null | undefined;
    username?: string | null | undefined;
}, {
    id: string;
    namespace?: string | null | undefined;
    isAccepted?: boolean | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    displayName?: string | null | undefined;
    email?: string | null | undefined;
    localizedPolicyVersion?: {
        id: string;
        isDefaultSelection: boolean;
        localeCode: string;
        status?: string | null | undefined;
        attachmentChecksum?: string | null | undefined;
        attachmentLocation?: string | null | undefined;
        attachmentVersionIdentifier?: string | null | undefined;
        contentType?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
    } | null | undefined;
    policyName?: string | null | undefined;
    policyType?: string | null | undefined;
    publisherUserId?: string | null | undefined;
    signingDate?: string | null | undefined;
    userId?: string | null | undefined;
    username?: string | null | undefined;
}>;
interface RetrieveUserAcceptedAgreementResponse extends z.TypeOf<typeof RetrieveUserAcceptedAgreementResponse> {
}

declare const RetrieveUserEligibilitiesResponse: z.ZodObject<{
    baseUrls: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    countryCode: z.ZodString;
    countryGroupCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    isAccepted: z.ZodBoolean;
    isHiddenPublic: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    isMandatory: z.ZodBoolean;
    namespace: z.ZodString;
    policyId: z.ZodString;
    policyName: z.ZodString;
    policyType: z.ZodString;
    policyVersions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        displayVersion: z.ZodString;
        id: z.ZodString;
        isCommitted: z.ZodBoolean;
        isInEffect: z.ZodBoolean;
        localizedPolicyVersions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            id: z.ZodString;
            isDefaultSelection: z.ZodBoolean;
            localeCode: z.ZodString;
            publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }, {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }>, "many">>>;
        publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }, {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    readableId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    isAccepted: boolean;
    policyId: string;
    policyName: string;
    policyType: string;
    countryCode: string;
    isMandatory: boolean;
    description?: string | null | undefined;
    isHiddenPublic?: boolean | null | undefined;
    countryGroupCode?: string | null | undefined;
    readableId?: string | null | undefined;
    policyVersions?: {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    baseUrls?: string[] | null | undefined;
}, {
    namespace: string;
    isAccepted: boolean;
    policyId: string;
    policyName: string;
    policyType: string;
    countryCode: string;
    isMandatory: boolean;
    description?: string | null | undefined;
    isHiddenPublic?: boolean | null | undefined;
    countryGroupCode?: string | null | undefined;
    readableId?: string | null | undefined;
    policyVersions?: {
        id: string;
        displayVersion: string;
        isCommitted: boolean;
        isInEffect: boolean;
        status?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        publishedDate?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersions?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    baseUrls?: string[] | null | undefined;
}>;
interface RetrieveUserEligibilitiesResponse extends z.TypeOf<typeof RetrieveUserEligibilitiesResponse> {
}

declare const RetrieveUserInfoCacheStatusResponse: z.ZodObject<{
    lastUpdatedAt: z.ZodString;
    namespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    lastUpdatedAt: string;
}, {
    namespace: string;
    lastUpdatedAt: string;
}>;
interface RetrieveUserInfoCacheStatusResponse extends z.TypeOf<typeof RetrieveUserInfoCacheStatusResponse> {
}

declare const UserAgreementsResponse: z.ZodObject<{
    agreements: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        countryCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        displayVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        isAccepted: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        localizedPolicyVersion: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            attachmentChecksum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            attachmentLocation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            attachmentVersionIdentifier: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            contentType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            id: z.ZodString;
            isDefaultSelection: z.ZodBoolean;
            localeCode: z.ZodString;
            publishedDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }, {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        }>>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        policyId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        policyName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        policyType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        signingDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        namespace?: string | null | undefined;
        isAccepted?: boolean | null | undefined;
        policyId?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersion?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        } | null | undefined;
        policyName?: string | null | undefined;
        policyType?: string | null | undefined;
        signingDate?: string | null | undefined;
        userId?: string | null | undefined;
        countryCode?: string | null | undefined;
        displayVersion?: string | null | undefined;
        tags?: string[] | null | undefined;
    }, {
        id: string;
        namespace?: string | null | undefined;
        isAccepted?: boolean | null | undefined;
        policyId?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersion?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        } | null | undefined;
        policyName?: string | null | undefined;
        policyType?: string | null | undefined;
        signingDate?: string | null | undefined;
        userId?: string | null | undefined;
        countryCode?: string | null | undefined;
        displayVersion?: string | null | undefined;
        tags?: string[] | null | undefined;
    }>, "many">>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    userId?: string | null | undefined;
    agreements?: {
        id: string;
        namespace?: string | null | undefined;
        isAccepted?: boolean | null | undefined;
        policyId?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersion?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        } | null | undefined;
        policyName?: string | null | undefined;
        policyType?: string | null | undefined;
        signingDate?: string | null | undefined;
        userId?: string | null | undefined;
        countryCode?: string | null | undefined;
        displayVersion?: string | null | undefined;
        tags?: string[] | null | undefined;
    }[] | null | undefined;
}, {
    userId?: string | null | undefined;
    agreements?: {
        id: string;
        namespace?: string | null | undefined;
        isAccepted?: boolean | null | undefined;
        policyId?: string | null | undefined;
        createdAt?: string | null | undefined;
        description?: string | null | undefined;
        updatedAt?: string | null | undefined;
        localizedPolicyVersion?: {
            id: string;
            isDefaultSelection: boolean;
            localeCode: string;
            status?: string | null | undefined;
            attachmentChecksum?: string | null | undefined;
            attachmentLocation?: string | null | undefined;
            attachmentVersionIdentifier?: string | null | undefined;
            contentType?: string | null | undefined;
            createdAt?: string | null | undefined;
            description?: string | null | undefined;
            publishedDate?: string | null | undefined;
            updatedAt?: string | null | undefined;
        } | null | undefined;
        policyName?: string | null | undefined;
        policyType?: string | null | undefined;
        signingDate?: string | null | undefined;
        userId?: string | null | undefined;
        countryCode?: string | null | undefined;
        displayVersion?: string | null | undefined;
        tags?: string[] | null | undefined;
    }[] | null | undefined;
}>;
interface UserAgreementsResponse extends z.TypeOf<typeof UserAgreementsResponse> {
}

declare const ValidationErrorEntity: z.ZodObject<{
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    errors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        errorCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }, {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
    errors?: {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }[] | null | undefined;
}, {
    errorCode: number;
    errorMessage: string;
    errors?: {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }[] | null | undefined;
}>;
interface ValidationErrorEntity extends z.TypeOf<typeof ValidationErrorEntity> {
}

/**
 * AUTO GENERATED
 */

declare function AgreementApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve accepted Legal Agreements.
     */
    getAgreementsPolicies: () => Promise<AxiosResponse<RetrieveAcceptedAgreementResponseArray>>;
    /**
     * Accepts many legal policy versions all at once. Supply with localized version policy id to accept an agreement.
     */
    createAgreementPolicy: (data: AcceptAgreementRequest[]) => Promise<AxiosResponse<AcceptAgreementResponse>>;
    /**
     * @deprecated
     * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.
     */
    createAgreementPolicyUser_ByUserId: (userId: string, data: AcceptAgreementRequest[]) => Promise<AxiosResponse<AcceptAgreementResponse>>;
    /**
     * Change marketing preference consent.
     */
    patchAgreementLocalizedPolicyVersionPreference: (data: AcceptAgreementRequest[]) => Promise<AxiosResponse<unknown>>;
    /**
     * Accepts a legal policy version. Supply with localized version policy id to accept an agreement
     */
    createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * @deprecated
     * Accepts many legal policy versions all at once. Supply with localized version policy id, version policy id, policy id, userId, namespace, country code and client id to accept an agreement. This endpoint used by APIGateway during new user registration.
     */
    createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId: (countryCode: string, clientId: string, userId: string, data: AcceptAgreementRequest[]) => Promise<AxiosResponse<AcceptAgreementResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function EligibilitiesApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process supports cross-namespace checking, that means if the active policy already accepted by the same user in other namespace, then it will be considered as eligible.
     */
    getEligibility_ByNamespace: () => Promise<AxiosResponse<RetrieveUserEligibilitiesResponseArray>>;
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
     */
    getUserEligibility_ByCountryCode_ByClientId_ByUserId: (countryCode: string, clientId: string, userId: string) => Promise<AxiosResponse<RetrieveUserEligibilitiesIndirectResponse>>;
};

/**
 * AUTO GENERATED
 */

declare class Agreement$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve accepted Legal Agreements.
     */
    getAgreementsPolicies(): Promise<Response<RetrieveAcceptedAgreementResponseArray>>;
    /**
     * Accepts many legal policy versions all at once. Supply with localized version policy id to accept an agreement.
     */
    createAgreementPolicy(data: AcceptAgreementRequest[]): Promise<Response<AcceptAgreementResponse>>;
    /**
     * @deprecated
     * Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.
     */
    createAgreementPolicyUser_ByUserId(userId: string, data: AcceptAgreementRequest[]): Promise<Response<AcceptAgreementResponse>>;
    /**
     * Change marketing preference consent.
     */
    patchAgreementLocalizedPolicyVersionPreference(data: AcceptAgreementRequest[]): Promise<Response<unknown>>;
    /**
     * Accepts a legal policy version. Supply with localized version policy id to accept an agreement
     */
    createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<unknown>>;
    /**
     * @deprecated
     * Accepts many legal policy versions all at once. Supply with localized version policy id, version policy id, policy id, userId, namespace, country code and client id to accept an agreement. This endpoint used by APIGateway during new user registration.
     */
    createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId(countryCode: string, clientId: string, userId: string, data: AcceptAgreementRequest[]): Promise<Response<AcceptAgreementResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class Eligibilities$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process supports cross-namespace checking, that means if the active policy already accepted by the same user in other namespace, then it will be considered as eligible.
     */
    getEligibility_ByNamespace(): Promise<Response<RetrieveUserEligibilitiesResponseArray>>;
    /**
     * Retrieve the active policies and its conformance status by user.&lt;br&gt;This process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.
     */
    getUserEligibility_ByCountryCode_ByClientId_ByUserId(countryCode: string, clientId: string, userId: string): Promise<Response<RetrieveUserEligibilitiesIndirectResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class LocalizedPolicyVersions$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<RetrieveLocalizedPolicyVersionPublicResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class LocalizedPolicyVersionsWithNamespace$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(localizedPolicyVersionId: string): Promise<Response<RetrieveLocalizedPolicyVersionPublicResponse>>;
}

/**
 * AUTO GENERATED
 */

declare class Policies$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Retrieve List of Countries that have Active and Visible Legal Policies.
     */
    getPoliciesCountriesList(): Promise<Response<unknown>>;
    /**
     * Retrieve all active latest policies based on a namespace and country. The country will be read from user token.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicy_ByNamespace(queryParams?: {
        alwaysIncludeDefault?: boolean | null;
        defaultOnEmpty?: boolean | null;
        policyType?: 'LEGAL_DOCUMENT_TYPE' | 'MARKETING_PREFERENCE_TYPE';
        tags?: string | null;
        visibleOnly?: boolean | null;
    }): Promise<Response<RetrievePolicyPublicResponseArray>>;
    /**
     * Retrieve all active latest policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicyCountry_ByCountryCode(countryCode: string, queryParams?: {
        defaultOnEmpty?: boolean | null;
        policyType?: 'LEGAL_DOCUMENT_TYPE' | 'MARKETING_PREFERENCE_TYPE';
        tags?: string | null;
        visibleOnly?: boolean | null;
    }): Promise<Response<RetrievePolicyPublicResponseArray>>;
    /**
     * Retrieve all active latest policies based on a namespace and country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicyCountry_ByCountryCode_ByNS(countryCode: string, queryParams?: {
        alwaysIncludeDefault?: boolean | null;
        defaultOnEmpty?: boolean | null;
        policyType?: 'LEGAL_DOCUMENT_TYPE' | 'MARKETING_PREFERENCE_TYPE';
        tags?: string | null;
        visibleOnly?: boolean | null;
    }): Promise<Response<RetrievePolicyPublicResponseArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Utility$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Readiness status defined as at least one legal basePolicy is present and having active basePolicy.
     */
    getReadiness(): Promise<Response<LegalReadinessStatusResponse>>;
}

/**
 * AUTO GENERATED
 */

declare function LocalizedPolicyVersionsApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<RetrieveLocalizedPolicyVersionPublicResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function LocalizedPolicyVersionsWithNamespaceApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    getLocalizedPolicyVersion_ByLocalizedPolicyVersionId: (localizedPolicyVersionId: string) => Promise<AxiosResponse<RetrieveLocalizedPolicyVersionPublicResponse>>;
};

/**
 * AUTO GENERATED
 */

declare function PoliciesApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Retrieve List of Countries that have Active and Visible Legal Policies.
     */
    getPoliciesCountriesList: () => Promise<AxiosResponse<unknown>>;
    /**
     * Retrieve all active latest policies based on a namespace and country. The country will be read from user token.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicy_ByNamespace: (queryParams?: {
        alwaysIncludeDefault?: boolean | null;
        defaultOnEmpty?: boolean | null;
        policyType?: "LEGAL_DOCUMENT_TYPE" | "MARKETING_PREFERENCE_TYPE";
        tags?: string | null;
        visibleOnly?: boolean | null;
    }) => Promise<AxiosResponse<RetrievePolicyPublicResponseArray>>;
    /**
     * Retrieve all active latest policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicyCountry_ByCountryCode: (countryCode: string, queryParams?: {
        defaultOnEmpty?: boolean | null;
        policyType?: "LEGAL_DOCUMENT_TYPE" | "MARKETING_PREFERENCE_TYPE";
        tags?: string | null;
        visibleOnly?: boolean | null;
    }) => Promise<AxiosResponse<RetrievePolicyPublicResponseArray>>;
    /**
     * Retrieve all active latest policies based on a namespace and country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;
     */
    getPolicyCountry_ByCountryCode_ByNS: (countryCode: string, queryParams?: {
        alwaysIncludeDefault?: boolean | null;
        defaultOnEmpty?: boolean | null;
        policyType?: "LEGAL_DOCUMENT_TYPE" | "MARKETING_PREFERENCE_TYPE";
        tags?: string | null;
        visibleOnly?: boolean | null;
    }) => Promise<AxiosResponse<RetrievePolicyPublicResponseArray>>;
};

/**
 * AUTO GENERATED
 */

declare function UtilityApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Readiness status defined as at least one legal basePolicy is present and having active basePolicy.
     */
    getReadiness: () => Promise<AxiosResponse<LegalReadinessStatusResponse>>;
};

/**
 * AUTO GENERATED
 */

declare const Legal: {
    UserInfoAdminApi: typeof UserInfoAdminApi;
    BaseLegalPoliciesAdminApi: typeof BaseLegalPoliciesAdminApi;
    PoliciesAdminApi: typeof PoliciesAdminApi;
    PolicyVersionsAdminApi: typeof PolicyVersionsAdminApi;
    AgreementAdminApi: typeof AgreementAdminApi;
    AgreementWithNamespaceAdminApi: typeof AgreementWithNamespaceAdminApi;
    BaseLegalPoliciesWithNamespaceAdminApi: typeof BaseLegalPoliciesWithNamespaceAdminApi;
    AnonymizationAdminApi: typeof AnonymizationAdminApi;
    PoliciesWithNamespaceAdminApi: typeof PoliciesWithNamespaceAdminApi;
    PolicyVersionsWithNamespaceAdminApi: typeof PolicyVersionsWithNamespaceAdminApi;
    UserEligibilitiesAdminApi: typeof UserEligibilitiesAdminApi;
    LocalizedPolicyVersionsAdminApi: typeof LocalizedPolicyVersionsAdminApi;
    UserAgreementAdminApi: typeof UserAgreementAdminApi;
    LocalizedPolicyVersionsWithNamespaceAdminApi: typeof LocalizedPolicyVersionsWithNamespaceAdminApi;
    UtilityApi: typeof UtilityApi;
    AgreementApi: typeof AgreementApi;
    PoliciesApi: typeof PoliciesApi;
    EligibilitiesApi: typeof EligibilitiesApi;
    LocalizedPolicyVersionsApi: typeof LocalizedPolicyVersionsApi;
    LocalizedPolicyVersionsWithNamespaceApi: typeof LocalizedPolicyVersionsWithNamespaceApi;
    version: () => void;
};

declare const DisplayedPolicy: z.ZodObject<{
    policyName: z.ZodString;
    policyId: z.ZodString;
    policyVersionId: z.ZodString;
    localizedPolicyVersionId: z.ZodString;
    isMandatory: z.ZodBoolean;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    policyType: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    localizedPolicyVersionId: string;
    policyId: string;
    policyVersionId: string;
    policyName: string;
    isMandatory: boolean;
    description?: string | null | undefined;
    policyType?: string | undefined;
}, {
    localizedPolicyVersionId: string;
    policyId: string;
    policyVersionId: string;
    policyName: string;
    isMandatory: boolean;
    description?: string | null | undefined;
    policyType?: string | undefined;
}>;
type DisplayedPolicy = z.TypeOf<typeof DisplayedPolicy>;
declare const LegalPolicyType: {
    LEGAL_DOCUMENT: string;
    MARKETING_PREFERENCE: string;
};
interface UserAgreementPolicyVersion extends RetrieveAcceptedAgreementResponse {
    policyVersion?: PolicyVersionWithLocalizedVersionObject;
}

declare class LegalHelper {
    static getUnsignedPolicies: (userEligibilities: RetrieveUserEligibilitiesResponseArray) => RetrieveUserEligibilitiesResponseArray;
    static convertPoliciesToDisplayedPolicies(policies: RetrievePolicyPublicResponse[], namespace: string): DisplayedPolicy[];
    static createLegalURL({ legalBaseUrl, policyId, languageId }: {
        legalBaseUrl?: string;
        policyId?: string;
        languageId?: string;
    }): string;
    static getAcceptedPolicies(eligibilities: RetrieveUserEligibilitiesResponseArray): AcceptedPoliciesRequest[];
    static currentUserIsBlockedByLegal: (eligibilities?: RetrieveUserEligibilitiesResponseArray | null) => boolean;
    private static getDefaultLocalizedPolicy;
    static sanitizeHTML: (document: string) => any;
}

export { AcceptAgreementRequest, AcceptAgreementResponse, Agreement$, AgreementAdmin$, AgreementAdminApi, AgreementApi, AgreementWithNamespaceAdmin$, AgreementWithNamespaceAdminApi, AnonymizationAdmin$, AnonymizationAdminApi, BaseLegalPoliciesAdmin$, BaseLegalPoliciesAdminApi, BaseLegalPoliciesWithNamespaceAdmin$, BaseLegalPoliciesWithNamespaceAdminApi, CreateBasePolicyRequest, CreateBasePolicyRequestV2, CreateBasePolicyResponse, CreateLocalizedPolicyVersionRequest, CreateLocalizedPolicyVersionResponse, CreatePolicyVersionRequest, CreatePolicyVersionResponse, DisplayedPolicy, DownloadExportedAgreementsInCsvResponse, Eligibilities$, EligibilitiesApi, ErrorEntity, FieldValidationError, InitiateExportAgreementsToCsvResponse, Legal, LegalHelper, LegalPolicyType, LegalReadinessStatusResponse, LocalizedPolicyVersionObject, LocalizedPolicyVersions$, LocalizedPolicyVersionsAdmin$, LocalizedPolicyVersionsAdminApi, LocalizedPolicyVersionsApi, LocalizedPolicyVersionsWithNamespace$, LocalizedPolicyVersionsWithNamespaceAdmin$, LocalizedPolicyVersionsWithNamespaceAdminApi, LocalizedPolicyVersionsWithNamespaceApi, PagedRetrieveUserAcceptedAgreementResponse, Paging, Permission, Policies$, PoliciesAdmin$, PoliciesAdminApi, PoliciesApi, PoliciesWithNamespaceAdmin$, PoliciesWithNamespaceAdminApi, PolicyObject, PolicyVersionObject, PolicyVersionWithLocalizedVersionObject, PolicyVersionsAdmin$, PolicyVersionsAdminApi, PolicyVersionsWithNamespaceAdmin$, PolicyVersionsWithNamespaceAdminApi, RetrieveAcceptedAgreementResponse, RetrieveAcceptedAgreementResponseArray, RetrieveBasePolicyResponse, RetrieveBasePolicyResponseArray, RetrieveLocalizedPolicyVersionPublicResponse, RetrieveLocalizedPolicyVersionResponse, RetrieveLocalizedPolicyVersionResponseArray, RetrievePolicyPublicResponse, RetrievePolicyPublicResponseArray, RetrievePolicyResponse, RetrievePolicyResponseArray, RetrievePolicyTypeResponse, RetrievePolicyTypeResponseArray, RetrievePolicyVersionResponse, RetrievePolicyVersionResponseArray, RetrieveUserAcceptedAgreementResponse, RetrieveUserEligibilitiesIndirectResponse, RetrieveUserEligibilitiesResponse, RetrieveUserEligibilitiesResponseArray, RetrieveUserInfoCacheStatusResponse, RetrieveUserInfoCacheStatusResponseArray, UpdateBasePolicyRequest, UpdateBasePolicyRequestV2, UpdateBasePolicyResponse, UpdateLocalizedPolicyVersionRequest, UpdateLocalizedPolicyVersionResponse, UpdatePolicyRequest, UpdatePolicyVersionRequest, UpdatePolicyVersionResponse, UploadLocalizedPolicyVersionAttachmentResponse, UploadPolicyVersionAttachmentRequest, UserAgreementAdmin$, UserAgreementAdminApi, type UserAgreementPolicyVersion, UserAgreementsResponse, UserAgreementsResponseArray, UserEligibilitiesAdmin$, UserEligibilitiesAdminApi, UserInfoAdmin$, UserInfoAdminApi, UsersAgreementsRequest, Utility$, UtilityApi, ValidationErrorEntity };
