import {
  AgreementAdminApi,
  AgreementApi,
  AgreementWithNamespaceAdminApi,
  AnonymizationAdminApi,
  BaseLegalPoliciesAdminApi,
  BaseLegalPoliciesWithNamespaceAdminApi,
  EligibilitiesApi,
  LocalizedPolicyVersionsAdminApi,
  LocalizedPolicyVersionsApi,
  LocalizedPolicyVersionsWithNamespaceAdminApi,
  LocalizedPolicyVersionsWithNamespaceApi,
  PoliciesAdminApi,
  PoliciesApi,
  PoliciesWithNamespaceAdminApi,
  PolicyVersionsAdminApi,
  PolicyVersionsWithNamespaceAdminApi,
  UserAgreementAdminApi,
  UserEligibilitiesAdminApi,
  UserInfoAdminApi,
  UtilityApi
} from "./chunk-DZZDF5DF.js";

// src/generated-admin/queries/AgreementAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_AgreementAdmin = /* @__PURE__ */ ((Key_AgreementAdmin2) => {
  Key_AgreementAdmin2["AgreementsPolicyVersionsUsers"] = "Legal.AgreementAdmin.AgreementsPolicyVersionsUsers";
  Key_AgreementAdmin2["AgreementPolicyUser_ByUserId"] = "Legal.AgreementAdmin.AgreementPolicyUser_ByUserId";
  Key_AgreementAdmin2["AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId"] = "Legal.AgreementAdmin.AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId";
  return Key_AgreementAdmin2;
})(Key_AgreementAdmin || {});
var useAgreementAdminApi_GetAgreementsPolicyVersionsUsers = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementsPolicyVersionsUsers(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Legal.AgreementAdmin.AgreementsPolicyVersionsUsers" /* AgreementsPolicyVersionsUsers */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementAdminApi_GetAgreementPolicyUser_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementPolicyUser_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Legal.AgreementAdmin.AgreementPolicyUser_ByUserId" /* AgreementPolicyUser_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Legal.AgreementAdmin.AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId" /* AgreementLocalizedPolicyVersionPreferenceUserId_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/AgreementWithNamespaceAdmin.query.ts
import { useMutation as useMutation2, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_AgreementWithNamespaceAdmin = /* @__PURE__ */ ((Key_AgreementWithNamespaceAdmin2) => {
  Key_AgreementWithNamespaceAdmin2["Agreement"] = "Legal.AgreementWithNamespaceAdmin.Agreement";
  Key_AgreementWithNamespaceAdmin2["AgreementsPolicyVersionsUsers"] = "Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsers";
  Key_AgreementWithNamespaceAdmin2["AgreementPolicyUser_ByUserId"] = "Legal.AgreementWithNamespaceAdmin.AgreementPolicyUser_ByUserId";
  Key_AgreementWithNamespaceAdmin2["AgreementsPolicyVersionsUsersExportCsvDownload"] = "Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsersExportCsvDownload";
  Key_AgreementWithNamespaceAdmin2["AgreementPolicyVersionUserExportCsvInitiate"] = "Legal.AgreementWithNamespaceAdmin.AgreementPolicyVersionUserExportCsvInitiate";
  return Key_AgreementWithNamespaceAdmin2;
})(Key_AgreementWithNamespaceAdmin || {});
var useAgreementWithNamespaceAdminApi_CreateAgreementMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreement(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Legal.AgreementWithNamespaceAdmin.Agreement" /* Agreement */],
    mutationFn,
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementsPolicyVersionsUsers(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsers" /* AgreementsPolicyVersionsUsers */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementPolicyUser_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Legal.AgreementWithNamespaceAdmin.AgreementPolicyUser_ByUserId" /* AgreementPolicyUser_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgreementsPolicyVersionsUsersExportCsvDownload(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Legal.AgreementWithNamespaceAdmin.AgreementsPolicyVersionsUsersExportCsvDownload" /* AgreementsPolicyVersionsUsersExportCsvDownload */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementPolicyVersionUserExportCsvInitiate(input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Legal.AgreementWithNamespaceAdmin.AgreementPolicyVersionUserExportCsvInitiate" /* AgreementPolicyVersionUserExportCsvInitiate */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/AnonymizationAdmin.query.ts
import { useMutation as useMutation3 } from "@tanstack/react-query";
var Key_AnonymizationAdmin = /* @__PURE__ */ ((Key_AnonymizationAdmin2) => {
  Key_AnonymizationAdmin2["AnonymizationAgreement_ByUserId"] = "Legal.AnonymizationAdmin.AnonymizationAgreement_ByUserId";
  return Key_AnonymizationAdmin2;
})(Key_AnonymizationAdmin || {});
var useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationAgreement_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Legal.AnonymizationAdmin.AnonymizationAgreement_ByUserId" /* AnonymizationAgreement_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/BaseLegalPoliciesAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_BaseLegalPoliciesAdmin = /* @__PURE__ */ ((Key_BaseLegalPoliciesAdmin2) => {
  Key_BaseLegalPoliciesAdmin2["PolicyTypes"] = "Legal.BaseLegalPoliciesAdmin.PolicyTypes";
  Key_BaseLegalPoliciesAdmin2["BasePolicies"] = "Legal.BaseLegalPoliciesAdmin.BasePolicies";
  Key_BaseLegalPoliciesAdmin2["BasePolicy"] = "Legal.BaseLegalPoliciesAdmin.BasePolicy";
  Key_BaseLegalPoliciesAdmin2["BasePolicy_ByBasePolicyId"] = "Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId";
  Key_BaseLegalPoliciesAdmin2["Country_ByBasePolicyId_ByCountryCode"] = "Legal.BaseLegalPoliciesAdmin.Country_ByBasePolicyId_ByCountryCode";
  return Key_BaseLegalPoliciesAdmin2;
})(Key_BaseLegalPoliciesAdmin || {});
var useBaseLegalPoliciesAdminApi_GetPolicyTypes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPolicyTypes(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.PolicyTypes" /* PolicyTypes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_GetBasePolicies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBasePolicies(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicies" /* BasePolicies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBasePolicy(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicy" /* BasePolicy */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBasePolicy_ByBasePolicyId(input2.basePolicyId);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchBasePolicy_ByBasePolicyId(input.basePolicyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Legal.BaseLegalPoliciesAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCountry_ByBasePolicyId_ByCountryCode(input2.basePolicyId, input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Legal.BaseLegalPoliciesAdmin.Country_ByBasePolicyId_ByCountryCode" /* Country_ByBasePolicyId_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/BaseLegalPoliciesWithNamespaceAdmin.query.ts
import { useMutation as useMutation5, useQuery as useQuery4 } from "@tanstack/react-query";
var Key_BaseLegalPoliciesWithNamespaceAdmin = /* @__PURE__ */ ((Key_BaseLegalPoliciesWithNamespaceAdmin2) => {
  Key_BaseLegalPoliciesWithNamespaceAdmin2["PolicyTypes"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.PolicyTypes";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["BasePolicies"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicies";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["BasePolicy"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["BasePolicy_ByBasePolicyId"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId";
  Key_BaseLegalPoliciesWithNamespaceAdmin2["Country_ByBasePolicyId_ByCountryCode"] = "Legal.BaseLegalPoliciesWithNamespaceAdmin.Country_ByBasePolicyId_ByCountryCode";
  return Key_BaseLegalPoliciesWithNamespaceAdmin2;
})(Key_BaseLegalPoliciesWithNamespaceAdmin || {});
var useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyTypes(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.PolicyTypes" /* PolicyTypes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBasePolicies(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicies" /* BasePolicies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBasePolicy(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy" /* BasePolicy */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBasePolicy_ByBasePolicyId(input2.basePolicyId);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchBasePolicy_ByBasePolicyId(input.basePolicyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.BasePolicy_ByBasePolicyId" /* BasePolicy_ByBasePolicyId */],
    mutationFn,
    ...options
  });
};
var useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BaseLegalPoliciesWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCountry_ByBasePolicyId_ByCountryCode(input2.basePolicyId, input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Legal.BaseLegalPoliciesWithNamespaceAdmin.Country_ByBasePolicyId_ByCountryCode" /* Country_ByBasePolicyId_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/LocalizedPolicyVersionsAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery5 } from "@tanstack/react-query";
var Key_LocalizedPolicyVersionsAdmin = /* @__PURE__ */ ((Key_LocalizedPolicyVersionsAdmin2) => {
  Key_LocalizedPolicyVersionsAdmin2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsAdmin2["LocalizedPolicyVersionVersion_ByPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId";
  Key_LocalizedPolicyVersionsAdmin2["Default_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.Default_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsAdmin2["Attachment_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsAdmin.Attachment_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersionsAdmin2;
})(Key_LocalizedPolicyVersionsAdmin || {});
var useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersionVersion_ByPolicyVersionId(input2.policyVersionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createLocalizedPolicyVersionVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDefault_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.Default_ByLocalizedPolicyVersionId" /* Default_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAttachment_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Legal.LocalizedPolicyVersionsAdmin.Attachment_ByLocalizedPolicyVersionId" /* Attachment_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/LocalizedPolicyVersionsWithNamespaceAdmin.query.ts
import { useMutation as useMutation7, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_LocalizedPolicyVersionsWithNamespaceAdmin = /* @__PURE__ */ ((Key_LocalizedPolicyVersionsWithNamespaceAdmin2) => {
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["LocalizedPolicyVersionVersion_ByPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId";
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["Default_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Default_ByLocalizedPolicyVersionId";
  Key_LocalizedPolicyVersionsWithNamespaceAdmin2["Attachment_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Attachment_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersionsWithNamespaceAdmin2;
})(Key_LocalizedPolicyVersionsWithNamespaceAdmin || {});
var useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersionVersion_ByPolicyVersionId(input2.policyVersionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createLocalizedPolicyVersionVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.LocalizedPolicyVersionVersion_ByPolicyVersionId" /* LocalizedPolicyVersionVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDefault_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Default_ByLocalizedPolicyVersionId" /* Default_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LocalizedPolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAttachment_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Legal.LocalizedPolicyVersionsWithNamespaceAdmin.Attachment_ByLocalizedPolicyVersionId" /* Attachment_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PoliciesAdmin.query.ts
import { useMutation as useMutation8, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_PoliciesAdmin = /* @__PURE__ */ ((Key_PoliciesAdmin2) => {
  Key_PoliciesAdmin2["Policy_ByPolicyId"] = "Legal.PoliciesAdmin.Policy_ByPolicyId";
  Key_PoliciesAdmin2["Default_ByPolicyId"] = "Legal.PoliciesAdmin.Default_ByPolicyId";
  Key_PoliciesAdmin2["PolicyCountry_ByCountryCode"] = "Legal.PoliciesAdmin.PolicyCountry_ByCountryCode";
  return Key_PoliciesAdmin2;
})(Key_PoliciesAdmin || {});
var usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchPolicy_ByPolicyId(
      input.policyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Legal.PoliciesAdmin.Policy_ByPolicyId" /* Policy_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchDefault_ByPolicyId(
      input.policyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Legal.PoliciesAdmin.Default_ByPolicyId" /* Default_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePoliciesAdminApi_GetPolicyCountry_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyCountry_ByCountryCode(input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Legal.PoliciesAdmin.PolicyCountry_ByCountryCode" /* PolicyCountry_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PoliciesWithNamespaceAdmin.query.ts
import { useMutation as useMutation9 } from "@tanstack/react-query";
var Key_PoliciesWithNamespaceAdmin = /* @__PURE__ */ ((Key_PoliciesWithNamespaceAdmin2) => {
  Key_PoliciesWithNamespaceAdmin2["Policy_ByPolicyId"] = "Legal.PoliciesWithNamespaceAdmin.Policy_ByPolicyId";
  Key_PoliciesWithNamespaceAdmin2["Default_ByPolicyId"] = "Legal.PoliciesWithNamespaceAdmin.Default_ByPolicyId";
  return Key_PoliciesWithNamespaceAdmin2;
})(Key_PoliciesWithNamespaceAdmin || {});
var usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchPolicy_ByPolicyId(input.policyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Legal.PoliciesWithNamespaceAdmin.Policy_ByPolicyId" /* Policy_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PoliciesWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDefault_ByPolicyId(input.policyId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Legal.PoliciesWithNamespaceAdmin.Default_ByPolicyId" /* Default_ByPolicyId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PolicyVersionsAdmin.query.ts
import { useMutation as useMutation10, useQuery as useQuery8 } from "@tanstack/react-query";
var Key_PolicyVersionsAdmin = /* @__PURE__ */ ((Key_PolicyVersionsAdmin2) => {
  Key_PolicyVersionsAdmin2["Versions_ByPolicyId"] = "Legal.PolicyVersionsAdmin.Versions_ByPolicyId";
  Key_PolicyVersionsAdmin2["Version_ByPolicyId"] = "Legal.PolicyVersionsAdmin.Version_ByPolicyId";
  Key_PolicyVersionsAdmin2["PolicyVersion_ByPolicyVersionId"] = "Legal.PolicyVersionsAdmin.PolicyVersion_ByPolicyVersionId";
  Key_PolicyVersionsAdmin2["LatestPolicy_ByPolicyVersionId"] = "Legal.PolicyVersionsAdmin.LatestPolicy_ByPolicyVersionId";
  return Key_PolicyVersionsAdmin2;
})(Key_PolicyVersionsAdmin || {});
var usePolicyVersionsAdminApi_GetVersions_ByPolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PolicyVersionsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getVersions_ByPolicyId(input2.policyId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Legal.PolicyVersionsAdmin.Versions_ByPolicyId" /* Versions_ByPolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createVersion_ByPolicyId(input.policyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Legal.PolicyVersionsAdmin.Version_ByPolicyId" /* Version_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchPolicyVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Legal.PolicyVersionsAdmin.PolicyVersion_ByPolicyVersionId" /* PolicyVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchLatestPolicy_ByPolicyVersionId(input.policyVersionId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Legal.PolicyVersionsAdmin.LatestPolicy_ByPolicyVersionId" /* LatestPolicy_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PolicyVersionsWithNamespaceAdmin.query.ts
import { useMutation as useMutation11, useQuery as useQuery9 } from "@tanstack/react-query";
var Key_PolicyVersionsWithNamespaceAdmin = /* @__PURE__ */ ((Key_PolicyVersionsWithNamespaceAdmin2) => {
  Key_PolicyVersionsWithNamespaceAdmin2["Versions_ByPolicyId"] = "Legal.PolicyVersionsWithNamespaceAdmin.Versions_ByPolicyId";
  Key_PolicyVersionsWithNamespaceAdmin2["Version_ByPolicyId"] = "Legal.PolicyVersionsWithNamespaceAdmin.Version_ByPolicyId";
  Key_PolicyVersionsWithNamespaceAdmin2["PolicyVersion_ByPolicyVersionId"] = "Legal.PolicyVersionsWithNamespaceAdmin.PolicyVersion_ByPolicyVersionId";
  Key_PolicyVersionsWithNamespaceAdmin2["LatestPolicy_ByPolicyVersionId"] = "Legal.PolicyVersionsWithNamespaceAdmin.LatestPolicy_ByPolicyVersionId";
  return Key_PolicyVersionsWithNamespaceAdmin2;
})(Key_PolicyVersionsWithNamespaceAdmin || {});
var usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getVersions_ByPolicyId(input2.policyId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Legal.PolicyVersionsWithNamespaceAdmin.Versions_ByPolicyId" /* Versions_ByPolicyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createVersion_ByPolicyId(input.policyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Legal.PolicyVersionsWithNamespaceAdmin.Version_ByPolicyId" /* Version_ByPolicyId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchPolicyVersion_ByPolicyVersionId(input.policyVersionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Legal.PolicyVersionsWithNamespaceAdmin.PolicyVersion_ByPolicyVersionId" /* PolicyVersion_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PolicyVersionsWithNamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchLatestPolicy_ByPolicyVersionId(input.policyVersionId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Legal.PolicyVersionsWithNamespaceAdmin.LatestPolicy_ByPolicyVersionId" /* LatestPolicy_ByPolicyVersionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/UserAgreementAdmin.query.ts
import { useMutation as useMutation12 } from "@tanstack/react-query";
var Key_UserAgreementAdmin = /* @__PURE__ */ ((Key_UserAgreementAdmin2) => {
  Key_UserAgreementAdmin2["AgreementPolicy_ByUserId"] = "Legal.UserAgreementAdmin.AgreementPolicy_ByUserId";
  return Key_UserAgreementAdmin2;
})(Key_UserAgreementAdmin || {});
var useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserAgreementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementPolicy_ByUserId(input.userId, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Legal.UserAgreementAdmin.AgreementPolicy_ByUserId" /* AgreementPolicy_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/UserEligibilitiesAdmin.query.ts
import { useQuery as useQuery10 } from "@tanstack/react-query";
var Key_UserEligibilitiesAdmin = /* @__PURE__ */ ((Key_UserEligibilitiesAdmin2) => {
  Key_UserEligibilitiesAdmin2["Eligibilities_ByUserId"] = "Legal.UserEligibilitiesAdmin.Eligibilities_ByUserId";
  return Key_UserEligibilitiesAdmin2;
})(Key_UserEligibilitiesAdmin || {});
var useUserEligibilitiesAdminApi_GetEligibilities_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserEligibilitiesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEligibilities_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Legal.UserEligibilitiesAdmin.Eligibilities_ByUserId" /* Eligibilities_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/UserInfoAdmin.query.ts
import { useMutation as useMutation13, useQuery as useQuery11 } from "@tanstack/react-query";
var Key_UserInfoAdmin = /* @__PURE__ */ ((Key_UserInfoAdmin2) => {
  Key_UserInfoAdmin2["UserInfo"] = "Legal.UserInfoAdmin.UserInfo";
  return Key_UserInfoAdmin2;
})(Key_UserInfoAdmin || {});
var useUserInfoAdminApi_DeleteUserInfoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserInfoAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUserInfo(
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Legal.UserInfoAdmin.UserInfo" /* UserInfo */],
    mutationFn,
    ...options
  });
};
var useUserInfoAdminApi_GetUserInfo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserInfoAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUserInfo(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Legal.UserInfoAdmin.UserInfo" /* UserInfo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserInfoAdminApi_UpdateUserInfoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserInfoAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserInfo(
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Legal.UserInfoAdmin.UserInfo" /* UserInfo */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Agreement.query.ts
import { useMutation as useMutation14, useQuery as useQuery12 } from "@tanstack/react-query";
var Key_Agreement = /* @__PURE__ */ ((Key_Agreement2) => {
  Key_Agreement2["AgreementsPolicies"] = "Legal.Agreement.AgreementsPolicies";
  Key_Agreement2["AgreementPolicy"] = "Legal.Agreement.AgreementPolicy";
  Key_Agreement2["AgreementPolicyUser_ByUserId"] = "Legal.Agreement.AgreementPolicyUser_ByUserId";
  Key_Agreement2["AgreementLocalizedPolicyVersionPreference"] = "Legal.Agreement.AgreementLocalizedPolicyVersionPreference";
  Key_Agreement2["AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.Agreement.AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  Key_Agreement2["UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId"] = "Legal.Agreement.UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId";
  return Key_Agreement2;
})(Key_Agreement || {});
var useAgreementApi_GetAgreementsPolicies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AgreementApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAgreementsPolicies();
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Legal.Agreement.AgreementsPolicies" /* AgreementsPolicies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAgreementApi_CreateAgreementPolicyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createAgreementPolicy(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Legal.Agreement.AgreementPolicy" /* AgreementPolicy */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementPolicyUser_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Legal.Agreement.AgreementPolicyUser_ByUserId" /* AgreementPolicyUser_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchAgreementLocalizedPolicyVersionPreference(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Legal.Agreement.AgreementLocalizedPolicyVersionPreference" /* AgreementLocalizedPolicyVersionPreference */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input.localizedPolicyVersionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Legal.Agreement.AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* AgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionId */],
    mutationFn,
    ...options
  });
};
var useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AgreementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserPolicyAgreement_ByCountryCode_ByClientId_ByUserId(input.countryCode, input.clientId, input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Legal.Agreement.UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId" /* UserPolicyAgreement_ByCountryCode_ByClientId_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Eligibilities.query.ts
import { useQuery as useQuery13 } from "@tanstack/react-query";
var Key_Eligibilities = /* @__PURE__ */ ((Key_Eligibilities2) => {
  Key_Eligibilities2["Eligibility_ByNamespace"] = "Legal.Eligibilities.Eligibility_ByNamespace";
  Key_Eligibilities2["UserEligibility_ByCountryCode_ByClientId_ByUserId"] = "Legal.Eligibilities.UserEligibility_ByCountryCode_ByClientId_ByUserId";
  return Key_Eligibilities2;
})(Key_Eligibilities || {});
var useEligibilitiesApi_GetEligibility_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EligibilitiesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEligibility_ByNamespace();
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Legal.Eligibilities.Eligibility_ByNamespace" /* Eligibility_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EligibilitiesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUserEligibility_ByCountryCode_ByClientId_ByUserId(input2.countryCode, input2.clientId, input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Legal.Eligibilities.UserEligibility_ByCountryCode_ByClientId_ByUserId" /* UserEligibility_ByCountryCode_ByClientId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/LocalizedPolicyVersions.query.ts
import { useQuery as useQuery14 } from "@tanstack/react-query";
var Key_LocalizedPolicyVersions = /* @__PURE__ */ ((Key_LocalizedPolicyVersions2) => {
  Key_LocalizedPolicyVersions2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersions.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersions2;
})(Key_LocalizedPolicyVersions || {});
var useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Legal.LocalizedPolicyVersions.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/LocalizedPolicyVersionsWithNamespace.query.ts
import { useQuery as useQuery15 } from "@tanstack/react-query";
var Key_LocalizedPolicyVersionsWithNamespace = /* @__PURE__ */ ((Key_LocalizedPolicyVersionsWithNamespace2) => {
  Key_LocalizedPolicyVersionsWithNamespace2["LocalizedPolicyVersion_ByLocalizedPolicyVersionId"] = "Legal.LocalizedPolicyVersionsWithNamespace.LocalizedPolicyVersion_ByLocalizedPolicyVersionId";
  return Key_LocalizedPolicyVersionsWithNamespace2;
})(Key_LocalizedPolicyVersionsWithNamespace || {});
var useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LocalizedPolicyVersionsWithNamespaceApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocalizedPolicyVersion_ByLocalizedPolicyVersionId(input2.localizedPolicyVersionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Legal.LocalizedPolicyVersionsWithNamespace.LocalizedPolicyVersion_ByLocalizedPolicyVersionId" /* LocalizedPolicyVersion_ByLocalizedPolicyVersionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Policies.query.ts
import { useQuery as useQuery16 } from "@tanstack/react-query";
var Key_Policies = /* @__PURE__ */ ((Key_Policies2) => {
  Key_Policies2["PoliciesCountriesList"] = "Legal.Policies.PoliciesCountriesList";
  Key_Policies2["Policy_ByNamespace"] = "Legal.Policies.Policy_ByNamespace";
  Key_Policies2["PolicyCountry_ByCountryCode"] = "Legal.Policies.PolicyCountry_ByCountryCode";
  Key_Policies2["PolicyCountry_ByCountryCode_ByNS"] = "Legal.Policies.PolicyCountry_ByCountryCode_ByNS";
  return Key_Policies2;
})(Key_Policies || {});
var usePoliciesApi_GetPoliciesCountriesList = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPoliciesCountriesList();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Legal.Policies.PoliciesCountriesList" /* PoliciesCountriesList */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePoliciesApi_GetPolicy_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPolicy_ByNamespace(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Legal.Policies.Policy_ByNamespace" /* Policy_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePoliciesApi_GetPolicyCountry_ByCountryCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyCountry_ByCountryCode(input2.countryCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Legal.Policies.PolicyCountry_ByCountryCode" /* PolicyCountry_ByCountryCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PoliciesApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPolicyCountry_ByCountryCode_ByNS(input2.countryCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Legal.Policies.PolicyCountry_ByCountryCode_ByNS" /* PolicyCountry_ByCountryCode_ByNS */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Utility.query.ts
import { useQuery as useQuery17 } from "@tanstack/react-query";
var Key_Utility = /* @__PURE__ */ ((Key_Utility2) => {
  Key_Utility2["Readiness"] = "Legal.Utility.Readiness";
  return Key_Utility2;
})(Key_Utility || {});
var useUtilityApi_GetReadiness = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UtilityApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getReadiness();
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Legal.Utility.Readiness" /* Readiness */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
export {
  Key_Agreement,
  Key_AgreementAdmin,
  Key_AgreementWithNamespaceAdmin,
  Key_AnonymizationAdmin,
  Key_BaseLegalPoliciesAdmin,
  Key_BaseLegalPoliciesWithNamespaceAdmin,
  Key_Eligibilities,
  Key_LocalizedPolicyVersions,
  Key_LocalizedPolicyVersionsAdmin,
  Key_LocalizedPolicyVersionsWithNamespace,
  Key_LocalizedPolicyVersionsWithNamespaceAdmin,
  Key_Policies,
  Key_PoliciesAdmin,
  Key_PoliciesWithNamespaceAdmin,
  Key_PolicyVersionsAdmin,
  Key_PolicyVersionsWithNamespaceAdmin,
  Key_UserAgreementAdmin,
  Key_UserEligibilitiesAdmin,
  Key_UserInfoAdmin,
  Key_Utility,
  useAgreementAdminApi_GetAgreementPolicyUser_ByUserId,
  useAgreementAdminApi_GetAgreementsPolicyVersionsUsers,
  useAgreementAdminApi_PatchAgreementLocalizedPolicyVersionPreferenceUserId_ByUserIdMutation,
  useAgreementApi_CreateAgreementLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useAgreementApi_CreateAgreementPolicyMutation,
  useAgreementApi_CreateAgreementPolicyUser_ByUserIdMutation,
  useAgreementApi_CreateUserPolicyAgreement_ByCountryCode_ByClientId_ByUserIdMutation,
  useAgreementApi_GetAgreementsPolicies,
  useAgreementApi_PatchAgreementLocalizedPolicyVersionPreferenceMutation,
  useAgreementWithNamespaceAdminApi_CreateAgreementMutation,
  useAgreementWithNamespaceAdminApi_CreateAgreementPolicyVersionUserExportCsvInitiateMutation,
  useAgreementWithNamespaceAdminApi_GetAgreementPolicyUser_ByUserId,
  useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsers,
  useAgreementWithNamespaceAdminApi_GetAgreementsPolicyVersionsUsersExportCsvDownload,
  useAnonymizationAdminApi_DeleteAnonymizationAgreement_ByUserIdMutation,
  useBaseLegalPoliciesAdminApi_CreateBasePolicyMutation,
  useBaseLegalPoliciesAdminApi_GetBasePolicies,
  useBaseLegalPoliciesAdminApi_GetBasePolicy_ByBasePolicyId,
  useBaseLegalPoliciesAdminApi_GetCountry_ByBasePolicyId_ByCountryCode,
  useBaseLegalPoliciesAdminApi_GetPolicyTypes,
  useBaseLegalPoliciesAdminApi_PatchBasePolicy_ByBasePolicyIdMutation,
  useBaseLegalPoliciesWithNamespaceAdminApi_CreateBasePolicyMutation,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicies,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetBasePolicy_ByBasePolicyId,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetCountry_ByBasePolicyId_ByCountryCode,
  useBaseLegalPoliciesWithNamespaceAdminApi_GetPolicyTypes,
  useBaseLegalPoliciesWithNamespaceAdminApi_PatchBasePolicy_ByBasePolicyIdMutation,
  useEligibilitiesApi_GetEligibility_ByNamespace,
  useEligibilitiesApi_GetUserEligibility_ByCountryCode_ByClientId_ByUserId,
  useLocalizedPolicyVersionsAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId,
  useLocalizedPolicyVersionsAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateAttachment_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_CreateLocalizedPolicyVersionVersion_ByPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersionVersion_ByPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_PatchDefault_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceAdminApi_UpdateLocalizedPolicyVersion_ByLocalizedPolicyVersionIdMutation,
  useLocalizedPolicyVersionsWithNamespaceApi_GetLocalizedPolicyVersion_ByLocalizedPolicyVersionId,
  usePoliciesAdminApi_GetPolicyCountry_ByCountryCode,
  usePoliciesAdminApi_PatchDefault_ByPolicyIdMutation,
  usePoliciesAdminApi_PatchPolicy_ByPolicyIdMutation,
  usePoliciesApi_GetPoliciesCountriesList,
  usePoliciesApi_GetPolicyCountry_ByCountryCode,
  usePoliciesApi_GetPolicyCountry_ByCountryCode_ByNS,
  usePoliciesApi_GetPolicy_ByNamespace,
  usePoliciesWithNamespaceAdminApi_PatchDefault_ByPolicyIdMutation,
  usePoliciesWithNamespaceAdminApi_PatchPolicy_ByPolicyIdMutation,
  usePolicyVersionsAdminApi_CreateVersion_ByPolicyIdMutation,
  usePolicyVersionsAdminApi_GetVersions_ByPolicyId,
  usePolicyVersionsAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation,
  usePolicyVersionsAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_CreateVersion_ByPolicyIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_GetVersions_ByPolicyId,
  usePolicyVersionsWithNamespaceAdminApi_PatchLatestPolicy_ByPolicyVersionIdMutation,
  usePolicyVersionsWithNamespaceAdminApi_PatchPolicyVersion_ByPolicyVersionIdMutation,
  useUserAgreementAdminApi_CreateAgreementPolicy_ByUserIdMutation,
  useUserEligibilitiesAdminApi_GetEligibilities_ByUserId,
  useUserInfoAdminApi_DeleteUserInfoMutation,
  useUserInfoAdminApi_GetUserInfo,
  useUserInfoAdminApi_UpdateUserInfoMutation,
  useUtilityApi_GetReadiness
};
