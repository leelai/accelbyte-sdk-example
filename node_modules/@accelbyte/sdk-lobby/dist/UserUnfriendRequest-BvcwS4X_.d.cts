import { z } from 'zod';

declare const GlobalConfiguration: z.ZodObject<{
    regionRetryMapping: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
    regionURLMapping: z.ZodArray<z.ZodString, "many">;
    testGameMode: z.ZodString;
    testRegionURLMapping: z.ZodArray<z.ZodString, "many">;
    testTargetUserIDs: z.ZodArray<z.ZodString, "many">;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    regionRetryMapping: Record<string, string[]>;
    regionURLMapping: string[];
    testGameMode: string;
    testRegionURLMapping: string[];
    testTargetUserIDs: string[];
    updatedAt: string;
}, {
    regionRetryMapping: Record<string, string[]>;
    regionURLMapping: string[];
    testGameMode: string;
    testRegionURLMapping: string[];
    testTargetUserIDs: string[];
    updatedAt: string;
}>;
interface GlobalConfiguration extends z.TypeOf<typeof GlobalConfiguration> {
}

declare const PutGlobalConfigurationRequest: z.ZodObject<{
    regionRetryMapping: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
    regionURLMapping: z.ZodArray<z.ZodString, "many">;
    testGameMode: z.ZodString;
    testRegionURLMapping: z.ZodArray<z.ZodString, "many">;
    testTargetUserIDs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    regionRetryMapping: Record<string, string[]>;
    regionURLMapping: string[];
    testGameMode: string;
    testRegionURLMapping: string[];
    testTargetUserIDs: string[];
}, {
    regionRetryMapping: Record<string, string[]>;
    regionURLMapping: string[];
    testGameMode: string;
    testRegionURLMapping: string[];
    testTargetUserIDs: string[];
}>;
interface PutGlobalConfigurationRequest extends z.TypeOf<typeof PutGlobalConfigurationRequest> {
}

declare const ConfigList: z.ZodObject<{
    configs: z.ZodArray<z.ZodObject<{
        allowInviteNonConnectedUser: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        allowJoinPartyDuringMatchmaking: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        autoKickOnDisconnect: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        autoKickOnDisconnectDelay: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        cancelTicketOnDisconnect: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        chatRateLimitBurst: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        chatRateLimitDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        concurrentUsersLimit: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        disableInvitationOnJoinParty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        disableRemoveSocketOldConnection: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        enableChat: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        entitlementCheck: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        entitlementItemID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        generalRateLimitBurst: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        generalRateLimitDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        keepPresenceActivityOnDisconnect: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        maxDSWaitTime: z.ZodNumber;
        maxFriendsLimit: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxPartyMember: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        profanityFilter: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        readyConsentTimeout: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        unregisterDelay: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        maxDSWaitTime: number;
        unregisterDelay: number;
        namespace?: string | null | undefined;
        allowInviteNonConnectedUser?: boolean | null | undefined;
        allowJoinPartyDuringMatchmaking?: boolean | null | undefined;
        autoKickOnDisconnect?: boolean | null | undefined;
        autoKickOnDisconnectDelay?: number | null | undefined;
        cancelTicketOnDisconnect?: boolean | null | undefined;
        chatRateLimitBurst?: number | null | undefined;
        chatRateLimitDuration?: number | null | undefined;
        concurrentUsersLimit?: number | null | undefined;
        disableInvitationOnJoinParty?: boolean | null | undefined;
        disableRemoveSocketOldConnection?: boolean | null | undefined;
        enableChat?: boolean | null | undefined;
        entitlementCheck?: boolean | null | undefined;
        entitlementItemID?: string | null | undefined;
        generalRateLimitBurst?: number | null | undefined;
        generalRateLimitDuration?: number | null | undefined;
        keepPresenceActivityOnDisconnect?: boolean | null | undefined;
        maxFriendsLimit?: number | null | undefined;
        maxPartyMember?: number | null | undefined;
        profanityFilter?: boolean | null | undefined;
        readyConsentTimeout?: number | null | undefined;
    }, {
        maxDSWaitTime: number;
        unregisterDelay: number;
        namespace?: string | null | undefined;
        allowInviteNonConnectedUser?: boolean | null | undefined;
        allowJoinPartyDuringMatchmaking?: boolean | null | undefined;
        autoKickOnDisconnect?: boolean | null | undefined;
        autoKickOnDisconnectDelay?: number | null | undefined;
        cancelTicketOnDisconnect?: boolean | null | undefined;
        chatRateLimitBurst?: number | null | undefined;
        chatRateLimitDuration?: number | null | undefined;
        concurrentUsersLimit?: number | null | undefined;
        disableInvitationOnJoinParty?: boolean | null | undefined;
        disableRemoveSocketOldConnection?: boolean | null | undefined;
        enableChat?: boolean | null | undefined;
        entitlementCheck?: boolean | null | undefined;
        entitlementItemID?: string | null | undefined;
        generalRateLimitBurst?: number | null | undefined;
        generalRateLimitDuration?: number | null | undefined;
        keepPresenceActivityOnDisconnect?: boolean | null | undefined;
        maxFriendsLimit?: number | null | undefined;
        maxPartyMember?: number | null | undefined;
        profanityFilter?: boolean | null | undefined;
        readyConsentTimeout?: number | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    configs: {
        maxDSWaitTime: number;
        unregisterDelay: number;
        namespace?: string | null | undefined;
        allowInviteNonConnectedUser?: boolean | null | undefined;
        allowJoinPartyDuringMatchmaking?: boolean | null | undefined;
        autoKickOnDisconnect?: boolean | null | undefined;
        autoKickOnDisconnectDelay?: number | null | undefined;
        cancelTicketOnDisconnect?: boolean | null | undefined;
        chatRateLimitBurst?: number | null | undefined;
        chatRateLimitDuration?: number | null | undefined;
        concurrentUsersLimit?: number | null | undefined;
        disableInvitationOnJoinParty?: boolean | null | undefined;
        disableRemoveSocketOldConnection?: boolean | null | undefined;
        enableChat?: boolean | null | undefined;
        entitlementCheck?: boolean | null | undefined;
        entitlementItemID?: string | null | undefined;
        generalRateLimitBurst?: number | null | undefined;
        generalRateLimitDuration?: number | null | undefined;
        keepPresenceActivityOnDisconnect?: boolean | null | undefined;
        maxFriendsLimit?: number | null | undefined;
        maxPartyMember?: number | null | undefined;
        profanityFilter?: boolean | null | undefined;
        readyConsentTimeout?: number | null | undefined;
    }[];
}, {
    configs: {
        maxDSWaitTime: number;
        unregisterDelay: number;
        namespace?: string | null | undefined;
        allowInviteNonConnectedUser?: boolean | null | undefined;
        allowJoinPartyDuringMatchmaking?: boolean | null | undefined;
        autoKickOnDisconnect?: boolean | null | undefined;
        autoKickOnDisconnectDelay?: number | null | undefined;
        cancelTicketOnDisconnect?: boolean | null | undefined;
        chatRateLimitBurst?: number | null | undefined;
        chatRateLimitDuration?: number | null | undefined;
        concurrentUsersLimit?: number | null | undefined;
        disableInvitationOnJoinParty?: boolean | null | undefined;
        disableRemoveSocketOldConnection?: boolean | null | undefined;
        enableChat?: boolean | null | undefined;
        entitlementCheck?: boolean | null | undefined;
        entitlementItemID?: string | null | undefined;
        generalRateLimitBurst?: number | null | undefined;
        generalRateLimitDuration?: number | null | undefined;
        keepPresenceActivityOnDisconnect?: boolean | null | undefined;
        maxFriendsLimit?: number | null | undefined;
        maxPartyMember?: number | null | undefined;
        profanityFilter?: boolean | null | undefined;
        readyConsentTimeout?: number | null | undefined;
    }[];
}>;
interface ConfigList extends z.TypeOf<typeof ConfigList> {
}

declare const ConfigReq: z.ZodObject<{
    allowInviteNonConnectedUser: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    allowJoinPartyDuringMatchmaking: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    autoKickOnDisconnect: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    autoKickOnDisconnectDelay: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    cancelTicketOnDisconnect: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    chatRateLimitBurst: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chatRateLimitDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    concurrentUsersLimit: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    disableInvitationOnJoinParty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    enableChat: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    entitlementCheck: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    entitlementItemID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    generalRateLimitBurst: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    generalRateLimitDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    keepPresenceActivityOnDisconnect: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    maxDSWaitTime: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    maxFriendsLimit: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    maxPartyMember: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    profanityFilter: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    readyConsentTimeout: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    unregisterDelay: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    allowInviteNonConnectedUser?: boolean | null | undefined;
    allowJoinPartyDuringMatchmaking?: boolean | null | undefined;
    autoKickOnDisconnect?: boolean | null | undefined;
    autoKickOnDisconnectDelay?: number | null | undefined;
    cancelTicketOnDisconnect?: boolean | null | undefined;
    chatRateLimitBurst?: number | null | undefined;
    chatRateLimitDuration?: number | null | undefined;
    concurrentUsersLimit?: number | null | undefined;
    disableInvitationOnJoinParty?: boolean | null | undefined;
    enableChat?: boolean | null | undefined;
    entitlementCheck?: boolean | null | undefined;
    entitlementItemID?: string | null | undefined;
    generalRateLimitBurst?: number | null | undefined;
    generalRateLimitDuration?: number | null | undefined;
    keepPresenceActivityOnDisconnect?: boolean | null | undefined;
    maxDSWaitTime?: number | null | undefined;
    maxFriendsLimit?: number | null | undefined;
    maxPartyMember?: number | null | undefined;
    profanityFilter?: boolean | null | undefined;
    readyConsentTimeout?: number | null | undefined;
    unregisterDelay?: number | null | undefined;
}, {
    allowInviteNonConnectedUser?: boolean | null | undefined;
    allowJoinPartyDuringMatchmaking?: boolean | null | undefined;
    autoKickOnDisconnect?: boolean | null | undefined;
    autoKickOnDisconnectDelay?: number | null | undefined;
    cancelTicketOnDisconnect?: boolean | null | undefined;
    chatRateLimitBurst?: number | null | undefined;
    chatRateLimitDuration?: number | null | undefined;
    concurrentUsersLimit?: number | null | undefined;
    disableInvitationOnJoinParty?: boolean | null | undefined;
    enableChat?: boolean | null | undefined;
    entitlementCheck?: boolean | null | undefined;
    entitlementItemID?: string | null | undefined;
    generalRateLimitBurst?: number | null | undefined;
    generalRateLimitDuration?: number | null | undefined;
    keepPresenceActivityOnDisconnect?: boolean | null | undefined;
    maxDSWaitTime?: number | null | undefined;
    maxFriendsLimit?: number | null | undefined;
    maxPartyMember?: number | null | undefined;
    profanityFilter?: boolean | null | undefined;
    readyConsentTimeout?: number | null | undefined;
    unregisterDelay?: number | null | undefined;
}>;
interface ConfigReq extends z.TypeOf<typeof ConfigReq> {
}

declare const Configuration: z.ZodObject<{
    logLevel: z.ZodOptional<z.ZodNullable<z.ZodEnum<["debug", "error", "fatal", "info", "panic", "trace", "warning"]>>>;
    logLevelDB: z.ZodOptional<z.ZodNullable<z.ZodEnum<["debug", "error", "fatal", "info", "panic", "trace", "warning"]>>>;
    slowQueryThreshold: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    socketLogEnabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    logLevel?: "error" | "debug" | "fatal" | "info" | "panic" | "trace" | "warning" | null | undefined;
    logLevelDB?: "error" | "debug" | "fatal" | "info" | "panic" | "trace" | "warning" | null | undefined;
    slowQueryThreshold?: number | null | undefined;
    socketLogEnabled?: boolean | null | undefined;
}, {
    logLevel?: "error" | "debug" | "fatal" | "info" | "panic" | "trace" | "warning" | null | undefined;
    logLevelDB?: "error" | "debug" | "fatal" | "info" | "panic" | "trace" | "warning" | null | undefined;
    slowQueryThreshold?: number | null | undefined;
    socketLogEnabled?: boolean | null | undefined;
}>;
interface Configuration extends z.TypeOf<typeof Configuration> {
}

declare const ImportConfigResponse: z.ZodObject<{
    failedConfigs: z.ZodArray<z.ZodString, "many">;
    ignoredConfigs: z.ZodArray<z.ZodString, "many">;
    newConfigs: z.ZodArray<z.ZodString, "many">;
    replacedConfigs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    failedConfigs: string[];
    ignoredConfigs: string[];
    newConfigs: string[];
    replacedConfigs: string[];
}, {
    failedConfigs: string[];
    ignoredConfigs: string[];
    newConfigs: string[];
    replacedConfigs: string[];
}>;
interface ImportConfigResponse extends z.TypeOf<typeof ImportConfigResponse> {
}

declare const FriendshipConnectionResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        friendId: z.ZodString;
        subjectId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        friendId: string;
        subjectId: string;
    }, {
        friendId: string;
        subjectId: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        friendId: string;
        subjectId: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        friendId: string;
        subjectId: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface FriendshipConnectionResponse extends z.TypeOf<typeof FriendshipConnectionResponse> {
}

declare const GetFriendsResponse: z.ZodObject<{
    friendIDs: z.ZodArray<z.ZodString, "many">;
    friends: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        platformId: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        platformId: string;
        userId: string;
    }, {
        platformId: string;
        userId: string;
    }>, "many">>>;
    friendsSinceTimes: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
    friendsSinceTimes: string[];
    friends?: {
        platformId: string;
        userId: string;
    }[] | null | undefined;
}, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
    friendsSinceTimes: string[];
    friends?: {
        platformId: string;
        userId: string;
    }[] | null | undefined;
}>;
interface GetFriendsResponse extends z.TypeOf<typeof GetFriendsResponse> {
}

declare const LoadIncomingFriendsWithTimeResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        friendId: z.ZodString;
        requestedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        friendId: string;
        requestedAt: string;
    }, {
        friendId: string;
        requestedAt: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface LoadIncomingFriendsWithTimeResponse extends z.TypeOf<typeof LoadIncomingFriendsWithTimeResponse> {
}

declare const LoadOutgoingFriendsWithTimeResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        friendId: z.ZodString;
        requestedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        friendId: string;
        requestedAt: string;
    }, {
        friendId: string;
        requestedAt: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface LoadOutgoingFriendsWithTimeResponse extends z.TypeOf<typeof LoadOutgoingFriendsWithTimeResponse> {
}

declare const PartyData: z.ZodObject<{
    custom_attribute: z.ZodRecord<z.ZodString, z.ZodAny>;
    invitees: z.ZodArray<z.ZodString, "many">;
    leader: z.ZodString;
    members: z.ZodArray<z.ZodString, "many">;
    namespace: z.ZodString;
    partyId: z.ZodString;
    updatedAt: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    updatedAt: number;
    custom_attribute: Record<string, any>;
    invitees: string[];
    leader: string;
    members: string[];
    partyId: string;
}, {
    namespace: string;
    updatedAt: number;
    custom_attribute: Record<string, any>;
    invitees: string[];
    leader: string;
    members: string[];
    partyId: string;
}>;
interface PartyData extends z.TypeOf<typeof PartyData> {
}

declare const PartyPutCustomAttributesRequest: z.ZodObject<{
    custom_attribute: z.ZodRecord<z.ZodString, z.ZodAny>;
    updatedAt: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    updatedAt: number;
    custom_attribute: Record<string, any>;
}, {
    updatedAt: number;
    custom_attribute: Record<string, any>;
}>;
interface PartyPutCustomAttributesRequest extends z.TypeOf<typeof PartyPutCustomAttributesRequest> {
}

declare const BulkUsersFreeFormNotificationRequestV1: z.ZodObject<{
    message: z.ZodString;
    topicName: z.ZodString;
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    message: string;
    topicName: string;
    userIds: string[];
}, {
    message: string;
    topicName: string;
    userIds: string[];
}>;
interface BulkUsersFreeFormNotificationRequestV1 extends z.TypeOf<typeof BulkUsersFreeFormNotificationRequestV1> {
}

declare const CreateTemplateRequest: z.ZodObject<{
    templateContent: z.ZodString;
    templateLanguage: z.ZodString;
    templateSlug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateContent: string;
    templateLanguage: string;
    templateSlug: string;
}, {
    templateContent: string;
    templateLanguage: string;
    templateSlug: string;
}>;
interface CreateTemplateRequest extends z.TypeOf<typeof CreateTemplateRequest> {
}

declare const CreateTopicRequestV1: z.ZodObject<{
    description: z.ZodString;
    topicName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    topicName: string;
    description: string;
}, {
    topicName: string;
    description: string;
}>;
interface CreateTopicRequestV1 extends z.TypeOf<typeof CreateTopicRequestV1> {
}

declare const FreeFormNotificationRequestV1: z.ZodObject<{
    message: z.ZodString;
    topicName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    topicName: string;
}, {
    message: string;
    topicName: string;
}>;
interface FreeFormNotificationRequestV1 extends z.TypeOf<typeof FreeFormNotificationRequestV1> {
}

declare const GetAllNotificationTemplateSlugResp: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        lastDraftAt: z.ZodString;
        lastPublishedAt: z.ZodString;
        templateContent: z.ZodObject<{
            draft: z.ZodString;
            published: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            draft: string;
            published: string;
        }, {
            draft: string;
            published: string;
        }>;
        templateLanguage: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface GetAllNotificationTemplateSlugResp extends z.TypeOf<typeof GetAllNotificationTemplateSlugResp> {
}

declare const GetAllNotificationTopicsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        createdAt: z.ZodNumber;
        description: z.ZodString;
        namespace: z.ZodString;
        topicName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        topicName: string;
        description: string;
        createdAt: number;
    }, {
        namespace: string;
        topicName: string;
        description: string;
        createdAt: number;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        topicName: string;
        description: string;
        createdAt: number;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        topicName: string;
        description: string;
        createdAt: number;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface GetAllNotificationTopicsResponse extends z.TypeOf<typeof GetAllNotificationTopicsResponse> {
}

declare const Localization: z.ZodObject<{
    lastDraftAt: z.ZodString;
    lastPublishedAt: z.ZodString;
    templateContent: z.ZodObject<{
        draft: z.ZodString;
        published: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        draft: string;
        published: string;
    }, {
        draft: string;
        published: string;
    }>;
    templateLanguage: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateContent: {
        draft: string;
        published: string;
    };
    templateLanguage: string;
    lastDraftAt: string;
    lastPublishedAt: string;
}, {
    templateContent: {
        draft: string;
        published: string;
    };
    templateLanguage: string;
    lastDraftAt: string;
    lastPublishedAt: string;
}>;
interface Localization extends z.TypeOf<typeof Localization> {
}

declare const NotificationTemplateResponseArray: z.ZodArray<z.ZodObject<{
    templateLocalizations: z.ZodArray<z.ZodObject<{
        lastDraftAt: z.ZodString;
        lastPublishedAt: z.ZodString;
        templateContent: z.ZodObject<{
            draft: z.ZodString;
            published: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            draft: string;
            published: string;
        }, {
            draft: string;
            published: string;
        }>;
        templateLanguage: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }>, "many">;
    templateSlug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateSlug: string;
    templateLocalizations: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
}, {
    templateSlug: string;
    templateLocalizations: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
}>, "many">;
interface NotificationTemplateResponseArray extends z.TypeOf<typeof NotificationTemplateResponseArray> {
}

declare const NotificationTopicResponseV1: z.ZodObject<{
    createdAt: z.ZodNumber;
    description: z.ZodString;
    namespace: z.ZodString;
    topicName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    topicName: string;
    description: string;
    createdAt: number;
}, {
    namespace: string;
    topicName: string;
    description: string;
    createdAt: number;
}>;
interface NotificationTopicResponseV1 extends z.TypeOf<typeof NotificationTopicResponseV1> {
}

declare const NotificationWithTemplateRequestV1: z.ZodObject<{
    templateContext: z.ZodRecord<z.ZodString, z.ZodString>;
    templateLanguage: z.ZodString;
    templateSlug: z.ZodString;
    topicName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    topicName: string;
    templateLanguage: string;
    templateSlug: string;
    templateContext: Record<string, string>;
}, {
    topicName: string;
    templateLanguage: string;
    templateSlug: string;
    templateContext: Record<string, string>;
}>;
interface NotificationWithTemplateRequestV1 extends z.TypeOf<typeof NotificationWithTemplateRequestV1> {
}

declare const UpdateTemplateRequest: z.ZodObject<{
    templateContent: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateContent: string;
}, {
    templateContent: string;
}>;
interface UpdateTemplateRequest extends z.TypeOf<typeof UpdateTemplateRequest> {
}

declare const UpdateTopicRequest: z.ZodObject<{
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
}, {
    description: string;
}>;
interface UpdateTopicRequest extends z.TypeOf<typeof UpdateTopicRequest> {
}

declare const GetAllPlayerBlockedByUsersResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        blockedAt: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        blockedAt: string;
    }, {
        userId: string;
        blockedAt: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        userId: string;
        blockedAt: string;
    }[];
}, {
    data: {
        userId: string;
        blockedAt: string;
    }[];
}>;
interface GetAllPlayerBlockedByUsersResponse extends z.TypeOf<typeof GetAllPlayerBlockedByUsersResponse> {
}

declare const GetAllPlayerBlockedUsersResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        blockedAt: z.ZodString;
        blockedUserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        blockedAt: string;
        blockedUserId: string;
    }, {
        blockedAt: string;
        blockedUserId: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        blockedAt: string;
        blockedUserId: string;
    }[];
}, {
    data: {
        blockedAt: string;
        blockedUserId: string;
    }[];
}>;
interface GetAllPlayerBlockedUsersResponse extends z.TypeOf<typeof GetAllPlayerBlockedUsersResponse> {
}

declare const GetAllPlayerSessionAttributeResponse: z.ZodObject<{
    attributes: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    attributes: Record<string, string>;
}, {
    attributes: Record<string, string>;
}>;
interface GetAllPlayerSessionAttributeResponse extends z.TypeOf<typeof GetAllPlayerSessionAttributeResponse> {
}

declare const GetBulkAllPlayerBlockedUsersRequest: z.ZodObject<{
    listBlockedUserId: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    listBlockedUserId: string[];
}, {
    listBlockedUserId: string[];
}>;
interface GetBulkAllPlayerBlockedUsersRequest extends z.TypeOf<typeof GetBulkAllPlayerBlockedUsersRequest> {
}

declare const GetBulkAllPlayerBlockedUsersResponse: z.ZodObject<{
    data: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
        blockedAt: z.ZodString;
        blockedUserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        blockedAt: string;
        blockedUserId: string;
    }, {
        blockedAt: string;
        blockedUserId: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    data: Record<string, {
        blockedAt: string;
        blockedUserId: string;
    }[]>;
}, {
    data: Record<string, {
        blockedAt: string;
        blockedUserId: string;
    }[]>;
}>;
interface GetBulkAllPlayerBlockedUsersResponse extends z.TypeOf<typeof GetBulkAllPlayerBlockedUsersResponse> {
}

declare const GetLobbyCcuResponse: z.ZodObject<{
    countCurrentUsers: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    countCurrentUsers: number;
}, {
    countCurrentUsers: number;
}>;
interface GetLobbyCcuResponse extends z.TypeOf<typeof GetLobbyCcuResponse> {
}

declare const GetPlayerSessionAttributeResponse: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    key: string;
}, {
    value: string;
    key: string;
}>;
interface GetPlayerSessionAttributeResponse extends z.TypeOf<typeof GetPlayerSessionAttributeResponse> {
}

declare const ListBlockedPlayerRequest: z.ZodObject<{
    listBlockedUserId: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    listBlockedUserId: string[];
}, {
    listBlockedUserId: string[];
}>;
interface ListBlockedPlayerRequest extends z.TypeOf<typeof ListBlockedPlayerRequest> {
}

declare const ListUnblockPlayerRequest: z.ZodObject<{
    listUnblockUserId: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    listUnblockUserId: string[];
}, {
    listUnblockUserId: string[];
}>;
interface ListUnblockPlayerRequest extends z.TypeOf<typeof ListUnblockPlayerRequest> {
}

declare const SetPlayerSessionAttributeRequest: z.ZodObject<{
    attributes: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    attributes: Record<string, string>;
}, {
    attributes: Record<string, string>;
}>;
interface SetPlayerSessionAttributeRequest extends z.TypeOf<typeof SetPlayerSessionAttributeRequest> {
}

declare const AdminAddProfanityFilterIntoListRequest: z.ZodObject<{
    filter: z.ZodString;
    note: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filter: string;
    note: string;
}, {
    filter: string;
    note: string;
}>;
interface AdminAddProfanityFilterIntoListRequest extends z.TypeOf<typeof AdminAddProfanityFilterIntoListRequest> {
}

declare const AdminAddProfanityFiltersRequest: z.ZodObject<{
    filters: z.ZodArray<z.ZodObject<{
        filter: z.ZodString;
        note: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        filter: string;
        note: string;
    }, {
        filter: string;
        note: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    filters: {
        filter: string;
        note: string;
    }[];
}, {
    filters: {
        filter: string;
        note: string;
    }[];
}>;
interface AdminAddProfanityFiltersRequest extends z.TypeOf<typeof AdminAddProfanityFiltersRequest> {
}

declare const AdminCreateProfanityListRequest: z.ZodObject<{
    isEnabled: z.ZodBoolean;
    isMandatory: z.ZodBoolean;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    isEnabled: boolean;
    isMandatory: boolean;
    name: string;
}, {
    isEnabled: boolean;
    isMandatory: boolean;
    name: string;
}>;
interface AdminCreateProfanityListRequest extends z.TypeOf<typeof AdminCreateProfanityListRequest> {
}

declare const AdminDeleteProfanityFilterRequest: z.ZodObject<{
    filter: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filter: string;
}, {
    filter: string;
}>;
interface AdminDeleteProfanityFilterRequest extends z.TypeOf<typeof AdminDeleteProfanityFilterRequest> {
}

declare const AdminGetProfanityListFiltersV1Response: z.ZodObject<{
    filters: z.ZodArray<z.ZodObject<{
        filter: z.ZodString;
        listName: z.ZodString;
        namespace: z.ZodString;
        note: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        filter: string;
        note: string;
        listName: string;
    }, {
        namespace: string;
        filter: string;
        note: string;
        listName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    filters: {
        namespace: string;
        filter: string;
        note: string;
        listName: string;
    }[];
}, {
    filters: {
        namespace: string;
        filter: string;
        note: string;
        listName: string;
    }[];
}>;
interface AdminGetProfanityListFiltersV1Response extends z.TypeOf<typeof AdminGetProfanityListFiltersV1Response> {
}

declare const AdminGetProfanityListsListResponseArray: z.ZodArray<z.ZodObject<{
    isEnabled: z.ZodBoolean;
    isMandatory: z.ZodBoolean;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    isEnabled: boolean;
    isMandatory: boolean;
    name: string;
}, {
    isEnabled: boolean;
    isMandatory: boolean;
    name: string;
}>, "many">;
interface AdminGetProfanityListsListResponseArray extends z.TypeOf<typeof AdminGetProfanityListsListResponseArray> {
}

declare const AdminSetProfanityRuleForNamespaceRequest: z.ZodObject<{
    rule: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rule: string;
}, {
    rule: string;
}>;
interface AdminSetProfanityRuleForNamespaceRequest extends z.TypeOf<typeof AdminSetProfanityRuleForNamespaceRequest> {
}

declare const AdminUpdateProfanityList: z.ZodObject<{
    isEnabled: z.ZodBoolean;
    isMandatory: z.ZodBoolean;
    newName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    isEnabled: boolean;
    isMandatory: boolean;
    newName: string;
}, {
    isEnabled: boolean;
    isMandatory: boolean;
    newName: string;
}>;
interface AdminUpdateProfanityList extends z.TypeOf<typeof AdminUpdateProfanityList> {
}

declare const AdminVerifyMessageProfanityRequest: z.ZodObject<{
    message: z.ZodString;
    profanityLevel: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    profanityLevel: string;
}, {
    message: string;
    profanityLevel: string;
}>;
interface AdminVerifyMessageProfanityRequest extends z.TypeOf<typeof AdminVerifyMessageProfanityRequest> {
}

declare const AdminVerifyMessageProfanityResponse: z.ZodObject<{
    filteredMessage: z.ZodString;
    hasProfanity: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    filteredMessage: string;
    hasProfanity: boolean;
}, {
    filteredMessage: string;
    hasProfanity: boolean;
}>;
interface AdminVerifyMessageProfanityResponse extends z.TypeOf<typeof AdminVerifyMessageProfanityResponse> {
}

declare const DebugProfanityFilterRequest: z.ZodObject<{
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
}, {
    text: string;
}>;
interface DebugProfanityFilterRequest extends z.TypeOf<typeof DebugProfanityFilterRequest> {
}

declare const ProfanityFilterArray: z.ZodArray<z.ZodObject<{
    filter: z.ZodString;
    listName: z.ZodString;
    namespace: z.ZodString;
    note: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    filter: string;
    note: string;
    listName: string;
}, {
    namespace: string;
    filter: string;
    note: string;
    listName: string;
}>, "many">;
interface ProfanityFilterArray extends z.TypeOf<typeof ProfanityFilterArray> {
}

declare const ProfanityRule: z.ZodObject<{
    Namespace: z.ZodString;
    Rule: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    Rule: string;
}, {
    Namespace: string;
    Rule: string;
}>;
interface ProfanityRule extends z.TypeOf<typeof ProfanityRule> {
}

declare const CreateConfigRequest: z.ZodObject<{
    apiKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
}, {
    apiKey: string;
}>;
interface CreateConfigRequest extends z.TypeOf<typeof CreateConfigRequest> {
}

declare const CreateConfigResponse: z.ZodObject<{
    apiKey: z.ZodString;
    namespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    apiKey: string;
}, {
    namespace: string;
    apiKey: string;
}>;
interface CreateConfigResponse extends z.TypeOf<typeof CreateConfigResponse> {
}

declare const GetConfigResponse: z.ZodObject<{
    apiKey: z.ZodString;
    namespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    apiKey: string;
}, {
    namespace: string;
    apiKey: string;
}>;
interface GetConfigResponse extends z.TypeOf<typeof GetConfigResponse> {
}

declare const UpdateConfigRequest: z.ZodObject<{
    apiKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
}, {
    apiKey: string;
}>;
interface UpdateConfigRequest extends z.TypeOf<typeof UpdateConfigRequest> {
}

declare const UpdateConfigResponse: z.ZodObject<{
    apiKey: z.ZodString;
    namespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    apiKey: string;
}, {
    namespace: string;
    apiKey: string;
}>;
interface UpdateConfigResponse extends z.TypeOf<typeof UpdateConfigResponse> {
}

declare const AppMessageDeclarationArray: z.ZodArray<z.ZodObject<{
    Attributes: z.ZodArray<z.ZodString, "many">;
    Code: z.ZodString;
    CodeName: z.ZodString;
    Section: z.ZodString;
    Service: z.ZodString;
    Text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Attributes: string[];
    Code: string;
    CodeName: string;
    Section: string;
    Service: string;
    Text: string;
}, {
    Attributes: string[];
    Code: string;
    CodeName: string;
    Section: string;
    Service: string;
    Text: string;
}>, "many">;
interface AppMessageDeclarationArray extends z.TypeOf<typeof AppMessageDeclarationArray> {
}

declare const BlockPlayerRequest: z.ZodObject<{
    blockedUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    blockedUserId: string;
}, {
    blockedUserId: string;
}>;
interface BlockPlayerRequest extends z.TypeOf<typeof BlockPlayerRequest> {
}

declare const BulkFriendsRequest: z.ZodObject<{
    friendIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    friendIds: string[];
}, {
    friendIds: string[];
}>;
interface BulkFriendsRequest extends z.TypeOf<typeof BulkFriendsRequest> {
}

declare const BulkFriendsResponse: z.ZodObject<{
    rowsAffected: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    rowsAffected: number;
}, {
    rowsAffected: number;
}>;
interface BulkFriendsResponse extends z.TypeOf<typeof BulkFriendsResponse> {
}

declare const CreateTopicRequest: z.ZodObject<{
    description: z.ZodString;
    topic: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
    topic: string;
}, {
    description: string;
    topic: string;
}>;
interface CreateTopicRequest extends z.TypeOf<typeof CreateTopicRequest> {
}

declare const FreeFormNotificationRequest: z.ZodObject<{
    message: z.ZodString;
    topic: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    topic: string;
}, {
    message: string;
    topic: string;
}>;
interface FreeFormNotificationRequest extends z.TypeOf<typeof FreeFormNotificationRequest> {
}

declare const GetUserFriendsResponseArray: z.ZodArray<z.ZodObject<{
    friendIDs: z.ZodArray<z.ZodString, "many">;
    friends: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        platformId: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        platformId: string;
        userId: string;
    }, {
        platformId: string;
        userId: string;
    }>, "many">>>;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
    friends?: {
        platformId: string;
        userId: string;
    }[] | null | undefined;
}, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
    friends?: {
        platformId: string;
        userId: string;
    }[] | null | undefined;
}>, "many">;
interface GetUserFriendsResponseArray extends z.TypeOf<typeof GetUserFriendsResponseArray> {
}

declare const GetUserIncomingFriendsResponseArray: z.ZodArray<z.ZodObject<{
    friendIDs: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
}, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
}>, "many">;
interface GetUserIncomingFriendsResponseArray extends z.TypeOf<typeof GetUserIncomingFriendsResponseArray> {
}

declare const GetUserOutgoingFriendsResponseArray: z.ZodArray<z.ZodObject<{
    friendIDs: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
}, {
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    friendIDs: string[];
}>, "many">;
interface GetUserOutgoingFriendsResponseArray extends z.TypeOf<typeof GetUserOutgoingFriendsResponseArray> {
}

declare const GetUsersPresenceResponse: z.ZodObject<{
    away: z.ZodNumber;
    busy: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        activity: z.ZodString;
        availability: z.ZodString;
        lastSeenAt: z.ZodString;
        namespace: z.ZodString;
        platform: z.ZodString;
        userID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        activity: string;
        availability: string;
        lastSeenAt: string;
        platform: string;
        userID: string;
    }, {
        namespace: string;
        activity: string;
        availability: string;
        lastSeenAt: string;
        platform: string;
        userID: string;
    }>, "many">;
    invisible: z.ZodNumber;
    offline: z.ZodNumber;
    online: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        activity: string;
        availability: string;
        lastSeenAt: string;
        platform: string;
        userID: string;
    }[];
    away: number;
    busy: number;
    invisible: number;
    offline: number;
    online: number;
}, {
    data: {
        namespace: string;
        activity: string;
        availability: string;
        lastSeenAt: string;
        platform: string;
        userID: string;
    }[];
    away: number;
    busy: number;
    invisible: number;
    offline: number;
    online: number;
}>;
interface GetUsersPresenceResponse extends z.TypeOf<typeof GetUsersPresenceResponse> {
}

declare const ListBulkUserPlatformsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        avatarUrl: z.ZodString;
        displayName: z.ZodString;
        platformInfos: z.ZodArray<z.ZodObject<{
            platformDisplayName: z.ZodString;
            platformName: z.ZodString;
            platformUserId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            platformDisplayName: string;
            platformName: string;
            platformUserId: string;
        }, {
            platformDisplayName: string;
            platformName: string;
            platformUserId: string;
        }>, "many">;
        userId: z.ZodString;
        username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        avatarUrl: string;
        displayName: string;
        platformInfos: {
            platformDisplayName: string;
            platformName: string;
            platformUserId: string;
        }[];
        username?: string | null | undefined;
    }, {
        userId: string;
        avatarUrl: string;
        displayName: string;
        platformInfos: {
            platformDisplayName: string;
            platformName: string;
            platformUserId: string;
        }[];
        username?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        userId: string;
        avatarUrl: string;
        displayName: string;
        platformInfos: {
            platformDisplayName: string;
            platformName: string;
            platformUserId: string;
        }[];
        username?: string | null | undefined;
    }[];
}, {
    data: {
        userId: string;
        avatarUrl: string;
        displayName: string;
        platformInfos: {
            platformDisplayName: string;
            platformName: string;
            platformUserId: string;
        }[];
        username?: string | null | undefined;
    }[];
}>;
interface ListBulkUserPlatformsResponse extends z.TypeOf<typeof ListBulkUserPlatformsResponse> {
}

declare const LoadIncomingFriendsWithTimeResponseArray: z.ZodArray<z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        friendId: z.ZodString;
        requestedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        friendId: string;
        requestedAt: string;
    }, {
        friendId: string;
        requestedAt: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>, "many">;
interface LoadIncomingFriendsWithTimeResponseArray extends z.TypeOf<typeof LoadIncomingFriendsWithTimeResponseArray> {
}

declare const LoadOutgoingFriendsWithTimeResponseArray: z.ZodArray<z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        friendId: z.ZodString;
        requestedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        friendId: string;
        requestedAt: string;
    }, {
        friendId: string;
        requestedAt: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        friendId: string;
        requestedAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>, "many">;
interface LoadOutgoingFriendsWithTimeResponseArray extends z.TypeOf<typeof LoadOutgoingFriendsWithTimeResponseArray> {
}

declare const NativeFriendRequest: z.ZodObject<{
    isLogin: z.ZodBoolean;
    platformId: z.ZodString;
    platformToken: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    psnEnv: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    platformId: string;
    isLogin: boolean;
    platformToken?: string | null | undefined;
    psnEnv?: string | null | undefined;
}, {
    platformId: string;
    isLogin: boolean;
    platformToken?: string | null | undefined;
    psnEnv?: string | null | undefined;
}>;
interface NativeFriendRequest extends z.TypeOf<typeof NativeFriendRequest> {
}

declare const NativeFriendSyncResponseArray: z.ZodArray<z.ZodObject<{
    detail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformId: z.ZodString;
    status: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: string;
    platformId: string;
    detail?: string | null | undefined;
}, {
    status: string;
    platformId: string;
    detail?: string | null | undefined;
}>, "many">;
interface NativeFriendSyncResponseArray extends z.TypeOf<typeof NativeFriendSyncResponseArray> {
}

declare const NativeUserBlockRequest: z.ZodObject<{
    platformId: z.ZodString;
    psnEnv: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    platformId: string;
    psnEnv?: string | null | undefined;
}, {
    platformId: string;
    psnEnv?: string | null | undefined;
}>;
interface NativeUserBlockRequest extends z.TypeOf<typeof NativeUserBlockRequest> {
}

declare const NativeUserBlockResponseArray: z.ZodArray<z.ZodObject<{
    detail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformId: z.ZodString;
    status: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: string;
    platformId: string;
    detail?: string | null | undefined;
}, {
    status: string;
    platformId: string;
    detail?: string | null | undefined;
}>, "many">;
interface NativeUserBlockResponseArray extends z.TypeOf<typeof NativeUserBlockResponseArray> {
}

declare const NotificationResponse: z.ZodObject<{
    from: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    lobbySessionID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    loginType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    payload: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reconnectFromCode: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sentAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sequenceID: z.ZodNumber;
    sequenceNumber: z.ZodNumber;
    to: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    topic: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    sequenceID: number;
    sequenceNumber: number;
    topic?: string | null | undefined;
    from?: string | null | undefined;
    id?: string | null | undefined;
    lobbySessionID?: string | null | undefined;
    loginType?: string | null | undefined;
    payload?: string | null | undefined;
    reconnectFromCode?: number | null | undefined;
    sentAt?: string | null | undefined;
    to?: string | null | undefined;
}, {
    type: string;
    sequenceID: number;
    sequenceNumber: number;
    topic?: string | null | undefined;
    from?: string | null | undefined;
    id?: string | null | undefined;
    lobbySessionID?: string | null | undefined;
    loginType?: string | null | undefined;
    payload?: string | null | undefined;
    reconnectFromCode?: number | null | undefined;
    sentAt?: string | null | undefined;
    to?: string | null | undefined;
}>;
interface NotificationResponse extends z.TypeOf<typeof NotificationResponse> {
}

declare const NotificationTopicResponse: z.ZodObject<{
    createdAt: z.ZodNumber;
    description: z.ZodString;
    namespace: z.ZodString;
    topic: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    description: string;
    createdAt: number;
    topic: string;
}, {
    namespace: string;
    description: string;
    createdAt: number;
    topic: string;
}>;
interface NotificationTopicResponse extends z.TypeOf<typeof NotificationTopicResponse> {
}

declare const NotificationWithTemplateRequest: z.ZodObject<{
    templateContext: z.ZodRecord<z.ZodString, z.ZodString>;
    templateLanguage: z.ZodString;
    templateSlug: z.ZodString;
    topic: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateLanguage: string;
    templateSlug: string;
    templateContext: Record<string, string>;
    topic: string;
}, {
    templateLanguage: string;
    templateSlug: string;
    templateContext: Record<string, string>;
    topic: string;
}>;
interface NotificationWithTemplateRequest extends z.TypeOf<typeof NotificationWithTemplateRequest> {
}

declare const PartyPutLimitSizeRequest: z.ZodObject<{
    limit: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    limit: number;
}, {
    limit: number;
}>;
interface PartyPutLimitSizeRequest extends z.TypeOf<typeof PartyPutLimitSizeRequest> {
}

declare const RequestUserPresence: z.ZodObject<{
    userIDs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    userIDs?: string[] | null | undefined;
}, {
    userIDs?: string[] | null | undefined;
}>;
interface RequestUserPresence extends z.TypeOf<typeof RequestUserPresence> {
}

declare const TemplateLocalization: z.ZodObject<{
    lastDraftAt: z.ZodString;
    lastPublishedAt: z.ZodString;
    templateContent: z.ZodObject<{
        draft: z.ZodString;
        published: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        draft: string;
        published: string;
    }, {
        draft: string;
        published: string;
    }>;
    templateLanguage: z.ZodString;
    templateSlug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateContent: {
        draft: string;
        published: string;
    };
    templateLanguage: string;
    templateSlug: string;
    lastDraftAt: string;
    lastPublishedAt: string;
}, {
    templateContent: {
        draft: string;
        published: string;
    };
    templateLanguage: string;
    templateSlug: string;
    lastDraftAt: string;
    lastPublishedAt: string;
}>;
interface TemplateLocalization extends z.TypeOf<typeof TemplateLocalization> {
}

declare const TemplateLocalizationResponse: z.ZodObject<{
    first: z.ZodString;
    last: z.ZodString;
    next: z.ZodString;
    previous: z.ZodString;
    templateLocalization: z.ZodArray<z.ZodObject<{
        lastDraftAt: z.ZodString;
        lastPublishedAt: z.ZodString;
        templateContent: z.ZodObject<{
            draft: z.ZodString;
            published: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            draft: string;
            published: string;
        }, {
            draft: string;
            published: string;
        }>;
        templateLanguage: z.ZodString;
        templateSlug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        templateSlug: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        templateSlug: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    first: string;
    last: string;
    next: string;
    previous: string;
    templateLocalization: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        templateSlug: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
}, {
    first: string;
    last: string;
    next: string;
    previous: string;
    templateLocalization: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        templateSlug: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
}>;
interface TemplateLocalizationResponse extends z.TypeOf<typeof TemplateLocalizationResponse> {
}

declare const TemplateResponseArray: z.ZodArray<z.ZodObject<{
    localizations: z.ZodArray<z.ZodObject<{
        lastDraftAt: z.ZodString;
        lastPublishedAt: z.ZodString;
        templateContent: z.ZodObject<{
            draft: z.ZodString;
            published: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            draft: string;
            published: string;
        }, {
            draft: string;
            published: string;
        }>;
        templateLanguage: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }, {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }>, "many">;
    templateSlug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    templateSlug: string;
    localizations: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
}, {
    templateSlug: string;
    localizations: {
        templateContent: {
            draft: string;
            published: string;
        };
        templateLanguage: string;
        lastDraftAt: string;
        lastPublishedAt: string;
    }[];
}>, "many">;
interface TemplateResponseArray extends z.TypeOf<typeof TemplateResponseArray> {
}

declare const TopicByNamespacesResponse: z.ZodObject<{
    first: z.ZodString;
    last: z.ZodString;
    next: z.ZodString;
    previous: z.ZodString;
    topics: z.ZodArray<z.ZodObject<{
        createdAt: z.ZodNumber;
        description: z.ZodString;
        namespace: z.ZodString;
        topic: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        description: string;
        createdAt: number;
        topic: string;
    }, {
        namespace: string;
        description: string;
        createdAt: number;
        topic: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    first: string;
    last: string;
    next: string;
    previous: string;
    topics: {
        namespace: string;
        description: string;
        createdAt: number;
        topic: string;
    }[];
}, {
    first: string;
    last: string;
    next: string;
    previous: string;
    topics: {
        namespace: string;
        description: string;
        createdAt: number;
        topic: string;
    }[];
}>;
interface TopicByNamespacesResponse extends z.TypeOf<typeof TopicByNamespacesResponse> {
}

declare const UnblockPlayerRequest: z.ZodObject<{
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userId: string;
}, {
    userId: string;
}>;
interface UnblockPlayerRequest extends z.TypeOf<typeof UnblockPlayerRequest> {
}

declare const UserAcceptFriendRequest: z.ZodObject<{
    friendId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    friendId: string;
}, {
    friendId: string;
}>;
interface UserAcceptFriendRequest extends z.TypeOf<typeof UserAcceptFriendRequest> {
}

declare const UserCancelFriendRequest: z.ZodObject<{
    friendId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    friendId: string;
}, {
    friendId: string;
}>;
interface UserCancelFriendRequest extends z.TypeOf<typeof UserCancelFriendRequest> {
}

declare const UserGetFriendshipStatusResponse: z.ZodObject<{
    code: z.ZodNumber;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: number;
    name: string;
}, {
    code: number;
    name: string;
}>;
interface UserGetFriendshipStatusResponse extends z.TypeOf<typeof UserGetFriendshipStatusResponse> {
}

declare const UserRejectFriendRequest: z.ZodObject<{
    friendId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    friendId: string;
}, {
    friendId: string;
}>;
interface UserRejectFriendRequest extends z.TypeOf<typeof UserRejectFriendRequest> {
}

declare const UserRequestFriendRequest: z.ZodObject<{
    friendId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    friendPublicId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    friendId?: string | null | undefined;
    friendPublicId?: string | null | undefined;
}, {
    friendId?: string | null | undefined;
    friendPublicId?: string | null | undefined;
}>;
interface UserRequestFriendRequest extends z.TypeOf<typeof UserRequestFriendRequest> {
}

declare const UserUnfriendRequest: z.ZodObject<{
    friendId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    friendId: string;
}, {
    friendId: string;
}>;
interface UserUnfriendRequest extends z.TypeOf<typeof UserUnfriendRequest> {
}

export { NotificationWithTemplateRequest as $, AdminSetProfanityRuleForNamespaceRequest as A, BulkUsersFreeFormNotificationRequestV1 as B, ConfigList as C, AdminCreateProfanityListRequest as D, AdminVerifyMessageProfanityRequest as E, FriendshipConnectionResponse as F, GlobalConfiguration as G, AdminVerifyMessageProfanityResponse as H, ImportConfigResponse as I, AdminUpdateProfanityList as J, DebugProfanityFilterRequest as K, LoadIncomingFriendsWithTimeResponse as L, ProfanityFilterArray as M, NotificationTemplateResponseArray as N, AdminGetProfanityListFiltersV1Response as O, PutGlobalConfigurationRequest as P, AdminAddProfanityFilterIntoListRequest as Q, AdminAddProfanityFiltersRequest as R, SetPlayerSessionAttributeRequest as S, AdminDeleteProfanityFilterRequest as T, UpdateTopicRequest as U, GetConfigResponse as V, CreateConfigRequest as W, CreateConfigResponse as X, UpdateConfigRequest as Y, UpdateConfigResponse as Z, FreeFormNotificationRequest as _, Configuration as a, TemplateResponseArray as a0, TemplateLocalizationResponse as a1, TemplateLocalization as a2, NativeUserBlockRequest as a3, NativeUserBlockResponseArray as a4, GetUserFriendsResponseArray as a5, NativeFriendRequest as a6, NativeFriendSyncResponseArray as a7, UserRequestFriendRequest as a8, GetUserIncomingFriendsResponseArray as a9, GetUserOutgoingFriendsResponseArray as aa, UserUnfriendRequest as ab, ListBulkUserPlatformsResponse as ac, LoadIncomingFriendsWithTimeResponseArray as ad, LoadOutgoingFriendsWithTimeResponseArray as ae, UserAcceptFriendRequest as af, UserCancelFriendRequest as ag, UserRejectFriendRequest as ah, UserGetFriendshipStatusResponse as ai, BulkFriendsRequest as aj, BulkFriendsResponse as ak, AppMessageDeclarationArray as al, NotificationResponse as am, TopicByNamespacesResponse as an, CreateTopicRequest as ao, NotificationTopicResponse as ap, PartyPutLimitSizeRequest as aq, BlockPlayerRequest as ar, UnblockPlayerRequest as as, GetUsersPresenceResponse as at, RequestUserPresence as au, ConfigReq as b, GetFriendsResponse as c, LoadOutgoingFriendsWithTimeResponse as d, PartyPutCustomAttributesRequest as e, PartyData as f, GetAllNotificationTopicsResponse as g, CreateTopicRequestV1 as h, CreateTemplateRequest as i, FreeFormNotificationRequestV1 as j, NotificationWithTemplateRequestV1 as k, NotificationTopicResponseV1 as l, GetAllNotificationTemplateSlugResp as m, Localization as n, UpdateTemplateRequest as o, GetLobbyCcuResponse as p, GetBulkAllPlayerBlockedUsersRequest as q, GetBulkAllPlayerBlockedUsersResponse as r, GetAllPlayerBlockedUsersResponse as s, GetAllPlayerSessionAttributeResponse as t, GetAllPlayerBlockedByUsersResponse as u, ListBlockedPlayerRequest as v, ListUnblockPlayerRequest as w, GetPlayerSessionAttributeResponse as x, ProfanityRule as y, AdminGetProfanityListsListResponseArray as z };
