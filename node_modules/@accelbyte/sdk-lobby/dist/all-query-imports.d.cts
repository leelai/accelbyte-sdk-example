import { AccelByteSDK, ApiError, SdkSetConfigParam } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { G as GlobalConfiguration, P as PutGlobalConfigurationRequest, C as ConfigList, a as Configuration, b as ConfigReq, I as ImportConfigResponse, c as GetFriendsResponse, L as LoadIncomingFriendsWithTimeResponse, d as LoadOutgoingFriendsWithTimeResponse, F as FriendshipConnectionResponse, f as PartyData, e as PartyPutCustomAttributesRequest, g as GetAllNotificationTopicsResponse, h as CreateTopicRequestV1, N as NotificationTemplateResponseArray, i as CreateTemplateRequest, j as FreeFormNotificationRequestV1, k as NotificationWithTemplateRequestV1, l as NotificationTopicResponseV1, U as UpdateTopicRequest, m as GetAllNotificationTemplateSlugResp, B as BulkUsersFreeFormNotificationRequestV1, n as Localization, o as UpdateTemplateRequest, p as GetLobbyCcuResponse, q as GetBulkAllPlayerBlockedUsersRequest, r as GetBulkAllPlayerBlockedUsersResponse, s as GetAllPlayerBlockedUsersResponse, t as GetAllPlayerSessionAttributeResponse, S as SetPlayerSessionAttributeRequest, u as GetAllPlayerBlockedByUsersResponse, v as ListBlockedPlayerRequest, w as ListUnblockPlayerRequest, x as GetPlayerSessionAttributeResponse, y as ProfanityRule, A as AdminSetProfanityRuleForNamespaceRequest, z as AdminGetProfanityListsListResponseArray, D as AdminCreateProfanityListRequest, E as AdminVerifyMessageProfanityRequest, H as AdminVerifyMessageProfanityResponse, J as AdminUpdateProfanityList, K as DebugProfanityFilterRequest, M as ProfanityFilterArray, O as AdminGetProfanityListFiltersV1Response, Q as AdminAddProfanityFilterIntoListRequest, R as AdminAddProfanityFiltersRequest, T as AdminDeleteProfanityFilterRequest, V as GetConfigResponse, X as CreateConfigResponse, W as CreateConfigRequest, Z as UpdateConfigResponse, Y as UpdateConfigRequest, _ as FreeFormNotificationRequest, $ as NotificationWithTemplateRequest, a0 as TemplateResponseArray, a1 as TemplateLocalizationResponse, a2 as TemplateLocalization, a4 as NativeUserBlockResponseArray, a3 as NativeUserBlockRequest, a5 as GetUserFriendsResponseArray, a7 as NativeFriendSyncResponseArray, a6 as NativeFriendRequest, a8 as UserRequestFriendRequest, a9 as GetUserIncomingFriendsResponseArray, aa as GetUserOutgoingFriendsResponseArray, ab as UserUnfriendRequest, ac as ListBulkUserPlatformsResponse, ad as LoadIncomingFriendsWithTimeResponseArray, ae as LoadOutgoingFriendsWithTimeResponseArray, af as UserAcceptFriendRequest, ag as UserCancelFriendRequest, ah as UserRejectFriendRequest, ai as UserGetFriendshipStatusResponse, aj as BulkFriendsRequest, ak as BulkFriendsResponse, al as AppMessageDeclarationArray, am as NotificationResponse, an as TopicByNamespacesResponse, ao as CreateTopicRequest, ap as NotificationTopicResponse, aq as PartyPutLimitSizeRequest, ar as BlockPlayerRequest, as as UnblockPlayerRequest, at as GetUsersPresenceResponse, au as RequestUserPresence } from './UserUnfriendRequest-BvcwS4X_.cjs';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_AdminAdmin {
    GlobalConfiguration = "Lobby.AdminAdmin.GlobalConfiguration",
    GlobalConfigurations = "Lobby.AdminAdmin.GlobalConfigurations"
}
/**
 * Delete of global configuration data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AdminAdmin.GlobalConfiguration, input]
 * }
 * ```
 */
declare const useAdminAdminApi_DeleteGlobalConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get dsmc global configuration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AdminAdmin.GlobalConfigurations, input]
 * }
 * ```
 */
declare const useAdminAdminApi_GetGlobalConfigurations: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GlobalConfiguration, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GlobalConfiguration>) => void) => UseQueryResult<GlobalConfiguration, AxiosError<ApiError>>;
/**
 * Upsert global configuration data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AdminAdmin.GlobalConfiguration, input]
 * }
 * ```
 */
declare const useAdminAdminApi_UpdateGlobalConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GlobalConfiguration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PutGlobalConfigurationRequest;
}>, "mutationKey">, callback?: (data: GlobalConfiguration) => void) => UseMutationResult<GlobalConfiguration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PutGlobalConfigurationRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_ConfigAdmin {
    Config = "Lobby.ConfigAdmin.Config",
    ConfigLog = "Lobby.ConfigAdmin.ConfigLog",
    Config_ByNamespace = "Lobby.ConfigAdmin.Config_ByNamespace",
    ConfigExport = "Lobby.ConfigAdmin.ConfigExport",
    ConfigImport = "Lobby.ConfigAdmin.ConfigImport"
}
/**
 * Get lobby config of all namespaces.&lt;br&gt;default MaxDSWaitTime is 120 (second)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.Config, input]
 * }
 * ```
 */
declare const useConfigAdminApi_GetConfig: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<ConfigList, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ConfigList>) => void) => UseQueryResult<ConfigList, AxiosError<ApiError>>;
/**
 *  Get Log Configuration logLevel use for logging in service, the value can use is trace|debug|info|warning|error|fatal|panic socketLogEnabled is use for enable socket log logLevelDB use for logging in DB, the value can use is trace|debug|info|warning|error|fatal|panic slowQueryThreshold use for logging slow threshold in time measure is nano second
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigLog, input]
 * }
 * ```
 */
declare const useConfigAdminApi_GetConfigLog: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<Configuration, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Configuration>) => void) => UseQueryResult<Configuration, AxiosError<ApiError>>;
/**
 *  Update Log Configuration logLevel use for logging in service, the value can use is trace|debug|info|warning|error|fatal|panic socketLogEnabled is use for enable socket log logLevelDB use for logging in DB, the value can use is trace|debug|info|warning|error|fatal|panic slowQueryThreshold use for logging slow threshold in time measure is nano second
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigLog, input]
 * }
 * ```
 */
declare const useConfigAdminApi_PatchConfigLogMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<Configuration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: Configuration;
}>, "mutationKey">, callback?: (data: Configuration) => void) => UseMutationResult<Configuration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: Configuration;
}>;
/**
 * Get lobby config of a namespace.&lt;br&gt;default MaxDSWaitTime is 120 (second)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.Config_ByNamespace, input]
 * }
 * ```
 */
declare const useConfigAdminApi_GetConfig_ByNamespace: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<ConfigReq, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ConfigReq>) => void) => UseQueryResult<ConfigReq, AxiosError<ApiError>>;
/**
 * Update lobby config of a namespace.&lt;br&gt;MaxDSWaitTime value is cannot less than 1, if null it will use default value in 120 (second)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.Config_ByNamespace, input]
 * }
 * ```
 */
declare const useConfigAdminApi_UpdateConfig_ByNamespaceMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ConfigReq, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ConfigReq;
}>, "mutationKey">, callback?: (data: ConfigReq) => void) => UseMutationResult<ConfigReq, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ConfigReq;
}>;
/**
 *  Export lobby configuration to a json file. The file can then be imported from the /import endpoint. JSON Schema of the exported file: { &#34;required&#34;: [ &#34;namespace&#34;, &#34;entitlementItemID&#34;, &#34;chatRateLimitDuration&#34;, &#34;unregisterDelay&#34;, &#34;generalRateLimitDuration&#34;, &#34;autoKickOnDisconnectDelay&#34;, &#34;chatRateLimitBurst&#34;, &#34;generalRateLimitBurst&#34;, &#34;maxPartyMember&#34;, &#34;autoKickOnDisconnect&#34;, &#34;profanityFilter&#34;, &#34;enableChat&#34;, &#34;entitlementCheck&#34;, &#34;cancelTicketOnDisconnect&#34;, &#34;concurrentUsersLimit&#34;, &#34;readyConsentTimeout&#34;, &#34;disableInvitationOnJoinParty&#34;, &#34;allowJoinPartyDuringMatchmaking&#34;, &#34;allowInviteNonConnectedUser&#34;, &#34;keepPresenceActivityOnDisconnect&#34;, &#34;maxDSWaitTime&#34;, &#34;maxFriendsLimit&#34; ], &#34;properties&#34;: { &#34;allowInviteNonConnectedUser&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;allowJoinPartyDuringMatchmaking&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;autoKickOnDisconnect&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;autoKickOnDisconnectDelay&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int64&#34; }, &#34;cancelTicketOnDisconnect&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;chatRateLimitBurst&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int32&#34; }, &#34;chatRateLimitDuration&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int64&#34; }, &#34;concurrentUsersLimit&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int32&#34; }, &#34;disableInvitationOnJoinParty&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;enableChat&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;entitlementCheck&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;entitlementItemID&#34;: { &#34;type&#34;: &#34;string&#34; }, &#34;generalRateLimitBurst&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int32&#34; }, &#34;generalRateLimitDuration&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int64&#34; }, &#34;keepPresenceActivityOnDisconnect&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;maxDSWaitTime&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int64&#34; }, &#34;maxFriendsLimit&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int32&#34; }, &#34;maxPartyMember&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int32&#34; }, &#34;namespace&#34;: { &#34;type&#34;: &#34;string&#34; }, &#34;profanityFilter&#34;: { &#34;type&#34;: &#34;boolean&#34; }, &#34;readyConsentTimeout&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int64&#34; }, &#34;unregisterDelay&#34;: { &#34;type&#34;: &#34;integer&#34;, &#34;format&#34;: &#34;int64&#34; } } }
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigExport, input]
 * }
 * ```
 */
declare const useConfigAdminApi_GetConfigExport: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 *  Import config configuration from file. The existing configuration will be replaced. The json file to import can be obtained from the /export endpoint. MaxDSWaitTime value is cannot less than 1, if null it will use default value in 120 (second)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigImport, input]
 * }
 * ```
 */
declare const useConfigAdminApi_UpdateConfigImportMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ImportConfigResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: ImportConfigResponse) => void) => UseMutationResult<ImportConfigResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_FriendsAdmin {
    FriendUser_ByUserId = "Lobby.FriendsAdmin.FriendUser_ByUserId",
    IncomingFriend_ByUserId = "Lobby.FriendsAdmin.IncomingFriend_ByUserId",
    OutgoingFriend_ByUserId = "Lobby.FriendsAdmin.OutgoingFriend_ByUserId",
    OfFriends_ByUserId = "Lobby.FriendsAdmin.OfFriends_ByUserId"
}
/**
 * Get list of friends in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FriendsAdmin.FriendUser_ByUserId, input]
 * }
 * ```
 */
declare const useFriendsAdminApi_GetFriendUser_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        friendId?: string | null;
        friendIds?: string[];
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<GetFriendsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetFriendsResponse>) => void) => UseQueryResult<GetFriendsResponse, AxiosError<ApiError>>;
/**
 * Get list of incoming friend requests.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FriendsAdmin.IncomingFriend_ByUserId, input]
 * }
 * ```
 */
declare const useFriendsAdminApi_GetIncomingFriend_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        friendId?: string | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<LoadIncomingFriendsWithTimeResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<LoadIncomingFriendsWithTimeResponse>) => void) => UseQueryResult<LoadIncomingFriendsWithTimeResponse, AxiosError<ApiError>>;
/**
 * Get list of outgoing friend requests in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FriendsAdmin.OutgoingFriend_ByUserId, input]
 * }
 * ```
 */
declare const useFriendsAdminApi_GetOutgoingFriend_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<LoadOutgoingFriendsWithTimeResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<LoadOutgoingFriendsWithTimeResponse>) => void) => UseQueryResult<LoadOutgoingFriendsWithTimeResponse, AxiosError<ApiError>>;
/**
 * Load list friends and friends of friends in a namespace. Response subjectId will be different with requested userId if the user is not directly friend
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FriendsAdmin.OfFriends_ByUserId, input]
 * }
 * ```
 */
declare const useFriendsAdminApi_GetOfFriends_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        friendId?: string | null;
        limit?: number;
        nopaging?: boolean | null;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<FriendshipConnectionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FriendshipConnectionResponse>) => void) => UseQueryResult<FriendshipConnectionResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_LobbyOperationsAdmin {
    AttributeParty_ByPartyId = "Lobby.LobbyOperationsAdmin.AttributeParty_ByPartyId",
    JoinParty_ByPartyId_ByUserId = "Lobby.LobbyOperationsAdmin.JoinParty_ByPartyId_ByUserId"
}
/**
 * Update party attributes in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LobbyOperationsAdmin.AttributeParty_ByPartyId, input]
 * }
 * ```
 */
declare const useLobbyOperationsAdminApi_UpdateAttributeParty_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartyData, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PartyPutCustomAttributesRequest;
}>, "mutationKey">, callback?: (data: PartyData) => void) => UseMutationResult<PartyData, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PartyPutCustomAttributesRequest;
}>;
/**
 * Admin join a player into a party.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LobbyOperationsAdmin.JoinParty_ByPartyId_ByUserId, input]
 * }
 * ```
 */
declare const useLobbyOperationsAdminApi_UpdateJoinParty_ByPartyId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    userId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_NotificationAdmin {
    NotificationTopics = "Lobby.NotificationAdmin.NotificationTopics",
    NotificationTopic = "Lobby.NotificationAdmin.NotificationTopic",
    NotificationTemplates = "Lobby.NotificationAdmin.NotificationTemplates",
    NotificationTemplate = "Lobby.NotificationAdmin.NotificationTemplate",
    NotificationFreeformNotify = "Lobby.NotificationAdmin.NotificationFreeformNotify",
    NotificationTemplateNotify = "Lobby.NotificationAdmin.NotificationTemplateNotify",
    NotificationTopic_ByTopicName = "Lobby.NotificationAdmin.NotificationTopic_ByTopicName",
    NotificationTemplate_ByTemplateSlug = "Lobby.NotificationAdmin.NotificationTemplate_ByTemplateSlug",
    NotificationBulkUserFreeformNotify = "Lobby.NotificationAdmin.NotificationBulkUserFreeformNotify",
    FreeformNotifyNotification_ByUserId = "Lobby.NotificationAdmin.FreeformNotifyNotification_ByUserId",
    TemplateNotifyNotification_ByUserId = "Lobby.NotificationAdmin.TemplateNotifyNotification_ByUserId",
    FreeformNotifyNotification_ByPartyId = "Lobby.NotificationAdmin.FreeformNotifyNotification_ByPartyId",
    TemplateNotifyNotification_ByPartyId = "Lobby.NotificationAdmin.TemplateNotifyNotification_ByPartyId",
    LanguageNotification_ByTemplateSlug_ByTemplateLanguage = "Lobby.NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage",
    PublishNotification_ByTemplateSlug_ByTemplateLanguage = "Lobby.NotificationAdmin.PublishNotification_ByTemplateSlug_ByTemplateLanguage"
}
/**
 * Get topic by namespace.&lt;br/&gt; Action Code: 50213
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTopics, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_GetNotificationTopics: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        after?: string | null;
        before?: string | null;
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<GetAllNotificationTopicsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllNotificationTopicsResponse>) => void) => UseQueryResult<GetAllNotificationTopicsResponse, AxiosError<ApiError>>;
/**
 * Create new notification topic. &lt;br&gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. Already existing topic can not be created&lt;br/&gt; Action Code: 50214
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTopic, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateNotificationTopicMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTopicRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTopicRequestV1;
}>;
/**
 * Get all templates in a namespace&lt;br&gt; Action Code: 50203
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTemplates, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_GetNotificationTemplates: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<NotificationTemplateResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<NotificationTemplateResponseArray>) => void) => UseQueryResult<NotificationTemplateResponseArray, AxiosError<ApiError>>;
/**
 * Create new notification template. Include handlebars {{key}} for replaceable contexts. The key inside handlebars will be the key to be replaced when sending notification. Already existing template with the same slug and language can not be created. &lt;br&gt;Check model description for detailed input restrictions.&lt;br&gt; Action Code: 50204
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTemplate, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateNotificationTemplateMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTemplateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTemplateRequest;
}>;
/**
 * Sends notification to all connected users in a namespace.&lt;br&gt; Action Code: 50201
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationFreeformNotify, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateNotificationFreeformNotifyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: FreeFormNotificationRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: FreeFormNotificationRequestV1;
}>;
/**
 * Sends notification to all connected users in a namespace with predefined template. &lt;br&gt;In the request body, specify which template slug (template identifier) to use and the template language. &lt;br&gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. Template need to be published before it can be use to send notifications&lt;br/&gt; Action Code: 50202
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTemplateNotify, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateNotificationTemplateNotifyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NotificationWithTemplateRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NotificationWithTemplateRequestV1;
}>;
/**
 * Delete topic information by topic name. &lt;br&gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. Already existing topic can not be created &lt;br/&gt; Action Code: 50217
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTopic_ByTopicName, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_DeleteNotificationTopic_ByTopicNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topicName: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topicName: string;
}>;
/**
 * Get topic information by topic name.&lt;br/&gt; Action Code: 50215
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTopic_ByTopicName, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_GetNotificationTopic_ByTopicName: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    topicName: string;
}, options?: Omit<UseQueryOptions<NotificationTopicResponseV1, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<NotificationTopicResponseV1>) => void) => UseQueryResult<NotificationTopicResponseV1, AxiosError<ApiError>>;
/**
 * Update topic information by topic name. &lt;br&gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. Already existing topic can not be created &lt;br/&gt; Action Code: 50216
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTopic_ByTopicName, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_UpdateNotificationTopic_ByTopicNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topicName: string;
    data: UpdateTopicRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topicName: string;
    data: UpdateTopicRequest;
}>;
/**
 * Delete template slug in notification template&lt;br&gt; Action Code: 50206
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTemplate_ByTemplateSlug, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
}>;
/**
 * Get all templates in a namespace&lt;br&gt; Action Code: 50205
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationTemplate_ByTemplateSlug, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_GetNotificationTemplate_ByTemplateSlug: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    templateSlug: string;
    queryParams?: {
        after?: string | null;
        before?: string | null;
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<GetAllNotificationTemplateSlugResp, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllNotificationTemplateSlugResp>) => void) => UseQueryResult<GetAllNotificationTemplateSlugResp, AxiosError<ApiError>>;
/**
 * Sends notification to multiple user. Action Code: 50211
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.NotificationBulkUserFreeformNotify, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateNotificationBulkUserFreeformNotifyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkUsersFreeFormNotificationRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkUsersFreeFormNotificationRequestV1;
}>;
/**
 * Sends notification to a user. Action Code: 50211
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.FreeformNotifyNotification_ByUserId, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateFreeformNotifyNotification_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FreeFormNotificationRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FreeFormNotificationRequestV1;
}>;
/**
 * Sends templated notification to a user. &lt;br&gt;In the request body, specify which template slug (template identifier) to use and the template language. &lt;br&gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. Template need to be published before it can be use to send notifications&lt;br&gt; Action Code: 50212
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.TemplateNotifyNotification_ByUserId, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateTemplateNotifyNotification_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: NotificationWithTemplateRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: NotificationWithTemplateRequestV1;
}>;
/**
 * Sends notification to a party.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.FreeformNotifyNotification_ByPartyId, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateFreeformNotifyNotification_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: FreeFormNotificationRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: FreeFormNotificationRequestV1;
}>;
/**
 * Sends templated notification to a party. &lt;br&gt;In the request body, specify which template slug (template identifier) to use and the template language. &lt;br&gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. Template need to be published before it can be use to send notifications&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.TemplateNotifyNotification_ByPartyId, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreateTemplateNotifyNotification_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: NotificationWithTemplateRequestV1;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: NotificationWithTemplateRequestV1;
}>;
/**
 * Delete template localization&lt;br/&gt; Action Code: 50209
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>;
/**
 * Get a template localization&lt;br/&gt; Action Code: 50207
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}, options?: Omit<UseQueryOptions<Localization, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Localization>) => void) => UseQueryResult<Localization, AxiosError<ApiError>>;
/**
 * Update template localization&lt;br/&gt; Action Code: 50208
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
    data: UpdateTemplateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
    data: UpdateTemplateRequest;
}>;
/**
 * Publish notification template draft. Empty draft can not be published.&lt;br/&gt; Action Code: 50210
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NotificationAdmin.PublishNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useNotificationAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PartyAdmin {
    PartyParty_ByPartyId = "Lobby.PartyAdmin.PartyParty_ByPartyId",
    Party_ByUserId = "Lobby.PartyAdmin.Party_ByUserId"
}
/**
 * Get party data in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PartyAdmin.PartyParty_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyAdminApi_GetPartyParty_ByPartyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    partyId: string;
}, options?: Omit<UseQueryOptions<PartyData, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyData>) => void) => UseQueryResult<PartyData, AxiosError<ApiError>>;
/**
 * Get party data in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PartyAdmin.Party_ByUserId, input]
 * }
 * ```
 */
declare const usePartyAdminApi_GetParty_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<PartyData, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyData>) => void) => UseQueryResult<PartyData, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlayerAdmin {
    PlayerCcu = "Lobby.PlayerAdmin.PlayerCcu",
    PlayerUserBulkBlocked = "Lobby.PlayerAdmin.PlayerUserBulkBlocked",
    BlockedPlayer_ByUserId = "Lobby.PlayerAdmin.BlockedPlayer_ByUserId",
    AttributesPlayer_ByUserId = "Lobby.PlayerAdmin.AttributesPlayer_ByUserId",
    AttributePlayer_ByUserId = "Lobby.PlayerAdmin.AttributePlayer_ByUserId",
    BlockedByPlayer_ByUserId = "Lobby.PlayerAdmin.BlockedByPlayer_ByUserId",
    BulkBlockPlayer_ByUserId = "Lobby.PlayerAdmin.BulkBlockPlayer_ByUserId",
    BulkUnblockPlayer_ByUserId = "Lobby.PlayerAdmin.BulkUnblockPlayer_ByUserId",
    AttributePlayer_ByUserId_ByAttribute = "Lobby.PlayerAdmin.AttributePlayer_ByUserId_ByAttribute"
}
/**
 * Get the number of players connected to the Lobby in the given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.PlayerCcu, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetPlayerCcu: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GetLobbyCcuResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetLobbyCcuResponse>) => void) => UseQueryResult<GetLobbyCcuResponse, AxiosError<ApiError>>;
/**
 * Get blocked players data by bulk user ids in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.PlayerUserBulkBlocked, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_FetchPlayerUserBulkBlocked: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: GetBulkAllPlayerBlockedUsersRequest;
}, options?: Omit<UseQueryOptions<GetBulkAllPlayerBlockedUsersResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetBulkAllPlayerBlockedUsersResponse>) => void) => UseQueryResult<GetBulkAllPlayerBlockedUsersResponse, AxiosError<ApiError>>;
/**
 * Get blocked players data by user id in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.BlockedPlayer_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetBlockedPlayer_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<GetAllPlayerBlockedUsersResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllPlayerBlockedUsersResponse>) => void) => UseQueryResult<GetAllPlayerBlockedUsersResponse, AxiosError<ApiError>>;
/**
 * Get all player&#39;s session attribute by user id in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.AttributesPlayer_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetAttributesPlayer_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<GetAllPlayerSessionAttributeResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllPlayerSessionAttributeResponse>) => void) => UseQueryResult<GetAllPlayerSessionAttributeResponse, AxiosError<ApiError>>;
/**
 * Set player&#39;s session attribute by user id in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.AttributePlayer_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_UpdateAttributePlayer_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SetPlayerSessionAttributeRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SetPlayerSessionAttributeRequest;
}>;
/**
 * Load get players who blocked this player in a namespace based on user id
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.BlockedByPlayer_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetBlockedByPlayer_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<GetAllPlayerBlockedByUsersResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllPlayerBlockedByUsersResponse>) => void) => UseQueryResult<GetAllPlayerBlockedByUsersResponse, AxiosError<ApiError>>;
/**
 * Bulk block player in a namespace by list of user id
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.BulkBlockPlayer_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_CreateBulkBlockPlayer_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: ListBlockedPlayerRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: ListBlockedPlayerRequest;
}>;
/**
 * Bulk unblock player in a namespace by list of user id
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.BulkUnblockPlayer_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_DeleteBulkUnblockPlayer_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: ListUnblockPlayerRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: ListUnblockPlayerRequest;
}>;
/**
 * Get player&#39;s specific session attribute by user id in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.AttributePlayer_ByUserId_ByAttribute, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetAttributePlayer_ByUserId_ByAttribute: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    attribute: string;
}, options?: Omit<UseQueryOptions<GetPlayerSessionAttributeResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetPlayerSessionAttributeResponse>) => void) => UseQueryResult<GetPlayerSessionAttributeResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_ProfanityAdmin {
    ProfanityRule = "Lobby.ProfanityAdmin.ProfanityRule",
    ProfanityLists = "Lobby.ProfanityAdmin.ProfanityLists",
    ProfanityList = "Lobby.ProfanityAdmin.ProfanityList",
    ProfanityVerify = "Lobby.ProfanityAdmin.ProfanityVerify",
    ProfanityList_ByList = "Lobby.ProfanityAdmin.ProfanityList_ByList",
    ProfanityFilterDebug = "Lobby.ProfanityAdmin.ProfanityFilterDebug",
    FiltersProfanity_ByList = "Lobby.ProfanityAdmin.FiltersProfanity_ByList",
    FilterProfanity_ByList = "Lobby.ProfanityAdmin.FilterProfanity_ByList",
    FilterBulkProfanity_ByList = "Lobby.ProfanityAdmin.FilterBulkProfanity_ByList",
    FilterDeleteProfanity_ByList = "Lobby.ProfanityAdmin.FilterDeleteProfanity_ByList",
    FilterBulkFileProfanity_ByList = "Lobby.ProfanityAdmin.FilterBulkFileProfanity_ByList"
}
/**
 * Get current profanity rule
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityRule, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_GetProfanityRule: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<ProfanityRule, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ProfanityRule>) => void) => UseQueryResult<ProfanityRule, AxiosError<ApiError>>;
/**
 * Set current profanity rule
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityRule, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_UpdateProfanityRuleMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AdminSetProfanityRuleForNamespaceRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AdminSetProfanityRuleForNamespaceRequest;
}>;
/**
 * Get lists
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityLists, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_GetProfanityLists: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<AdminGetProfanityListsListResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AdminGetProfanityListsListResponseArray>) => void) => UseQueryResult<AdminGetProfanityListsListResponseArray, AxiosError<ApiError>>;
/**
 * Create a new list
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_CreateProfanityListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AdminCreateProfanityListRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AdminCreateProfanityListRequest;
}>;
/**
 * Verify a message directly from the UI or other services
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityVerify, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_FetchProfanityVerify: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: AdminVerifyMessageProfanityRequest;
}, options?: Omit<UseQueryOptions<AdminVerifyMessageProfanityResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AdminVerifyMessageProfanityResponse>) => void) => UseQueryResult<AdminVerifyMessageProfanityResponse, AxiosError<ApiError>>;
/**
 * Delete a list include all filters inside of it
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityList_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_DeleteProfanityList_ByListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
}>;
/**
 * Update the list
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityList_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_UpdateProfanityList_ByListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminUpdateProfanityList;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminUpdateProfanityList;
}>;
/**
 * Get the list of filters that would modify the phrase
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.ProfanityFilterDebug, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_FetchProfanityFilterDebug: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: DebugProfanityFilterRequest;
}, options?: Omit<UseQueryOptions<ProfanityFilterArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ProfanityFilterArray>) => void) => UseQueryResult<ProfanityFilterArray, AxiosError<ApiError>>;
/**
 * Get the list of filters inside the list.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.FiltersProfanity_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_GetFiltersProfanity_ByList: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    list: string;
}, options?: Omit<UseQueryOptions<AdminGetProfanityListFiltersV1Response, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AdminGetProfanityListFiltersV1Response>) => void) => UseQueryResult<AdminGetProfanityListFiltersV1Response, AxiosError<ApiError>>;
/**
 * Add a single filter into the list
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.FilterProfanity_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_CreateFilterProfanity_ByListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminAddProfanityFilterIntoListRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminAddProfanityFilterIntoListRequest;
}>;
/**
 * Add multiple filters into the list
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.FilterBulkProfanity_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_CreateFilterBulkProfanity_ByListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminAddProfanityFiltersRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminAddProfanityFiltersRequest;
}>;
/**
 * Delete the filter from the list
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.FilterDeleteProfanity_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_CreateFilterDeleteProfanity_ByListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ProfanityFilterArray, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminDeleteProfanityFilterRequest;
}>, "mutationKey">, callback?: (data: ProfanityFilterArray) => void) => UseMutationResult<ProfanityFilterArray, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: AdminDeleteProfanityFilterRequest;
}>;
/**
 * Import a file with filters
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ProfanityAdmin.FilterBulkFileProfanity_ByList, input]
 * }
 * ```
 */
declare const useProfanityAdminApi_CreateFilterBulkFileProfanity_ByListMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: number[];
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    list: string;
    data: number[];
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_ThirdPartyAdmin {
    ThirdpartyConfigSteam = "Lobby.ThirdPartyAdmin.ThirdpartyConfigSteam"
}
/**
 * Required permission : &lt;code&gt;ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [DELETE]&lt;/code&gt; with scope &lt;code&gt;social&lt;/code&gt; &lt;br&gt;delete third party config in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ThirdPartyAdmin.ThirdpartyConfigSteam, input]
 * }
 * ```
 */
declare const useThirdPartyAdminApi_DeleteThirdpartyConfigSteamMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get third party config for specified namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ThirdPartyAdmin.ThirdpartyConfigSteam, input]
 * }
 * ```
 */
declare const useThirdPartyAdminApi_GetThirdpartyConfigSteam: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GetConfigResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetConfigResponse>) => void) => UseQueryResult<GetConfigResponse, AxiosError<ApiError>>;
/**
 * Create third party config in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ThirdPartyAdmin.ThirdpartyConfigSteam, input]
 * }
 * ```
 */
declare const useThirdPartyAdminApi_CreateThirdpartyConfigSteamMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CreateConfigResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateConfigRequest;
}>, "mutationKey">, callback?: (data: CreateConfigResponse) => void) => UseMutationResult<CreateConfigResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateConfigRequest;
}>;
/**
 * Update third party config in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ThirdPartyAdmin.ThirdpartyConfigSteam, input]
 * }
 * ```
 */
declare const useThirdPartyAdminApi_UpdateThirdpartyConfigSteamMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdateConfigResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UpdateConfigRequest;
}>, "mutationKey">, callback?: (data: UpdateConfigResponse) => void) => UseMutationResult<UpdateConfigResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UpdateConfigRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Admin {
    NotificationFreeform = "Lobby.Admin.NotificationFreeform",
    NotificationTemplated = "Lobby.Admin.NotificationTemplated",
    NotificationTemplates = "Lobby.Admin.NotificationTemplates",
    NotificationTemplate = "Lobby.Admin.NotificationTemplate",
    NotificationTemplate_ByTemplateSlug = "Lobby.Admin.NotificationTemplate_ByTemplateSlug",
    LanguageNotification_ByTemplateSlug_ByTemplateLanguage = "Lobby.Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage",
    PublishNotification_ByTemplateSlug_ByTemplateLanguage = "Lobby.Admin.PublishNotification_ByTemplateSlug_ByTemplateLanguage"
}
/**
 * Sends notification to all connected users in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.NotificationFreeform, input]
 * }
 * ```
 */
declare const useAdminApi_CreateNotificationFreeformMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: FreeFormNotificationRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: FreeFormNotificationRequest;
}>;
/**
 * Sends notification to all connected users in a namespace with predefined template. &lt;br&gt;In the request body, specify which template slug (template identifier) to use and the template language. &lt;br&gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. Template need to be published before it can be use to send notifications
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.NotificationTemplated, input]
 * }
 * ```
 */
declare const useAdminApi_CreateNotificationTemplatedMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NotificationWithTemplateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NotificationWithTemplateRequest;
}>;
/**
 * Get all templates in a namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.NotificationTemplates, input]
 * }
 * ```
 */
declare const useAdminApi_GetNotificationTemplates: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<TemplateResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TemplateResponseArray>) => void) => UseQueryResult<TemplateResponseArray, AxiosError<ApiError>>;
/**
 * Create new notification template. Include handlebars {{key}} for replaceable contexts. The the key inside handlebars will be the key to be replaced when sending notification. Already existing template with the same slug and language can not be created. &lt;br&gt;Check model description for detailed input restrictions.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.NotificationTemplate, input]
 * }
 * ```
 */
declare const useAdminApi_CreateNotificationTemplateMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTemplateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTemplateRequest;
}>;
/**
 * Delete localization template
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.NotificationTemplate_ByTemplateSlug, input]
 * }
 * ```
 */
declare const useAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
}>;
/**
 * Get all templates in a namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.NotificationTemplate_ByTemplateSlug, input]
 * }
 * ```
 */
declare const useAdminApi_GetNotificationTemplate_ByTemplateSlug: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    templateSlug: string;
    queryParams?: {
        after?: string | null;
        before?: string | null;
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<TemplateLocalizationResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TemplateLocalizationResponse>) => void) => UseQueryResult<TemplateLocalizationResponse, AxiosError<ApiError>>;
/**
 * Delete all template in a slug
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>;
/**
 * Get a template localization
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}, options?: Omit<UseQueryOptions<TemplateLocalization, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TemplateLocalization>) => void) => UseQueryResult<TemplateLocalization, AxiosError<ApiError>>;
/**
 * Modify draft template
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
    data: UpdateTemplateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
    data: UpdateTemplateRequest;
}>;
/**
 * Publish notification template draft. Empty draft can not be published.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Admin.PublishNotification_ByTemplateSlug_ByTemplateLanguage, input]
 * }
 * ```
 */
declare const useAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    templateSlug: string;
    templateLanguage: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Blocks {
    SyncMeBlock = "Lobby.Blocks.SyncMeBlock"
}
/**
 * Sync blocked user using server to server call to native first party server. Supported platforms: ps5, ps4 and pspc : the default environment would be sp-int, can be override using psnEnv. psnEnv consist of sp-int (default), prod-qa, np
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Blocks.SyncMeBlock, input]
 * }
 * ```
 */
declare const useBlocksApi_PatchSyncMeBlockMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<NativeUserBlockResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NativeUserBlockRequest[];
}>, "mutationKey">, callback?: (data: NativeUserBlockResponseArray) => void) => UseMutationResult<NativeUserBlockResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NativeUserBlockRequest[];
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Friends {
    FriendsMe = "Lobby.Friends.FriendsMe",
    FriendSyncMe = "Lobby.Friends.FriendSyncMe",
    FriendMeRequest = "Lobby.Friends.FriendMeRequest",
    FriendsMeIncoming = "Lobby.Friends.FriendsMeIncoming",
    FriendsMeOutgoing = "Lobby.Friends.FriendsMeOutgoing",
    FriendMeUnfriend = "Lobby.Friends.FriendMeUnfriend",
    FriendsMePlatforms = "Lobby.Friends.FriendsMePlatforms",
    FriendsMeIncomingTime = "Lobby.Friends.FriendsMeIncomingTime",
    FriendsMeOutgoingTime = "Lobby.Friends.FriendsMeOutgoingTime",
    FriendMeRequestAccept = "Lobby.Friends.FriendMeRequestAccept",
    FriendMeRequestCancel = "Lobby.Friends.FriendMeRequestCancel",
    FriendMeRequestReject = "Lobby.Friends.FriendMeRequestReject",
    FriendMeStatu_ByFriendId = "Lobby.Friends.FriendMeStatu_ByFriendId",
    AddBulkFriend_ByUserId = "Lobby.Friends.AddBulkFriend_ByUserId",
    DeleteBulkFriend_ByUserId = "Lobby.Friends.DeleteBulkFriend_ByUserId"
}
/**
 * Get list of friends in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendsMe, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendsMe: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<GetUserFriendsResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetUserFriendsResponseArray>) => void) => UseQueryResult<GetUserFriendsResponseArray, AxiosError<ApiError>>;
/**
 * Sync friends using server to server call to native first party server. Supported platforms: steam: The platform_token’s value is the binary ticket returned by Steam. If this ticket was generated by Steam GetAuthTicketForWebApi with version &gt;= 1.57, then platform token should use this style: {identity}:{ticket} the {identity} was the parameter to call GetAuthTicketForWebApi when the ticket was created. Note: Do not contain : in this {identity} ps4: The platform_token’s value is the authorization code returned by Sony OAuth. ps5: The platform_token’s value is the authorization code returned by Sony OAuth. pspc: The platform_token’s value is the authorization code returned by Sony OAuth.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendSyncMe, input]
 * }
 * ```
 */
declare const useFriendsApi_PatchFriendSyncMeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<NativeFriendSyncResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NativeFriendRequest[];
}>, "mutationKey">, callback?: (data: NativeFriendSyncResponseArray) => void) => UseMutationResult<NativeFriendSyncResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NativeFriendRequest[];
}>;
/**
 * Client should provide either friendID or friendPublicID. If both are provided, friendID will be chosen to be used. This endpoint will only send a pending invite that can be either rejected/accepted
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendMeRequest, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateFriendMeRequestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserRequestFriendRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserRequestFriendRequest;
}>;
/**
 * Get list of incoming friends in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendsMeIncoming, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendsMeIncoming: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<GetUserIncomingFriendsResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetUserIncomingFriendsResponseArray>) => void) => UseQueryResult<GetUserIncomingFriendsResponseArray, AxiosError<ApiError>>;
/**
 * Get list of outgoing friends in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendsMeOutgoing, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendsMeOutgoing: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<GetUserOutgoingFriendsResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetUserOutgoingFriendsResponseArray>) => void) => UseQueryResult<GetUserOutgoingFriendsResponseArray, AxiosError<ApiError>>;
/**
 * User unfriend a friend.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendMeUnfriend, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateFriendMeUnfriendMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserUnfriendRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserUnfriendRequest;
}>;
/**
 * Get list of friends with platform data in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendsMePlatforms, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendsMePlatforms: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<ListBulkUserPlatformsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListBulkUserPlatformsResponse>) => void) => UseQueryResult<ListBulkUserPlatformsResponse, AxiosError<ApiError>>;
/**
 * Get list of incoming friends with requested time info in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendsMeIncomingTime, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendsMeIncomingTime: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<LoadIncomingFriendsWithTimeResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<LoadIncomingFriendsWithTimeResponseArray>) => void) => UseQueryResult<LoadIncomingFriendsWithTimeResponseArray, AxiosError<ApiError>>;
/**
 * Get list of outgoing friends with requested time info in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendsMeOutgoingTime, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendsMeOutgoingTime: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<LoadOutgoingFriendsWithTimeResponseArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<LoadOutgoingFriendsWithTimeResponseArray>) => void) => UseQueryResult<LoadOutgoingFriendsWithTimeResponseArray, AxiosError<ApiError>>;
/**
 * User accept friend.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendMeRequestAccept, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateFriendMeRequestAcceptMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserAcceptFriendRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserAcceptFriendRequest;
}>;
/**
 * User cancel a friend request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendMeRequestCancel, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateFriendMeRequestCancelMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserCancelFriendRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserCancelFriendRequest;
}>;
/**
 * User reject a friend request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendMeRequestReject, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateFriendMeRequestRejectMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserRejectFriendRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UserRejectFriendRequest;
}>;
/**
 * User get friendship status. Code: 0 - Message: &#34;not friend&#34; Code: 1 - Message: &#34;outgoing&#34; Code: 2 - Message: &#34;incoming&#34; Code: 3 - Message: &#34;friend&#34;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.FriendMeStatu_ByFriendId, input]
 * }
 * ```
 */
declare const useFriendsApi_GetFriendMeStatu_ByFriendId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    friendId: string;
}, options?: Omit<UseQueryOptions<UserGetFriendshipStatusResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<UserGetFriendshipStatusResponse>) => void) => UseQueryResult<UserGetFriendshipStatusResponse, AxiosError<ApiError>>;
/**
 * Friends request in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.AddBulkFriend_ByUserId, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateAddBulkFriend_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: BulkFriendsRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: BulkFriendsRequest;
}>;
/**
 * Friends request in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Friends.DeleteBulkFriend_ByUserId, input]
 * }
 * ```
 */
declare const useFriendsApi_CreateDeleteBulkFriend_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkFriendsResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: BulkFriendsRequest;
}>, "mutationKey">, callback?: (data: BulkFriendsResponse) => void) => UseMutationResult<BulkFriendsResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: BulkFriendsRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_LobbyOperations {
    Messages = "Lobby.LobbyOperations.Messages"
}
/**
 * get the list of messages.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_LobbyOperations.Messages, input]
 * }
 * ```
 */
declare const useLobbyOperationsApi_GetMessages: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<AppMessageDeclarationArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppMessageDeclarationArray>) => void) => UseQueryResult<AppMessageDeclarationArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Notification {
    NotificationMe = "Lobby.Notification.NotificationMe",
    NotificationTopics = "Lobby.Notification.NotificationTopics",
    NotificationTopic = "Lobby.Notification.NotificationTopic",
    NotificationTopic_ByTopic = "Lobby.Notification.NotificationTopic_ByTopic",
    FreeformNotification_ByUserId = "Lobby.Notification.FreeformNotification_ByUserId",
    TemplatedNotification_ByUserId = "Lobby.Notification.TemplatedNotification_ByUserId"
}
/**
 * Get list of notifications in a namespace. The query parameters **startTime** and **endTime** can be filled with the **sequenceID** value in the notification, where the value is an epoch timestamp. Example **sequenceID** or epoch timestamp value: **1706595813**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.NotificationMe, input]
 * }
 * ```
 */
declare const useNotificationApi_GetNotificationMe: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endTime?: number;
        limit?: number;
        offset?: number;
        startTime?: number;
    };
}, options?: Omit<UseQueryOptions<NotificationResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<NotificationResponse>) => void) => UseQueryResult<NotificationResponse, AxiosError<ApiError>>;
/**
 * get topic by namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.NotificationTopics, input]
 * }
 * ```
 */
declare const useNotificationApi_GetNotificationTopics: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        after?: string | null;
        before?: string | null;
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<TopicByNamespacesResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TopicByNamespacesResponse>) => void) => UseQueryResult<TopicByNamespacesResponse, AxiosError<ApiError>>;
/**
 * Create new notification topic. &lt;br&gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. Already existing topic can not be created
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.NotificationTopic, input]
 * }
 * ```
 */
declare const useNotificationApi_CreateNotificationTopicMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTopicRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateTopicRequest;
}>;
/**
 * delete topic information by topic name. &lt;br&gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. Already existing topic can not be created
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.NotificationTopic_ByTopic, input]
 * }
 * ```
 */
declare const useNotificationApi_DeleteNotificationTopic_ByTopicMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topic: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topic: string;
}>;
/**
 * get topic information by topic name.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.NotificationTopic_ByTopic, input]
 * }
 * ```
 */
declare const useNotificationApi_GetNotificationTopic_ByTopic: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    topic: string;
}, options?: Omit<UseQueryOptions<NotificationTopicResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<NotificationTopicResponse>) => void) => UseQueryResult<NotificationTopicResponse, AxiosError<ApiError>>;
/**
 * update topic information by topic name. &lt;br&gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. Already existing topic can not be created
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.NotificationTopic_ByTopic, input]
 * }
 * ```
 */
declare const useNotificationApi_UpdateNotificationTopic_ByTopicMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topic: string;
    data: UpdateTopicRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    topic: string;
    data: UpdateTopicRequest;
}>;
/**
 * Sends notification to a user.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.FreeformNotification_ByUserId, input]
 * }
 * ```
 */
declare const useNotificationApi_CreateFreeformNotification_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FreeFormNotificationRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FreeFormNotificationRequest;
}>;
/**
 * Sends notification to a user with predefined template. &lt;br&gt;In the request body, specify which template slug (template identifier) to use and the template language. &lt;br&gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. Template need to be published before it can be use to send notifications
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Notification.TemplatedNotification_ByUserId, input]
 * }
 * ```
 */
declare const useNotificationApi_CreateTemplatedNotification_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: NotificationWithTemplateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: NotificationWithTemplateRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Party {
    PartyParty_ByPartyId = "Lobby.Party.PartyParty_ByPartyId",
    LimitParty_ByPartyId = "Lobby.Party.LimitParty_ByPartyId",
    AttributeParty_ByPartyId = "Lobby.Party.AttributeParty_ByPartyId"
}
/**
 * Required valid user authorization &lt;br/&gt; &lt;br&gt;load personal party data in a namespace based on Party ID &lt;br/&gt; Action Code: 50101
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.PartyParty_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_GetPartyParty_ByPartyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    partyId: string;
}, options?: Omit<UseQueryOptions<PartyData, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyData>) => void) => UseQueryResult<PartyData, AxiosError<ApiError>>;
/**
 * Required valid user authorization &lt;br/&gt; &lt;br&gt;Set party limit, only party leader can call this endpoint.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.LimitParty_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_UpdateLimitParty_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PartyPutLimitSizeRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PartyPutLimitSizeRequest;
}>;
/**
 * Required valid user authorization &lt;br/&gt; &lt;br&gt;update party attributes in a namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.AttributeParty_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_UpdateAttributeParty_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartyData, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PartyPutCustomAttributesRequest;
}>, "mutationKey">, callback?: (data: PartyData) => void) => UseMutationResult<PartyData, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PartyPutCustomAttributesRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Player {
    PlayerUserMeBlock = "Lobby.Player.PlayerUserMeBlock",
    PlayerUsersMeBlocked = "Lobby.Player.PlayerUsersMeBlocked",
    PlayerUserMeUnblock = "Lobby.Player.PlayerUserMeUnblock",
    PlayerUsersMeBlockedBy = "Lobby.Player.PlayerUsersMeBlockedBy"
}
/**
 * Required valid user authorization &lt;br/&gt; &lt;br&gt;add blocked players in a namespace based on user id &lt;br/&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.PlayerUserMeBlock, input]
 * }
 * ```
 */
declare const usePlayerApi_CreatePlayerUserMeBlockMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BlockPlayerRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BlockPlayerRequest;
}>;
/**
 * Required valid user authorization &lt;br/&gt; &lt;br&gt;load blocked players in a namespace based on user id &lt;br/&gt; Action Code: 50101
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.PlayerUsersMeBlocked, input]
 * }
 * ```
 */
declare const usePlayerApi_GetPlayerUsersMeBlocked: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GetAllPlayerBlockedUsersResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllPlayerBlockedUsersResponse>) => void) => UseQueryResult<GetAllPlayerBlockedUsersResponse, AxiosError<ApiError>>;
/**
 * Required valid user authorization &lt;br/&gt; unblock player in a namespace based on user id &lt;br/&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.PlayerUserMeUnblock, input]
 * }
 * ```
 */
declare const usePlayerApi_CreatePlayerUserMeUnblockMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UnblockPlayerRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: UnblockPlayerRequest;
}>;
/**
 * Required valid user authorization &lt;br/&gt; &lt;br&gt;load get players who blocked this player in a namespace based on user id &lt;br/&gt; Action Code: 50101
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.PlayerUsersMeBlockedBy, input]
 * }
 * ```
 */
declare const usePlayerApi_GetPlayerUsersMeBlockedBy: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GetAllPlayerBlockedByUsersResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetAllPlayerBlockedByUsersResponse>) => void) => UseQueryResult<GetAllPlayerBlockedByUsersResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Presence {
    PresenceUsersPresence = "Lobby.Presence.PresenceUsersPresence",
    PresenceUserPresence = "Lobby.Presence.PresenceUserPresence"
}
/**
 * Query users presence with given namespace and userIds.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Presence.PresenceUsersPresence, input]
 * }
 * ```
 */
declare const usePresenceApi_GetPresenceUsersPresence: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        userIds: string | null;
        countOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<GetUsersPresenceResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetUsersPresenceResponse>) => void) => UseQueryResult<GetUsersPresenceResponse, AxiosError<ApiError>>;
/**
 * Query users presence with given namespace and userIds.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Presence.PresenceUserPresence, input]
 * }
 * ```
 */
declare const usePresenceApi_CreatePresenceUserPresenceMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GetUsersPresenceResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RequestUserPresence;
    queryParams?: {
        countOnly?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: GetUsersPresenceResponse) => void) => UseMutationResult<GetUsersPresenceResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RequestUserPresence;
    queryParams?: {
        countOnly?: boolean | null;
    };
}>;

export { Key_Admin, Key_AdminAdmin, Key_Blocks, Key_ConfigAdmin, Key_Friends, Key_FriendsAdmin, Key_LobbyOperations, Key_LobbyOperationsAdmin, Key_Notification, Key_NotificationAdmin, Key_Party, Key_PartyAdmin, Key_Player, Key_PlayerAdmin, Key_Presence, Key_ProfanityAdmin, Key_ThirdPartyAdmin, useAdminAdminApi_DeleteGlobalConfigurationMutation, useAdminAdminApi_GetGlobalConfigurations, useAdminAdminApi_UpdateGlobalConfigurationMutation, useAdminApi_CreateNotificationFreeformMutation, useAdminApi_CreateNotificationTemplateMutation, useAdminApi_CreateNotificationTemplatedMutation, useAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation, useAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation, useAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation, useAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage, useAdminApi_GetNotificationTemplate_ByTemplateSlug, useAdminApi_GetNotificationTemplates, useAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation, useBlocksApi_PatchSyncMeBlockMutation, useConfigAdminApi_GetConfig, useConfigAdminApi_GetConfigExport, useConfigAdminApi_GetConfigLog, useConfigAdminApi_GetConfig_ByNamespace, useConfigAdminApi_PatchConfigLogMutation, useConfigAdminApi_UpdateConfigImportMutation, useConfigAdminApi_UpdateConfig_ByNamespaceMutation, useFriendsAdminApi_GetFriendUser_ByUserId, useFriendsAdminApi_GetIncomingFriend_ByUserId, useFriendsAdminApi_GetOfFriends_ByUserId, useFriendsAdminApi_GetOutgoingFriend_ByUserId, useFriendsApi_CreateAddBulkFriend_ByUserIdMutation, useFriendsApi_CreateDeleteBulkFriend_ByUserIdMutation, useFriendsApi_CreateFriendMeRequestAcceptMutation, useFriendsApi_CreateFriendMeRequestCancelMutation, useFriendsApi_CreateFriendMeRequestMutation, useFriendsApi_CreateFriendMeRequestRejectMutation, useFriendsApi_CreateFriendMeUnfriendMutation, useFriendsApi_GetFriendMeStatu_ByFriendId, useFriendsApi_GetFriendsMe, useFriendsApi_GetFriendsMeIncoming, useFriendsApi_GetFriendsMeIncomingTime, useFriendsApi_GetFriendsMeOutgoing, useFriendsApi_GetFriendsMeOutgoingTime, useFriendsApi_GetFriendsMePlatforms, useFriendsApi_PatchFriendSyncMeMutation, useLobbyOperationsAdminApi_UpdateAttributeParty_ByPartyIdMutation, useLobbyOperationsAdminApi_UpdateJoinParty_ByPartyId_ByUserIdMutation, useLobbyOperationsApi_GetMessages, useNotificationAdminApi_CreateFreeformNotifyNotification_ByPartyIdMutation, useNotificationAdminApi_CreateFreeformNotifyNotification_ByUserIdMutation, useNotificationAdminApi_CreateNotificationBulkUserFreeformNotifyMutation, useNotificationAdminApi_CreateNotificationFreeformNotifyMutation, useNotificationAdminApi_CreateNotificationTemplateMutation, useNotificationAdminApi_CreateNotificationTemplateNotifyMutation, useNotificationAdminApi_CreateNotificationTopicMutation, useNotificationAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation, useNotificationAdminApi_CreateTemplateNotifyNotification_ByPartyIdMutation, useNotificationAdminApi_CreateTemplateNotifyNotification_ByUserIdMutation, useNotificationAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation, useNotificationAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation, useNotificationAdminApi_DeleteNotificationTopic_ByTopicNameMutation, useNotificationAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage, useNotificationAdminApi_GetNotificationTemplate_ByTemplateSlug, useNotificationAdminApi_GetNotificationTemplates, useNotificationAdminApi_GetNotificationTopic_ByTopicName, useNotificationAdminApi_GetNotificationTopics, useNotificationAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation, useNotificationAdminApi_UpdateNotificationTopic_ByTopicNameMutation, useNotificationApi_CreateFreeformNotification_ByUserIdMutation, useNotificationApi_CreateNotificationTopicMutation, useNotificationApi_CreateTemplatedNotification_ByUserIdMutation, useNotificationApi_DeleteNotificationTopic_ByTopicMutation, useNotificationApi_GetNotificationMe, useNotificationApi_GetNotificationTopic_ByTopic, useNotificationApi_GetNotificationTopics, useNotificationApi_UpdateNotificationTopic_ByTopicMutation, usePartyAdminApi_GetPartyParty_ByPartyId, usePartyAdminApi_GetParty_ByUserId, usePartyApi_GetPartyParty_ByPartyId, usePartyApi_UpdateAttributeParty_ByPartyIdMutation, usePartyApi_UpdateLimitParty_ByPartyIdMutation, usePlayerAdminApi_CreateBulkBlockPlayer_ByUserIdMutation, usePlayerAdminApi_DeleteBulkUnblockPlayer_ByUserIdMutation, usePlayerAdminApi_FetchPlayerUserBulkBlocked, usePlayerAdminApi_GetAttributePlayer_ByUserId_ByAttribute, usePlayerAdminApi_GetAttributesPlayer_ByUserId, usePlayerAdminApi_GetBlockedByPlayer_ByUserId, usePlayerAdminApi_GetBlockedPlayer_ByUserId, usePlayerAdminApi_GetPlayerCcu, usePlayerAdminApi_UpdateAttributePlayer_ByUserIdMutation, usePlayerApi_CreatePlayerUserMeBlockMutation, usePlayerApi_CreatePlayerUserMeUnblockMutation, usePlayerApi_GetPlayerUsersMeBlocked, usePlayerApi_GetPlayerUsersMeBlockedBy, usePresenceApi_CreatePresenceUserPresenceMutation, usePresenceApi_GetPresenceUsersPresence, useProfanityAdminApi_CreateFilterBulkFileProfanity_ByListMutation, useProfanityAdminApi_CreateFilterBulkProfanity_ByListMutation, useProfanityAdminApi_CreateFilterDeleteProfanity_ByListMutation, useProfanityAdminApi_CreateFilterProfanity_ByListMutation, useProfanityAdminApi_CreateProfanityListMutation, useProfanityAdminApi_DeleteProfanityList_ByListMutation, useProfanityAdminApi_FetchProfanityFilterDebug, useProfanityAdminApi_FetchProfanityVerify, useProfanityAdminApi_GetFiltersProfanity_ByList, useProfanityAdminApi_GetProfanityLists, useProfanityAdminApi_GetProfanityRule, useProfanityAdminApi_UpdateProfanityList_ByListMutation, useProfanityAdminApi_UpdateProfanityRuleMutation, useThirdPartyAdminApi_CreateThirdpartyConfigSteamMutation, useThirdPartyAdminApi_DeleteThirdpartyConfigSteamMutation, useThirdPartyAdminApi_GetThirdpartyConfigSteam, useThirdPartyAdminApi_UpdateThirdpartyConfigSteamMutation };
