import {
  AdminAdminApi,
  AdminApi,
  BlocksApi,
  ConfigAdminApi,
  FriendsAdminApi,
  FriendsApi,
  LobbyOperationsAdminApi,
  LobbyOperationsApi,
  NotificationAdminApi,
  NotificationApi,
  PartyAdminApi,
  PartyApi,
  PlayerAdminApi,
  PlayerApi,
  PresenceApi,
  ProfanityAdminApi,
  ThirdPartyAdminApi
} from "./chunk-TVSI43MZ.js";

// src/generated-admin/queries/AdminAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_AdminAdmin = /* @__PURE__ */ ((Key_AdminAdmin2) => {
  Key_AdminAdmin2["GlobalConfiguration"] = "Lobby.AdminAdmin.GlobalConfiguration";
  Key_AdminAdmin2["GlobalConfigurations"] = "Lobby.AdminAdmin.GlobalConfigurations";
  return Key_AdminAdmin2;
})(Key_AdminAdmin || {});
var useAdminAdminApi_DeleteGlobalConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteGlobalConfiguration();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Lobby.AdminAdmin.GlobalConfiguration" /* GlobalConfiguration */],
    mutationFn,
    ...options
  });
};
var useAdminAdminApi_GetGlobalConfigurations = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AdminAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGlobalConfigurations();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Lobby.AdminAdmin.GlobalConfigurations" /* GlobalConfigurations */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAdminAdminApi_UpdateGlobalConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateGlobalConfiguration(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Lobby.AdminAdmin.GlobalConfiguration" /* GlobalConfiguration */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ConfigAdmin.query.ts
import { useMutation as useMutation2, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["Config"] = "Lobby.ConfigAdmin.Config";
  Key_ConfigAdmin2["ConfigLog"] = "Lobby.ConfigAdmin.ConfigLog";
  Key_ConfigAdmin2["Config_ByNamespace"] = "Lobby.ConfigAdmin.Config_ByNamespace";
  Key_ConfigAdmin2["ConfigExport"] = "Lobby.ConfigAdmin.ConfigExport";
  Key_ConfigAdmin2["ConfigImport"] = "Lobby.ConfigAdmin.ConfigImport";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_GetConfig = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Lobby.ConfigAdmin.Config" /* Config */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_GetConfigLog = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfigLog();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Lobby.ConfigAdmin.ConfigLog" /* ConfigLog */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfigLogMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfigLog(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Lobby.ConfigAdmin.ConfigLog" /* ConfigLog */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_GetConfig_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByNamespace();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Lobby.ConfigAdmin.Config_ByNamespace" /* Config_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_UpdateConfig_ByNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateConfig_ByNamespace(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Lobby.ConfigAdmin.Config_ByNamespace" /* Config_ByNamespace */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_GetConfigExport = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfigExport();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Lobby.ConfigAdmin.ConfigExport" /* ConfigExport */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_UpdateConfigImportMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateConfigImport(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Lobby.ConfigAdmin.ConfigImport" /* ConfigImport */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/FriendsAdmin.query.ts
import { useQuery as useQuery3 } from "@tanstack/react-query";
var Key_FriendsAdmin = /* @__PURE__ */ ((Key_FriendsAdmin2) => {
  Key_FriendsAdmin2["FriendUser_ByUserId"] = "Lobby.FriendsAdmin.FriendUser_ByUserId";
  Key_FriendsAdmin2["IncomingFriend_ByUserId"] = "Lobby.FriendsAdmin.IncomingFriend_ByUserId";
  Key_FriendsAdmin2["OutgoingFriend_ByUserId"] = "Lobby.FriendsAdmin.OutgoingFriend_ByUserId";
  Key_FriendsAdmin2["OfFriends_ByUserId"] = "Lobby.FriendsAdmin.OfFriends_ByUserId";
  return Key_FriendsAdmin2;
})(Key_FriendsAdmin || {});
var useFriendsAdminApi_GetFriendUser_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendUser_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Lobby.FriendsAdmin.FriendUser_ByUserId" /* FriendUser_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsAdminApi_GetIncomingFriend_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIncomingFriend_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Lobby.FriendsAdmin.IncomingFriend_ByUserId" /* IncomingFriend_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsAdminApi_GetOutgoingFriend_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getOutgoingFriend_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Lobby.FriendsAdmin.OutgoingFriend_ByUserId" /* OutgoingFriend_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsAdminApi_GetOfFriends_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOfFriends_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Lobby.FriendsAdmin.OfFriends_ByUserId" /* OfFriends_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/LobbyOperationsAdmin.query.ts
import { useMutation as useMutation3 } from "@tanstack/react-query";
var Key_LobbyOperationsAdmin = /* @__PURE__ */ ((Key_LobbyOperationsAdmin2) => {
  Key_LobbyOperationsAdmin2["AttributeParty_ByPartyId"] = "Lobby.LobbyOperationsAdmin.AttributeParty_ByPartyId";
  Key_LobbyOperationsAdmin2["JoinParty_ByPartyId_ByUserId"] = "Lobby.LobbyOperationsAdmin.JoinParty_ByPartyId_ByUserId";
  return Key_LobbyOperationsAdmin2;
})(Key_LobbyOperationsAdmin || {});
var useLobbyOperationsAdminApi_UpdateAttributeParty_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LobbyOperationsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAttributeParty_ByPartyId(input.partyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Lobby.LobbyOperationsAdmin.AttributeParty_ByPartyId" /* AttributeParty_ByPartyId */],
    mutationFn,
    ...options
  });
};
var useLobbyOperationsAdminApi_UpdateJoinParty_ByPartyId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LobbyOperationsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateJoinParty_ByPartyId_ByUserId(input.partyId, input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Lobby.LobbyOperationsAdmin.JoinParty_ByPartyId_ByUserId" /* JoinParty_ByPartyId_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/NotificationAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery4 } from "@tanstack/react-query";
var Key_NotificationAdmin = /* @__PURE__ */ ((Key_NotificationAdmin2) => {
  Key_NotificationAdmin2["NotificationTopics"] = "Lobby.NotificationAdmin.NotificationTopics";
  Key_NotificationAdmin2["NotificationTopic"] = "Lobby.NotificationAdmin.NotificationTopic";
  Key_NotificationAdmin2["NotificationTemplates"] = "Lobby.NotificationAdmin.NotificationTemplates";
  Key_NotificationAdmin2["NotificationTemplate"] = "Lobby.NotificationAdmin.NotificationTemplate";
  Key_NotificationAdmin2["NotificationFreeformNotify"] = "Lobby.NotificationAdmin.NotificationFreeformNotify";
  Key_NotificationAdmin2["NotificationTemplateNotify"] = "Lobby.NotificationAdmin.NotificationTemplateNotify";
  Key_NotificationAdmin2["NotificationTopic_ByTopicName"] = "Lobby.NotificationAdmin.NotificationTopic_ByTopicName";
  Key_NotificationAdmin2["NotificationTemplate_ByTemplateSlug"] = "Lobby.NotificationAdmin.NotificationTemplate_ByTemplateSlug";
  Key_NotificationAdmin2["NotificationBulkUserFreeformNotify"] = "Lobby.NotificationAdmin.NotificationBulkUserFreeformNotify";
  Key_NotificationAdmin2["FreeformNotifyNotification_ByUserId"] = "Lobby.NotificationAdmin.FreeformNotifyNotification_ByUserId";
  Key_NotificationAdmin2["TemplateNotifyNotification_ByUserId"] = "Lobby.NotificationAdmin.TemplateNotifyNotification_ByUserId";
  Key_NotificationAdmin2["FreeformNotifyNotification_ByPartyId"] = "Lobby.NotificationAdmin.FreeformNotifyNotification_ByPartyId";
  Key_NotificationAdmin2["TemplateNotifyNotification_ByPartyId"] = "Lobby.NotificationAdmin.TemplateNotifyNotification_ByPartyId";
  Key_NotificationAdmin2["LanguageNotification_ByTemplateSlug_ByTemplateLanguage"] = "Lobby.NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage";
  Key_NotificationAdmin2["PublishNotification_ByTemplateSlug_ByTemplateLanguage"] = "Lobby.NotificationAdmin.PublishNotification_ByTemplateSlug_ByTemplateLanguage";
  return Key_NotificationAdmin2;
})(Key_NotificationAdmin || {});
var useNotificationAdminApi_GetNotificationTopics = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNotificationTopics(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Lobby.NotificationAdmin.NotificationTopics" /* NotificationTopics */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationAdminApi_CreateNotificationTopicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotificationTopic(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationTopic" /* NotificationTopic */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_GetNotificationTemplates = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNotificationTemplates();
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Lobby.NotificationAdmin.NotificationTemplates" /* NotificationTemplates */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationAdminApi_CreateNotificationTemplateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotificationTemplate(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationTemplate" /* NotificationTemplate */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreateNotificationFreeformNotifyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotificationFreeformNotify(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationFreeformNotify" /* NotificationFreeformNotify */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreateNotificationTemplateNotifyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotificationTemplateNotify(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationTemplateNotify" /* NotificationTemplateNotify */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_DeleteNotificationTopic_ByTopicNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteNotificationTopic_ByTopicName(input.topicName);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationTopic_ByTopicName" /* NotificationTopic_ByTopicName */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_GetNotificationTopic_ByTopicName = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNotificationTopic_ByTopicName(input2.topicName);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Lobby.NotificationAdmin.NotificationTopic_ByTopicName" /* NotificationTopic_ByTopicName */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationAdminApi_UpdateNotificationTopic_ByTopicNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateNotificationTopic_ByTopicName(input.topicName, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationTopic_ByTopicName" /* NotificationTopic_ByTopicName */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteNotificationTemplate_ByTemplateSlug(input.templateSlug);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationTemplate_ByTemplateSlug" /* NotificationTemplate_ByTemplateSlug */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_GetNotificationTemplate_ByTemplateSlug = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNotificationTemplate_ByTemplateSlug(input2.templateSlug, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Lobby.NotificationAdmin.NotificationTemplate_ByTemplateSlug" /* NotificationTemplate_ByTemplateSlug */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationAdminApi_CreateNotificationBulkUserFreeformNotifyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotificationBulkUserFreeformNotify(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.NotificationBulkUserFreeformNotify" /* NotificationBulkUserFreeformNotify */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreateFreeformNotifyNotification_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFreeformNotifyNotification_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.FreeformNotifyNotification_ByUserId" /* FreeformNotifyNotification_ByUserId */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreateTemplateNotifyNotification_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createTemplateNotifyNotification_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.TemplateNotifyNotification_ByUserId" /* TemplateNotifyNotification_ByUserId */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreateFreeformNotifyNotification_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFreeformNotifyNotification_ByPartyId(input.partyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.FreeformNotifyNotification_ByPartyId" /* FreeformNotifyNotification_ByPartyId */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreateTemplateNotifyNotification_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createTemplateNotifyNotification_ByPartyId(input.partyId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.TemplateNotifyNotification_ByPartyId" /* TemplateNotifyNotification_ByPartyId */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteLanguageNotification_ByTemplateSlug_ByTemplateLanguage(input.templateSlug, input.templateLanguage);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage" /* LanguageNotification_ByTemplateSlug_ByTemplateLanguage */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLanguageNotification_ByTemplateSlug_ByTemplateLanguage(input2.templateSlug, input2.templateLanguage);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Lobby.NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage" /* LanguageNotification_ByTemplateSlug_ByTemplateLanguage */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLanguageNotification_ByTemplateSlug_ByTemplateLanguage(input.templateSlug, input.templateLanguage, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage" /* LanguageNotification_ByTemplateSlug_ByTemplateLanguage */],
    mutationFn,
    ...options
  });
};
var useNotificationAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPublishNotification_ByTemplateSlug_ByTemplateLanguage(input.templateSlug, input.templateLanguage);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Lobby.NotificationAdmin.PublishNotification_ByTemplateSlug_ByTemplateLanguage" /* PublishNotification_ByTemplateSlug_ByTemplateLanguage */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PartyAdmin.query.ts
import { useQuery as useQuery5 } from "@tanstack/react-query";
var Key_PartyAdmin = /* @__PURE__ */ ((Key_PartyAdmin2) => {
  Key_PartyAdmin2["PartyParty_ByPartyId"] = "Lobby.PartyAdmin.PartyParty_ByPartyId";
  Key_PartyAdmin2["Party_ByUserId"] = "Lobby.PartyAdmin.Party_ByUserId";
  return Key_PartyAdmin2;
})(Key_PartyAdmin || {});
var usePartyAdminApi_GetPartyParty_ByPartyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PartyAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPartyParty_ByPartyId(
      input2.partyId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Lobby.PartyAdmin.PartyParty_ByPartyId" /* PartyParty_ByPartyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePartyAdminApi_GetParty_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PartyAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getParty_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Lobby.PartyAdmin.Party_ByUserId" /* Party_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PlayerAdmin.query.ts
import { useMutation as useMutation5, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_PlayerAdmin = /* @__PURE__ */ ((Key_PlayerAdmin2) => {
  Key_PlayerAdmin2["PlayerCcu"] = "Lobby.PlayerAdmin.PlayerCcu";
  Key_PlayerAdmin2["PlayerUserBulkBlocked"] = "Lobby.PlayerAdmin.PlayerUserBulkBlocked";
  Key_PlayerAdmin2["BlockedPlayer_ByUserId"] = "Lobby.PlayerAdmin.BlockedPlayer_ByUserId";
  Key_PlayerAdmin2["AttributesPlayer_ByUserId"] = "Lobby.PlayerAdmin.AttributesPlayer_ByUserId";
  Key_PlayerAdmin2["AttributePlayer_ByUserId"] = "Lobby.PlayerAdmin.AttributePlayer_ByUserId";
  Key_PlayerAdmin2["BlockedByPlayer_ByUserId"] = "Lobby.PlayerAdmin.BlockedByPlayer_ByUserId";
  Key_PlayerAdmin2["BulkBlockPlayer_ByUserId"] = "Lobby.PlayerAdmin.BulkBlockPlayer_ByUserId";
  Key_PlayerAdmin2["BulkUnblockPlayer_ByUserId"] = "Lobby.PlayerAdmin.BulkUnblockPlayer_ByUserId";
  Key_PlayerAdmin2["AttributePlayer_ByUserId_ByAttribute"] = "Lobby.PlayerAdmin.AttributePlayer_ByUserId_ByAttribute";
  return Key_PlayerAdmin2;
})(Key_PlayerAdmin || {});
var usePlayerAdminApi_GetPlayerCcu = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlayerCcu();
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Lobby.PlayerAdmin.PlayerCcu" /* PlayerCcu */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerAdminApi_FetchPlayerUserBulkBlocked = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchPlayerUserBulkBlocked(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Lobby.PlayerAdmin.PlayerUserBulkBlocked" /* PlayerUserBulkBlocked */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerAdminApi_GetBlockedPlayer_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBlockedPlayer_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Lobby.PlayerAdmin.BlockedPlayer_ByUserId" /* BlockedPlayer_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerAdminApi_GetAttributesPlayer_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAttributesPlayer_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Lobby.PlayerAdmin.AttributesPlayer_ByUserId" /* AttributesPlayer_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerAdminApi_UpdateAttributePlayer_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAttributePlayer_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Lobby.PlayerAdmin.AttributePlayer_ByUserId" /* AttributePlayer_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePlayerAdminApi_GetBlockedByPlayer_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBlockedByPlayer_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Lobby.PlayerAdmin.BlockedByPlayer_ByUserId" /* BlockedByPlayer_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerAdminApi_CreateBulkBlockPlayer_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBulkBlockPlayer_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Lobby.PlayerAdmin.BulkBlockPlayer_ByUserId" /* BulkBlockPlayer_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePlayerAdminApi_DeleteBulkUnblockPlayer_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteBulkUnblockPlayer_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Lobby.PlayerAdmin.BulkUnblockPlayer_ByUserId" /* BulkUnblockPlayer_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePlayerAdminApi_GetAttributePlayer_ByUserId_ByAttribute = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAttributePlayer_ByUserId_ByAttribute(input2.userId, input2.attribute);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Lobby.PlayerAdmin.AttributePlayer_ByUserId_ByAttribute" /* AttributePlayer_ByUserId_ByAttribute */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/ProfanityAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_ProfanityAdmin = /* @__PURE__ */ ((Key_ProfanityAdmin2) => {
  Key_ProfanityAdmin2["ProfanityRule"] = "Lobby.ProfanityAdmin.ProfanityRule";
  Key_ProfanityAdmin2["ProfanityLists"] = "Lobby.ProfanityAdmin.ProfanityLists";
  Key_ProfanityAdmin2["ProfanityList"] = "Lobby.ProfanityAdmin.ProfanityList";
  Key_ProfanityAdmin2["ProfanityVerify"] = "Lobby.ProfanityAdmin.ProfanityVerify";
  Key_ProfanityAdmin2["ProfanityList_ByList"] = "Lobby.ProfanityAdmin.ProfanityList_ByList";
  Key_ProfanityAdmin2["ProfanityFilterDebug"] = "Lobby.ProfanityAdmin.ProfanityFilterDebug";
  Key_ProfanityAdmin2["FiltersProfanity_ByList"] = "Lobby.ProfanityAdmin.FiltersProfanity_ByList";
  Key_ProfanityAdmin2["FilterProfanity_ByList"] = "Lobby.ProfanityAdmin.FilterProfanity_ByList";
  Key_ProfanityAdmin2["FilterBulkProfanity_ByList"] = "Lobby.ProfanityAdmin.FilterBulkProfanity_ByList";
  Key_ProfanityAdmin2["FilterDeleteProfanity_ByList"] = "Lobby.ProfanityAdmin.FilterDeleteProfanity_ByList";
  Key_ProfanityAdmin2["FilterBulkFileProfanity_ByList"] = "Lobby.ProfanityAdmin.FilterBulkFileProfanity_ByList";
  return Key_ProfanityAdmin2;
})(Key_ProfanityAdmin || {});
var useProfanityAdminApi_GetProfanityRule = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfanityAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfanityRule();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Lobby.ProfanityAdmin.ProfanityRule" /* ProfanityRule */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useProfanityAdminApi_UpdateProfanityRuleMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateProfanityRule(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.ProfanityRule" /* ProfanityRule */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_GetProfanityLists = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfanityAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfanityLists();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Lobby.ProfanityAdmin.ProfanityLists" /* ProfanityLists */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useProfanityAdminApi_CreateProfanityListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfanityList(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.ProfanityList" /* ProfanityList */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_FetchProfanityVerify = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfanityAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchProfanityVerify(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Lobby.ProfanityAdmin.ProfanityVerify" /* ProfanityVerify */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useProfanityAdminApi_DeleteProfanityList_ByListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteProfanityList_ByList(input.list);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.ProfanityList_ByList" /* ProfanityList_ByList */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_UpdateProfanityList_ByListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfanityList_ByList(input.list, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.ProfanityList_ByList" /* ProfanityList_ByList */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_FetchProfanityFilterDebug = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfanityAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchProfanityFilterDebug(input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Lobby.ProfanityAdmin.ProfanityFilterDebug" /* ProfanityFilterDebug */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useProfanityAdminApi_GetFiltersProfanity_ByList = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfanityAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getFiltersProfanity_ByList(input2.list);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Lobby.ProfanityAdmin.FiltersProfanity_ByList" /* FiltersProfanity_ByList */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useProfanityAdminApi_CreateFilterProfanity_ByListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFilterProfanity_ByList(input.list, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.FilterProfanity_ByList" /* FilterProfanity_ByList */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_CreateFilterBulkProfanity_ByListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFilterBulkProfanity_ByList(input.list, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.FilterBulkProfanity_ByList" /* FilterBulkProfanity_ByList */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_CreateFilterDeleteProfanity_ByListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFilterDeleteProfanity_ByList(input.list, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.FilterDeleteProfanity_ByList" /* FilterDeleteProfanity_ByList */],
    mutationFn,
    ...options
  });
};
var useProfanityAdminApi_CreateFilterBulkFileProfanity_ByListMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfanityAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFilterBulkFileProfanity_ByList(input.list, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Lobby.ProfanityAdmin.FilterBulkFileProfanity_ByList" /* FilterBulkFileProfanity_ByList */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ThirdPartyAdmin.query.ts
import { useMutation as useMutation7, useQuery as useQuery8 } from "@tanstack/react-query";
var Key_ThirdPartyAdmin = /* @__PURE__ */ ((Key_ThirdPartyAdmin2) => {
  Key_ThirdPartyAdmin2["ThirdpartyConfigSteam"] = "Lobby.ThirdPartyAdmin.ThirdpartyConfigSteam";
  return Key_ThirdPartyAdmin2;
})(Key_ThirdPartyAdmin || {});
var useThirdPartyAdminApi_DeleteThirdpartyConfigSteamMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteThirdpartyConfigSteam();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Lobby.ThirdPartyAdmin.ThirdpartyConfigSteam" /* ThirdpartyConfigSteam */],
    mutationFn,
    ...options
  });
};
var useThirdPartyAdminApi_GetThirdpartyConfigSteam = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getThirdpartyConfigSteam();
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Lobby.ThirdPartyAdmin.ThirdpartyConfigSteam" /* ThirdpartyConfigSteam */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useThirdPartyAdminApi_CreateThirdpartyConfigSteamMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createThirdpartyConfigSteam(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Lobby.ThirdPartyAdmin.ThirdpartyConfigSteam" /* ThirdpartyConfigSteam */],
    mutationFn,
    ...options
  });
};
var useThirdPartyAdminApi_UpdateThirdpartyConfigSteamMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateThirdpartyConfigSteam(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Lobby.ThirdPartyAdmin.ThirdpartyConfigSteam" /* ThirdpartyConfigSteam */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Admin.query.ts
import { useMutation as useMutation8, useQuery as useQuery9 } from "@tanstack/react-query";
var Key_Admin = /* @__PURE__ */ ((Key_Admin2) => {
  Key_Admin2["NotificationFreeform"] = "Lobby.Admin.NotificationFreeform";
  Key_Admin2["NotificationTemplated"] = "Lobby.Admin.NotificationTemplated";
  Key_Admin2["NotificationTemplates"] = "Lobby.Admin.NotificationTemplates";
  Key_Admin2["NotificationTemplate"] = "Lobby.Admin.NotificationTemplate";
  Key_Admin2["NotificationTemplate_ByTemplateSlug"] = "Lobby.Admin.NotificationTemplate_ByTemplateSlug";
  Key_Admin2["LanguageNotification_ByTemplateSlug_ByTemplateLanguage"] = "Lobby.Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage";
  Key_Admin2["PublishNotification_ByTemplateSlug_ByTemplateLanguage"] = "Lobby.Admin.PublishNotification_ByTemplateSlug_ByTemplateLanguage";
  return Key_Admin2;
})(Key_Admin || {});
var useAdminApi_CreateNotificationFreeformMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNotificationFreeform(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.NotificationFreeform" /* NotificationFreeform */],
    mutationFn,
    ...options
  });
};
var useAdminApi_CreateNotificationTemplatedMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNotificationTemplated(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.NotificationTemplated" /* NotificationTemplated */],
    mutationFn,
    ...options
  });
};
var useAdminApi_GetNotificationTemplates = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNotificationTemplates();
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Lobby.Admin.NotificationTemplates" /* NotificationTemplates */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAdminApi_CreateNotificationTemplateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNotificationTemplate(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.NotificationTemplate" /* NotificationTemplate */],
    mutationFn,
    ...options
  });
};
var useAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteNotificationTemplate_ByTemplateSlug(input.templateSlug);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.NotificationTemplate_ByTemplateSlug" /* NotificationTemplate_ByTemplateSlug */],
    mutationFn,
    ...options
  });
};
var useAdminApi_GetNotificationTemplate_ByTemplateSlug = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNotificationTemplate_ByTemplateSlug(input2.templateSlug, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Lobby.Admin.NotificationTemplate_ByTemplateSlug" /* NotificationTemplate_ByTemplateSlug */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteLanguageNotification_ByTemplateSlug_ByTemplateLanguage(input.templateSlug, input.templateLanguage);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage" /* LanguageNotification_ByTemplateSlug_ByTemplateLanguage */],
    mutationFn,
    ...options
  });
};
var useAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLanguageNotification_ByTemplateSlug_ByTemplateLanguage(input2.templateSlug, input2.templateLanguage);
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Lobby.Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage" /* LanguageNotification_ByTemplateSlug_ByTemplateLanguage */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLanguageNotification_ByTemplateSlug_ByTemplateLanguage(input.templateSlug, input.templateLanguage, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.LanguageNotification_ByTemplateSlug_ByTemplateLanguage" /* LanguageNotification_ByTemplateSlug_ByTemplateLanguage */],
    mutationFn,
    ...options
  });
};
var useAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPublishNotification_ByTemplateSlug_ByTemplateLanguage(input.templateSlug, input.templateLanguage);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Lobby.Admin.PublishNotification_ByTemplateSlug_ByTemplateLanguage" /* PublishNotification_ByTemplateSlug_ByTemplateLanguage */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Blocks.query.ts
import { useMutation as useMutation9 } from "@tanstack/react-query";
var Key_Blocks = /* @__PURE__ */ ((Key_Blocks2) => {
  Key_Blocks2["SyncMeBlock"] = "Lobby.Blocks.SyncMeBlock";
  return Key_Blocks2;
})(Key_Blocks || {});
var useBlocksApi_PatchSyncMeBlockMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BlocksApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchSyncMeBlock(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Lobby.Blocks.SyncMeBlock" /* SyncMeBlock */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Friends.query.ts
import { useMutation as useMutation10, useQuery as useQuery10 } from "@tanstack/react-query";
var Key_Friends = /* @__PURE__ */ ((Key_Friends2) => {
  Key_Friends2["FriendsMe"] = "Lobby.Friends.FriendsMe";
  Key_Friends2["FriendSyncMe"] = "Lobby.Friends.FriendSyncMe";
  Key_Friends2["FriendMeRequest"] = "Lobby.Friends.FriendMeRequest";
  Key_Friends2["FriendsMeIncoming"] = "Lobby.Friends.FriendsMeIncoming";
  Key_Friends2["FriendsMeOutgoing"] = "Lobby.Friends.FriendsMeOutgoing";
  Key_Friends2["FriendMeUnfriend"] = "Lobby.Friends.FriendMeUnfriend";
  Key_Friends2["FriendsMePlatforms"] = "Lobby.Friends.FriendsMePlatforms";
  Key_Friends2["FriendsMeIncomingTime"] = "Lobby.Friends.FriendsMeIncomingTime";
  Key_Friends2["FriendsMeOutgoingTime"] = "Lobby.Friends.FriendsMeOutgoingTime";
  Key_Friends2["FriendMeRequestAccept"] = "Lobby.Friends.FriendMeRequestAccept";
  Key_Friends2["FriendMeRequestCancel"] = "Lobby.Friends.FriendMeRequestCancel";
  Key_Friends2["FriendMeRequestReject"] = "Lobby.Friends.FriendMeRequestReject";
  Key_Friends2["FriendMeStatu_ByFriendId"] = "Lobby.Friends.FriendMeStatu_ByFriendId";
  Key_Friends2["AddBulkFriend_ByUserId"] = "Lobby.Friends.AddBulkFriend_ByUserId";
  Key_Friends2["DeleteBulkFriend_ByUserId"] = "Lobby.Friends.DeleteBulkFriend_ByUserId";
  return Key_Friends2;
})(Key_Friends || {});
var useFriendsApi_GetFriendsMe = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendsMe(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendsMe" /* FriendsMe */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_PatchFriendSyncMeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchFriendSyncMe(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.FriendSyncMe" /* FriendSyncMe */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_CreateFriendMeRequestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFriendMeRequest(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.FriendMeRequest" /* FriendMeRequest */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_GetFriendsMeIncoming = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendsMeIncoming(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendsMeIncoming" /* FriendsMeIncoming */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_GetFriendsMeOutgoing = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendsMeOutgoing(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendsMeOutgoing" /* FriendsMeOutgoing */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_CreateFriendMeUnfriendMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFriendMeUnfriend(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.FriendMeUnfriend" /* FriendMeUnfriend */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_GetFriendsMePlatforms = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendsMePlatforms(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendsMePlatforms" /* FriendsMePlatforms */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_GetFriendsMeIncomingTime = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendsMeIncomingTime(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendsMeIncomingTime" /* FriendsMeIncomingTime */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_GetFriendsMeOutgoingTime = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendsMeOutgoingTime(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendsMeOutgoingTime" /* FriendsMeOutgoingTime */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_CreateFriendMeRequestAcceptMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFriendMeRequestAccept(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.FriendMeRequestAccept" /* FriendMeRequestAccept */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_CreateFriendMeRequestCancelMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFriendMeRequestCancel(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.FriendMeRequestCancel" /* FriendMeRequestCancel */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_CreateFriendMeRequestRejectMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFriendMeRequestReject(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.FriendMeRequestReject" /* FriendMeRequestReject */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_GetFriendMeStatu_ByFriendId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FriendsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFriendMeStatu_ByFriendId(
      input2.friendId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Lobby.Friends.FriendMeStatu_ByFriendId" /* FriendMeStatu_ByFriendId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFriendsApi_CreateAddBulkFriend_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createAddBulkFriend_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.AddBulkFriend_ByUserId" /* AddBulkFriend_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFriendsApi_CreateDeleteBulkFriend_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FriendsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createDeleteBulkFriend_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Lobby.Friends.DeleteBulkFriend_ByUserId" /* DeleteBulkFriend_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/LobbyOperations.query.ts
import { useQuery as useQuery11 } from "@tanstack/react-query";
var Key_LobbyOperations = /* @__PURE__ */ ((Key_LobbyOperations2) => {
  Key_LobbyOperations2["Messages"] = "Lobby.LobbyOperations.Messages";
  return Key_LobbyOperations2;
})(Key_LobbyOperations || {});
var useLobbyOperationsApi_GetMessages = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LobbyOperationsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMessages();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Lobby.LobbyOperations.Messages" /* Messages */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Notification.query.ts
import { useMutation as useMutation11, useQuery as useQuery12 } from "@tanstack/react-query";
var Key_Notification = /* @__PURE__ */ ((Key_Notification2) => {
  Key_Notification2["NotificationMe"] = "Lobby.Notification.NotificationMe";
  Key_Notification2["NotificationTopics"] = "Lobby.Notification.NotificationTopics";
  Key_Notification2["NotificationTopic"] = "Lobby.Notification.NotificationTopic";
  Key_Notification2["NotificationTopic_ByTopic"] = "Lobby.Notification.NotificationTopic_ByTopic";
  Key_Notification2["FreeformNotification_ByUserId"] = "Lobby.Notification.FreeformNotification_ByUserId";
  Key_Notification2["TemplatedNotification_ByUserId"] = "Lobby.Notification.TemplatedNotification_ByUserId";
  return Key_Notification2;
})(Key_Notification || {});
var useNotificationApi_GetNotificationMe = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNotificationMe(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Lobby.Notification.NotificationMe" /* NotificationMe */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationApi_GetNotificationTopics = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNotificationTopics(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Lobby.Notification.NotificationTopics" /* NotificationTopics */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationApi_CreateNotificationTopicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNotificationTopic(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Lobby.Notification.NotificationTopic" /* NotificationTopic */],
    mutationFn,
    ...options
  });
};
var useNotificationApi_DeleteNotificationTopic_ByTopicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteNotificationTopic_ByTopic(input.topic);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Lobby.Notification.NotificationTopic_ByTopic" /* NotificationTopic_ByTopic */],
    mutationFn,
    ...options
  });
};
var useNotificationApi_GetNotificationTopic_ByTopic = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NotificationApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNotificationTopic_ByTopic(input2.topic);
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Lobby.Notification.NotificationTopic_ByTopic" /* NotificationTopic_ByTopic */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNotificationApi_UpdateNotificationTopic_ByTopicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateNotificationTopic_ByTopic(input.topic, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Lobby.Notification.NotificationTopic_ByTopic" /* NotificationTopic_ByTopic */],
    mutationFn,
    ...options
  });
};
var useNotificationApi_CreateFreeformNotification_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFreeformNotification_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Lobby.Notification.FreeformNotification_ByUserId" /* FreeformNotification_ByUserId */],
    mutationFn,
    ...options
  });
};
var useNotificationApi_CreateTemplatedNotification_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NotificationApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createTemplatedNotification_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Lobby.Notification.TemplatedNotification_ByUserId" /* TemplatedNotification_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Party.query.ts
import { useMutation as useMutation12, useQuery as useQuery13 } from "@tanstack/react-query";
var Key_Party = /* @__PURE__ */ ((Key_Party2) => {
  Key_Party2["PartyParty_ByPartyId"] = "Lobby.Party.PartyParty_ByPartyId";
  Key_Party2["LimitParty_ByPartyId"] = "Lobby.Party.LimitParty_ByPartyId";
  Key_Party2["AttributeParty_ByPartyId"] = "Lobby.Party.AttributeParty_ByPartyId";
  return Key_Party2;
})(Key_Party || {});
var usePartyApi_GetPartyParty_ByPartyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PartyApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPartyParty_ByPartyId(
      input2.partyId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Lobby.Party.PartyParty_ByPartyId" /* PartyParty_ByPartyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePartyApi_UpdateLimitParty_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateLimitParty_ByPartyId(
      input.partyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Lobby.Party.LimitParty_ByPartyId" /* LimitParty_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_UpdateAttributeParty_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateAttributeParty_ByPartyId(
      input.partyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Lobby.Party.AttributeParty_ByPartyId" /* AttributeParty_ByPartyId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Player.query.ts
import { useMutation as useMutation13, useQuery as useQuery14 } from "@tanstack/react-query";
var Key_Player = /* @__PURE__ */ ((Key_Player2) => {
  Key_Player2["PlayerUserMeBlock"] = "Lobby.Player.PlayerUserMeBlock";
  Key_Player2["PlayerUsersMeBlocked"] = "Lobby.Player.PlayerUsersMeBlocked";
  Key_Player2["PlayerUserMeUnblock"] = "Lobby.Player.PlayerUserMeUnblock";
  Key_Player2["PlayerUsersMeBlockedBy"] = "Lobby.Player.PlayerUsersMeBlockedBy";
  return Key_Player2;
})(Key_Player || {});
var usePlayerApi_CreatePlayerUserMeBlockMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPlayerUserMeBlock(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Lobby.Player.PlayerUserMeBlock" /* PlayerUserMeBlock */],
    mutationFn,
    ...options
  });
};
var usePlayerApi_GetPlayerUsersMeBlocked = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlayerUsersMeBlocked();
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Lobby.Player.PlayerUsersMeBlocked" /* PlayerUsersMeBlocked */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerApi_CreatePlayerUserMeUnblockMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPlayerUserMeUnblock(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Lobby.Player.PlayerUserMeUnblock" /* PlayerUserMeUnblock */],
    mutationFn,
    ...options
  });
};
var usePlayerApi_GetPlayerUsersMeBlockedBy = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlayerUsersMeBlockedBy();
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Lobby.Player.PlayerUsersMeBlockedBy" /* PlayerUsersMeBlockedBy */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Presence.query.ts
import { useMutation as useMutation14, useQuery as useQuery15 } from "@tanstack/react-query";
var Key_Presence = /* @__PURE__ */ ((Key_Presence2) => {
  Key_Presence2["PresenceUsersPresence"] = "Lobby.Presence.PresenceUsersPresence";
  Key_Presence2["PresenceUserPresence"] = "Lobby.Presence.PresenceUserPresence";
  return Key_Presence2;
})(Key_Presence || {});
var usePresenceApi_GetPresenceUsersPresence = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PresenceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPresenceUsersPresence(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Lobby.Presence.PresenceUsersPresence" /* PresenceUsersPresence */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePresenceApi_CreatePresenceUserPresenceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PresenceApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPresenceUserPresence(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Lobby.Presence.PresenceUserPresence" /* PresenceUserPresence */],
    mutationFn,
    ...options
  });
};
export {
  Key_Admin,
  Key_AdminAdmin,
  Key_Blocks,
  Key_ConfigAdmin,
  Key_Friends,
  Key_FriendsAdmin,
  Key_LobbyOperations,
  Key_LobbyOperationsAdmin,
  Key_Notification,
  Key_NotificationAdmin,
  Key_Party,
  Key_PartyAdmin,
  Key_Player,
  Key_PlayerAdmin,
  Key_Presence,
  Key_ProfanityAdmin,
  Key_ThirdPartyAdmin,
  useAdminAdminApi_DeleteGlobalConfigurationMutation,
  useAdminAdminApi_GetGlobalConfigurations,
  useAdminAdminApi_UpdateGlobalConfigurationMutation,
  useAdminApi_CreateNotificationFreeformMutation,
  useAdminApi_CreateNotificationTemplateMutation,
  useAdminApi_CreateNotificationTemplatedMutation,
  useAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation,
  useAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation,
  useAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation,
  useAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage,
  useAdminApi_GetNotificationTemplate_ByTemplateSlug,
  useAdminApi_GetNotificationTemplates,
  useAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation,
  useBlocksApi_PatchSyncMeBlockMutation,
  useConfigAdminApi_GetConfig,
  useConfigAdminApi_GetConfigExport,
  useConfigAdminApi_GetConfigLog,
  useConfigAdminApi_GetConfig_ByNamespace,
  useConfigAdminApi_PatchConfigLogMutation,
  useConfigAdminApi_UpdateConfigImportMutation,
  useConfigAdminApi_UpdateConfig_ByNamespaceMutation,
  useFriendsAdminApi_GetFriendUser_ByUserId,
  useFriendsAdminApi_GetIncomingFriend_ByUserId,
  useFriendsAdminApi_GetOfFriends_ByUserId,
  useFriendsAdminApi_GetOutgoingFriend_ByUserId,
  useFriendsApi_CreateAddBulkFriend_ByUserIdMutation,
  useFriendsApi_CreateDeleteBulkFriend_ByUserIdMutation,
  useFriendsApi_CreateFriendMeRequestAcceptMutation,
  useFriendsApi_CreateFriendMeRequestCancelMutation,
  useFriendsApi_CreateFriendMeRequestMutation,
  useFriendsApi_CreateFriendMeRequestRejectMutation,
  useFriendsApi_CreateFriendMeUnfriendMutation,
  useFriendsApi_GetFriendMeStatu_ByFriendId,
  useFriendsApi_GetFriendsMe,
  useFriendsApi_GetFriendsMeIncoming,
  useFriendsApi_GetFriendsMeIncomingTime,
  useFriendsApi_GetFriendsMeOutgoing,
  useFriendsApi_GetFriendsMeOutgoingTime,
  useFriendsApi_GetFriendsMePlatforms,
  useFriendsApi_PatchFriendSyncMeMutation,
  useLobbyOperationsAdminApi_UpdateAttributeParty_ByPartyIdMutation,
  useLobbyOperationsAdminApi_UpdateJoinParty_ByPartyId_ByUserIdMutation,
  useLobbyOperationsApi_GetMessages,
  useNotificationAdminApi_CreateFreeformNotifyNotification_ByPartyIdMutation,
  useNotificationAdminApi_CreateFreeformNotifyNotification_ByUserIdMutation,
  useNotificationAdminApi_CreateNotificationBulkUserFreeformNotifyMutation,
  useNotificationAdminApi_CreateNotificationFreeformNotifyMutation,
  useNotificationAdminApi_CreateNotificationTemplateMutation,
  useNotificationAdminApi_CreateNotificationTemplateNotifyMutation,
  useNotificationAdminApi_CreateNotificationTopicMutation,
  useNotificationAdminApi_CreatePublishNotification_ByTemplateSlug_ByTemplateLanguageMutation,
  useNotificationAdminApi_CreateTemplateNotifyNotification_ByPartyIdMutation,
  useNotificationAdminApi_CreateTemplateNotifyNotification_ByUserIdMutation,
  useNotificationAdminApi_DeleteLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation,
  useNotificationAdminApi_DeleteNotificationTemplate_ByTemplateSlugMutation,
  useNotificationAdminApi_DeleteNotificationTopic_ByTopicNameMutation,
  useNotificationAdminApi_GetLanguageNotification_ByTemplateSlug_ByTemplateLanguage,
  useNotificationAdminApi_GetNotificationTemplate_ByTemplateSlug,
  useNotificationAdminApi_GetNotificationTemplates,
  useNotificationAdminApi_GetNotificationTopic_ByTopicName,
  useNotificationAdminApi_GetNotificationTopics,
  useNotificationAdminApi_UpdateLanguageNotification_ByTemplateSlug_ByTemplateLanguageMutation,
  useNotificationAdminApi_UpdateNotificationTopic_ByTopicNameMutation,
  useNotificationApi_CreateFreeformNotification_ByUserIdMutation,
  useNotificationApi_CreateNotificationTopicMutation,
  useNotificationApi_CreateTemplatedNotification_ByUserIdMutation,
  useNotificationApi_DeleteNotificationTopic_ByTopicMutation,
  useNotificationApi_GetNotificationMe,
  useNotificationApi_GetNotificationTopic_ByTopic,
  useNotificationApi_GetNotificationTopics,
  useNotificationApi_UpdateNotificationTopic_ByTopicMutation,
  usePartyAdminApi_GetPartyParty_ByPartyId,
  usePartyAdminApi_GetParty_ByUserId,
  usePartyApi_GetPartyParty_ByPartyId,
  usePartyApi_UpdateAttributeParty_ByPartyIdMutation,
  usePartyApi_UpdateLimitParty_ByPartyIdMutation,
  usePlayerAdminApi_CreateBulkBlockPlayer_ByUserIdMutation,
  usePlayerAdminApi_DeleteBulkUnblockPlayer_ByUserIdMutation,
  usePlayerAdminApi_FetchPlayerUserBulkBlocked,
  usePlayerAdminApi_GetAttributePlayer_ByUserId_ByAttribute,
  usePlayerAdminApi_GetAttributesPlayer_ByUserId,
  usePlayerAdminApi_GetBlockedByPlayer_ByUserId,
  usePlayerAdminApi_GetBlockedPlayer_ByUserId,
  usePlayerAdminApi_GetPlayerCcu,
  usePlayerAdminApi_UpdateAttributePlayer_ByUserIdMutation,
  usePlayerApi_CreatePlayerUserMeBlockMutation,
  usePlayerApi_CreatePlayerUserMeUnblockMutation,
  usePlayerApi_GetPlayerUsersMeBlocked,
  usePlayerApi_GetPlayerUsersMeBlockedBy,
  usePresenceApi_CreatePresenceUserPresenceMutation,
  usePresenceApi_GetPresenceUsersPresence,
  useProfanityAdminApi_CreateFilterBulkFileProfanity_ByListMutation,
  useProfanityAdminApi_CreateFilterBulkProfanity_ByListMutation,
  useProfanityAdminApi_CreateFilterDeleteProfanity_ByListMutation,
  useProfanityAdminApi_CreateFilterProfanity_ByListMutation,
  useProfanityAdminApi_CreateProfanityListMutation,
  useProfanityAdminApi_DeleteProfanityList_ByListMutation,
  useProfanityAdminApi_FetchProfanityFilterDebug,
  useProfanityAdminApi_FetchProfanityVerify,
  useProfanityAdminApi_GetFiltersProfanity_ByList,
  useProfanityAdminApi_GetProfanityLists,
  useProfanityAdminApi_GetProfanityRule,
  useProfanityAdminApi_UpdateProfanityList_ByListMutation,
  useProfanityAdminApi_UpdateProfanityRuleMutation,
  useThirdPartyAdminApi_CreateThirdpartyConfigSteamMutation,
  useThirdPartyAdminApi_DeleteThirdpartyConfigSteamMutation,
  useThirdPartyAdminApi_GetThirdpartyConfigSteam,
  useThirdPartyAdminApi_UpdateThirdpartyConfigSteamMutation
};
