import {
  Admin$,
  AdminAdmin$,
  AdminAdminApi,
  AdminApi,
  AdminGetProfanityListFiltersV1Response,
  AdminGetProfanityListsListResponse,
  AdminGetProfanityListsListResponseArray,
  AdminVerifyMessageProfanityResponse,
  AppMessageDeclaration,
  AppMessageDeclarationArray,
  BlockedByPlayerData,
  BlockedPlayerData,
  Blocks$,
  BlocksApi,
  BulkFriendsResponse,
  Config,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigList,
  ConfigReq,
  Configuration,
  CreateConfigResponse,
  FriendWithPlatform,
  Friends$,
  FriendsAdmin$,
  FriendsAdminApi,
  FriendsApi,
  FriendshipConnection,
  FriendshipConnectionResponse,
  GetAllNotificationTemplateSlugResp,
  GetAllNotificationTopicsResponse,
  GetAllPlayerBlockedByUsersResponse,
  GetAllPlayerBlockedUsersResponse,
  GetAllPlayerSessionAttributeResponse,
  GetBulkAllPlayerBlockedUsersResponse,
  GetConfigResponse,
  GetFriendsResponse,
  GetLobbyCcuResponse,
  GetPlayerSessionAttributeResponse,
  GetUserFriendsResponse,
  GetUserFriendsResponseArray,
  GetUserIncomingFriendsResponse,
  GetUserIncomingFriendsResponseArray,
  GetUserOutgoingFriendsResponse,
  GetUserOutgoingFriendsResponseArray,
  GetUsersPresenceResponse,
  GlobalConfiguration,
  ImportConfigResponse,
  IncomingFriendsWithTimeData,
  ListBulkUserPlatformsResponse,
  LoadIncomingFriendsWithTimeResponse,
  LoadIncomingFriendsWithTimeResponseArray,
  LoadOutgoingFriendsWithTimeResponse,
  LoadOutgoingFriendsWithTimeResponseArray,
  LobbyOperations$,
  LobbyOperationsAdmin$,
  LobbyOperationsAdminApi,
  LobbyOperationsApi,
  Localization,
  NativeFriendSyncResponse,
  NativeFriendSyncResponseArray,
  NativeUserBlockResponse,
  NativeUserBlockResponseArray,
  Notification$,
  NotificationAdmin$,
  NotificationAdminApi,
  NotificationApi,
  NotificationResponse,
  NotificationTemplateResponse,
  NotificationTemplateResponseArray,
  NotificationTopicResponse,
  NotificationTopicResponseV1,
  OutgoingFriendsWithTimeData,
  Pagination,
  Party$,
  PartyAdmin$,
  PartyAdminApi,
  PartyApi,
  PartyData,
  Player$,
  PlayerAdmin$,
  PlayerAdminApi,
  PlayerApi,
  Presence$,
  PresenceApi,
  ProfanityAdmin$,
  ProfanityAdminApi,
  ProfanityFilter,
  ProfanityFilterArray,
  ProfanityRule,
  TemplateContent,
  TemplateLocalization,
  TemplateLocalizationResponse,
  TemplateResponse,
  TemplateResponseArray,
  ThirdPartyAdmin$,
  ThirdPartyAdminApi,
  TopicByNamespacesResponse,
  UpdateConfigResponse,
  UserGetFriendshipStatusResponse,
  UserPlatformInfo,
  UserPresence,
  UserWithPlatformInfo
} from "./chunk-TVSI43MZ.js";

// src/generated-definitions/AdminAddProfanityFilterIntoListRequest.ts
import { z } from "zod";
var AdminAddProfanityFilterIntoListRequest = z.object({ filter: z.string(), note: z.string() });

// src/generated-definitions/AdminAddProfanityFiltersFilterRequest.ts
import { z as z2 } from "zod";
var AdminAddProfanityFiltersFilterRequest = z2.object({ filter: z2.string(), note: z2.string() });

// src/generated-definitions/AdminAddProfanityFiltersRequest.ts
import { z as z3 } from "zod";
var AdminAddProfanityFiltersRequest = z3.object({ filters: z3.array(AdminAddProfanityFiltersFilterRequest) });

// src/generated-definitions/AdminCreateProfanityListRequest.ts
import { z as z4 } from "zod";
var AdminCreateProfanityListRequest = z4.object({ isEnabled: z4.boolean(), isMandatory: z4.boolean(), name: z4.string() });

// src/generated-definitions/AdminDeleteProfanityFilterRequest.ts
import { z as z5 } from "zod";
var AdminDeleteProfanityFilterRequest = z5.object({ filter: z5.string() });

// src/generated-definitions/AdminSetProfanityRuleForNamespaceRequest.ts
import { z as z6 } from "zod";
var AdminSetProfanityRuleForNamespaceRequest = z6.object({ rule: z6.string() });

// src/generated-definitions/AdminUpdateProfanityList.ts
import { z as z7 } from "zod";
var AdminUpdateProfanityList = z7.object({ isEnabled: z7.boolean(), isMandatory: z7.boolean(), newName: z7.string() });

// src/generated-definitions/AdminVerifyMessageProfanityRequest.ts
import { z as z8 } from "zod";
var AdminVerifyMessageProfanityRequest = z8.object({ message: z8.string(), profanityLevel: z8.string() });

// src/generated-definitions/BlockPlayerRequest.ts
import { z as z9 } from "zod";
var BlockPlayerRequest = z9.object({ blockedUserId: z9.string() });

// src/generated-definitions/BulkFriendsRequest.ts
import { z as z10 } from "zod";
var BulkFriendsRequest = z10.object({ friendIds: z10.array(z10.string()) });

// src/generated-definitions/BulkUsersFreeFormNotificationRequestV1.ts
import { z as z11 } from "zod";
var BulkUsersFreeFormNotificationRequestV1 = z11.object({ message: z11.string(), topicName: z11.string(), userIds: z11.array(z11.string()) });

// src/generated-definitions/CreateConfigRequest.ts
import { z as z12 } from "zod";
var CreateConfigRequest = z12.object({ apiKey: z12.string() });

// src/generated-definitions/CreateTemplateRequest.ts
import { z as z13 } from "zod";
var CreateTemplateRequest = z13.object({ templateContent: z13.string(), templateLanguage: z13.string(), templateSlug: z13.string() });

// src/generated-definitions/CreateTopicRequest.ts
import { z as z14 } from "zod";
var CreateTopicRequest = z14.object({ description: z14.string(), topic: z14.string() });

// src/generated-definitions/CreateTopicRequestV1.ts
import { z as z15 } from "zod";
var CreateTopicRequestV1 = z15.object({ description: z15.string(), topicName: z15.string() });

// src/generated-definitions/DebugProfanityFilterRequest.ts
import { z as z16 } from "zod";
var DebugProfanityFilterRequest = z16.object({ text: z16.string() });

// src/generated-definitions/Error.ts
import { z as z17 } from "zod";
var Error = z17.object({ errorCode: z17.number().int(), errorMessage: z17.string() });

// src/generated-definitions/ErrorResponseBody.ts
import { z as z18 } from "zod";
var ErrorResponseBody = z18.object({ ErrorCode: z18.number().int(), ErrorMessage: z18.string() });

// src/generated-definitions/ErrorResponseV1.ts
import { z as z19 } from "zod";
var ErrorResponseV1 = z19.object({ errorCode: z19.number().int(), errorMessage: z19.string() });

// src/generated-definitions/FreeFormNotificationRequest.ts
import { z as z20 } from "zod";
var FreeFormNotificationRequest = z20.object({ message: z20.string(), topic: z20.string() });

// src/generated-definitions/FreeFormNotificationRequestV1.ts
import { z as z21 } from "zod";
var FreeFormNotificationRequestV1 = z21.object({ message: z21.string(), topicName: z21.string() });

// src/generated-definitions/GetBulkAllPlayerBlockedUsersRequest.ts
import { z as z22 } from "zod";
var GetBulkAllPlayerBlockedUsersRequest = z22.object({ listBlockedUserId: z22.array(z22.string()) });

// src/generated-definitions/ListBlockedPlayerRequest.ts
import { z as z23 } from "zod";
var ListBlockedPlayerRequest = z23.object({ listBlockedUserId: z23.array(z23.string()) });

// src/generated-definitions/ListUnblockPlayerRequest.ts
import { z as z24 } from "zod";
var ListUnblockPlayerRequest = z24.object({ listUnblockUserId: z24.array(z24.string()) });

// src/generated-definitions/NativeFriendRequest.ts
import { z as z25 } from "zod";
var NativeFriendRequest = z25.object({
  isLogin: z25.boolean(),
  platformId: z25.string(),
  platformToken: z25.string().nullish(),
  psnEnv: z25.string().nullish()
});

// src/generated-definitions/NativeUserBlockRequest.ts
import { z as z26 } from "zod";
var NativeUserBlockRequest = z26.object({ platformId: z26.string(), psnEnv: z26.string().nullish() });

// src/generated-definitions/NotificationWithTemplateRequest.ts
import { z as z27 } from "zod";
var NotificationWithTemplateRequest = z27.object({
  templateContext: z27.record(z27.string()),
  templateLanguage: z27.string(),
  templateSlug: z27.string(),
  topic: z27.string()
});

// src/generated-definitions/NotificationWithTemplateRequestV1.ts
import { z as z28 } from "zod";
var NotificationWithTemplateRequestV1 = z28.object({
  templateContext: z28.record(z28.string()),
  templateLanguage: z28.string(),
  templateSlug: z28.string(),
  topicName: z28.string()
});

// src/generated-definitions/PartyPutCustomAttributesRequest.ts
import { z as z29 } from "zod";
var PartyPutCustomAttributesRequest = z29.object({ custom_attribute: z29.record(z29.any()), updatedAt: z29.number().int() });

// src/generated-definitions/PartyPutLimitSizeRequest.ts
import { z as z30 } from "zod";
var PartyPutLimitSizeRequest = z30.object({ limit: z30.number().int() });

// src/generated-definitions/PutGlobalConfigurationRequest.ts
import { z as z31 } from "zod";
var PutGlobalConfigurationRequest = z31.object({
  regionRetryMapping: z31.record(z31.array(z31.string())),
  regionURLMapping: z31.array(z31.string()),
  testGameMode: z31.string(),
  testRegionURLMapping: z31.array(z31.string()),
  testTargetUserIDs: z31.array(z31.string())
});

// src/generated-definitions/RequestUserPresence.ts
import { z as z32 } from "zod";
var RequestUserPresence = z32.object({ userIDs: z32.array(z32.string()).nullish() });

// src/generated-definitions/SetPlayerSessionAttributeRequest.ts
import { z as z33 } from "zod";
var SetPlayerSessionAttributeRequest = z33.object({ attributes: z33.record(z33.string()) });

// src/generated-definitions/UnblockPlayerRequest.ts
import { z as z34 } from "zod";
var UnblockPlayerRequest = z34.object({ userId: z34.string() });

// src/generated-definitions/UpdateConfigRequest.ts
import { z as z35 } from "zod";
var UpdateConfigRequest = z35.object({ apiKey: z35.string() });

// src/generated-definitions/UpdateTemplateRequest.ts
import { z as z36 } from "zod";
var UpdateTemplateRequest = z36.object({ templateContent: z36.string() });

// src/generated-definitions/UpdateTopicRequest.ts
import { z as z37 } from "zod";
var UpdateTopicRequest = z37.object({ description: z37.string() });

// src/generated-definitions/UserAcceptFriendRequest.ts
import { z as z38 } from "zod";
var UserAcceptFriendRequest = z38.object({ friendId: z38.string() });

// src/generated-definitions/UserCancelFriendRequest.ts
import { z as z39 } from "zod";
var UserCancelFriendRequest = z39.object({ friendId: z39.string() });

// src/generated-definitions/UserRejectFriendRequest.ts
import { z as z40 } from "zod";
var UserRejectFriendRequest = z40.object({ friendId: z40.string() });

// src/generated-definitions/UserRequestFriendRequest.ts
import { z as z41 } from "zod";
var UserRequestFriendRequest = z41.object({ friendId: z41.string().nullish(), friendPublicId: z41.string().nullish() });

// src/generated-definitions/UserUnfriendRequest.ts
import { z as z42 } from "zod";
var UserUnfriendRequest = z42.object({ friendId: z42.string() });

// package.json
var name = "@accelbyte/sdk-lobby";
var version = "5.0.1";
var author = "AccelByte Inc";

// src/generated-websocket/WebSocketClass.ts
import { RefreshToken } from "@accelbyte/sdk";

// src/generated-websocket/WebSocketDefinitions.ts
import { z as z43 } from "zod";
var AcceptFriendsNotif = z43.object({
  type: z43.literal("acceptFriendsNotif"),
  friendId: z43.coerce.string()
});
var AcceptFriendsRequest = z43.object({
  type: z43.literal("acceptFriendsRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var AcceptFriendsResponse = z43.object({
  type: z43.literal("acceptFriendsResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var BlockPlayerNotif = z43.object({
  type: z43.literal("blockPlayerNotif"),
  blockedUserId: z43.coerce.string(),
  userId: z43.coerce.string()
});
var BlockPlayerRequest2 = z43.object({
  type: z43.literal("blockPlayerRequest"),
  blockUserId: z43.coerce.string(),
  id: z43.coerce.string(),
  namespace: z43.coerce.string()
});
var BlockPlayerResponse = z43.object({
  type: z43.literal("blockPlayerResponse"),
  blockUserId: z43.coerce.string(),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  namespace: z43.coerce.string()
});
var CancelFriendsNotif = z43.object({
  type: z43.literal("cancelFriendsNotif"),
  userId: z43.coerce.string()
});
var CancelFriendsRequest = z43.object({
  type: z43.literal("cancelFriendsRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var CancelFriendsResponse = z43.object({
  type: z43.literal("cancelFriendsResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var CancelMatchmakingRequest = z43.object({
  type: z43.literal("cancelMatchmakingRequest"),
  gameMode: z43.coerce.string(),
  id: z43.coerce.string(),
  isTempParty: z43.boolean()
});
var CancelMatchmakingResponse = z43.object({
  type: z43.literal("cancelMatchmakingResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var ChannelChatNotif = z43.object({
  type: z43.literal("channelChatNotif"),
  channelSlug: z43.coerce.string(),
  from: z43.coerce.string(),
  payload: z43.coerce.string(),
  sentAt: z43.coerce.string()
});
var ClientResetRequest = z43.object({
  type: z43.literal("clientResetRequest"),
  namespace: z43.coerce.string(),
  userId: z43.coerce.string()
});
var ConnectNotif = z43.object({
  type: z43.literal("connectNotif"),
  lobbySessionID: z43.coerce.string()
});
var DisconnectNotif = z43.object({
  type: z43.literal("disconnectNotif"),
  connectionId: z43.coerce.string(),
  namespace: z43.coerce.string()
});
var DsNotif = z43.object({
  type: z43.literal("dsNotif"),
  alternateIps: z43.array(z43.coerce.string()),
  customAttribute: z43.coerce.string(),
  deployment: z43.coerce.string(),
  gameVersion: z43.coerce.string(),
  imageVersion: z43.coerce.string(),
  ip: z43.coerce.string(),
  isOK: z43.boolean(),
  isOverrideGameVersion: z43.boolean(),
  lastUpdate: z43.coerce.string(),
  matchId: z43.coerce.string(),
  message: z43.coerce.string(),
  namespace: z43.coerce.string(),
  podName: z43.coerce.string(),
  port: z43.coerce.number(),
  ports: z43.any(),
  protocol: z43.coerce.string(),
  provider: z43.coerce.string(),
  region: z43.coerce.string(),
  sessionId: z43.coerce.string(),
  status: z43.coerce.string()
});
var ErrorNotif = z43.object({
  type: z43.literal("errorNotif"),
  message: z43.coerce.string()
});
var ExitAllChannel = z43.object({
  type: z43.literal("exitAllChannel"),
  namespace: z43.coerce.string(),
  userId: z43.coerce.string()
});
var FriendsStatusRequest = z43.object({
  type: z43.literal("friendsStatusRequest"),
  id: z43.coerce.string()
});
var FriendsStatusResponse = z43.object({
  type: z43.literal("friendsStatusResponse"),
  activity: z43.array(z43.coerce.string()),
  availability: z43.array(z43.coerce.string()),
  code: z43.coerce.number(),
  friendIds: z43.array(z43.coerce.string()),
  id: z43.coerce.string(),
  lastSeenAt: z43.array(z43.coerce.string())
});
var GetAllSessionAttributeRequest = z43.object({
  type: z43.literal("getAllSessionAttributeRequest"),
  id: z43.coerce.string()
});
var GetAllSessionAttributeResponse = z43.object({
  type: z43.literal("getAllSessionAttributeResponse"),
  attributes: z43.any(),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var GetFriendshipStatusRequest = z43.object({
  type: z43.literal("getFriendshipStatusRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var GetFriendshipStatusResponse = z43.object({
  type: z43.literal("getFriendshipStatusResponse"),
  code: z43.coerce.number(),
  friendshipStatus: z43.coerce.string(),
  id: z43.coerce.string()
});
var GetSessionAttributeRequest = z43.object({
  type: z43.literal("getSessionAttributeRequest"),
  id: z43.coerce.string(),
  key: z43.coerce.string()
});
var GetSessionAttributeResponse = z43.object({
  type: z43.literal("getSessionAttributeResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  value: z43.coerce.string()
});
var JoinDefaultChannelRequest = z43.object({
  type: z43.literal("joinDefaultChannelRequest"),
  id: z43.coerce.string()
});
var JoinDefaultChannelResponse = z43.object({
  type: z43.literal("joinDefaultChannelResponse"),
  channelSlug: z43.coerce.string(),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var ListIncomingFriendsRequest = z43.object({
  type: z43.literal("listIncomingFriendsRequest"),
  id: z43.coerce.string()
});
var ListIncomingFriendsResponse = z43.object({
  type: z43.literal("listIncomingFriendsResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  userIds: z43.array(z43.coerce.string())
});
var ListOfFriendsRequest = z43.object({
  type: z43.literal("listOfFriendsRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var ListOfFriendsResponse = z43.object({
  type: z43.literal("listOfFriendsResponse"),
  code: z43.coerce.number(),
  friendIds: z43.array(z43.coerce.string()),
  id: z43.coerce.string()
});
var ListOnlineFriendsRequest = z43.object({
  type: z43.literal("listOnlineFriendsRequest"),
  id: z43.coerce.string()
});
var ListOutgoingFriendsRequest = z43.object({
  type: z43.literal("listOutgoingFriendsRequest"),
  id: z43.coerce.string()
});
var ListOutgoingFriendsResponse = z43.object({
  type: z43.literal("listOutgoingFriendsResponse"),
  code: z43.coerce.number(),
  friendIds: z43.array(z43.coerce.string()),
  id: z43.coerce.string()
});
var MatchmakingNotif = z43.object({
  type: z43.literal("matchmakingNotif"),
  counterPartyMember: z43.array(z43.coerce.string()),
  matchId: z43.coerce.string(),
  message: z43.coerce.string(),
  partyMember: z43.array(z43.coerce.string()),
  readyDuration: z43.coerce.number(),
  status: z43.coerce.string()
});
var MessageNotif = z43.object({
  type: z43.literal("messageNotif"),
  from: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string(),
  sentAt: z43.coerce.string(),
  to: z43.coerce.string(),
  topic: z43.coerce.string()
});
var MessageSessionNotif = z43.object({
  type: z43.literal("messageSessionNotif"),
  from: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string(),
  sentAt: z43.coerce.string(),
  to: z43.coerce.string(),
  topic: z43.coerce.string()
});
var OfflineNotificationRequest = z43.object({
  type: z43.literal("offlineNotificationRequest"),
  id: z43.coerce.string()
});
var OfflineNotificationResponse = z43.object({
  type: z43.literal("offlineNotificationResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var OnlineFriends = z43.object({
  type: z43.literal("onlineFriends"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  onlineFriendIds: z43.array(z43.coerce.string())
});
var PartyChatNotif = z43.object({
  type: z43.literal("partyChatNotif"),
  from: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string(),
  receivedAt: z43.coerce.string(),
  to: z43.coerce.string()
});
var PartyChatRequest = z43.object({
  type: z43.literal("partyChatRequest"),
  from: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string(),
  receivedAt: z43.coerce.string(),
  to: z43.coerce.string()
});
var PartyChatResponse = z43.object({
  type: z43.literal("partyChatResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var PartyCreateRequest = z43.object({
  type: z43.literal("partyCreateRequest"),
  id: z43.coerce.string()
});
var PartyCreateResponse = z43.object({
  type: z43.literal("partyCreateResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  invitees: z43.coerce.string(),
  leaderId: z43.coerce.string(),
  members: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyDataUpdateNotif = z43.object({
  type: z43.literal("partyDataUpdateNotif"),
  customAttributes: z43.any(),
  invitees: z43.array(z43.coerce.string()),
  leader: z43.coerce.string(),
  members: z43.array(z43.coerce.string()),
  namespace: z43.coerce.string(),
  partyId: z43.coerce.string(),
  updatedAt: z43.coerce.string()
});
var PartyGetInvitedNotif = z43.object({
  type: z43.literal("partyGetInvitedNotif"),
  from: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyInfoRequest = z43.object({
  type: z43.literal("partyInfoRequest"),
  id: z43.coerce.string()
});
var PartyInfoResponse = z43.object({
  type: z43.literal("partyInfoResponse"),
  code: z43.coerce.number(),
  customAttributes: z43.any(),
  id: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  invitees: z43.coerce.string(),
  leaderId: z43.coerce.string(),
  members: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyInviteNotif = z43.object({
  type: z43.literal("partyInviteNotif"),
  inviteeId: z43.coerce.string(),
  inviterId: z43.coerce.string()
});
var PartyInviteRequest = z43.object({
  type: z43.literal("partyInviteRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var PartyInviteResponse = z43.object({
  type: z43.literal("partyInviteResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var PartyJoinNotif = z43.object({
  type: z43.literal("partyJoinNotif"),
  userId: z43.coerce.string()
});
var PartyJoinRequest = z43.object({
  type: z43.literal("partyJoinRequest"),
  id: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyJoinResponse = z43.object({
  type: z43.literal("partyJoinResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  invitees: z43.coerce.string(),
  leaderId: z43.coerce.string(),
  members: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyKickNotif = z43.object({
  type: z43.literal("partyKickNotif"),
  leaderId: z43.coerce.string(),
  partyId: z43.coerce.string(),
  userId: z43.coerce.string()
});
var PartyKickRequest = z43.object({
  type: z43.literal("partyKickRequest"),
  id: z43.coerce.string(),
  memberId: z43.coerce.string()
});
var PartyKickResponse = z43.object({
  type: z43.literal("partyKickResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var PartyLeaveNotif = z43.object({
  type: z43.literal("partyLeaveNotif"),
  leaderId: z43.coerce.string(),
  userId: z43.coerce.string()
});
var PartyLeaveRequest = z43.object({
  type: z43.literal("partyLeaveRequest"),
  id: z43.coerce.string(),
  ignoreUserRegistry: z43.boolean()
});
var PartyLeaveResponse = z43.object({
  type: z43.literal("partyLeaveResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var PartyPromoteLeaderRequest = z43.object({
  type: z43.literal("partyPromoteLeaderRequest"),
  id: z43.coerce.string(),
  newLeaderUserId: z43.coerce.string()
});
var PartyPromoteLeaderResponse = z43.object({
  type: z43.literal("partyPromoteLeaderResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  invitees: z43.coerce.string(),
  leaderId: z43.coerce.string(),
  members: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyRejectNotif = z43.object({
  type: z43.literal("partyRejectNotif"),
  leaderId: z43.coerce.string(),
  partyId: z43.coerce.string(),
  userId: z43.coerce.string()
});
var PartyRejectRequest = z43.object({
  type: z43.literal("partyRejectRequest"),
  id: z43.coerce.string(),
  invitationToken: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PartyRejectResponse = z43.object({
  type: z43.literal("partyRejectResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  partyId: z43.coerce.string()
});
var PersonalChatHistoryRequest = z43.object({
  type: z43.literal("personalChatHistoryRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var PersonalChatHistoryResponse = z43.object({
  type: z43.literal("personalChatHistoryResponse"),
  chat: z43.coerce.string(),
  code: z43.coerce.number(),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var PersonalChatNotif = z43.object({
  type: z43.literal("personalChatNotif"),
  from: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string(),
  receivedAt: z43.coerce.string(),
  to: z43.coerce.string()
});
var PersonalChatRequest = z43.object({
  type: z43.literal("personalChatRequest"),
  from: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string(),
  receivedAt: z43.coerce.string(),
  to: z43.coerce.string()
});
var PersonalChatResponse = z43.object({
  type: z43.literal("personalChatResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var RefreshTokenRequest = z43.object({
  type: z43.literal("refreshTokenRequest"),
  id: z43.coerce.string(),
  token: z43.coerce.string()
});
var RefreshTokenResponse = z43.object({
  type: z43.literal("refreshTokenResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var RejectFriendsNotif = z43.object({
  type: z43.literal("rejectFriendsNotif"),
  userId: z43.coerce.string()
});
var RejectFriendsRequest = z43.object({
  type: z43.literal("rejectFriendsRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var RejectFriendsResponse = z43.object({
  type: z43.literal("rejectFriendsResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var RematchmakingNotif = z43.object({
  type: z43.literal("rematchmakingNotif"),
  banDuration: z43.coerce.number()
});
var RequestFriendsNotif = z43.object({
  type: z43.literal("requestFriendsNotif"),
  friendId: z43.coerce.string()
});
var RequestFriendsRequest = z43.object({
  type: z43.literal("requestFriendsRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var RequestFriendsResponse = z43.object({
  type: z43.literal("requestFriendsResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var SendChannelChatRequest = z43.object({
  type: z43.literal("sendChannelChatRequest"),
  channelSlug: z43.coerce.string(),
  id: z43.coerce.string(),
  payload: z43.coerce.string()
});
var SendChannelChatResponse = z43.object({
  type: z43.literal("sendChannelChatResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var SetReadyConsentNotif = z43.object({
  type: z43.literal("setReadyConsentNotif"),
  matchId: z43.coerce.string(),
  userId: z43.coerce.string()
});
var SetReadyConsentRequest = z43.object({
  type: z43.literal("setReadyConsentRequest"),
  id: z43.coerce.string(),
  matchId: z43.coerce.string()
});
var SetReadyConsentResponse = z43.object({
  type: z43.literal("setReadyConsentResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var SetSessionAttributeRequest = z43.object({
  type: z43.literal("setSessionAttributeRequest"),
  id: z43.coerce.string(),
  key: z43.coerce.string(),
  namespace: z43.coerce.string(),
  value: z43.coerce.string()
});
var SetSessionAttributeResponse = z43.object({
  type: z43.literal("setSessionAttributeResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var SetUserStatusRequest = z43.object({
  type: z43.literal("setUserStatusRequest"),
  activity: z43.coerce.string(),
  availability: z43.coerce.number(),
  id: z43.coerce.string()
});
var SetUserStatusResponse = z43.object({
  type: z43.literal("setUserStatusResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var ShutdownNotif = z43.object({
  type: z43.literal("shutdownNotif"),
  message: z43.coerce.string()
});
var SignalingP2PNotif = z43.object({
  type: z43.literal("signalingP2PNotif"),
  destinationId: z43.coerce.string(),
  message: z43.coerce.string()
});
var StartMatchmakingRequest = z43.object({
  type: z43.literal("startMatchmakingRequest"),
  extraAttributes: z43.coerce.string(),
  gameMode: z43.coerce.string(),
  id: z43.coerce.string(),
  partyAttributes: z43.any(),
  priority: z43.coerce.number(),
  tempParty: z43.coerce.string()
});
var StartMatchmakingResponse = z43.object({
  type: z43.literal("startMatchmakingResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var UnblockPlayerNotif = z43.object({
  type: z43.literal("unblockPlayerNotif"),
  unblockedUserId: z43.coerce.string(),
  userId: z43.coerce.string()
});
var UnblockPlayerRequest2 = z43.object({
  type: z43.literal("unblockPlayerRequest"),
  id: z43.coerce.string(),
  namespace: z43.coerce.string(),
  unblockedUserId: z43.coerce.string()
});
var UnblockPlayerResponse = z43.object({
  type: z43.literal("unblockPlayerResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  namespace: z43.coerce.string(),
  unblockedUserId: z43.coerce.string()
});
var UnfriendNotif = z43.object({
  type: z43.literal("unfriendNotif"),
  friendId: z43.coerce.string()
});
var UnfriendRequest = z43.object({
  type: z43.literal("unfriendRequest"),
  friendId: z43.coerce.string(),
  id: z43.coerce.string()
});
var UnfriendResponse = z43.object({
  type: z43.literal("unfriendResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string()
});
var UserMetricRequest = z43.object({
  type: z43.literal("userMetricRequest"),
  id: z43.coerce.string()
});
var UserMetricResponse = z43.object({
  type: z43.literal("userMetricResponse"),
  code: z43.coerce.number(),
  id: z43.coerce.string(),
  playerCount: z43.coerce.number()
});
var UserStatusNotif = z43.object({
  type: z43.literal("userStatusNotif"),
  activity: z43.coerce.string(),
  availability: z43.coerce.number(),
  lastSeenAt: z43.coerce.string(),
  userId: z43.coerce.string()
});
var WebSocketRequest = z43.discriminatedUnion("type", [
  AcceptFriendsRequest,
  BlockPlayerRequest2,
  CancelFriendsRequest,
  CancelMatchmakingRequest,
  ClientResetRequest,
  FriendsStatusRequest,
  GetAllSessionAttributeRequest,
  GetFriendshipStatusRequest,
  GetSessionAttributeRequest,
  JoinDefaultChannelRequest,
  ListIncomingFriendsRequest,
  ListOfFriendsRequest,
  ListOnlineFriendsRequest,
  ListOutgoingFriendsRequest,
  OfflineNotificationRequest,
  PartyChatRequest,
  PartyCreateRequest,
  PartyInfoRequest,
  PartyInviteRequest,
  PartyJoinRequest,
  PartyKickRequest,
  PartyLeaveRequest,
  PartyPromoteLeaderRequest,
  PartyRejectRequest,
  PersonalChatHistoryRequest,
  PersonalChatRequest,
  RefreshTokenRequest,
  RejectFriendsRequest,
  RequestFriendsRequest,
  SendChannelChatRequest,
  SetReadyConsentRequest,
  SetSessionAttributeRequest,
  SetUserStatusRequest,
  StartMatchmakingRequest,
  UnblockPlayerRequest2,
  UnfriendRequest,
  UserMetricRequest
]);
var WebSocketResponseOrNotification = z43.discriminatedUnion("type", [
  AcceptFriendsNotif,
  AcceptFriendsResponse,
  BlockPlayerNotif,
  BlockPlayerResponse,
  CancelFriendsNotif,
  CancelFriendsResponse,
  CancelMatchmakingResponse,
  ChannelChatNotif,
  ConnectNotif,
  DisconnectNotif,
  DsNotif,
  ErrorNotif,
  FriendsStatusResponse,
  GetAllSessionAttributeResponse,
  GetFriendshipStatusResponse,
  GetSessionAttributeResponse,
  JoinDefaultChannelResponse,
  ListIncomingFriendsResponse,
  ListOfFriendsResponse,
  ListOutgoingFriendsResponse,
  MatchmakingNotif,
  MessageNotif,
  MessageSessionNotif,
  OfflineNotificationResponse,
  PartyChatNotif,
  PartyChatResponse,
  PartyCreateResponse,
  PartyDataUpdateNotif,
  PartyGetInvitedNotif,
  PartyInfoResponse,
  PartyInviteNotif,
  PartyInviteResponse,
  PartyJoinNotif,
  PartyJoinResponse,
  PartyKickNotif,
  PartyKickResponse,
  PartyLeaveNotif,
  PartyLeaveResponse,
  PartyPromoteLeaderResponse,
  PartyRejectNotif,
  PartyRejectResponse,
  PersonalChatHistoryResponse,
  PersonalChatNotif,
  PersonalChatResponse,
  RefreshTokenResponse,
  RejectFriendsNotif,
  RejectFriendsResponse,
  RematchmakingNotif,
  RequestFriendsNotif,
  RequestFriendsResponse,
  SendChannelChatResponse,
  SetReadyConsentNotif,
  SetReadyConsentResponse,
  SetSessionAttributeResponse,
  SetUserStatusResponse,
  ShutdownNotif,
  SignalingP2PNotif,
  StartMatchmakingResponse,
  UnblockPlayerNotif,
  UnblockPlayerResponse,
  UnfriendNotif,
  UnfriendResponse,
  UserMetricResponse,
  UserStatusNotif
]);

// src/generated-websocket/WebSocketClass.ts
var messageParser = (data) => {
  const toVal = (str) => {
    if (str) {
      if (str.startsWith("[") && str.endsWith("]")) {
        return str.slice(1, str.length - 1).split(",").filter((v) => v !== "");
      }
    }
    return str;
  };
  const entries = data.split("\n").filter((line) => line !== "").map((line) => {
    const [key, valStr] = line.split(": ");
    return [key, toVal(valStr)];
  });
  return Object.fromEntries(entries);
};
var messageSerializer = (data) => {
  return Object.keys(data).map((key) => {
    const toStr = (val2) => {
      if (Array.isArray(val2)) {
        return `[${String(val2)}]`;
      }
      if (!val2) {
        return "";
      }
      return String(val2);
    };
    const val = data[key];
    const valStr = toStr(val);
    return `${key}: ${valStr}`;
  }).join("\n");
};
function WebSocketClass(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const baseURL = (args?.coreConfig?.baseURL ?? sdkAssembly.coreConfig.baseURL).replace("http", "ws");
  const path = "/lobby";
  const url = baseURL + path;
  let ws = null;
  let isDisconnectManually = false;
  const allowReconnect = sdkAssembly.webSocketConfig.allowReconnect ?? true;
  const maxReconnectAttempts = sdkAssembly.webSocketConfig.maxReconnectAttempts ?? 0;
  let reconnectAttempts = maxReconnectAttempts;
  const connect = () => {
    const token = sdk.getToken();
    if (!token.accessToken) {
      console.warn("No access token, please login first");
      return;
    }
    if (!ws) {
      ws = new WebSocket(url, token.accessToken);
    }
  };
  const refreshToken = async () => {
    const { refreshToken: refreshToken2 } = sdk.getToken();
    if (refreshToken2) {
      const refresh = new RefreshToken({
        config: {
          axiosConfig: sdkAssembly.axiosConfig.request,
          clientId: sdkAssembly.coreConfig.clientId,
          refreshToken: refreshToken2
        }
      });
      const result = await refresh.runWithLock();
      if (result) {
        sdk.setToken({
          accessToken: result.access_token,
          refreshToken: result.refresh_token
        });
        return true;
      }
    }
    return false;
  };
  const handleReconnect = async (ev) => {
    if (!allowReconnect || isDisconnectManually || !sdk.getToken().accessToken) return;
    if (ev.code === 4020) {
      await refreshToken();
      reconnectAttempts--;
      connect();
    } else if (ev.code >= 1001 && ev.code <= 2999) {
      if (!ws || ws.readyState !== ws.OPEN) return;
      if (maxReconnectAttempts === 0) {
        setTimeout(() => {
          connect();
        }, 1e3);
      } else if (reconnectAttempts !== 0) {
        setTimeout(() => {
          reconnectAttempts--;
          connect();
        }, 1e3);
      }
    }
  };
  const disconnect = (code, reason) => {
    if (ws) {
      ws.close(code, reason);
      isDisconnectManually = true;
      ws = null;
    }
  };
  const send = (message) => {
    if (ws) {
      ws.send(messageSerializer(message));
    }
  };
  const sendRaw = (rawMessage) => {
    if (ws) {
      ws.send(rawMessage);
    }
  };
  const onOpen = (cb) => {
    if (ws) {
      let listener2 = function(_ev) {
        isDisconnectManually = false;
        reconnectAttempts = maxReconnectAttempts;
        cb();
      };
      var listener = listener2;
      ws.addEventListener("open", listener2);
      return {
        removeEventListener: () => ws?.removeEventListener("open", listener2)
      };
    }
    return {};
  };
  const onClose = (cb) => {
    if (ws) {
      let listener2 = function(ev) {
        handleReconnect(ev);
        cb(ev);
      };
      var listener = listener2;
      ws.addEventListener("close", listener2);
      return {
        removeEventListener: () => ws?.removeEventListener("close", listener2)
      };
    }
    return {};
  };
  const onMessage = (cb, raw = false) => {
    if (ws) {
      let listener2 = function(ev) {
        if (raw) {
          cb(ev.data);
        } else {
          const result = WebSocketResponseOrNotification.parse(messageParser(ev.data));
          cb(result);
        }
      };
      var listener = listener2;
      ws.addEventListener("message", listener2);
      return {
        removeEventListener: () => ws?.removeEventListener("message", listener2)
      };
    }
    return {};
  };
  const onError = (cb) => {
    if (ws) {
      let listener2 = function(err) {
        cb(err);
      };
      var listener = listener2;
      ws.addEventListener("error", listener2);
      return {
        removeEventListener: () => ws?.removeEventListener("error", listener2)
      };
    }
    return {};
  };
  const sendAcceptFriends = (data) => {
    send({ type: "acceptFriendsRequest", ...data });
  };
  const sendBlockPlayer = (data) => {
    send({ type: "blockPlayerRequest", ...data });
  };
  const sendCancelFriends = (data) => {
    send({ type: "cancelFriendsRequest", ...data });
  };
  const sendCancelMatchmaking = (data) => {
    send({ type: "cancelMatchmakingRequest", ...data });
  };
  const sendClientReset = (data) => {
    send({ type: "clientResetRequest", ...data });
  };
  const sendFriendsStatus = (data) => {
    send({ type: "friendsStatusRequest", ...data });
  };
  const sendGetAllSessionAttribute = (data) => {
    send({ type: "getAllSessionAttributeRequest", ...data });
  };
  const sendGetFriendshipStatus = (data) => {
    send({ type: "getFriendshipStatusRequest", ...data });
  };
  const sendGetSessionAttribute = (data) => {
    send({ type: "getSessionAttributeRequest", ...data });
  };
  const sendJoinDefaultChannel = (data) => {
    send({ type: "joinDefaultChannelRequest", ...data });
  };
  const sendListIncomingFriends = (data) => {
    send({ type: "listIncomingFriendsRequest", ...data });
  };
  const sendListOfFriends = (data) => {
    send({ type: "listOfFriendsRequest", ...data });
  };
  const sendListOnlineFriends = (data) => {
    send({ type: "listOnlineFriendsRequest", ...data });
  };
  const sendListOutgoingFriends = (data) => {
    send({ type: "listOutgoingFriendsRequest", ...data });
  };
  const sendOfflineNotification = (data) => {
    send({ type: "offlineNotificationRequest", ...data });
  };
  const sendPartyChat = (data) => {
    send({ type: "partyChatRequest", ...data });
  };
  const sendPartyCreate = (data) => {
    send({ type: "partyCreateRequest", ...data });
  };
  const sendPartyInfo = (data) => {
    send({ type: "partyInfoRequest", ...data });
  };
  const sendPartyInvite = (data) => {
    send({ type: "partyInviteRequest", ...data });
  };
  const sendPartyJoin = (data) => {
    send({ type: "partyJoinRequest", ...data });
  };
  const sendPartyKick = (data) => {
    send({ type: "partyKickRequest", ...data });
  };
  const sendPartyLeave = (data) => {
    send({ type: "partyLeaveRequest", ...data });
  };
  const sendPartyPromoteLeader = (data) => {
    send({ type: "partyPromoteLeaderRequest", ...data });
  };
  const sendPartyReject = (data) => {
    send({ type: "partyRejectRequest", ...data });
  };
  const sendPersonalChatHistory = (data) => {
    send({ type: "personalChatHistoryRequest", ...data });
  };
  const sendPersonalChat = (data) => {
    send({ type: "personalChatRequest", ...data });
  };
  const sendRefreshToken = (data) => {
    send({ type: "refreshTokenRequest", ...data });
  };
  const sendRejectFriends = (data) => {
    send({ type: "rejectFriendsRequest", ...data });
  };
  const sendRequestFriends = (data) => {
    send({ type: "requestFriendsRequest", ...data });
  };
  const sendSendChannelChat = (data) => {
    send({ type: "sendChannelChatRequest", ...data });
  };
  const sendSetReadyConsent = (data) => {
    send({ type: "setReadyConsentRequest", ...data });
  };
  const sendSetSessionAttribute = (data) => {
    send({ type: "setSessionAttributeRequest", ...data });
  };
  const sendSetUserStatus = (data) => {
    send({ type: "setUserStatusRequest", ...data });
  };
  const sendStartMatchmaking = (data) => {
    send({ type: "startMatchmakingRequest", ...data });
  };
  const sendUnblockPlayer = (data) => {
    send({ type: "unblockPlayerRequest", ...data });
  };
  const sendUnfriend = (data) => {
    send({ type: "unfriendRequest", ...data });
  };
  const sendUserMetric = (data) => {
    send({ type: "userMetricRequest", ...data });
  };
  return {
    instance: ws,
    connect,
    disconnect,
    send,
    sendRaw,
    onOpen,
    onClose,
    onMessage,
    onError,
    sendAcceptFriends,
    sendBlockPlayer,
    sendCancelFriends,
    sendCancelMatchmaking,
    sendClientReset,
    sendFriendsStatus,
    sendGetAllSessionAttribute,
    sendGetFriendshipStatus,
    sendGetSessionAttribute,
    sendJoinDefaultChannel,
    sendListIncomingFriends,
    sendListOfFriends,
    sendListOnlineFriends,
    sendListOutgoingFriends,
    sendOfflineNotification,
    sendPartyChat,
    sendPartyCreate,
    sendPartyInfo,
    sendPartyInvite,
    sendPartyJoin,
    sendPartyKick,
    sendPartyLeave,
    sendPartyPromoteLeader,
    sendPartyReject,
    sendPersonalChatHistory,
    sendPersonalChat,
    sendRefreshToken,
    sendRejectFriends,
    sendRequestFriends,
    sendSendChannelChat,
    sendSetReadyConsent,
    sendSetSessionAttribute,
    sendSetUserStatus,
    sendStartMatchmaking,
    sendUnblockPlayer,
    sendUnfriend,
    sendUserMetric
  };
}

// src/Lobby.ts
console.log(`${name}@${version}`);
var apis = {
  ConfigAdminApi,
  AdminAdminApi,
  PlayerAdminApi,
  ProfanityAdminApi,
  NotificationAdminApi,
  FriendsAdminApi,
  PartyAdminApi,
  ThirdPartyAdminApi,
  LobbyOperationsAdminApi,
  LobbyOperationsApi,
  FriendsApi,
  NotificationApi,
  BlocksApi,
  AdminApi,
  PlayerApi,
  PartyApi,
  PresenceApi,
  WebSocket: WebSocketClass,
  version: () => console.log({
    version,
    name,
    author
  })
};
var Lobby = apis;
export {
  Admin$,
  AdminAddProfanityFilterIntoListRequest,
  AdminAddProfanityFiltersFilterRequest,
  AdminAddProfanityFiltersRequest,
  AdminAdmin$,
  AdminAdminApi,
  AdminApi,
  AdminCreateProfanityListRequest,
  AdminDeleteProfanityFilterRequest,
  AdminGetProfanityListFiltersV1Response,
  AdminGetProfanityListsListResponse,
  AdminGetProfanityListsListResponseArray,
  AdminSetProfanityRuleForNamespaceRequest,
  AdminUpdateProfanityList,
  AdminVerifyMessageProfanityRequest,
  AdminVerifyMessageProfanityResponse,
  AppMessageDeclaration,
  AppMessageDeclarationArray,
  BlockPlayerRequest,
  BlockedByPlayerData,
  BlockedPlayerData,
  Blocks$,
  BlocksApi,
  BulkFriendsRequest,
  BulkFriendsResponse,
  BulkUsersFreeFormNotificationRequestV1,
  Config,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigList,
  ConfigReq,
  Configuration,
  CreateConfigRequest,
  CreateConfigResponse,
  CreateTemplateRequest,
  CreateTopicRequest,
  CreateTopicRequestV1,
  DebugProfanityFilterRequest,
  Error,
  ErrorResponseBody,
  ErrorResponseV1,
  FreeFormNotificationRequest,
  FreeFormNotificationRequestV1,
  FriendWithPlatform,
  Friends$,
  FriendsAdmin$,
  FriendsAdminApi,
  FriendsApi,
  FriendshipConnection,
  FriendshipConnectionResponse,
  GetAllNotificationTemplateSlugResp,
  GetAllNotificationTopicsResponse,
  GetAllPlayerBlockedByUsersResponse,
  GetAllPlayerBlockedUsersResponse,
  GetAllPlayerSessionAttributeResponse,
  GetBulkAllPlayerBlockedUsersRequest,
  GetBulkAllPlayerBlockedUsersResponse,
  GetConfigResponse,
  GetFriendsResponse,
  GetLobbyCcuResponse,
  GetPlayerSessionAttributeResponse,
  GetUserFriendsResponse,
  GetUserFriendsResponseArray,
  GetUserIncomingFriendsResponse,
  GetUserIncomingFriendsResponseArray,
  GetUserOutgoingFriendsResponse,
  GetUserOutgoingFriendsResponseArray,
  GetUsersPresenceResponse,
  GlobalConfiguration,
  ImportConfigResponse,
  IncomingFriendsWithTimeData,
  ListBlockedPlayerRequest,
  ListBulkUserPlatformsResponse,
  ListUnblockPlayerRequest,
  LoadIncomingFriendsWithTimeResponse,
  LoadIncomingFriendsWithTimeResponseArray,
  LoadOutgoingFriendsWithTimeResponse,
  LoadOutgoingFriendsWithTimeResponseArray,
  Lobby,
  LobbyOperations$,
  LobbyOperationsAdmin$,
  LobbyOperationsAdminApi,
  LobbyOperationsApi,
  Localization,
  NativeFriendRequest,
  NativeFriendSyncResponse,
  NativeFriendSyncResponseArray,
  NativeUserBlockRequest,
  NativeUserBlockResponse,
  NativeUserBlockResponseArray,
  Notification$,
  NotificationAdmin$,
  NotificationAdminApi,
  NotificationApi,
  NotificationResponse,
  NotificationTemplateResponse,
  NotificationTemplateResponseArray,
  NotificationTopicResponse,
  NotificationTopicResponseV1,
  NotificationWithTemplateRequest,
  NotificationWithTemplateRequestV1,
  OutgoingFriendsWithTimeData,
  Pagination,
  Party$,
  PartyAdmin$,
  PartyAdminApi,
  PartyApi,
  PartyData,
  PartyPutCustomAttributesRequest,
  PartyPutLimitSizeRequest,
  Player$,
  PlayerAdmin$,
  PlayerAdminApi,
  PlayerApi,
  Presence$,
  PresenceApi,
  ProfanityAdmin$,
  ProfanityAdminApi,
  ProfanityFilter,
  ProfanityFilterArray,
  ProfanityRule,
  PutGlobalConfigurationRequest,
  RequestUserPresence,
  SetPlayerSessionAttributeRequest,
  TemplateContent,
  TemplateLocalization,
  TemplateLocalizationResponse,
  TemplateResponse,
  TemplateResponseArray,
  ThirdPartyAdmin$,
  ThirdPartyAdminApi,
  TopicByNamespacesResponse,
  UnblockPlayerRequest,
  UpdateConfigRequest,
  UpdateConfigResponse,
  UpdateTemplateRequest,
  UpdateTopicRequest,
  UserAcceptFriendRequest,
  UserCancelFriendRequest,
  UserGetFriendshipStatusResponse,
  UserPlatformInfo,
  UserPresence,
  UserRejectFriendRequest,
  UserRequestFriendRequest,
  UserUnfriendRequest,
  UserWithPlatformInfo
};
