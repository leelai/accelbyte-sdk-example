import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { MAX_DISPLAY_NAME_LENGTH } from './constant/numbers';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidatePersonNameErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validatePersonName = (value, { isRequired = true } = {}) => {
  const REGEX = "^[a-zA-Z]+(([',. -][a-zA-Z])?[a-zA-Z]*)*$";
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidatePersonNameErrorType.enum.empty;
  }
  if (!matches(value, REGEX)) {
    return ValidatePersonNameErrorType.enum.invalidFormat;
  }
  const validateLengthOptions = { min: 2, max: MAX_DISPLAY_NAME_LENGTH };
  return validateLength(value, validateLengthOptions);
};

export { ValidatePersonNameErrorType, validatePersonName };
//# sourceMappingURL=validatePersonName.js.map
//# sourceMappingURL=validatePersonName.js.map