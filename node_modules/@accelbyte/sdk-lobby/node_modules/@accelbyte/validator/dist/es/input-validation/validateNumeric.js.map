{"version":3,"sources":["../../../src/input-validation/validateNumeric.ts"],"names":[],"mappings":";;;;;AAWa,MAAA,wBAAA,GAA2B,EAAE,IAAK,CAAA;AAAA,EAC7C,0BAA0B,IAAK,CAAA,KAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,oBAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,kBAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,YAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,eAAA;AACjC,CAAC,EAAA;AAWY,MAAA,eAAA,GAAkB,CAC7B,KACA,EAAA;AAAA,EACE,MAAM,MAAO,CAAA,gBAAA;AAAA,EACb,MAAM,MAAO,CAAA,gBAAA;AAAA,EACb,UAAa,GAAA,IAAA;AAAA,EACb,kBAAkB,EAAC;AAAA,EACnB,YAAe,GAAA,IAAA;AACjB,CAAA,GAA2B,EACxB,KAAA;AACH,EAAA,MAAM,kCAAkC,GAAM,GAAA,GAAA,CAAA;AAC9C,EAAA,MAAM,eAAkB,GAAA,MAAA,CAAO,KAAK,CAAA,GAAI,CAAM,KAAA,CAAA,CAAA;AAC9C,EAAA,IAAI,+BAAiC,EAAA;AACnC,IAAA,MAAM,IAAI,KAAA,CAAM,eAAgB,CAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAAA,GACpD;AACA,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,yBAAyB,IAAK,CAAA,KAAA,CAAA;AAAA,GACvC;AACA,EAAA,IAAI,CAAC,SAAU,CAAA,KAAK,KAAK,MAAO,CAAA,KAAK,KAAK,eAAiB,EAAA;AACzD,IAAA,OAAO,yBAAyB,IAAK,CAAA,YAAA,CAAA;AAAA,GACvC;AACA,EAAI,IAAA,MAAA,CAAO,KAAK,CAAA,GAAI,GAAK,EAAA;AACvB,IAAA,OAAO,yBAAyB,IAAK,CAAA,oBAAA,CAAA;AAAA,GACvC;AACA,EAAI,IAAA,MAAA,CAAO,KAAK,CAAA,GAAI,GAAK,EAAA;AACvB,IAAA,OAAO,yBAAyB,IAAK,CAAA,kBAAA,CAAA;AAAA,GACvC;AACA,EAAI,IAAA,CAAC,gBAAgB,eAAiB,EAAA;AACpC,IAAA,OAAO,yBAAyB,IAAK,CAAA,eAAA,CAAA;AAAA,GACvC;AAEA,EAAO,OAAA,IAAA,CAAA;AACT","file":"validateNumeric.js","sourcesContent":["/*\n * Copyright (c) 2019-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport isNumeric from 'validator/lib/isNumeric.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType, ThrownErrorType } from './constant/errorType'\n\nexport const ValidateNumericErrorType = z.enum([\n  CommonValidationErrorType.enum.empty,\n  CommonValidationErrorType.enum.lessThanMinimumValue,\n  CommonValidationErrorType.enum.exceedMaximumValue,\n  CommonValidationErrorType.enum.invalidValue,\n  CommonValidationErrorType.enum.containsDecimal\n])\nexport type ValidateNumericErrorType = z.infer<typeof ValidateNumericErrorType>\n\nexport interface ValidateNumericOption {\n  min?: number\n  max?: number\n  isRequired?: boolean\n  excludedNumbers?: number[]\n  allowDecimal?: boolean\n}\n\nexport const validateNumeric = (\n  value: string,\n  {\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    isRequired = true,\n    excludedNumbers = [],\n    allowDecimal = true\n  }: ValidateNumericOption = {}\n) => {\n  const isMaxOptionSmallerThanMinOption = max < min\n  const isDecimalNumber = Number(value) % 1 !== 0\n  if (isMaxOptionSmallerThanMinOption) {\n    throw new Error(ThrownErrorType.enum.invalidOption)\n  }\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateNumericErrorType.enum.empty\n  }\n  if (!isNumeric(value) || Number(value) in excludedNumbers) {\n    return ValidateNumericErrorType.enum.invalidValue\n  }\n  if (Number(value) < min) {\n    return ValidateNumericErrorType.enum.lessThanMinimumValue\n  }\n  if (Number(value) > max) {\n    return ValidateNumericErrorType.enum.exceedMaximumValue\n  }\n  if (!allowDecimal && isDecimalNumber) {\n    return ValidateNumericErrorType.enum.containsDecimal\n  }\n\n  return null\n}\n"]}