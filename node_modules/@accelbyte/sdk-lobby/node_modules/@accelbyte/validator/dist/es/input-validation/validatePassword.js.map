{"version":3,"sources":["../../../src/input-validation/validatePassword.ts"],"names":["regex"],"mappings":"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","file":"validatePassword.js","sourcesContent":["/*\n * Copyright (c) 2019-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\nimport { validateRegex } from './validateRegex'\nimport {\n  REGEX_ALL_SPECIAL_CHARACTERS,\n  REGEX_ALPHA_NUMERIC_CHARACTER_REPEAT,\n  REGEX_SPECIAL_CHARACTER_REPEAT,\n  REGEX_SPECIAL_CHARACTERS\n} from './constant/regex'\n\nexport const ValidatePasswordErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat])\nexport type ValidatePasswordErrorType = z.infer<typeof ValidatePasswordErrorType>\n\n// This Default Regex is to Validate if the password contain at least 3 of following 4 types of characters: uppercase, lowercase, number, and special characters\nconst DEFAULT_REGEX =\n  '^(?:(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])|(?=.*[A-Z])(?=.*[a-z])(?=.*[_\\\\W])|(?=.*[A-Z])(?=.*[0-9])(?=.*[_\\\\W])|(?=.*[a-z])(?=.*[0-9])(?=.*[_\\\\W]))(?!.*([A-Za-z0-9])\\\\1{2,})(?!.*([_\\\\W])\\\\2{2,})([A-Za-z0-9_\\\\W])[^\\\\s]*$'\n\nexport interface ValidatePasswordOptions {\n  regex?: string\n  minLength?: number\n  maxLength?: number\n  maxRepeatingAlphaNum?: number\n  maxRepeatingSpecialCharacter?: number\n  minCharType?: number\n  letterCase?: string\n  allowSpace?: boolean\n  allowLetter?: boolean\n  allowDigit?: boolean\n  allowAllSpecialCharacters?: boolean\n  isCustomRegex?: boolean\n  allowUnicode?: boolean\n  specialCharacters?: string[]\n}\n\n/**\n *\n * @param value\n * @param regex\n * @param allowUnicode (true: Allow various language character, false: only allow Alpha Numeric character)\n * @param strictlyAllowSpecialCharacters (true: allow (',. -) in the mid of value, false: Only allow Alpha Numeric)\n * @param maxLength\n * @param minLength\n * @param maxRepeatingAlphaNum\n * @param maxRepeatingSpecialCharacter\n * @param minCharType\n * @param letterCase\n * @param allowLetter\n * @param allowDigit\n * @param allowAllSpecialCharacters\n * @param isCustomRegex\n * @param specialCharacters\n *\n * @default allowUnicode false\n * @default strictlyAllowSpecialCharacters true\n * @default maxLength MAX_DISPLAY_NAME_LENGTH\n * @default minLength MIN_DISPLAY_NAME_LENGTH\n */\nexport const validatePassword = (\n  value: string,\n  {\n    regex = DEFAULT_REGEX,\n    minLength = 8,\n    maxLength = 64,\n    maxRepeatingAlphaNum = 2,\n    maxRepeatingSpecialCharacter = 2,\n    minCharType = 3,\n    letterCase = 'mixed',\n    allowSpace = false,\n    allowLetter = true,\n    allowDigit = true,\n    allowAllSpecialCharacters = true,\n    isCustomRegex = false,\n    allowUnicode = false,\n    specialCharacters = []\n  }: ValidatePasswordOptions = {}\n) => {\n  if (isCustomRegex) {\n    return validateRegex(value, regex, {\n      allowUnicode: allowUnicode || isCustomRegex\n    })\n  } else {\n    if (maxRepeatingAlphaNum > 0) {\n      const regex = new RegExp(REGEX_ALPHA_NUMERIC_CHARACTER_REPEAT(maxRepeatingAlphaNum), 'g')\n      if (regex.test(value)) return ValidatePasswordErrorType.enum.invalidFormat\n    }\n\n    if (!allowAllSpecialCharacters && specialCharacters.length === 0) {\n      const regex = new RegExp(REGEX_ALL_SPECIAL_CHARACTERS, 'g')\n      if (regex.test(value)) return ValidatePasswordErrorType.enum.invalidFormat\n    }\n    if (specialCharacters.length > 0) {\n      const regex = new RegExp(REGEX_SPECIAL_CHARACTERS(specialCharacters), 'g')\n      if (regex.test(value)) return ValidatePasswordErrorType.enum.invalidFormat\n    }\n\n    let charTypeCount = 0\n    if (allowLetter && /[a-z]/.test(value)) charTypeCount++\n    if (allowLetter && /[A-Z]/.test(value)) charTypeCount++\n    if (allowDigit && /\\d/.test(value)) charTypeCount++\n    if (allowAllSpecialCharacters && /[^\\w\\s]/.test(value)) charTypeCount++\n    if (!allowAllSpecialCharacters && specialCharacters.length > 0) {\n      const regex = new RegExp(REGEX_SPECIAL_CHARACTER_REPEAT(specialCharacters, maxRepeatingSpecialCharacter), 'g')\n      if (regex.test(value)) charTypeCount++\n    }\n    if (charTypeCount < minCharType) {\n      return ValidatePasswordErrorType.enum.invalidFormat\n    }\n\n    if (!allowSpace) {\n      const isSpaceFound = /\\s/.test(value)\n      if (isSpaceFound) return ValidatePasswordErrorType.enum.invalidFormat\n    }\n\n    if (letterCase === 'lowercase' && value.toLowerCase() !== value) {\n      return ValidatePasswordErrorType.enum.invalidFormat\n    }\n    if (letterCase === 'uppercase' && value.toUpperCase() !== value) {\n      return ValidatePasswordErrorType.enum.invalidFormat\n    }\n  }\n\n  return validateLength(value, {\n    max: maxLength,\n    min: minLength\n  })\n}\n"]}