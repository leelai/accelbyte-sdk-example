{"version":3,"sources":["../../../src/input-validation/validateDisplayName.ts"],"names":[],"mappings":";;;;;;;;;;AA4Ba,MAAA,4BAAA,GAA+B,EAAE,IAAK,CAAA;AAAA,EACjD,GAAG,uBAAwB,CAAA,OAAA;AAAA,EAC3B,0BAA0B,IAAK,CAAA,aAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,gBAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,sBAAA;AACjC,CAAC,EAAA;AA+CY,MAAA,mBAAA,GAAsB,CACjC,KACA,EAAA;AAAA,EACE,cAAc,EAAC;AAAA,EACf,YAAe,GAAA,KAAA;AAAA,EACf,UAAa,GAAA,IAAA;AAAA,EACb,SAAY,GAAA,uBAAA;AAAA,EACZ,SAAY,GAAA,uBAAA;AAAA,EACZ,aAAgB,GAAA,KAAA;AAAA,EAChB,WAAc,GAAA,EAAA;AAAA,EACd,wBAA2B,GAAA,QAAA;AAAA,EAC3B,UAAa,GAAA,IAAA;AAAA,EACb,yBAAA;AAAA,EACA,4BAA+B,GAAA,CAAA;AAAA;AAAA;AAAA,EAG/B,iBAAoB,GAAA,CAAC,GAAM,EAAA,GAAA,EAAM,KAAM,GAAI,CAAA;AAAA,EAC3C,UAAa,GAAA,KAAA;AAAA,EACb,eAAkB,GAAA,KAAA;AACpB,CAAA,GAAgC,EAC7B,KAAA;AACH,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,6BAA6B,IAAK,CAAA,KAAA,CAAA;AAAA,GAC3C;AAEA,EAAI,IAAA,aAAA;AACF,IAAO,OAAA,aAAA,CAAc,OAAO,WAAa,EAAA;AAAA,MACvC,cAAc,YAAgB,IAAA,aAAA;AAAA,KAC/B,CAAA,CAAA;AAEH,EAAA,IAAI,CAAC,UAAY,EAAA;AACf,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACpC,IAAI,IAAA,YAAA,EAAqB,OAAA,4BAAA,CAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,GACtD,MAAA;AACL,IAAM,MAAA,+BAAA,GAAkC,gBAAiB,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACnE,IAAI,IAAA,+BAAA,EAAwC,OAAA,4BAAA,CAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,GAChF;AAEA,EAAA,IAAI,CAAC,YAAc,EAAA;AACjB,IAAA,MAAM,KAAQ,GAAA,mBAAA,CAAA;AACd,IAAA,IAAI,MAAM,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,GAClE;AAEA,EAAI,IAAA,yBAAA,IAA6B,6BAA6B,QAAU,EAAA;AACtE,IAAM,MAAA,KAAA,GAAQ,eAAe,qDAAwD,GAAA,yCAAA,CAAA;AACrF,IAAA,IAAI,MAAM,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAEhE,IAAA,IAAI,4BAA8B,EAAA;AAChC,MAAA,MAAM,mCAAmC,IAAI,MAAA,CAAO,kCAAmC,CAAA,4BAA4B,GAAG,GAAG,CAAA,CAAA;AACzH,MAAA,IAAI,iCAAiC,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,KAC7F;AAAA,GACF;AAEA,EAAA,IAAI,CAAC,yBAAA,IAA6B,iBAAmB,EAAA,MAAA,KAAW,CAAG,EAAA;AACjE,IAAM,MAAA,KAAA,GAAQ,eAAe,oCAAuC,GAAA,4BAAA,CAAA;AACpE,IAAA,IAAI,MAAM,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,GAClE;AAEA,EAAI,IAAA,iBAAA,IAAqB,iBAAkB,CAAA,MAAA,GAAS,CAAG,EAAA;AACrD,IAAA,MAAM,uBAA0B,GAAA,CAAA,WAAA,EAAc,YAAe,GAAA,WAAA,GAAmB,EAAE,CAAA,EAAG,iBAAkB,CAAA,IAAA,CAAK,EAAE,CAAC,CAC7G,EAAA,UAAA,GAAa,QAAQ,EACvB,CAAA,CAAA,CAAA,CAAA;AACA,IAAA,MAAM,2BAA2B,IAAI,MAAA,CAAO,uBAAuB,CAAA,CAAE,KAAK,KAAK,CAAA,CAAA;AAE/E,IAAI,IAAA,wBAAA,EAAiC,OAAA,4BAAA,CAA6B,IAAK,CAAA,aAAA,CAAA;AAEvE,IAAA,IAAI,6BAA6B,QAAU,EAAA;AACzC,MAAA,MAAM,KAAQ,GAAA,IAAI,MAAO,CAAA,CAAA,EAAA,EAAK,iBAAmB,EAAA,IAAA,CAAK,EAAE,CAAC,CAAM,GAAA,EAAA,iBAAA,EAAmB,IAAK,CAAA,EAAE,CAAC,CAAI,EAAA,CAAA,CAAA,CAAA;AAC9F,MAAA,IAAI,MAAM,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,KAClE;AAEA,IAAI,IAAA,4BAAA,IAAgC,iBAAkB,CAAA,MAAA,GAAS,CAAG,EAAA;AAChE,MAAA,MAAM,mCAAmC,IAAI,MAAA;AAAA,QAC3C,8BAAA,CAA+B,mBAAmB,4BAA4B,CAAA;AAAA,QAC9E,GAAA;AAAA,OACF,CAAA;AACA,MAAA,IAAI,iCAAiC,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,KAC7F;AAEA,IAAA,IAAI,6BAA6B,4BAA8B,EAAA;AAC7D,MAAA,MAAM,mCAAmC,IAAI,MAAA,CAAO,kCAAmC,CAAA,4BAA4B,GAAG,GAAG,CAAA,CAAA;AACzH,MAAA,IAAI,iCAAiC,IAAK,CAAA,KAAK,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,aAAA,CAAA;AAAA,KAC7F;AAAA,GACF;AAEA,EAAA,IAAI,eAAkB,GAAA,iBAAA,CAAA;AACtB,EAAA,QAAQ,UAAY;AAAA,IAClB,KAAK,OAAA;AACH,MAAkB,eAAA,GAAA,uBAAA,CAAA;AAClB,MAAA,MAAA;AAAA,IACF,KAAK,WAAA;AACH,MAAkB,eAAA,GAAA,eAAA,CAAA;AAClB,MAAA,MAAA;AAAA,IACF,KAAK,WAAA;AACH,MAAkB,eAAA,GAAA,eAAA,CAAA;AAClB,MAAA,MAAA;AAGA,GACJ;AAEA,EAAI,IAAA,UAAA,KAAe,SAAS,CAAC,eAAA,CAAgB,KAAK,KAAK,CAAA,EAAU,OAAA,4BAAA,CAA6B,IAAK,CAAA,aAAA,CAAA;AAEnG,EAAI,IAAA,WAAA,CAAY,SAAS,CAAG,EAAA;AAC1B,IAAA,IAAI,uBAAuB,KAAO,EAAA,WAAW,CAAG,EAAA,OAAO,6BAA6B,IAAK,CAAA,sBAAA,CAAA;AAAA,GAC3F;AAEA,EAAA,IAAI,eAAiB,EAAA;AACnB,IAAM,MAAA,UAAA,GAAa,4BAA4B,KAAK,CAAA,CAAA;AACpD,IAAI,IAAA,UAAA,EAAmB,OAAA,4BAAA,CAA6B,IAAK,CAAA,gBAAA,CAAA;AAAA,GAC3D;AAEA,EAAA,OAAO,eAAe,KAAO,EAAA;AAAA,IAC3B,GAAK,EAAA,SAAA;AAAA,IACL,GAAK,EAAA,SAAA;AAAA,GACN,CAAA,CAAA;AACH","file":"validateDisplayName.js","sourcesContent":["/*\n * Copyright (c) 2019-2024 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { MAX_DISPLAY_NAME_LENGTH, MIN_DISPLAY_NAME_LENGTH } from './constant/numbers'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\nimport { validateRegex } from './validateRegex'\nimport {\n  REGEX_ALLOW_UNICODE,\n  REGEX_LETTER_CASE,\n  REGEX_LOWERCASE,\n  REGEX_MIXED_LETTER_CASE,\n  REGEX_SPECIAL_CHARACTERS_AND_UNICODE,\n  REGEX_ALL_SPECIAL_CHARACTERS,\n  REGEX_START_OR_END_WITH_SPECIAL_CHARACTER,\n  REGEX_START_OR_END_WITH_SPECIAL_CHARACTER_NOT_UNICODE,\n  REGEX_UPPERCASE,\n  REGEX_ALL_SPECIAL_CHARACTER_REPEAT,\n  REGEX_SPECIAL_CHARACTER_REPEAT\n} from './constant/regex'\nimport { ValidateBadWordsErrorType, tokenizeAndValidateBadWords } from './validateBadWords'\nimport { validateForbiddenWords } from './validateForbiddenWords'\n\nexport const ValidateDisplayNameErrorType = z.enum([\n  ...ValidateLengthErrorType.options,\n  CommonValidationErrorType.enum.invalidFormat,\n  ValidateBadWordsErrorType.enum.containsBadWords,\n  CommonValidationErrorType.enum.containsForbiddenWords\n])\nexport type ValidateDisplayNameErrorType = z.infer<typeof ValidateDisplayNameErrorType>\n\nexport interface ValidateDisplayNameOptions {\n  blockedWord?: string[]\n  allowUnicode?: boolean\n  isRequired?: boolean\n  maxLength?: number\n  minLength?: number\n  isCustomRegex?: boolean\n  customRegex?: string\n  letterCase?: string\n  allowSpace?: boolean\n  allowAllSpecialCharacters?: boolean\n  specialCharacterLocation?: string\n  maxRepeatingSpecialCharacter?: number\n  specialCharacters?: string[]\n  validateBadWord?: boolean\n}\n\n/**\n *\n * @param value\n * @param allowUnicode (true: Allow various language character, false: only allow Alpha Numeric character)\n * @param isRequired\n * @param maxLength\n * @param minLength\n * @param isCustomRegex\n * @param letterCase\n * @param allowSpace\n * @param allowAllSpecialCharacters\n * @param specialCharacterLocation\n * @param maxRepeatingSpecialCharacter\n * @param specialCharacters\n * @param validateBadWord validate bad word\n *\n * @default allowUnicode false\n * @default isRequired true\n * @default maxLength MAX_DISPLAY_NAME_LENGTH = 48\n * @default minLength MIN_DISPLAY_NAME_LENGTH = 3\n * @default specialCharacterLocation middle\n * @default maxRepeatingSpecialCharacter 1\n * @default allowSpace true\n * @default specialCharacters [\"\\'\", \"\\,\", \"\\.\", \"\\-\"]\n * @default letterCase any\n * @default validateBadWord false\n */\nexport const validateDisplayName = (\n  value: string,\n  {\n    blockedWord = [],\n    allowUnicode = false,\n    isRequired = true,\n    maxLength = MAX_DISPLAY_NAME_LENGTH,\n    minLength = MIN_DISPLAY_NAME_LENGTH,\n    isCustomRegex = false,\n    customRegex = '',\n    specialCharacterLocation = 'middle',\n    allowSpace = true,\n    allowAllSpecialCharacters,\n    maxRepeatingSpecialCharacter = 1,\n    // prettier-ignore\n    // eslint-disable-next-line\n    specialCharacters = [\"\\'\", \"\\,\", \"\\.\", \"\\-\"],\n    letterCase = 'any',\n    validateBadWord = false\n  }: ValidateDisplayNameOptions = {}\n) => {\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateDisplayNameErrorType.enum.empty\n  }\n\n  if (isCustomRegex)\n    return validateRegex(value, customRegex, {\n      allowUnicode: allowUnicode || isCustomRegex\n    })\n\n  if (!allowSpace) {\n    const isSpaceFound = /\\s/.test(value)\n    if (isSpaceFound) return ValidateDisplayNameErrorType.enum.invalidFormat\n  } else {\n    const isRepeatOrNotInMiddleSpaceFound = /^\\s|\\s$|\\s{2,}/.test(value)\n    if (isRepeatOrNotInMiddleSpaceFound) return ValidateDisplayNameErrorType.enum.invalidFormat\n  }\n\n  if (!allowUnicode) {\n    const regex = REGEX_ALLOW_UNICODE\n    if (regex.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n  }\n\n  if (allowAllSpecialCharacters && specialCharacterLocation === 'middle') {\n    const regex = allowUnicode ? REGEX_START_OR_END_WITH_SPECIAL_CHARACTER_NOT_UNICODE : REGEX_START_OR_END_WITH_SPECIAL_CHARACTER\n    if (regex.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n\n    if (maxRepeatingSpecialCharacter) {\n      const hasInvalidRepeatSpecialCharacter = new RegExp(REGEX_ALL_SPECIAL_CHARACTER_REPEAT(maxRepeatingSpecialCharacter), 'g')\n      if (hasInvalidRepeatSpecialCharacter.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n    }\n  }\n\n  if (!allowAllSpecialCharacters && specialCharacters?.length === 0) {\n    const regex = allowUnicode ? REGEX_SPECIAL_CHARACTERS_AND_UNICODE : REGEX_ALL_SPECIAL_CHARACTERS\n    if (regex.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n  }\n\n  if (specialCharacters && specialCharacters.length > 0) {\n    const specialCharacterPattern = `[^a-zA-Z0-9${allowUnicode ? '\\u007e-\\uFFFF$' : ''}${specialCharacters.join('')}${\n      allowSpace ? '\\\\s' : ''\n    }]`\n    const hasOtherSpecialCharacter = new RegExp(specialCharacterPattern).test(value)\n\n    if (hasOtherSpecialCharacter) return ValidateDisplayNameErrorType.enum.invalidFormat\n\n    if (specialCharacterLocation === 'middle') {\n      const regex = new RegExp(`^[${specialCharacters?.join('')}]|[${specialCharacters?.join('')}]$`)\n      if (regex.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n    }\n\n    if (maxRepeatingSpecialCharacter && specialCharacters.length > 0) {\n      const hasInvalidRepeatSpecialCharacter = new RegExp(\n        REGEX_SPECIAL_CHARACTER_REPEAT(specialCharacters, maxRepeatingSpecialCharacter),\n        'g'\n      )\n      if (hasInvalidRepeatSpecialCharacter.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n    }\n\n    if (allowAllSpecialCharacters && maxRepeatingSpecialCharacter) {\n      const hasInvalidRepeatSpecialCharacter = new RegExp(REGEX_ALL_SPECIAL_CHARACTER_REPEAT(maxRepeatingSpecialCharacter), 'g')\n      if (hasInvalidRepeatSpecialCharacter.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n    }\n  }\n\n  let letterCaseRegex = REGEX_LETTER_CASE\n  switch (letterCase) {\n    case 'mixed':\n      letterCaseRegex = REGEX_MIXED_LETTER_CASE\n      break\n    case 'uppercase':\n      letterCaseRegex = REGEX_UPPERCASE\n      break\n    case 'lowercase':\n      letterCaseRegex = REGEX_LOWERCASE\n      break\n    case 'any':\n      // No letter case requirements\n      break\n  }\n\n  if (letterCase !== 'any' && !letterCaseRegex.test(value)) return ValidateDisplayNameErrorType.enum.invalidFormat\n\n  if (blockedWord.length > 0) {\n    if (validateForbiddenWords(value, blockedWord)) return ValidateDisplayNameErrorType.enum.containsForbiddenWords\n  }\n\n  if (validateBadWord) {\n    const hasBadWord = tokenizeAndValidateBadWords(value)\n    if (hasBadWord) return ValidateDisplayNameErrorType.Enum.containsBadWords\n  }\n\n  return validateLength(value, {\n    max: maxLength,\n    min: minLength\n  })\n}\n"]}