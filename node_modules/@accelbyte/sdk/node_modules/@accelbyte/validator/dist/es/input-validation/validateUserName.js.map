{"version":3,"sources":["../../../src/input-validation/validateUserName.ts"],"names":[],"mappings":"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","file":"validateUserName.js","sourcesContent":["/*\n * Copyright (c) 2020-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport matches from 'validator/lib/matches.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { MAX_DISPLAY_NAME_LENGTH } from './constant/numbers'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\nimport {\n  REGEX_ALPHANUMERIC_WITH_HYPHEN,\n  REGEX_LETTER_CASE,\n  REGEX_LOWERCASE,\n  REGEX_MIXED_LETTER_CASE,\n  REGEX_ALL_SPECIAL_CHARACTERS,\n  REGEX_SPECIAL_CHARACTER_WITH_ALLOW_SPACE,\n  REGEX_UPPERCASE\n} from './constant/regex'\nimport { tokenizeAndValidateBadWords, ValidateBadWordsErrorType } from './validateBadWords'\n\nexport const ValidateUserNameErrorType = z.enum([\n  ...ValidateLengthErrorType.options,\n  CommonValidationErrorType.enum.invalidFormat,\n  ValidateBadWordsErrorType.enum.containsBadWords\n])\nexport type ValidateUserNameErrorType = z.infer<typeof ValidateUserNameErrorType>\n\nexport const MIN_USERNAME_LENGTH = 3\n\nexport interface ValidateUserNameOptions {\n  isRequired?: boolean\n  maxLength?: number\n  minLength?: number\n  isCustomRegex?: boolean\n  customRegex?: string\n  letterCase?: string\n  allowSpace?: boolean\n  allowAllSpecialCharacters?: boolean\n  specialCharacterLocation?: string\n  specialCharacters?: string[]\n  validateBadWord?: boolean\n}\n\n/**\n *\n * @param value\n * @param isRequired\n * @param maxLength\n * @param minLength\n * @param isCustomRegex\n * @param allowSpace\n * @param allowAllSpecialCharacters\n * @param specialCharacters\n * @param letterCase\n * @param validateBadWord validate bad word\n *\n * @default isRequired true\n * @default maxLength MAX_DISPLAY_NAME_LENGTH\n * @default minLength MIN_USERNAME_LENGTH\n * @default isCustomRegex false\n * @default allowSpace false\n * @default allowAllSpecialCharacters false\n * @default letterCase any\n * @default validateBadWord false\n */\nexport const validateUserName = (\n  value: string,\n  {\n    isRequired = true,\n    maxLength = MAX_DISPLAY_NAME_LENGTH,\n    minLength = MIN_USERNAME_LENGTH,\n    isCustomRegex,\n    customRegex,\n    specialCharacterLocation,\n    allowSpace,\n    allowAllSpecialCharacters,\n    specialCharacters,\n    letterCase,\n    validateBadWord = false\n  }: ValidateUserNameOptions = {}\n) => {\n  if (isRequired && isEmpty(value)) return ValidateUserNameErrorType.enum.empty\n\n  if (isCustomRegex) {\n    if (!matches(value, customRegex || REGEX_ALPHANUMERIC_WITH_HYPHEN)) {\n      return ValidateUserNameErrorType.enum.invalidFormat\n    }\n  }\n\n  if (!allowSpace) {\n    const isSpaceFound = /\\s/.test(value)\n    if (isSpaceFound) return ValidateUserNameErrorType.enum.invalidFormat\n  }\n\n  if (!allowAllSpecialCharacters && specialCharacters?.length === 0) {\n    const regex = REGEX_ALL_SPECIAL_CHARACTERS\n    if (regex.test(value)) return ValidateUserNameErrorType.enum.invalidFormat\n  }\n\n  if (specialCharacters && specialCharacters.length > 0) {\n    const hasOtherSpecialCharacter = new RegExp(REGEX_SPECIAL_CHARACTER_WITH_ALLOW_SPACE(specialCharacters, allowSpace)).test(value)\n    if (hasOtherSpecialCharacter) return ValidateUserNameErrorType.enum.invalidFormat\n\n    if (specialCharacterLocation === 'middle') {\n      const regex = new RegExp(`^[${specialCharacters.join('')}]|[${specialCharacters.join('')}]$`)\n      if (regex.test(value)) return ValidateUserNameErrorType.enum.invalidFormat\n    }\n  }\n\n  let letterCaseRegex = REGEX_LETTER_CASE\n  switch (letterCase) {\n    case 'mixed':\n      letterCaseRegex = REGEX_MIXED_LETTER_CASE\n      break\n    case 'uppercase':\n      letterCaseRegex = REGEX_UPPERCASE\n      break\n    case 'lowercase':\n      letterCaseRegex = REGEX_LOWERCASE\n      break\n    case 'any':\n      // No letter case requirements\n      break\n  }\n\n  if (letterCase !== 'any' && !letterCaseRegex.test(value)) {\n    return ValidateUserNameErrorType.enum.invalidFormat\n  }\n\n  if (validateBadWord) {\n    const hasBadWord = tokenizeAndValidateBadWords(value)\n    if (hasBadWord) return ValidateUserNameErrorType.Enum.containsBadWords\n  }\n\n  return validateLength(value, {\n    max: maxLength,\n    min: minLength\n  })\n}\n"]}