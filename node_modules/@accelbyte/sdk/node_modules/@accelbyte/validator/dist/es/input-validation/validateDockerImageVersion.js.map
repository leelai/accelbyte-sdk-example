{"version":3,"sources":["../../../src/input-validation/validateDockerImageVersion.ts"],"names":[],"mappings":";;;;;;;AAaa,MAAA,8BAAA,GAAiC,CAAE,CAAA,IAAA,CAAK,CAAC,GAAG,wBAAwB,OAAS,EAAA,yBAAA,CAA0B,IAAK,CAAA,aAAa,CAAC,EAAA;AAS1H,MAAA,0BAAA,GAA6B,CACxC,KAAA,EACA,EAAE,SAAA,GAAY,uBAAuB,UAAa,GAAA,IAAA,EAAmC,GAAA,EAClF,KAAA;AACH,EAAA,MAAM,KAAQ,GAAA,iBAAA,CAAA;AACd,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,+BAA+B,IAAK,CAAA,KAAA,CAAA;AAAA,GAC7C;AAEA,EAAI,IAAA,OAAA,CAAQ,KAAO,EAAA,KAAK,CAAG,EAAA;AACzB,IAAA,OAAO,+BAA+B,IAAK,CAAA,aAAA,CAAA;AAAA,GAC7C;AAEA,EAAA,OAAO,cAAe,CAAA,KAAA,EAAO,EAAE,GAAA,EAAK,WAAW,CAAA,CAAA;AACjD","file":"validateDockerImageVersion.js","sourcesContent":["/*\n * Copyright (c) 2021-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport matches from 'validator/lib/matches.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { MAX_SHORT_TEXT_LENGTH } from './constant/numbers'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\n\nexport const ValidateDockerVersionErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat])\n\nexport type ValidateDockerVersionErrorType = z.infer<typeof ValidateDockerVersionErrorType>\n\nexport interface ValidateImageNameOptions {\n  maxLength?: number\n  isRequired?: boolean\n}\n\nexport const validateDockerImageVersion = (\n  value: string,\n  { maxLength = MAX_SHORT_TEXT_LENGTH, isRequired = true }: ValidateImageNameOptions = {}\n) => {\n  const REGEX = '[^A-Za-z0-9-_.]'\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateDockerVersionErrorType.enum.empty\n  }\n\n  if (matches(value, REGEX)) {\n    return ValidateDockerVersionErrorType.enum.invalidFormat\n  }\n\n  return validateLength(value, { max: maxLength })\n}\n"]}