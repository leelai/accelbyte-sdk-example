import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateTagErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validateTag = (value, { isRequired = true, allowNumber = false } = {}) => {
  const MAXIMUM_TAG_LENGTH = 30;
  const REGEX = allowNumber ? "^[a-zA-Z0-9]+([_:-]{1}[a-zA-Z0-9]+)*$" : "^[a-zA-Z]+([_:-]{1}[a-zA-Z]+)*$";
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateTagErrorType.enum.empty;
  }
  if (!matches(value, REGEX)) {
    return ValidateTagErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max: MAXIMUM_TAG_LENGTH });
};

export { ValidateTagErrorType, validateTag };
//# sourceMappingURL=validateTag.js.map
//# sourceMappingURL=validateTag.js.map