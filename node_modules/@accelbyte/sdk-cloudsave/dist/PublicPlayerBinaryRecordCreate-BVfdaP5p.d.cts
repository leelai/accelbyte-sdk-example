import { z } from 'zod';

declare const AdminConcurrentRecordRequest: z.ZodObject<{
    set_by: z.ZodEnum<["CLIENT", "SERVER"]>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    ttl_config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodEnum<["DELETE"]>;
        expires_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: "DELETE";
        expires_at: string;
    }, {
        action: "DELETE";
        expires_at: string;
    }>>>;
    updatedAt: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, any>;
    set_by: "CLIENT" | "SERVER";
    updatedAt: string;
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}, {
    value: Record<string, any>;
    set_by: "CLIENT" | "SERVER";
    updatedAt: string;
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}>;
interface AdminConcurrentRecordRequest extends z.TypeOf<typeof AdminConcurrentRecordRequest> {
}

declare const AdminGameConcurrentRecordRequest: z.ZodObject<{
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updatedAt: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, any>;
    updatedAt: string;
    tags?: string[] | null | undefined;
}, {
    value: Record<string, any>;
    updatedAt: string;
    tags?: string[] | null | undefined;
}>;
interface AdminGameConcurrentRecordRequest extends z.TypeOf<typeof AdminGameConcurrentRecordRequest> {
}

declare const AdminPlayerConcurrentRecordRequest: z.ZodObject<{
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updatedAt: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, any>;
    updatedAt: string;
    tags?: string[] | null | undefined;
}, {
    value: Record<string, any>;
    updatedAt: string;
    tags?: string[] | null | undefined;
}>;
interface AdminPlayerConcurrentRecordRequest extends z.TypeOf<typeof AdminPlayerConcurrentRecordRequest> {
}

declare const PlayerRecordConcurrentUpdateResponse: z.ZodObject<{
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    updated_at: string;
}, {
    updated_at: string;
}>;
interface PlayerRecordConcurrentUpdateResponse extends z.TypeOf<typeof PlayerRecordConcurrentUpdateResponse> {
}

declare const BinaryRecordRequest: z.ZodObject<{
    content_type: z.ZodString;
    file_location: z.ZodString;
}, "strip", z.ZodTypeAny, {
    content_type: string;
    file_location: string;
}, {
    content_type: string;
    file_location: string;
}>;
interface BinaryRecordRequest extends z.TypeOf<typeof BinaryRecordRequest> {
}

declare const GameBinaryRecordAdminResponse: z.ZodObject<{
    binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        content_type: z.ZodString;
        created_at: z.ZodString;
        file_location: z.ZodString;
        updated_at: z.ZodString;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        version: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    }, {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    }>>>;
    created_at: z.ZodString;
    key: z.ZodString;
    namespace: z.ZodString;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    ttl_config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodEnum<["DELETE"]>;
        expires_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: "DELETE";
        expires_at: string;
    }, {
        action: "DELETE";
        expires_at: string;
    }>>>;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
    binary_info?: {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    } | null | undefined;
}, {
    namespace: string;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
    binary_info?: {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    } | null | undefined;
}>;
interface GameBinaryRecordAdminResponse extends z.TypeOf<typeof GameBinaryRecordAdminResponse> {
}

declare const GameBinaryRecordCreate: z.ZodObject<{
    file_type: z.ZodString;
    key: z.ZodString;
    set_by: z.ZodEnum<["CLIENT", "SERVER"]>;
    ttl_config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodEnum<["DELETE"]>;
        expires_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: "DELETE";
        expires_at: string;
    }, {
        action: "DELETE";
        expires_at: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    set_by: "CLIENT" | "SERVER";
    key: string;
    file_type: string;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}, {
    set_by: "CLIENT" | "SERVER";
    key: string;
    file_type: string;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}>;
interface GameBinaryRecordCreate extends z.TypeOf<typeof GameBinaryRecordCreate> {
}

declare const GameBinaryRecordMetadataRequest: z.ZodObject<{
    set_by: z.ZodEnum<["CLIENT", "SERVER"]>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    ttl_config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodEnum<["DELETE"]>;
        expires_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: "DELETE";
        expires_at: string;
    }, {
        action: "DELETE";
        expires_at: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    set_by: "CLIENT" | "SERVER";
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}, {
    set_by: "CLIENT" | "SERVER";
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}>;
interface GameBinaryRecordMetadataRequest extends z.TypeOf<typeof GameBinaryRecordMetadataRequest> {
}

declare const ListGameBinaryRecordsAdminResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content_type: z.ZodString;
            created_at: z.ZodString;
            file_location: z.ZodString;
            updated_at: z.ZodString;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            version: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }>>>;
        created_at: z.ZodString;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        ttl_config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            action: z.ZodEnum<["DELETE"]>;
            expires_at: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            action: "DELETE";
            expires_at: string;
        }, {
            action: "DELETE";
            expires_at: string;
        }>>>;
        updated_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        ttl_config?: {
            action: "DELETE";
            expires_at: string;
        } | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }, {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        ttl_config?: {
            action: "DELETE";
            expires_at: string;
        } | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        ttl_config?: {
            action: "DELETE";
            expires_at: string;
        } | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        ttl_config?: {
            action: "DELETE";
            expires_at: string;
        } | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListGameBinaryRecordsAdminResponse extends z.TypeOf<typeof ListGameBinaryRecordsAdminResponse> {
}

declare const UploadBinaryRecordRequest: z.ZodObject<{
    file_type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    file_type: string;
}, {
    file_type: string;
}>;
interface UploadBinaryRecordRequest extends z.TypeOf<typeof UploadBinaryRecordRequest> {
}

declare const UploadBinaryRecordResponse: z.ZodObject<{
    content_type: z.ZodString;
    file_location: z.ZodString;
    url: z.ZodString;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    url: string;
    content_type: string;
    file_location: string;
    version: number;
}, {
    url: string;
    content_type: string;
    file_location: string;
    version: number;
}>;
interface UploadBinaryRecordResponse extends z.TypeOf<typeof UploadBinaryRecordResponse> {
}

declare const GameRecordAdminResponse: z.ZodObject<{
    created_at: z.ZodString;
    key: z.ZodString;
    namespace: z.ZodString;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    ttl_config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodEnum<["DELETE"]>;
        expires_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: "DELETE";
        expires_at: string;
    }, {
        action: "DELETE";
        expires_at: string;
    }>>>;
    updated_at: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    value: Record<string, any>;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}, {
    namespace: string;
    value: Record<string, any>;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    ttl_config?: {
        action: "DELETE";
        expires_at: string;
    } | null | undefined;
}>;
interface GameRecordAdminResponse extends z.TypeOf<typeof GameRecordAdminResponse> {
}

declare const GameRecordRequest: z.ZodAny;
interface GameRecordRequest extends z.TypeOf<typeof GameRecordRequest> {
}

declare const ListGameRecordKeysResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListGameRecordKeysResponse extends z.TypeOf<typeof ListGameRecordKeysResponse> {
}

declare const ListPlayerBinaryRecordsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content_type: z.ZodString;
            created_at: z.ZodString;
            file_location: z.ZodString;
            updated_at: z.ZodString;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            version: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }>>>;
        created_at: z.ZodString;
        is_public: z.ZodBoolean;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }, {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListPlayerBinaryRecordsResponse extends z.TypeOf<typeof ListPlayerBinaryRecordsResponse> {
}

declare const PlayerBinaryRecordCreate: z.ZodObject<{
    file_type: z.ZodString;
    is_public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    key: z.ZodString;
    set_by: z.ZodEnum<["CLIENT", "SERVER"]>;
}, "strip", z.ZodTypeAny, {
    set_by: "CLIENT" | "SERVER";
    key: string;
    file_type: string;
    is_public?: boolean | null | undefined;
}, {
    set_by: "CLIENT" | "SERVER";
    key: string;
    file_type: string;
    is_public?: boolean | null | undefined;
}>;
interface PlayerBinaryRecordCreate extends z.TypeOf<typeof PlayerBinaryRecordCreate> {
}

declare const PlayerBinaryRecordMetadataRequest: z.ZodObject<{
    is_public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    is_public?: boolean | null | undefined;
}, {
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    is_public?: boolean | null | undefined;
}>;
interface PlayerBinaryRecordMetadataRequest extends z.TypeOf<typeof PlayerBinaryRecordMetadataRequest> {
}

declare const PlayerBinaryRecordResponse: z.ZodObject<{
    binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        content_type: z.ZodString;
        created_at: z.ZodString;
        file_location: z.ZodString;
        updated_at: z.ZodString;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        version: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    }, {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    }>>>;
    created_at: z.ZodString;
    is_public: z.ZodBoolean;
    key: z.ZodString;
    namespace: z.ZodString;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updated_at: z.ZodString;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    user_id: string;
    updated_at: string;
    created_at: string;
    key: string;
    is_public: boolean;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    binary_info?: {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    } | null | undefined;
}, {
    namespace: string;
    user_id: string;
    updated_at: string;
    created_at: string;
    key: string;
    is_public: boolean;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    binary_info?: {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    } | null | undefined;
}>;
interface PlayerBinaryRecordResponse extends z.TypeOf<typeof PlayerBinaryRecordResponse> {
}

declare const BulkGetAdminPlayerRecordResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        created_at: z.ZodString;
        key: z.ZodString;
        namespace: z.ZodString;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
        user_id: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }, {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }[];
}>;
interface BulkGetAdminPlayerRecordResponse extends z.TypeOf<typeof BulkGetAdminPlayerRecordResponse> {
}

declare const BulkGetPlayerRecordResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        created_at: z.ZodString;
        is_public: z.ZodBoolean;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
        user_id: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }, {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        value: Record<string, any>;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }[];
}>;
interface BulkGetPlayerRecordResponse extends z.TypeOf<typeof BulkGetPlayerRecordResponse> {
}

declare const BulkGetPlayerRecordSizeResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        current_size: z.ZodNumber;
        key: z.ZodString;
        namespace: z.ZodString;
        remaining_size: z.ZodNumber;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        user_id: string;
        key: string;
        current_size: number;
        remaining_size: number;
    }, {
        namespace: string;
        user_id: string;
        key: string;
        current_size: number;
        remaining_size: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        user_id: string;
        key: string;
        current_size: number;
        remaining_size: number;
    }[];
}, {
    data: {
        namespace: string;
        user_id: string;
        key: string;
        current_size: number;
        remaining_size: number;
    }[];
}>;
interface BulkGetPlayerRecordSizeResponse extends z.TypeOf<typeof BulkGetPlayerRecordSizeResponse> {
}

declare const BulkGetPlayerRecordsRequest: z.ZodObject<{
    keys: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    keys: string[];
}, {
    keys: string[];
}>;
interface BulkGetPlayerRecordsRequest extends z.TypeOf<typeof BulkGetPlayerRecordsRequest> {
}

declare const BulkUpdatePlayerRecordByKeyResponseArray: z.ZodArray<z.ZodObject<{
    detail: z.ZodRecord<z.ZodString, z.ZodAny>;
    success: z.ZodBoolean;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user_id: string;
    detail: Record<string, any>;
    success: boolean;
}, {
    user_id: string;
    detail: Record<string, any>;
    success: boolean;
}>, "many">;
interface BulkUpdatePlayerRecordByKeyResponseArray extends z.TypeOf<typeof BulkUpdatePlayerRecordByKeyResponseArray> {
}

declare const BulkUpdatePlayerRecordResponseArray: z.ZodArray<z.ZodObject<{
    detail: z.ZodRecord<z.ZodString, z.ZodAny>;
    key: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    key: string;
    detail: Record<string, any>;
    success: boolean;
}, {
    key: string;
    detail: Record<string, any>;
    success: boolean;
}>, "many">;
interface BulkUpdatePlayerRecordResponseArray extends z.TypeOf<typeof BulkUpdatePlayerRecordResponseArray> {
}

declare const BulkUpdatePlayerRecordsByKeyRequest: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        user_id: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, any>;
        user_id: string;
    }, {
        value: Record<string, any>;
        user_id: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        value: Record<string, any>;
        user_id: string;
    }[];
}, {
    data: {
        value: Record<string, any>;
        user_id: string;
    }[];
}>;
interface BulkUpdatePlayerRecordsByKeyRequest extends z.TypeOf<typeof BulkUpdatePlayerRecordsByKeyRequest> {
}

declare const BulkUpdatePlayerRecordsRequest: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, any>;
        key: string;
    }, {
        value: Record<string, any>;
        key: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        value: Record<string, any>;
        key: string;
    }[];
}, {
    data: {
        value: Record<string, any>;
        key: string;
    }[];
}>;
interface BulkUpdatePlayerRecordsRequest extends z.TypeOf<typeof BulkUpdatePlayerRecordsRequest> {
}

declare const BulkUserIDsRequest: z.ZodObject<{
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
}, {
    userIds: string[];
}>;
interface BulkUserIDsRequest extends z.TypeOf<typeof BulkUserIDsRequest> {
}

declare const BulkUserKeyRequest: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        keys: z.ZodArray<z.ZodString, "many">;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        keys: string[];
        user_id: string;
    }, {
        keys: string[];
        user_id: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        keys: string[];
        user_id: string;
    }[];
}, {
    data: {
        keys: string[];
        user_id: string;
    }[];
}>;
interface BulkUserKeyRequest extends z.TypeOf<typeof BulkUserKeyRequest> {
}

declare const ListPlayerRecordKeysResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        user_id: string;
        key: string;
    }, {
        user_id: string;
        key: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        user_id: string;
        key: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        user_id: string;
        key: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListPlayerRecordKeysResponse extends z.TypeOf<typeof ListPlayerRecordKeysResponse> {
}

declare const PlayerRecordRequest: z.ZodAny;
interface PlayerRecordRequest extends z.TypeOf<typeof PlayerRecordRequest> {
}

declare const PlayerRecordResponse: z.ZodObject<{
    created_at: z.ZodString;
    is_public: z.ZodBoolean;
    key: z.ZodString;
    namespace: z.ZodString;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updated_at: z.ZodString;
    user_id: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    value: Record<string, any>;
    user_id: string;
    updated_at: string;
    created_at: string;
    key: string;
    is_public: boolean;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
}, {
    namespace: string;
    value: Record<string, any>;
    user_id: string;
    updated_at: string;
    created_at: string;
    key: string;
    is_public: boolean;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
}>;
interface PlayerRecordResponse extends z.TypeOf<typeof PlayerRecordResponse> {
}

declare const PlayerRecordSizeResponse: z.ZodObject<{
    current_size: z.ZodNumber;
    key: z.ZodString;
    namespace: z.ZodString;
    remaining_size: z.ZodNumber;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    user_id: string;
    key: string;
    current_size: number;
    remaining_size: number;
}, {
    namespace: string;
    user_id: string;
    key: string;
    current_size: number;
    remaining_size: number;
}>;
interface PlayerRecordSizeResponse extends z.TypeOf<typeof PlayerRecordSizeResponse> {
}

declare const PluginRequest: z.ZodObject<{
    appConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        appName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        appName: string;
    }, {
        appName: string;
    }>>>;
    customConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        GRPCAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        GRPCAddress: string;
    }, {
        GRPCAddress: string;
    }>>>;
    customFunction: z.ZodObject<{
        afterBulkReadGameBinaryRecord: z.ZodBoolean;
        afterBulkReadGameRecord: z.ZodBoolean;
        afterBulkReadPlayerBinaryRecord: z.ZodBoolean;
        afterBulkReadPlayerRecord: z.ZodBoolean;
        afterReadGameBinaryRecord: z.ZodBoolean;
        afterReadGameRecord: z.ZodBoolean;
        afterReadPlayerBinaryRecord: z.ZodBoolean;
        afterReadPlayerRecord: z.ZodBoolean;
        beforeWriteAdminGameRecord: z.ZodBoolean;
        beforeWriteAdminPlayerRecord: z.ZodBoolean;
        beforeWriteGameBinaryRecord: z.ZodBoolean;
        beforeWriteGameRecord: z.ZodBoolean;
        beforeWritePlayerBinaryRecord: z.ZodBoolean;
        beforeWritePlayerRecord: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    }, {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    }>;
    extendType: z.ZodEnum<["APP", "CUSTOM"]>;
}, "strip", z.ZodTypeAny, {
    customFunction: {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    };
    extendType: "APP" | "CUSTOM";
    appConfig?: {
        appName: string;
    } | null | undefined;
    customConfig?: {
        GRPCAddress: string;
    } | null | undefined;
}, {
    customFunction: {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    };
    extendType: "APP" | "CUSTOM";
    appConfig?: {
        appName: string;
    } | null | undefined;
    customConfig?: {
        GRPCAddress: string;
    } | null | undefined;
}>;
interface PluginRequest extends z.TypeOf<typeof PluginRequest> {
}

declare const PluginResponse: z.ZodObject<{
    appConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        appName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        appName: string;
    }, {
        appName: string;
    }>>>;
    customConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        GRPCAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        GRPCAddress: string;
    }, {
        GRPCAddress: string;
    }>>>;
    customFunction: z.ZodObject<{
        afterBulkReadGameBinaryRecord: z.ZodBoolean;
        afterBulkReadGameRecord: z.ZodBoolean;
        afterBulkReadPlayerBinaryRecord: z.ZodBoolean;
        afterBulkReadPlayerRecord: z.ZodBoolean;
        afterReadGameBinaryRecord: z.ZodBoolean;
        afterReadGameRecord: z.ZodBoolean;
        afterReadPlayerBinaryRecord: z.ZodBoolean;
        afterReadPlayerRecord: z.ZodBoolean;
        beforeWriteAdminGameRecord: z.ZodBoolean;
        beforeWriteAdminPlayerRecord: z.ZodBoolean;
        beforeWriteGameBinaryRecord: z.ZodBoolean;
        beforeWriteGameRecord: z.ZodBoolean;
        beforeWritePlayerBinaryRecord: z.ZodBoolean;
        beforeWritePlayerRecord: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    }, {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    }>;
    extendType: z.ZodEnum<["APP", "CUSTOM"]>;
    namespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    customFunction: {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    };
    extendType: "APP" | "CUSTOM";
    appConfig?: {
        appName: string;
    } | null | undefined;
    customConfig?: {
        GRPCAddress: string;
    } | null | undefined;
}, {
    namespace: string;
    customFunction: {
        afterBulkReadGameBinaryRecord: boolean;
        afterBulkReadGameRecord: boolean;
        afterBulkReadPlayerBinaryRecord: boolean;
        afterBulkReadPlayerRecord: boolean;
        afterReadGameBinaryRecord: boolean;
        afterReadGameRecord: boolean;
        afterReadPlayerBinaryRecord: boolean;
        afterReadPlayerRecord: boolean;
        beforeWriteAdminGameRecord: boolean;
        beforeWriteAdminPlayerRecord: boolean;
        beforeWriteGameBinaryRecord: boolean;
        beforeWriteGameRecord: boolean;
        beforeWritePlayerBinaryRecord: boolean;
        beforeWritePlayerRecord: boolean;
    };
    extendType: "APP" | "CUSTOM";
    appConfig?: {
        appName: string;
    } | null | undefined;
    customConfig?: {
        GRPCAddress: string;
    } | null | undefined;
}>;
interface PluginResponse extends z.TypeOf<typeof PluginResponse> {
}

declare const AdminGameRecordRequest: z.ZodAny;
interface AdminGameRecordRequest extends z.TypeOf<typeof AdminGameRecordRequest> {
}

declare const AdminGameRecordResponse: z.ZodObject<{
    created_at: z.ZodString;
    key: z.ZodString;
    namespace: z.ZodString;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updated_at: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    value: Record<string, any>;
    updated_at: string;
    created_at: string;
    key: string;
    tags?: string[] | null | undefined;
}, {
    namespace: string;
    value: Record<string, any>;
    updated_at: string;
    created_at: string;
    key: string;
    tags?: string[] | null | undefined;
}>;
interface AdminGameRecordResponse extends z.TypeOf<typeof AdminGameRecordResponse> {
}

declare const AdminPlayerRecordRequest: z.ZodAny;
interface AdminPlayerRecordRequest extends z.TypeOf<typeof AdminPlayerRecordRequest> {
}

declare const AdminPlayerRecordResponse: z.ZodObject<{
    created_at: z.ZodString;
    key: z.ZodString;
    namespace: z.ZodString;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updated_at: z.ZodString;
    user_id: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    value: Record<string, any>;
    user_id: string;
    updated_at: string;
    created_at: string;
    key: string;
    tags?: string[] | null | undefined;
}, {
    namespace: string;
    value: Record<string, any>;
    user_id: string;
    updated_at: string;
    created_at: string;
    key: string;
    tags?: string[] | null | undefined;
}>;
interface AdminPlayerRecordResponse extends z.TypeOf<typeof AdminPlayerRecordResponse> {
}

declare const BulkGetAdminGameRecordRequest: z.ZodObject<{
    keys: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    keys: string[];
}, {
    keys: string[];
}>;
interface BulkGetAdminGameRecordRequest extends z.TypeOf<typeof BulkGetAdminGameRecordRequest> {
}

declare const BulkGetAdminGameRecordResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        created_at: z.ZodString;
        key: z.ZodString;
        namespace: z.ZodString;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }, {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        tags?: string[] | null | undefined;
    }[];
}>;
interface BulkGetAdminGameRecordResponse extends z.TypeOf<typeof BulkGetAdminGameRecordResponse> {
}

declare const BulkGetAdminPlayerRecordRequest: z.ZodObject<{
    keys: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    keys: string[];
}, {
    keys: string[];
}>;
interface BulkGetAdminPlayerRecordRequest extends z.TypeOf<typeof BulkGetAdminPlayerRecordRequest> {
}

declare const ListAdminGameRecordKeysResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListAdminGameRecordKeysResponse extends z.TypeOf<typeof ListAdminGameRecordKeysResponse> {
}

declare const ListAdminPlayerRecordKeysResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        user_id: string;
        key: string;
    }, {
        user_id: string;
        key: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        user_id: string;
        key: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        user_id: string;
        key: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListAdminPlayerRecordKeysResponse extends z.TypeOf<typeof ListAdminPlayerRecordKeysResponse> {
}

declare const ListTagsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        created_at: z.ZodString;
        tag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        tag: string;
    }, {
        created_at: string;
        tag: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        created_at: string;
        tag: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        created_at: string;
        tag: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListTagsResponse extends z.TypeOf<typeof ListTagsResponse> {
}

declare const TagRequest: z.ZodObject<{
    tag: z.ZodString;
}, "strip", z.ZodTypeAny, {
    tag: string;
}, {
    tag: string;
}>;
interface TagRequest extends z.TypeOf<typeof TagRequest> {
}

declare const ConcurrentRecordRequest: z.ZodObject<{
    updatedAt: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, any>;
    updatedAt: string;
}, {
    value: Record<string, any>;
    updatedAt: string;
}>;
interface ConcurrentRecordRequest extends z.TypeOf<typeof ConcurrentRecordRequest> {
}

declare const BulkGetGameBinaryRecordResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content_type: z.ZodString;
            created_at: z.ZodString;
            file_location: z.ZodString;
            updated_at: z.ZodString;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            version: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }>>>;
        created_at: z.ZodString;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }, {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
}>;
interface BulkGetGameBinaryRecordResponse extends z.TypeOf<typeof BulkGetGameBinaryRecordResponse> {
}

declare const BulkGetGameRecordRequest: z.ZodObject<{
    keys: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    keys: string[];
}, {
    keys: string[];
}>;
interface BulkGetGameRecordRequest extends z.TypeOf<typeof BulkGetGameRecordRequest> {
}

declare const GameBinaryRecordResponse: z.ZodObject<{
    binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        content_type: z.ZodString;
        created_at: z.ZodString;
        file_location: z.ZodString;
        updated_at: z.ZodString;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        version: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    }, {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    }>>>;
    created_at: z.ZodString;
    key: z.ZodString;
    namespace: z.ZodString;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    binary_info?: {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    } | null | undefined;
}, {
    namespace: string;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
    binary_info?: {
        updated_at: string;
        content_type: string;
        file_location: string;
        created_at: string;
        version: number;
        url?: string | null | undefined;
    } | null | undefined;
}>;
interface GameBinaryRecordResponse extends z.TypeOf<typeof GameBinaryRecordResponse> {
}

declare const ListGameBinaryRecordsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content_type: z.ZodString;
            created_at: z.ZodString;
            file_location: z.ZodString;
            updated_at: z.ZodString;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            version: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }>>>;
        created_at: z.ZodString;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }, {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListGameBinaryRecordsResponse extends z.TypeOf<typeof ListGameBinaryRecordsResponse> {
}

declare const PublicGameBinaryRecordCreate: z.ZodObject<{
    file_type: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    key: string;
    file_type: string;
}, {
    key: string;
    file_type: string;
}>;
interface PublicGameBinaryRecordCreate extends z.TypeOf<typeof PublicGameBinaryRecordCreate> {
}

declare const BulkGetGameRecordResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        created_at: z.ZodString;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }, {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        value: Record<string, any>;
        updated_at: string;
        created_at: string;
        key: string;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
    }[];
}>;
interface BulkGetGameRecordResponse extends z.TypeOf<typeof BulkGetGameRecordResponse> {
}

declare const GameRecordResponse: z.ZodObject<{
    created_at: z.ZodString;
    key: z.ZodString;
    namespace: z.ZodString;
    set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updated_at: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    value: Record<string, any>;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
}, {
    namespace: string;
    value: Record<string, any>;
    updated_at: string;
    created_at: string;
    key: string;
    set_by?: "CLIENT" | "SERVER" | null | undefined;
    tags?: string[] | null | undefined;
}>;
interface GameRecordResponse extends z.TypeOf<typeof GameRecordResponse> {
}

declare const BulkGetPlayerBinaryRecordResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        binary_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content_type: z.ZodString;
            created_at: z.ZodString;
            file_location: z.ZodString;
            updated_at: z.ZodString;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            version: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }, {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        }>>>;
        created_at: z.ZodString;
        is_public: z.ZodBoolean;
        key: z.ZodString;
        namespace: z.ZodString;
        set_by: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CLIENT", "SERVER"]>>>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        updated_at: z.ZodString;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }, {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        user_id: string;
        updated_at: string;
        created_at: string;
        key: string;
        is_public: boolean;
        set_by?: "CLIENT" | "SERVER" | null | undefined;
        tags?: string[] | null | undefined;
        binary_info?: {
            updated_at: string;
            content_type: string;
            file_location: string;
            created_at: string;
            version: number;
            url?: string | null | undefined;
        } | null | undefined;
    }[];
}>;
interface BulkGetPlayerBinaryRecordResponse extends z.TypeOf<typeof BulkGetPlayerBinaryRecordResponse> {
}

declare const PlayerBinaryRecordMetadataPublicRequest: z.ZodObject<{
    is_public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    is_public?: boolean | null | undefined;
}, {
    is_public?: boolean | null | undefined;
}>;
interface PlayerBinaryRecordMetadataPublicRequest extends z.TypeOf<typeof PlayerBinaryRecordMetadataPublicRequest> {
}

declare const PublicPlayerBinaryRecordCreate: z.ZodObject<{
    file_type: z.ZodString;
    is_public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    key: string;
    file_type: string;
    is_public?: boolean | null | undefined;
}, {
    key: string;
    file_type: string;
    is_public?: boolean | null | undefined;
}>;
interface PublicPlayerBinaryRecordCreate extends z.TypeOf<typeof PublicPlayerBinaryRecordCreate> {
}

export { BulkGetPlayerBinaryRecordResponse as $, AdminConcurrentRecordRequest as A, BinaryRecordRequest as B, PluginResponse as C, PluginRequest as D, ListAdminGameRecordKeysResponse as E, BulkGetAdminGameRecordRequest as F, GameBinaryRecordCreate as G, BulkGetAdminGameRecordResponse as H, AdminGameRecordResponse as I, AdminGameRecordRequest as J, ListAdminPlayerRecordKeysResponse as K, ListGameBinaryRecordsAdminResponse as L, BulkGetAdminPlayerRecordRequest as M, AdminPlayerRecordResponse as N, AdminPlayerRecordRequest as O, PlayerRecordConcurrentUpdateResponse as P, ListTagsResponse as Q, ConcurrentRecordRequest as R, ListGameBinaryRecordsResponse as S, TagRequest as T, UploadBinaryRecordResponse as U, PublicGameBinaryRecordCreate as V, BulkGetGameRecordRequest as W, BulkGetGameBinaryRecordResponse as X, GameBinaryRecordResponse as Y, BulkGetGameRecordResponse as Z, GameRecordResponse as _, AdminGameConcurrentRecordRequest as a, PublicPlayerBinaryRecordCreate as a0, PlayerBinaryRecordMetadataPublicRequest as a1, AdminPlayerConcurrentRecordRequest as b, GameBinaryRecordAdminResponse as c, GameBinaryRecordMetadataRequest as d, UploadBinaryRecordRequest as e, ListGameRecordKeysResponse as f, GameRecordAdminResponse as g, GameRecordRequest as h, ListPlayerBinaryRecordsResponse as i, PlayerBinaryRecordCreate as j, PlayerBinaryRecordResponse as k, PlayerBinaryRecordMetadataRequest as l, ListPlayerRecordKeysResponse as m, BulkUserKeyRequest as n, BulkGetPlayerRecordSizeResponse as o, BulkUserIDsRequest as p, BulkGetPlayerRecordResponse as q, BulkUpdatePlayerRecordsByKeyRequest as r, BulkUpdatePlayerRecordByKeyResponseArray as s, BulkGetPlayerRecordsRequest as t, BulkGetAdminPlayerRecordResponse as u, BulkUpdatePlayerRecordsRequest as v, BulkUpdatePlayerRecordResponseArray as w, PlayerRecordResponse as x, PlayerRecordRequest as y, PlayerRecordSizeResponse as z };
