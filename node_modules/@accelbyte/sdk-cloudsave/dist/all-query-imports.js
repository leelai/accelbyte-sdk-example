import {
  ConcurrentRecordAdminApi,
  ConcurrentRecordApi,
  GameBinaryRecordAdminApi,
  GameRecordAdminApi,
  PlayerBinaryRecordAdminApi,
  PlayerRecordAdminApi,
  PluginConfigAdminApi,
  PublicGameBinaryRecordApi,
  PublicGameRecordApi,
  PublicPlayerBinaryRecordApi,
  PublicPlayerRecordApi,
  PublicTagsApi,
  RecordAdminApi,
  TagsAdminApi,
  TtlConfigAdminApi
} from "./chunk-G7XEGMZE.js";

// src/generated-admin/queries/ConcurrentRecordAdmin.query.ts
import { useMutation } from "@tanstack/react-query";
var Key_ConcurrentRecordAdmin = /* @__PURE__ */ ((Key_ConcurrentRecordAdmin2) => {
  Key_ConcurrentRecordAdmin2["ConcurrentRecord_ByKey"] = "Cloudsave.ConcurrentRecordAdmin.ConcurrentRecord_ByKey";
  Key_ConcurrentRecordAdmin2["ConcurrentAdminrecord_ByKey"] = "Cloudsave.ConcurrentRecordAdmin.ConcurrentAdminrecord_ByKey";
  Key_ConcurrentRecordAdmin2["ConcurrentRecord_ByUserId_ByKey"] = "Cloudsave.ConcurrentRecordAdmin.ConcurrentRecord_ByUserId_ByKey";
  Key_ConcurrentRecordAdmin2["ConcurrentAdminrecord_ByUserId_ByKey"] = "Cloudsave.ConcurrentRecordAdmin.ConcurrentAdminrecord_ByUserId_ByKey";
  Key_ConcurrentRecordAdmin2["PublicConcurrent_ByUserId_ByKey"] = "Cloudsave.ConcurrentRecordAdmin.PublicConcurrent_ByUserId_ByKey";
  return Key_ConcurrentRecordAdmin2;
})(Key_ConcurrentRecordAdmin || {});
var useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConcurrentRecord_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Cloudsave.ConcurrentRecordAdmin.ConcurrentRecord_ByKey" /* ConcurrentRecord_ByKey */],
    mutationFn,
    ...options
  });
};
var useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConcurrentAdminrecord_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Cloudsave.ConcurrentRecordAdmin.ConcurrentAdminrecord_ByKey" /* ConcurrentAdminrecord_ByKey */],
    mutationFn,
    ...options
  });
};
var useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConcurrentRecord_ByUserId_ByKey(input.userId, input.key, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Cloudsave.ConcurrentRecordAdmin.ConcurrentRecord_ByUserId_ByKey" /* ConcurrentRecord_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConcurrentAdminrecord_ByUserId_ByKey(input.userId, input.key, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Cloudsave.ConcurrentRecordAdmin.ConcurrentAdminrecord_ByUserId_ByKey" /* ConcurrentAdminrecord_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var useConcurrentRecordAdminApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePublicConcurrent_ByUserId_ByKey(input.userId, input.key, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Cloudsave.ConcurrentRecordAdmin.PublicConcurrent_ByUserId_ByKey" /* PublicConcurrent_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/GameBinaryRecordAdmin.query.ts
import { useMutation as useMutation2, useQuery } from "@tanstack/react-query";
var Key_GameBinaryRecordAdmin = /* @__PURE__ */ ((Key_GameBinaryRecordAdmin2) => {
  Key_GameBinaryRecordAdmin2["Binaries"] = "Cloudsave.GameBinaryRecordAdmin.Binaries";
  Key_GameBinaryRecordAdmin2["Binary"] = "Cloudsave.GameBinaryRecordAdmin.Binary";
  Key_GameBinaryRecordAdmin2["Binary_ByKey"] = "Cloudsave.GameBinaryRecordAdmin.Binary_ByKey";
  Key_GameBinaryRecordAdmin2["Metadata_ByKey"] = "Cloudsave.GameBinaryRecordAdmin.Metadata_ByKey";
  Key_GameBinaryRecordAdmin2["Presigned_ByKey"] = "Cloudsave.GameBinaryRecordAdmin.Presigned_ByKey";
  return Key_GameBinaryRecordAdmin2;
})(Key_GameBinaryRecordAdmin || {});
var useGameBinaryRecordAdminApi_GetBinaries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameBinaryRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBinaries(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Cloudsave.GameBinaryRecordAdmin.Binaries" /* Binaries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameBinaryRecordAdminApi_CreateBinaryMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameBinaryRecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBinary(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Cloudsave.GameBinaryRecordAdmin.Binary" /* Binary */],
    mutationFn,
    ...options
  });
};
var useGameBinaryRecordAdminApi_DeleteBinary_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteBinary_ByKey(input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Cloudsave.GameBinaryRecordAdmin.Binary_ByKey" /* Binary_ByKey */],
    mutationFn,
    ...options
  });
};
var useGameBinaryRecordAdminApi_GetBinary_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameBinaryRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBinary_ByKey(
      input2.key
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Cloudsave.GameBinaryRecordAdmin.Binary_ByKey" /* Binary_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameBinaryRecordAdminApi_UpdateBinary_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateBinary_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Cloudsave.GameBinaryRecordAdmin.Binary_ByKey" /* Binary_ByKey */],
    mutationFn,
    ...options
  });
};
var useGameBinaryRecordAdminApi_UpdateMetadata_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateMetadata_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Cloudsave.GameBinaryRecordAdmin.Metadata_ByKey" /* Metadata_ByKey */],
    mutationFn,
    ...options
  });
};
var useGameBinaryRecordAdminApi_CreatePresigned_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPresigned_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Cloudsave.GameBinaryRecordAdmin.Presigned_ByKey" /* Presigned_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/GameRecordAdmin.query.ts
import { useMutation as useMutation3, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_GameRecordAdmin = /* @__PURE__ */ ((Key_GameRecordAdmin2) => {
  Key_GameRecordAdmin2["Records"] = "Cloudsave.GameRecordAdmin.Records";
  Key_GameRecordAdmin2["Record_ByKey"] = "Cloudsave.GameRecordAdmin.Record_ByKey";
  return Key_GameRecordAdmin2;
})(Key_GameRecordAdmin || {});
var useGameRecordAdminApi_GetRecords = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecords(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Cloudsave.GameRecordAdmin.Records" /* Records */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameRecordAdminApi_DeleteRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameRecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRecord_ByKey(
      input.key
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Cloudsave.GameRecordAdmin.Record_ByKey" /* Record_ByKey */],
    mutationFn,
    ...options
  });
};
var useGameRecordAdminApi_GetRecord_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecord_ByKey(
      input2.key
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Cloudsave.GameRecordAdmin.Record_ByKey" /* Record_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameRecordAdminApi_CreateRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameRecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRecord_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Cloudsave.GameRecordAdmin.Record_ByKey" /* Record_ByKey */],
    mutationFn,
    ...options
  });
};
var useGameRecordAdminApi_UpdateRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameRecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRecord_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Cloudsave.GameRecordAdmin.Record_ByKey" /* Record_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PlayerBinaryRecordAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_PlayerBinaryRecordAdmin = /* @__PURE__ */ ((Key_PlayerBinaryRecordAdmin2) => {
  Key_PlayerBinaryRecordAdmin2["Binaries_ByUserId"] = "Cloudsave.PlayerBinaryRecordAdmin.Binaries_ByUserId";
  Key_PlayerBinaryRecordAdmin2["Binary_ByUserId"] = "Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId";
  Key_PlayerBinaryRecordAdmin2["Binary_ByUserId_ByKey"] = "Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey";
  Key_PlayerBinaryRecordAdmin2["Metadata_ByUserId_ByKey"] = "Cloudsave.PlayerBinaryRecordAdmin.Metadata_ByUserId_ByKey";
  Key_PlayerBinaryRecordAdmin2["Presigned_ByUserId_ByKey"] = "Cloudsave.PlayerBinaryRecordAdmin.Presigned_ByUserId_ByKey";
  return Key_PlayerBinaryRecordAdmin2;
})(Key_PlayerBinaryRecordAdmin || {});
var usePlayerBinaryRecordAdminApi_GetBinaries_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerBinaryRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBinaries_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Cloudsave.PlayerBinaryRecordAdmin.Binaries_ByUserId" /* Binaries_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerBinaryRecordAdminApi_CreateBinary_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBinary_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId" /* Binary_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePlayerBinaryRecordAdminApi_DeleteBinary_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteBinary_ByUserId_ByKey(input.userId, input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey" /* Binary_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerBinaryRecordAdminApi_GetBinary_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerBinaryRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBinary_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey" /* Binary_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerBinaryRecordAdminApi_UpdateBinary_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateBinary_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey" /* Binary_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerBinaryRecordAdminApi_UpdateMetadata_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateMetadata_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Cloudsave.PlayerBinaryRecordAdmin.Metadata_ByUserId_ByKey" /* Metadata_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerBinaryRecordAdminApi_CreatePresigned_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerBinaryRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPresigned_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Cloudsave.PlayerBinaryRecordAdmin.Presigned_ByUserId_ByKey" /* Presigned_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PlayerRecordAdmin.query.ts
import { useMutation as useMutation5, useQuery as useQuery4 } from "@tanstack/react-query";
var Key_PlayerRecordAdmin = /* @__PURE__ */ ((Key_PlayerRecordAdmin2) => {
  Key_PlayerRecordAdmin2["UsersRecords"] = "Cloudsave.PlayerRecordAdmin.UsersRecords";
  Key_PlayerRecordAdmin2["Records_ByUserId"] = "Cloudsave.PlayerRecordAdmin.Records_ByUserId";
  Key_PlayerRecordAdmin2["UserBulkRecordSize"] = "Cloudsave.PlayerRecordAdmin.UserBulkRecordSize";
  Key_PlayerRecordAdmin2["BulkUser_ByKey"] = "Cloudsave.PlayerRecordAdmin.BulkUser_ByKey";
  Key_PlayerRecordAdmin2["RecordBulk_ByUserId"] = "Cloudsave.PlayerRecordAdmin.RecordBulk_ByUserId";
  Key_PlayerRecordAdmin2["Record_ByUserId_ByKey"] = "Cloudsave.PlayerRecordAdmin.Record_ByUserId_ByKey";
  Key_PlayerRecordAdmin2["Size_ByUserId_ByKey"] = "Cloudsave.PlayerRecordAdmin.Size_ByUserId_ByKey";
  Key_PlayerRecordAdmin2["Public_ByUserId_ByKey"] = "Cloudsave.PlayerRecordAdmin.Public_ByUserId_ByKey";
  return Key_PlayerRecordAdmin2;
})(Key_PlayerRecordAdmin || {});
var usePlayerRecordAdminApi_GetUsersRecords = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersRecords(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.UsersRecords" /* UsersRecords */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_GetRecords_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecords_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.Records_ByUserId" /* Records_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_FetchUserBulkRecordSize = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchUserBulkRecordSize(input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.UserBulkRecordSize" /* UserBulkRecordSize */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_FetchBulkUser_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchBulkUser_ByKey(
      input2.key,
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.BulkUser_ByKey" /* BulkUser_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_UpdateBulkUser_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateBulkUser_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.BulkUser_ByKey" /* BulkUser_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_FetchRecordBulk_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchRecordBulk_ByUserId(input2.userId, input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.RecordBulk_ByUserId" /* RecordBulk_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_UpdateRecordBulk_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRecordBulk_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.RecordBulk_ByUserId" /* RecordBulk_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_DeleteRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteRecord_ByUserId_ByKey(input.userId, input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_GetRecord_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRecord_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_CreateRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createRecord_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_UpdateRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRecord_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_GetSize_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSize_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.Size_ByUserId_ByKey" /* Size_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_DeletePublic_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePublic_ByUserId_ByKey(input.userId, input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_GetPublic_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerRecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPublic_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Cloudsave.PlayerRecordAdmin.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerRecordAdminApi_CreatePublic_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPublic_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePlayerRecordAdminApi_UpdatePublic_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerRecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePublic_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Cloudsave.PlayerRecordAdmin.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PluginConfigAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery5 } from "@tanstack/react-query";
var Key_PluginConfigAdmin = /* @__PURE__ */ ((Key_PluginConfigAdmin2) => {
  Key_PluginConfigAdmin2["Plugin"] = "Cloudsave.PluginConfigAdmin.Plugin";
  Key_PluginConfigAdmin2["Plugins"] = "Cloudsave.PluginConfigAdmin.Plugins";
  return Key_PluginConfigAdmin2;
})(Key_PluginConfigAdmin || {});
var usePluginConfigAdminApi_DeletePluginMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PluginConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deletePlugin();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Cloudsave.PluginConfigAdmin.Plugin" /* Plugin */],
    mutationFn,
    ...options
  });
};
var usePluginConfigAdminApi_GetPlugins = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PluginConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlugins();
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Cloudsave.PluginConfigAdmin.Plugins" /* Plugins */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePluginConfigAdminApi_PatchPluginMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PluginConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchPlugin(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Cloudsave.PluginConfigAdmin.Plugin" /* Plugin */],
    mutationFn,
    ...options
  });
};
var usePluginConfigAdminApi_CreatePluginMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PluginConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPlugin(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Cloudsave.PluginConfigAdmin.Plugin" /* Plugin */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/RecordAdmin.query.ts
import { useMutation as useMutation7, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_RecordAdmin = /* @__PURE__ */ ((Key_RecordAdmin2) => {
  Key_RecordAdmin2["Adminrecords"] = "Cloudsave.RecordAdmin.Adminrecords";
  Key_RecordAdmin2["AdminrecordBulk"] = "Cloudsave.RecordAdmin.AdminrecordBulk";
  Key_RecordAdmin2["Adminrecord_ByKey"] = "Cloudsave.RecordAdmin.Adminrecord_ByKey";
  Key_RecordAdmin2["Adminrecords_ByUserId"] = "Cloudsave.RecordAdmin.Adminrecords_ByUserId";
  Key_RecordAdmin2["BulkUser_ByKey"] = "Cloudsave.RecordAdmin.BulkUser_ByKey";
  Key_RecordAdmin2["AdminrecordBulk_ByUserId"] = "Cloudsave.RecordAdmin.AdminrecordBulk_ByUserId";
  Key_RecordAdmin2["Adminrecord_ByUserId_ByKey"] = "Cloudsave.RecordAdmin.Adminrecord_ByUserId_ByKey";
  return Key_RecordAdmin2;
})(Key_RecordAdmin || {});
var useRecordAdminApi_GetAdminrecords = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAdminrecords(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.Adminrecords" /* Adminrecords */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_FetchAdminrecordBulk = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchAdminrecordBulk(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.AdminrecordBulk" /* AdminrecordBulk */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_DeleteAdminrecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteAdminrecord_ByKey(
      input.key
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Cloudsave.RecordAdmin.Adminrecord_ByKey" /* Adminrecord_ByKey */],
    mutationFn,
    ...options
  });
};
var useRecordAdminApi_GetAdminrecord_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAdminrecord_ByKey(
      input2.key
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.Adminrecord_ByKey" /* Adminrecord_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_CreateAdminrecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createAdminrecord_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Cloudsave.RecordAdmin.Adminrecord_ByKey" /* Adminrecord_ByKey */],
    mutationFn,
    ...options
  });
};
var useRecordAdminApi_UpdateAdminrecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RecordAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateAdminrecord_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Cloudsave.RecordAdmin.Adminrecord_ByKey" /* Adminrecord_ByKey */],
    mutationFn,
    ...options
  });
};
var useRecordAdminApi_GetAdminrecords_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAdminrecords_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.Adminrecords_ByUserId" /* Adminrecords_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_FetchBulkUser_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchBulkUser_ByKey(
      input2.key,
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.BulkUser_ByKey" /* BulkUser_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_FetchAdminrecordBulk_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchAdminrecordBulk_ByUserId(input2.userId, input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.AdminrecordBulk_ByUserId" /* AdminrecordBulk_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_DeleteAdminrecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAdminrecord_ByUserId_ByKey(input.userId, input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Cloudsave.RecordAdmin.Adminrecord_ByUserId_ByKey" /* Adminrecord_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var useRecordAdminApi_GetAdminrecord_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecordAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAdminrecord_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Cloudsave.RecordAdmin.Adminrecord_ByUserId_ByKey" /* Adminrecord_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecordAdminApi_CreateAdminrecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createAdminrecord_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Cloudsave.RecordAdmin.Adminrecord_ByUserId_ByKey" /* Adminrecord_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var useRecordAdminApi_UpdateAdminrecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RecordAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAdminrecord_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Cloudsave.RecordAdmin.Adminrecord_ByUserId_ByKey" /* Adminrecord_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/TagsAdmin.query.ts
import { useMutation as useMutation8, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_TagsAdmin = /* @__PURE__ */ ((Key_TagsAdmin2) => {
  Key_TagsAdmin2["Tags"] = "Cloudsave.TagsAdmin.Tags";
  Key_TagsAdmin2["Tag"] = "Cloudsave.TagsAdmin.Tag";
  Key_TagsAdmin2["Tag_ByTag"] = "Cloudsave.TagsAdmin.Tag_ByTag";
  return Key_TagsAdmin2;
})(Key_TagsAdmin || {});
var useTagsAdminApi_GetTags = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await TagsAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTags(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Cloudsave.TagsAdmin.Tags" /* Tags */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useTagsAdminApi_CreateTagMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TagsAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createTag(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Cloudsave.TagsAdmin.Tag" /* Tag */],
    mutationFn,
    ...options
  });
};
var useTagsAdminApi_DeleteTag_ByTagMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TagsAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteTag_ByTag(input.tag);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Cloudsave.TagsAdmin.Tag_ByTag" /* Tag_ByTag */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/TtlConfigAdmin.query.ts
import { useMutation as useMutation9 } from "@tanstack/react-query";
var Key_TtlConfigAdmin = /* @__PURE__ */ ((Key_TtlConfigAdmin2) => {
  Key_TtlConfigAdmin2["Ttl_ByKey"] = "Cloudsave.TtlConfigAdmin.Ttl_ByKey";
  Key_TtlConfigAdmin2["Ttl_ByKey_ByNS"] = "Cloudsave.TtlConfigAdmin.Ttl_ByKey_ByNS";
  return Key_TtlConfigAdmin2;
})(Key_TtlConfigAdmin || {});
var useTtlConfigAdminApi_DeleteTtl_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TtlConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteTtl_ByKey(
      input.key
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Cloudsave.TtlConfigAdmin.Ttl_ByKey" /* Ttl_ByKey */],
    mutationFn,
    ...options
  });
};
var useTtlConfigAdminApi_DeleteTtl_ByKey_ByNSMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TtlConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteTtl_ByKey_ByNS(
      input.key
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Cloudsave.TtlConfigAdmin.Ttl_ByKey_ByNS" /* Ttl_ByKey_ByNS */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/ConcurrentRecord.query.ts
import { useMutation as useMutation10 } from "@tanstack/react-query";
var Key_ConcurrentRecord = /* @__PURE__ */ ((Key_ConcurrentRecord2) => {
  Key_ConcurrentRecord2["ConcurrentRecord_ByKey"] = "Cloudsave.ConcurrentRecord.ConcurrentRecord_ByKey";
  Key_ConcurrentRecord2["ConcurrentRecord_ByUserId_ByKey"] = "Cloudsave.ConcurrentRecord.ConcurrentRecord_ByUserId_ByKey";
  Key_ConcurrentRecord2["PublicConcurrent_ByUserId_ByKey"] = "Cloudsave.ConcurrentRecord.PublicConcurrent_ByUserId_ByKey";
  return Key_ConcurrentRecord2;
})(Key_ConcurrentRecord || {});
var useConcurrentRecordApi_UpdateConcurrentRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConcurrentRecord_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Cloudsave.ConcurrentRecord.ConcurrentRecord_ByKey" /* ConcurrentRecord_ByKey */],
    mutationFn,
    ...options
  });
};
var useConcurrentRecordApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConcurrentRecord_ByUserId_ByKey(input.userId, input.key, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Cloudsave.ConcurrentRecord.ConcurrentRecord_ByUserId_ByKey" /* ConcurrentRecord_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var useConcurrentRecordApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConcurrentRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePublicConcurrent_ByUserId_ByKey(input.userId, input.key, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Cloudsave.ConcurrentRecord.PublicConcurrent_ByUserId_ByKey" /* PublicConcurrent_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/PublicGameBinaryRecord.query.ts
import { useMutation as useMutation11, useQuery as useQuery8 } from "@tanstack/react-query";
var Key_PublicGameBinaryRecord = /* @__PURE__ */ ((Key_PublicGameBinaryRecord2) => {
  Key_PublicGameBinaryRecord2["Binaries"] = "Cloudsave.PublicGameBinaryRecord.Binaries";
  Key_PublicGameBinaryRecord2["Binary"] = "Cloudsave.PublicGameBinaryRecord.Binary";
  Key_PublicGameBinaryRecord2["BinaryBulk"] = "Cloudsave.PublicGameBinaryRecord.BinaryBulk";
  Key_PublicGameBinaryRecord2["Binary_ByKey"] = "Cloudsave.PublicGameBinaryRecord.Binary_ByKey";
  Key_PublicGameBinaryRecord2["Presigned_ByKey"] = "Cloudsave.PublicGameBinaryRecord.Presigned_ByKey";
  return Key_PublicGameBinaryRecord2;
})(Key_PublicGameBinaryRecord || {});
var usePublicGameBinaryRecordApi_GetBinaries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicGameBinaryRecordApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBinaries(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Cloudsave.PublicGameBinaryRecord.Binaries" /* Binaries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicGameBinaryRecordApi_CreateBinaryMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameBinaryRecordApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBinary(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Cloudsave.PublicGameBinaryRecord.Binary" /* Binary */],
    mutationFn,
    ...options
  });
};
var usePublicGameBinaryRecordApi_CreateBinaryBulkMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBinaryBulk(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Cloudsave.PublicGameBinaryRecord.BinaryBulk" /* BinaryBulk */],
    mutationFn,
    ...options
  });
};
var usePublicGameBinaryRecordApi_DeleteBinary_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteBinary_ByKey(input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Cloudsave.PublicGameBinaryRecord.Binary_ByKey" /* Binary_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicGameBinaryRecordApi_GetBinary_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicGameBinaryRecordApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBinary_ByKey(
      input2.key
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Cloudsave.PublicGameBinaryRecord.Binary_ByKey" /* Binary_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicGameBinaryRecordApi_UpdateBinary_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateBinary_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Cloudsave.PublicGameBinaryRecord.Binary_ByKey" /* Binary_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicGameBinaryRecordApi_CreatePresigned_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPresigned_ByKey(input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Cloudsave.PublicGameBinaryRecord.Presigned_ByKey" /* Presigned_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/PublicGameRecord.query.ts
import { useMutation as useMutation12, useQuery as useQuery9 } from "@tanstack/react-query";
var Key_PublicGameRecord = /* @__PURE__ */ ((Key_PublicGameRecord2) => {
  Key_PublicGameRecord2["RecordBulk"] = "Cloudsave.PublicGameRecord.RecordBulk";
  Key_PublicGameRecord2["Record_ByKey"] = "Cloudsave.PublicGameRecord.Record_ByKey";
  return Key_PublicGameRecord2;
})(Key_PublicGameRecord || {});
var usePublicGameRecordApi_FetchRecordBulk = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicGameRecordApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchRecordBulk(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Cloudsave.PublicGameRecord.RecordBulk" /* RecordBulk */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicGameRecordApi_DeleteRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameRecordApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRecord_ByKey(
      input.key
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Cloudsave.PublicGameRecord.Record_ByKey" /* Record_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicGameRecordApi_GetRecord_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicGameRecordApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecord_ByKey(
      input2.key
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Cloudsave.PublicGameRecord.Record_ByKey" /* Record_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicGameRecordApi_CreateRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameRecordApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRecord_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Cloudsave.PublicGameRecord.Record_ByKey" /* Record_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicGameRecordApi_UpdateRecord_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicGameRecordApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRecord_ByKey(
      input.key,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Cloudsave.PublicGameRecord.Record_ByKey" /* Record_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/PublicPlayerBinaryRecord.query.ts
import { useMutation as useMutation13, useQuery as useQuery10 } from "@tanstack/react-query";
var Key_PublicPlayerBinaryRecord = /* @__PURE__ */ ((Key_PublicPlayerBinaryRecord2) => {
  Key_PublicPlayerBinaryRecord2["UsersMeBinaries"] = "Cloudsave.PublicPlayerBinaryRecord.UsersMeBinaries";
  Key_PublicPlayerBinaryRecord2["UserMeBinaryBulk"] = "Cloudsave.PublicPlayerBinaryRecord.UserMeBinaryBulk";
  Key_PublicPlayerBinaryRecord2["Binary_ByUserId"] = "Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId";
  Key_PublicPlayerBinaryRecord2["Binary_ByUserId_ByKey"] = "Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId_ByKey";
  Key_PublicPlayerBinaryRecord2["BinariesPublic_ByUserId"] = "Cloudsave.PublicPlayerBinaryRecord.BinariesPublic_ByUserId";
  Key_PublicPlayerBinaryRecord2["PublicBulkUser_ByKey"] = "Cloudsave.PublicPlayerBinaryRecord.PublicBulkUser_ByKey";
  Key_PublicPlayerBinaryRecord2["BinaryBulk_ByUserId"] = "Cloudsave.PublicPlayerBinaryRecord.BinaryBulk_ByUserId";
  Key_PublicPlayerBinaryRecord2["Public_ByUserId_ByKey"] = "Cloudsave.PublicPlayerBinaryRecord.Public_ByUserId_ByKey";
  Key_PublicPlayerBinaryRecord2["Metadata_ByUserId_ByKey"] = "Cloudsave.PublicPlayerBinaryRecord.Metadata_ByUserId_ByKey";
  Key_PublicPlayerBinaryRecord2["Presigned_ByUserId_ByKey"] = "Cloudsave.PublicPlayerBinaryRecord.Presigned_ByUserId_ByKey";
  return Key_PublicPlayerBinaryRecord2;
})(Key_PublicPlayerBinaryRecord || {});
var usePublicPlayerBinaryRecordApi_GetUsersMeBinaries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerBinaryRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeBinaries(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Cloudsave.PublicPlayerBinaryRecord.UsersMeBinaries" /* UsersMeBinaries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_CreateUserMeBinaryBulkMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeBinaryBulk(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Cloudsave.PublicPlayerBinaryRecord.UserMeBinaryBulk" /* UserMeBinaryBulk */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_CreateBinary_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBinary_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId" /* Binary_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_DeleteBinary_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteBinary_ByUserId_ByKey(input.userId, input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId_ByKey" /* Binary_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_GetBinary_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerBinaryRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBinary_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId_ByKey" /* Binary_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_UpdateBinary_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateBinary_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId_ByKey" /* Binary_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_GetBinariesPublic_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerBinaryRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBinariesPublic_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Cloudsave.PublicPlayerBinaryRecord.BinariesPublic_ByUserId" /* BinariesPublic_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_FetchPublicBulkUser_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerBinaryRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchPublicBulkUser_ByKey(input2.key, input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Cloudsave.PublicPlayerBinaryRecord.PublicBulkUser_ByKey" /* PublicBulkUser_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_FetchBinaryBulk_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerBinaryRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchBinaryBulk_ByUserId(input2.userId, input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Cloudsave.PublicPlayerBinaryRecord.BinaryBulk_ByUserId" /* BinaryBulk_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_GetPublic_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerBinaryRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPublic_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Cloudsave.PublicPlayerBinaryRecord.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_UpdateMetadata_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateMetadata_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Cloudsave.PublicPlayerBinaryRecord.Metadata_ByUserId_ByKey" /* Metadata_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerBinaryRecordApi_CreatePresigned_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerBinaryRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPresigned_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Cloudsave.PublicPlayerBinaryRecord.Presigned_ByUserId_ByKey" /* Presigned_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/PublicPlayerRecord.query.ts
import { useMutation as useMutation14, useQuery as useQuery11 } from "@tanstack/react-query";
var Key_PublicPlayerRecord = /* @__PURE__ */ ((Key_PublicPlayerRecord2) => {
  Key_PublicPlayerRecord2["UsersMeRecords"] = "Cloudsave.PublicPlayerRecord.UsersMeRecords";
  Key_PublicPlayerRecord2["UserMeRecordBulk"] = "Cloudsave.PublicPlayerRecord.UserMeRecordBulk";
  Key_PublicPlayerRecord2["Record_ByUserId_ByKey"] = "Cloudsave.PublicPlayerRecord.Record_ByUserId_ByKey";
  Key_PublicPlayerRecord2["RecordsPublic_ByUserId"] = "Cloudsave.PublicPlayerRecord.RecordsPublic_ByUserId";
  Key_PublicPlayerRecord2["PublicMeUser_ByKey"] = "Cloudsave.PublicPlayerRecord.PublicMeUser_ByKey";
  Key_PublicPlayerRecord2["PublicBulkUser_ByKey"] = "Cloudsave.PublicPlayerRecord.PublicBulkUser_ByKey";
  Key_PublicPlayerRecord2["RecordBulk_ByUserId"] = "Cloudsave.PublicPlayerRecord.RecordBulk_ByUserId";
  Key_PublicPlayerRecord2["Public_ByUserId_ByKey"] = "Cloudsave.PublicPlayerRecord.Public_ByUserId_ByKey";
  return Key_PublicPlayerRecord2;
})(Key_PublicPlayerRecord || {});
var usePublicPlayerRecordApi_GetUsersMeRecords = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerRecordApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeRecords(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Cloudsave.PublicPlayerRecord.UsersMeRecords" /* UsersMeRecords */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerRecordApi_CreateUserMeRecordBulkMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeRecordBulk(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.UserMeRecordBulk" /* UserMeRecordBulk */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerRecordApi_DeleteRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteRecord_ByUserId_ByKey(input.userId, input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerRecordApi_GetRecord_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRecord_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Cloudsave.PublicPlayerRecord.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerRecordApi_CreateRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createRecord_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerRecordApi_UpdateRecord_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRecord_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.Record_ByUserId_ByKey" /* Record_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerRecordApi_GetRecordsPublic_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRecordsPublic_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Cloudsave.PublicPlayerRecord.RecordsPublic_ByUserId" /* RecordsPublic_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerRecordApi_DeletePublicMeUser_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePublicMeUser_ByKey(input.key);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.PublicMeUser_ByKey" /* PublicMeUser_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerRecordApi_FetchPublicBulkUser_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchPublicBulkUser_ByKey(input2.key, input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Cloudsave.PublicPlayerRecord.PublicBulkUser_ByKey" /* PublicBulkUser_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerRecordApi_FetchRecordBulk_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).fetchRecordBulk_ByUserId(input2.userId, input2.data);
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Cloudsave.PublicPlayerRecord.RecordBulk_ByUserId" /* RecordBulk_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerRecordApi_GetPublic_ByUserId_ByKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicPlayerRecordApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPublic_ByUserId_ByKey(input2.userId, input2.key);
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Cloudsave.PublicPlayerRecord.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePublicPlayerRecordApi_CreatePublic_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPublic_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};
var usePublicPlayerRecordApi_UpdatePublic_ByUserId_ByKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PublicPlayerRecordApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePublic_ByUserId_ByKey(input.userId, input.key, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Cloudsave.PublicPlayerRecord.Public_ByUserId_ByKey" /* Public_ByUserId_ByKey */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/PublicTags.query.ts
import { useQuery as useQuery12 } from "@tanstack/react-query";
var Key_PublicTags = /* @__PURE__ */ ((Key_PublicTags2) => {
  Key_PublicTags2["Tags"] = "Cloudsave.PublicTags.Tags";
  return Key_PublicTags2;
})(Key_PublicTags || {});
var usePublicTagsApi_GetTags = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PublicTagsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTags(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Cloudsave.PublicTags.Tags" /* Tags */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
export {
  Key_ConcurrentRecord,
  Key_ConcurrentRecordAdmin,
  Key_GameBinaryRecordAdmin,
  Key_GameRecordAdmin,
  Key_PlayerBinaryRecordAdmin,
  Key_PlayerRecordAdmin,
  Key_PluginConfigAdmin,
  Key_PublicGameBinaryRecord,
  Key_PublicGameRecord,
  Key_PublicPlayerBinaryRecord,
  Key_PublicPlayerRecord,
  Key_PublicTags,
  Key_RecordAdmin,
  Key_TagsAdmin,
  Key_TtlConfigAdmin,
  useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByKeyMutation,
  useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByUserId_ByKeyMutation,
  useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByKeyMutation,
  useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation,
  useConcurrentRecordAdminApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation,
  useConcurrentRecordApi_UpdateConcurrentRecord_ByKeyMutation,
  useConcurrentRecordApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation,
  useConcurrentRecordApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation,
  useGameBinaryRecordAdminApi_CreateBinaryMutation,
  useGameBinaryRecordAdminApi_CreatePresigned_ByKeyMutation,
  useGameBinaryRecordAdminApi_DeleteBinary_ByKeyMutation,
  useGameBinaryRecordAdminApi_GetBinaries,
  useGameBinaryRecordAdminApi_GetBinary_ByKey,
  useGameBinaryRecordAdminApi_UpdateBinary_ByKeyMutation,
  useGameBinaryRecordAdminApi_UpdateMetadata_ByKeyMutation,
  useGameRecordAdminApi_CreateRecord_ByKeyMutation,
  useGameRecordAdminApi_DeleteRecord_ByKeyMutation,
  useGameRecordAdminApi_GetRecord_ByKey,
  useGameRecordAdminApi_GetRecords,
  useGameRecordAdminApi_UpdateRecord_ByKeyMutation,
  usePlayerBinaryRecordAdminApi_CreateBinary_ByUserIdMutation,
  usePlayerBinaryRecordAdminApi_CreatePresigned_ByUserId_ByKeyMutation,
  usePlayerBinaryRecordAdminApi_DeleteBinary_ByUserId_ByKeyMutation,
  usePlayerBinaryRecordAdminApi_GetBinaries_ByUserId,
  usePlayerBinaryRecordAdminApi_GetBinary_ByUserId_ByKey,
  usePlayerBinaryRecordAdminApi_UpdateBinary_ByUserId_ByKeyMutation,
  usePlayerBinaryRecordAdminApi_UpdateMetadata_ByUserId_ByKeyMutation,
  usePlayerRecordAdminApi_CreatePublic_ByUserId_ByKeyMutation,
  usePlayerRecordAdminApi_CreateRecord_ByUserId_ByKeyMutation,
  usePlayerRecordAdminApi_DeletePublic_ByUserId_ByKeyMutation,
  usePlayerRecordAdminApi_DeleteRecord_ByUserId_ByKeyMutation,
  usePlayerRecordAdminApi_FetchBulkUser_ByKey,
  usePlayerRecordAdminApi_FetchRecordBulk_ByUserId,
  usePlayerRecordAdminApi_FetchUserBulkRecordSize,
  usePlayerRecordAdminApi_GetPublic_ByUserId_ByKey,
  usePlayerRecordAdminApi_GetRecord_ByUserId_ByKey,
  usePlayerRecordAdminApi_GetRecords_ByUserId,
  usePlayerRecordAdminApi_GetSize_ByUserId_ByKey,
  usePlayerRecordAdminApi_GetUsersRecords,
  usePlayerRecordAdminApi_UpdateBulkUser_ByKeyMutation,
  usePlayerRecordAdminApi_UpdatePublic_ByUserId_ByKeyMutation,
  usePlayerRecordAdminApi_UpdateRecordBulk_ByUserIdMutation,
  usePlayerRecordAdminApi_UpdateRecord_ByUserId_ByKeyMutation,
  usePluginConfigAdminApi_CreatePluginMutation,
  usePluginConfigAdminApi_DeletePluginMutation,
  usePluginConfigAdminApi_GetPlugins,
  usePluginConfigAdminApi_PatchPluginMutation,
  usePublicGameBinaryRecordApi_CreateBinaryBulkMutation,
  usePublicGameBinaryRecordApi_CreateBinaryMutation,
  usePublicGameBinaryRecordApi_CreatePresigned_ByKeyMutation,
  usePublicGameBinaryRecordApi_DeleteBinary_ByKeyMutation,
  usePublicGameBinaryRecordApi_GetBinaries,
  usePublicGameBinaryRecordApi_GetBinary_ByKey,
  usePublicGameBinaryRecordApi_UpdateBinary_ByKeyMutation,
  usePublicGameRecordApi_CreateRecord_ByKeyMutation,
  usePublicGameRecordApi_DeleteRecord_ByKeyMutation,
  usePublicGameRecordApi_FetchRecordBulk,
  usePublicGameRecordApi_GetRecord_ByKey,
  usePublicGameRecordApi_UpdateRecord_ByKeyMutation,
  usePublicPlayerBinaryRecordApi_CreateBinary_ByUserIdMutation,
  usePublicPlayerBinaryRecordApi_CreatePresigned_ByUserId_ByKeyMutation,
  usePublicPlayerBinaryRecordApi_CreateUserMeBinaryBulkMutation,
  usePublicPlayerBinaryRecordApi_DeleteBinary_ByUserId_ByKeyMutation,
  usePublicPlayerBinaryRecordApi_FetchBinaryBulk_ByUserId,
  usePublicPlayerBinaryRecordApi_FetchPublicBulkUser_ByKey,
  usePublicPlayerBinaryRecordApi_GetBinariesPublic_ByUserId,
  usePublicPlayerBinaryRecordApi_GetBinary_ByUserId_ByKey,
  usePublicPlayerBinaryRecordApi_GetPublic_ByUserId_ByKey,
  usePublicPlayerBinaryRecordApi_GetUsersMeBinaries,
  usePublicPlayerBinaryRecordApi_UpdateBinary_ByUserId_ByKeyMutation,
  usePublicPlayerBinaryRecordApi_UpdateMetadata_ByUserId_ByKeyMutation,
  usePublicPlayerRecordApi_CreatePublic_ByUserId_ByKeyMutation,
  usePublicPlayerRecordApi_CreateRecord_ByUserId_ByKeyMutation,
  usePublicPlayerRecordApi_CreateUserMeRecordBulkMutation,
  usePublicPlayerRecordApi_DeletePublicMeUser_ByKeyMutation,
  usePublicPlayerRecordApi_DeleteRecord_ByUserId_ByKeyMutation,
  usePublicPlayerRecordApi_FetchPublicBulkUser_ByKey,
  usePublicPlayerRecordApi_FetchRecordBulk_ByUserId,
  usePublicPlayerRecordApi_GetPublic_ByUserId_ByKey,
  usePublicPlayerRecordApi_GetRecord_ByUserId_ByKey,
  usePublicPlayerRecordApi_GetRecordsPublic_ByUserId,
  usePublicPlayerRecordApi_GetUsersMeRecords,
  usePublicPlayerRecordApi_UpdatePublic_ByUserId_ByKeyMutation,
  usePublicPlayerRecordApi_UpdateRecord_ByUserId_ByKeyMutation,
  usePublicTagsApi_GetTags,
  useRecordAdminApi_CreateAdminrecord_ByKeyMutation,
  useRecordAdminApi_CreateAdminrecord_ByUserId_ByKeyMutation,
  useRecordAdminApi_DeleteAdminrecord_ByKeyMutation,
  useRecordAdminApi_DeleteAdminrecord_ByUserId_ByKeyMutation,
  useRecordAdminApi_FetchAdminrecordBulk,
  useRecordAdminApi_FetchAdminrecordBulk_ByUserId,
  useRecordAdminApi_FetchBulkUser_ByKey,
  useRecordAdminApi_GetAdminrecord_ByKey,
  useRecordAdminApi_GetAdminrecord_ByUserId_ByKey,
  useRecordAdminApi_GetAdminrecords,
  useRecordAdminApi_GetAdminrecords_ByUserId,
  useRecordAdminApi_UpdateAdminrecord_ByKeyMutation,
  useRecordAdminApi_UpdateAdminrecord_ByUserId_ByKeyMutation,
  useTagsAdminApi_CreateTagMutation,
  useTagsAdminApi_DeleteTag_ByTagMutation,
  useTagsAdminApi_GetTags,
  useTtlConfigAdminApi_DeleteTtl_ByKeyMutation,
  useTtlConfigAdminApi_DeleteTtl_ByKey_ByNSMutation
};
