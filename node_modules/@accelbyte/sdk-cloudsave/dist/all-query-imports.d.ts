import { AccelByteSDK, ApiError, SdkSetConfigParam } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { A as AdminConcurrentRecordRequest, a as AdminGameConcurrentRecordRequest, P as PlayerRecordConcurrentUpdateResponse, b as AdminPlayerConcurrentRecordRequest, L as ListGameBinaryRecordsAdminResponse, U as UploadBinaryRecordResponse, G as GameBinaryRecordCreate, c as GameBinaryRecordAdminResponse, B as BinaryRecordRequest, d as GameBinaryRecordMetadataRequest, e as UploadBinaryRecordRequest, f as ListGameRecordKeysResponse, g as GameRecordAdminResponse, h as GameRecordRequest, i as ListPlayerBinaryRecordsResponse, j as PlayerBinaryRecordCreate, k as PlayerBinaryRecordResponse, l as PlayerBinaryRecordMetadataRequest, m as ListPlayerRecordKeysResponse, n as BulkUserKeyRequest, o as BulkGetPlayerRecordSizeResponse, p as BulkUserIDsRequest, q as BulkGetPlayerRecordResponse, s as BulkUpdatePlayerRecordByKeyResponseArray, r as BulkUpdatePlayerRecordsByKeyRequest, t as BulkGetPlayerRecordsRequest, u as BulkGetAdminPlayerRecordResponse, w as BulkUpdatePlayerRecordResponseArray, v as BulkUpdatePlayerRecordsRequest, x as PlayerRecordResponse, y as PlayerRecordRequest, z as PlayerRecordSizeResponse, C as PluginResponse, D as PluginRequest, E as ListAdminGameRecordKeysResponse, F as BulkGetAdminGameRecordRequest, H as BulkGetAdminGameRecordResponse, I as AdminGameRecordResponse, J as AdminGameRecordRequest, K as ListAdminPlayerRecordKeysResponse, M as BulkGetAdminPlayerRecordRequest, N as AdminPlayerRecordResponse, O as AdminPlayerRecordRequest, Q as ListTagsResponse, T as TagRequest, R as ConcurrentRecordRequest, S as ListGameBinaryRecordsResponse, V as PublicGameBinaryRecordCreate, X as BulkGetGameBinaryRecordResponse, W as BulkGetGameRecordRequest, Y as GameBinaryRecordResponse, Z as BulkGetGameRecordResponse, _ as GameRecordResponse, $ as BulkGetPlayerBinaryRecordResponse, a0 as PublicPlayerBinaryRecordCreate, a1 as PlayerBinaryRecordMetadataPublicRequest } from './PublicPlayerBinaryRecordCreate-BVfdaP5p.js';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_ConcurrentRecordAdmin {
    ConcurrentRecord_ByKey = "Cloudsave.ConcurrentRecordAdmin.ConcurrentRecord_ByKey",
    ConcurrentAdminrecord_ByKey = "Cloudsave.ConcurrentRecordAdmin.ConcurrentAdminrecord_ByKey",
    ConcurrentRecord_ByUserId_ByKey = "Cloudsave.ConcurrentRecordAdmin.ConcurrentRecord_ByUserId_ByKey",
    ConcurrentAdminrecord_ByUserId_ByKey = "Cloudsave.ConcurrentRecordAdmin.ConcurrentAdminrecord_ByUserId_ByKey",
    PublicConcurrent_ByUserId_ByKey = "Cloudsave.ConcurrentRecordAdmin.PublicConcurrent_ByUserId_ByKey"
}
/**
 * ## Description This endpoints will create new game record or replace the existing game record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Parameters Notes 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. updatedAt (required: true) Time format style: RFC3339 3. value Json 4. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;value&#34;: {}, &#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ``` ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecordAdmin.ConcurrentRecord_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminConcurrentRecordRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminConcurrentRecordRequest;
}>;
/**
 * ## Description This endpoints will create new game record or replace the existing game record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Parameters Notes 1. updatedAt (required: true) Time format style: RFC3339 2. value Json 3. tags (default: *empty array*, type: array of string) Indicate the tagging for the admin record. **Request Body Example:** ``` { &#34;value&#34;: {}, &#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ``` ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecordAdmin.ConcurrentAdminrecord_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminGameConcurrentRecordRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminGameConcurrentRecordRequest;
}>;
/**
 * ## Description This endpoints will create new player record or replace the existing player record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Parameters Notes 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. updatedAt (required: true) Time format style: RFC3339 3. value Json 4. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;value&#34;: {}, &#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ``` ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecordAdmin.ConcurrentRecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PlayerRecordConcurrentUpdateResponse) => void) => UseMutationResult<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>;
/**
 * ## Description This endpoints will create new admin player record or replace the existing admin player record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Parameters Notes 1. updatedAt (required: true) Time format style: RFC3339 2. value Json 3. tags (default: *empty array*, type: array of string) Indicate the tagging for the admin record. **Request Body Example:** ``` { &#34;value&#34;: {}, &#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ``` ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecordAdmin.ConcurrentAdminrecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminPlayerConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PlayerRecordConcurrentUpdateResponse) => void) => UseMutationResult<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminPlayerConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>;
/**
 * ## Description This endpoints will create new player public record or replace the existing player public record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Parameters Notes 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. updatedAt (required: true) Time format style: RFC3339 3. value Json 4. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;value&#34;: {}, &#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ``` ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecordAdmin.PublicConcurrent_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordAdminApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PlayerRecordConcurrentUpdateResponse) => void) => UseMutationResult<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_GameBinaryRecordAdmin {
    Binaries = "Cloudsave.GameBinaryRecordAdmin.Binaries",
    Binary = "Cloudsave.GameBinaryRecordAdmin.Binary",
    Binary_ByKey = "Cloudsave.GameBinaryRecordAdmin.Binary_ByKey",
    Metadata_ByKey = "Cloudsave.GameBinaryRecordAdmin.Metadata_ByKey",
    Presigned_ByKey = "Cloudsave.GameBinaryRecordAdmin.Presigned_ByKey"
}
/**
 * Retrieve list of binary records by namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Binaries, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_GetBinaries: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListGameBinaryRecordsAdminResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListGameBinaryRecordsAdminResponse>) => void) => UseQueryResult<ListGameBinaryRecordsAdminResponse, AxiosError<ApiError>>;
/**
 * Create a game binary record. Other detail info: `key` should follow these rules: 1. support uppercase and lowercase letters, numbers, and separators **&#34;-&#34;**, **&#34;_&#34;**, **&#34;.&#34;** are allowed 2. begin and end with letters or numbers 3. spaces are not allowed 4. separators must not appears twice in a row Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Binary, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_CreateBinaryMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: GameBinaryRecordCreate;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: GameBinaryRecordCreate;
}>;
/**
 * Delete a game binary record.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Binary_ByKey, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_DeleteBinary_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * Get a game binary record by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Binary_ByKey, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_GetBinary_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
}, options?: Omit<UseQueryOptions<GameBinaryRecordAdminResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameBinaryRecordAdminResponse>) => void) => UseQueryResult<GameBinaryRecordAdminResponse, AxiosError<ApiError>>;
/**
 * Update a game binary record file by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Binary_ByKey, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_UpdateBinary_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameBinaryRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: BinaryRecordRequest;
}>, "mutationKey">, callback?: (data: GameBinaryRecordAdminResponse) => void) => UseMutationResult<GameBinaryRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: BinaryRecordRequest;
}>;
/**
 * Update a game binary record metadata by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Metadata_ByKey, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_UpdateMetadata_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameBinaryRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameBinaryRecordMetadataRequest;
}>, "mutationKey">, callback?: (data: GameBinaryRecordAdminResponse) => void) => UseMutationResult<GameBinaryRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameBinaryRecordMetadataRequest;
}>;
/**
 * Request presigned URL to upload the binary record to s3. Other detail info: Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameBinaryRecordAdmin.Presigned_ByKey, input]
 * }
 * ```
 */
declare const useGameBinaryRecordAdminApi_CreatePresigned_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: UploadBinaryRecordRequest;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: UploadBinaryRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_GameRecordAdmin {
    Records = "Cloudsave.GameRecordAdmin.Records",
    Record_ByKey = "Cloudsave.GameRecordAdmin.Record_ByKey"
}
/**
 * Retrieve list of records key by namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameRecordAdmin.Records, input]
 * }
 * ```
 */
declare const useGameRecordAdminApi_GetRecords: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        limit: number;
        offset: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListGameRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListGameRecordKeysResponse>) => void) => UseQueryResult<ListGameRecordKeysResponse, AxiosError<ApiError>>;
/**
 * This endpoints delete game record in namespace-level
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameRecordAdmin.Record_ByKey, input]
 * }
 * ```
 */
declare const useGameRecordAdminApi_DeleteRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * Get a record by its key in namespace-level.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameRecordAdmin.Record_ByKey, input]
 * }
 * ```
 */
declare const useGameRecordAdminApi_GetRecord_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
}, options?: Omit<UseQueryOptions<GameRecordAdminResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameRecordAdminResponse>) => void) => UseQueryResult<GameRecordAdminResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new game record or append the existing game record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. ttl_config (default: *empty*, type: object) Indicate the TTL configuration for the game record. action: - DELETE: record will be deleted after TTL is reached 3. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;ttl_config&#34;: { &#34;expires_at&#34;: &#34;2026-01-02T15:04:05Z&#34;, // should be in RFC3339 format &#34;action&#34;: &#34;DELETE&#34; }, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameRecordAdmin.Record_ByKey, input]
 * }
 * ```
 */
declare const useGameRecordAdminApi_CreateRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>, "mutationKey">, callback?: (data: GameRecordAdminResponse) => void) => UseMutationResult<GameRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>;
/**
 * ## Description This endpoints will create new game record or replace the existing game record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. ttl_config (default: *empty*, type: object) Indicate the TTL configuration for the game record. action: - DELETE: record will be deleted after TTL is reached 3. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;ttl_config&#34;: { &#34;expires_at&#34;: &#34;2026-01-02T15:04:05Z&#34;, // should be in RFC3339 format &#34;action&#34;: &#34;DELETE&#34; }, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameRecordAdmin.Record_ByKey, input]
 * }
 * ```
 */
declare const useGameRecordAdminApi_UpdateRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>, "mutationKey">, callback?: (data: GameRecordAdminResponse) => void) => UseMutationResult<GameRecordAdminResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlayerBinaryRecordAdmin {
    Binaries_ByUserId = "Cloudsave.PlayerBinaryRecordAdmin.Binaries_ByUserId",
    Binary_ByUserId = "Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId",
    Binary_ByUserId_ByKey = "Cloudsave.PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey",
    Metadata_ByUserId_ByKey = "Cloudsave.PlayerBinaryRecordAdmin.Metadata_ByUserId_ByKey",
    Presigned_ByUserId_ByKey = "Cloudsave.PlayerBinaryRecordAdmin.Presigned_ByUserId_ByKey"
}
/**
 * Retrieve list of player binary records by namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Binaries_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_GetBinaries_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListPlayerBinaryRecordsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerBinaryRecordsResponse>) => void) => UseQueryResult<ListPlayerBinaryRecordsResponse, AxiosError<ApiError>>;
/**
 * Create a player binary record. Other detail info: `key` should follow these rules: 1. support uppercase and lowercase letters, numbers, and separators **&#34;-&#34;**, **&#34;_&#34;**, **&#34;.&#34;** are allowed 2. begin and end with letters or numbers 3. spaces are not allowed 4. separators must not appears twice in a row Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Binary_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_CreateBinary_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayerBinaryRecordCreate;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayerBinaryRecordCreate;
}>;
/**
 * Delete a player binary record.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_DeleteBinary_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>;
/**
 * Get a player binary record by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_GetBinary_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerBinaryRecordResponse>) => void) => UseQueryResult<PlayerBinaryRecordResponse, AxiosError<ApiError>>;
/**
 * Update a player binary record file by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Binary_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_UpdateBinary_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: BinaryRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerBinaryRecordResponse) => void) => UseMutationResult<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: BinaryRecordRequest;
}>;
/**
 * Update a player binary record metadata by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Metadata_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_UpdateMetadata_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerBinaryRecordMetadataRequest;
}>, "mutationKey">, callback?: (data: PlayerBinaryRecordResponse) => void) => UseMutationResult<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerBinaryRecordMetadataRequest;
}>;
/**
 * Request presigned URL to upload the binary record to s3. Other detail info: Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerBinaryRecordAdmin.Presigned_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerBinaryRecordAdminApi_CreatePresigned_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: UploadBinaryRecordRequest;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: UploadBinaryRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlayerRecordAdmin {
    UsersRecords = "Cloudsave.PlayerRecordAdmin.UsersRecords",
    Records_ByUserId = "Cloudsave.PlayerRecordAdmin.Records_ByUserId",
    UserBulkRecordSize = "Cloudsave.PlayerRecordAdmin.UserBulkRecordSize",
    BulkUser_ByKey = "Cloudsave.PlayerRecordAdmin.BulkUser_ByKey",
    RecordBulk_ByUserId = "Cloudsave.PlayerRecordAdmin.RecordBulk_ByUserId",
    Record_ByUserId_ByKey = "Cloudsave.PlayerRecordAdmin.Record_ByUserId_ByKey",
    Size_ByUserId_ByKey = "Cloudsave.PlayerRecordAdmin.Size_ByUserId_ByKey",
    Public_ByUserId_ByKey = "Cloudsave.PlayerRecordAdmin.Public_ByUserId_ByKey"
}
/**
 * @deprecated
 * Retrieve list of player records key and userID under given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.UsersRecords, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_GetUsersRecords: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
    };
}, options?: Omit<UseQueryOptions<ListPlayerRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerRecordKeysResponse>) => void) => UseQueryResult<ListPlayerRecordKeysResponse, AxiosError<ApiError>>;
/**
 * Retrieve list of player records key and userID under given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Records_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_GetRecords_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListPlayerRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerRecordKeysResponse>) => void) => UseQueryResult<ListPlayerRecordKeysResponse, AxiosError<ApiError>>;
/**
 * Bulk get player&#39;s record size, max allowed 20 at a time, that can be retrieved using this endpoint.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.UserBulkRecordSize, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_FetchUserBulkRecordSize: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: BulkUserKeyRequest;
}, options?: Omit<UseQueryOptions<BulkGetPlayerRecordSizeResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetPlayerRecordSizeResponse>) => void) => UseQueryResult<BulkGetPlayerRecordSizeResponse, AxiosError<ApiError>>;
/**
 * Retrieve player record key and payload in bulk under given namespace. Maximum number of user ids per request is 20.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.BulkUser_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_FetchBulkUser_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
    data: BulkUserIDsRequest;
}, options?: Omit<UseQueryOptions<BulkGetPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetPlayerRecordResponse>) => void) => UseQueryResult<BulkGetPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * This endpoints will create new player record or replace the existing player record in bulk. Maximum number of user ids per request is 10. Maximum total size of the request payload is 5 MB.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.BulkUser_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_UpdateBulkUser_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkUpdatePlayerRecordByKeyResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: BulkUpdatePlayerRecordsByKeyRequest;
}>, "mutationKey">, callback?: (data: BulkUpdatePlayerRecordByKeyResponseArray) => void) => UseMutationResult<BulkUpdatePlayerRecordByKeyResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: BulkUpdatePlayerRecordsByKeyRequest;
}>;
/**
 * Retrieve player record key and payload in bulk under given namespace. Maximum bulk key limit per request 20.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.RecordBulk_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_FetchRecordBulk_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    data: BulkGetPlayerRecordsRequest;
}, options?: Omit<UseQueryOptions<BulkGetAdminPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetAdminPlayerRecordResponse>) => void) => UseQueryResult<BulkGetAdminPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * This endpoints will create new player record or replace the existing player record in bulk. Maximum bulk key limit per request 10.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.RecordBulk_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_UpdateRecordBulk_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkUpdatePlayerRecordResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: BulkUpdatePlayerRecordsRequest;
}>, "mutationKey">, callback?: (data: BulkUpdatePlayerRecordResponseArray) => void) => UseMutationResult<BulkUpdatePlayerRecordResponseArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: BulkUpdatePlayerRecordsRequest;
}>;
/**
 * Delete a record (arbitrary JSON data) in user-level with given key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_DeleteRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>;
/**
 * Get a record in user-level (arbitrary JSON data) by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_GetRecord_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerRecordResponse>) => void) => UseQueryResult<PlayerRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new player record or append the existing player record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. is_public (default: false, type: bool) Indicate whether the player record is a public record or not. 3. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;is_public&#34;: true, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_CreateRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;
/**
 * ## Description This endpoints will create new player record or replace the existing player record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. set_by (default: CLIENT, type: string) Indicate which party that could modify the game record. SERVER: record can be modified by server only. CLIENT: record can be modified by client and server. 2. is_public (default: false, type: bool) Indicate whether the player record is a public record or not. 3. tags (default: *empty array*, type: array of string) Indicate the tagging for the game record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;set_by&#34;: &#34;SERVER&#34;, &#34;is_public&#34;: true, &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_UpdateRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;
/**
 * Get a size of the player record
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Size_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_GetSize_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerRecordSizeResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerRecordSizeResponse>) => void) => UseQueryResult<PlayerRecordSizeResponse, AxiosError<ApiError>>;
/**
 * Delete player public record. ## Warning: This endpoint is going to deprecate This endpoint is going to deprecate in the future please don&#39;t use it. For alternative, please use these endpoints: - **POST /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **PUT /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **DELETE /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_DeletePublic_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>;
/**
 * Get a record in user-level (arbitrary JSON data) by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_GetPublic_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerRecordResponse>) => void) => UseQueryResult<PlayerRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new player public record or append the existing player public record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Warning: This endpoint is going to deprecate This endpoint is going to deprecate in the future please don&#39;t use it. For alternative, please use these endpoints: - **POST /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **PUT /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **DELETE /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_CreatePublic_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;
/**
 * ## Description This endpoints will create new player public record or replace the existing player public record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Warning: This endpoint is going to deprecate This endpoint is going to deprecate in the future please don&#39;t use it. For alternative, please use these endpoints: - **POST /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **PUT /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **DELETE /cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerRecordAdmin.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePlayerRecordAdminApi_UpdatePublic_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PluginConfigAdmin {
    Plugin = "Cloudsave.PluginConfigAdmin.Plugin",
    Plugins = "Cloudsave.PluginConfigAdmin.Plugins"
}
/**
 * ## Description This endpoints will delete grpc plugins configuration
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PluginConfigAdmin.Plugin, input]
 * }
 * ```
 */
declare const usePluginConfigAdminApi_DeletePluginMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * ## Description This endpoints will get grpc plugins configuration
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PluginConfigAdmin.Plugins, input]
 * }
 * ```
 */
declare const usePluginConfigAdminApi_GetPlugins: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PluginResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PluginResponse>) => void) => UseQueryResult<PluginResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will update grpc plugins configuration
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PluginConfigAdmin.Plugin, input]
 * }
 * ```
 */
declare const usePluginConfigAdminApi_PatchPluginMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PluginResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PluginRequest;
}>, "mutationKey">, callback?: (data: PluginResponse) => void) => UseMutationResult<PluginResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PluginRequest;
}>;
/**
 * ## Description This endpoints will create new grpc plugins configuration per namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PluginConfigAdmin.Plugin, input]
 * }
 * ```
 */
declare const usePluginConfigAdminApi_CreatePluginMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PluginResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PluginRequest;
}>, "mutationKey">, callback?: (data: PluginResponse) => void) => UseMutationResult<PluginResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PluginRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_RecordAdmin {
    Adminrecords = "Cloudsave.RecordAdmin.Adminrecords",
    AdminrecordBulk = "Cloudsave.RecordAdmin.AdminrecordBulk",
    Adminrecord_ByKey = "Cloudsave.RecordAdmin.Adminrecord_ByKey",
    Adminrecords_ByUserId = "Cloudsave.RecordAdmin.Adminrecords_ByUserId",
    BulkUser_ByKey = "Cloudsave.RecordAdmin.BulkUser_ByKey",
    AdminrecordBulk_ByUserId = "Cloudsave.RecordAdmin.AdminrecordBulk_ByUserId",
    Adminrecord_ByUserId_ByKey = "Cloudsave.RecordAdmin.Adminrecord_ByUserId_ByKey"
}
/**
 * Retrieve list of records key by namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecords, input]
 * }
 * ```
 */
declare const useRecordAdminApi_GetAdminrecords: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListAdminGameRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListAdminGameRecordKeysResponse>) => void) => UseQueryResult<ListAdminGameRecordKeysResponse, AxiosError<ApiError>>;
/**
 * Bulk get admin game records. Maximum key per request 20.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.AdminrecordBulk, input]
 * }
 * ```
 */
declare const useRecordAdminApi_FetchAdminrecordBulk: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: BulkGetAdminGameRecordRequest;
}, options?: Omit<UseQueryOptions<BulkGetAdminGameRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetAdminGameRecordResponse>) => void) => UseQueryResult<BulkGetAdminGameRecordResponse, AxiosError<ApiError>>;
/**
 * This endpoints delete game record in namespace-level
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_DeleteAdminrecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * Get a record by its key in namespace-level.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_GetAdminrecord_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
}, options?: Omit<UseQueryOptions<AdminGameRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AdminGameRecordResponse>) => void) => UseQueryResult<AdminGameRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new admin game record or append the existing admin game record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. tags (default: *empty array*, type: array of string) Indicate the tagging for the admin record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_CreateAdminrecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AdminGameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminGameRecordRequest;
}>, "mutationKey">, callback?: (data: AdminGameRecordResponse) => void) => UseMutationResult<AdminGameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminGameRecordRequest;
}>;
/**
 * ## Description This endpoints will create new admin game record or replace the existing admin game record. **Append example:** Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. tags (default: *empty array*, type: array of string) Indicate the tagging for the admin record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_UpdateAdminrecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AdminGameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminGameRecordRequest;
}>, "mutationKey">, callback?: (data: AdminGameRecordResponse) => void) => UseMutationResult<AdminGameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: AdminGameRecordRequest;
}>;
/**
 * Retrieve list of admin player records key and userID under given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecords_ByUserId, input]
 * }
 * ```
 */
declare const useRecordAdminApi_GetAdminrecords_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListAdminPlayerRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListAdminPlayerRecordKeysResponse>) => void) => UseQueryResult<ListAdminPlayerRecordKeysResponse, AxiosError<ApiError>>;
/**
 * Bulk get admin player record by userIds, max allowed 20 at a time.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.BulkUser_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_FetchBulkUser_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
    data: BulkUserIDsRequest;
}, options?: Omit<UseQueryOptions<BulkGetAdminPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetAdminPlayerRecordResponse>) => void) => UseQueryResult<BulkGetAdminPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * Bulk get admin player records. Maximum key per request 20.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.AdminrecordBulk_ByUserId, input]
 * }
 * ```
 */
declare const useRecordAdminApi_FetchAdminrecordBulk_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    data: BulkGetAdminPlayerRecordRequest;
}, options?: Omit<UseQueryOptions<BulkGetAdminPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetAdminPlayerRecordResponse>) => void) => UseQueryResult<BulkGetAdminPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * Delete a record (arbitrary JSON data) in user-level with given key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_DeleteAdminrecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>;
/**
 * Get a admin record in user-level (arbitrary JSON data) by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_GetAdminrecord_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<AdminPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AdminPlayerRecordResponse>) => void) => UseQueryResult<AdminPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new admin player record or append the existing admin game record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. tags (default: *empty array*, type: array of string) Indicate the tagging for the admin record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_CreateAdminrecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AdminPlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminPlayerRecordRequest;
}>, "mutationKey">, callback?: (data: AdminPlayerRecordResponse) => void) => UseMutationResult<AdminPlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminPlayerRecordRequest;
}>;
/**
 * ## Description This endpoints will create new admin player record or replace the existing admin player record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. tags (default: *empty array*, type: array of string) Indicate the tagging for the admin record. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;tags&#34;: [&#34;tag1&#34;, &#34;tag2&#34;] } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecordAdmin.Adminrecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useRecordAdminApi_UpdateAdminrecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AdminPlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminPlayerRecordRequest;
}>, "mutationKey">, callback?: (data: AdminPlayerRecordResponse) => void) => UseMutationResult<AdminPlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: AdminPlayerRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_TagsAdmin {
    Tags = "Cloudsave.TagsAdmin.Tags",
    Tag = "Cloudsave.TagsAdmin.Tag",
    Tag_ByTag = "Cloudsave.TagsAdmin.Tag_ByTag"
}
/**
 * ## Description Retrieve list of available tags by namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TagsAdmin.Tags, input]
 * }
 * ```
 */
declare const useTagsAdminApi_GetTags: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<ListTagsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListTagsResponse>) => void) => UseQueryResult<ListTagsResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoint will create new tags
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TagsAdmin.Tag, input]
 * }
 * ```
 */
declare const useTagsAdminApi_CreateTagMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TagRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TagRequest;
}>;
/**
 * ## Description This endpoint will delete tag by name
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TagsAdmin.Tag_ByTag, input]
 * }
 * ```
 */
declare const useTagsAdminApi_DeleteTag_ByTagMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    tag: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    tag: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_TtlConfigAdmin {
    Ttl_ByKey = "Cloudsave.TtlConfigAdmin.Ttl_ByKey",
    Ttl_ByKey_ByNS = "Cloudsave.TtlConfigAdmin.Ttl_ByKey_ByNS"
}
/**
 * ## Description This endpoints will delete the ttl config of the game record
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TtlConfigAdmin.Ttl_ByKey, input]
 * }
 * ```
 */
declare const useTtlConfigAdminApi_DeleteTtl_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * ## Description This endpoints will delete the ttl config of the game binary record
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TtlConfigAdmin.Ttl_ByKey_ByNS, input]
 * }
 * ```
 */
declare const useTtlConfigAdminApi_DeleteTtl_ByKey_ByNSMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_ConcurrentRecord {
    ConcurrentRecord_ByKey = "Cloudsave.ConcurrentRecord.ConcurrentRecord_ByKey",
    ConcurrentRecord_ByUserId_ByKey = "Cloudsave.ConcurrentRecord.ConcurrentRecord_ByUserId_ByKey",
    PublicConcurrent_ByUserId_ByKey = "Cloudsave.ConcurrentRecord.PublicConcurrent_ByUserId_ByKey"
}
/**
 * ## Description This endpoints will create new game record or replace the existing game record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecord.ConcurrentRecord_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordApi_UpdateConcurrentRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: ConcurrentRecordRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: ConcurrentRecordRequest;
}>;
/**
 * ## Description This endpoints will create new player record or replace the existing player record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecord.ConcurrentRecord_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: ConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PlayerRecordConcurrentUpdateResponse) => void) => UseMutationResult<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: ConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>;
/**
 * ## Description This endpoints will create new player public record or replace the existing player public record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Optimistic Concurrency Control This endpoint implement optimistic concurrency control to avoid race condition. If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) and client need to redo the operation (fetch data and do update). Otherwise, the server will process the request.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConcurrentRecord.PublicConcurrent_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const useConcurrentRecordApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: ConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PlayerRecordConcurrentUpdateResponse) => void) => UseMutationResult<PlayerRecordConcurrentUpdateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: ConcurrentRecordRequest;
    queryParams?: {
        responseBody?: boolean | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PublicGameBinaryRecord {
    Binaries = "Cloudsave.PublicGameBinaryRecord.Binaries",
    Binary = "Cloudsave.PublicGameBinaryRecord.Binary",
    BinaryBulk = "Cloudsave.PublicGameBinaryRecord.BinaryBulk",
    Binary_ByKey = "Cloudsave.PublicGameBinaryRecord.Binary_ByKey",
    Presigned_ByKey = "Cloudsave.PublicGameBinaryRecord.Presigned_ByKey"
}
/**
 * Retrieve list of binary records by namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.Binaries, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_GetBinaries: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListGameBinaryRecordsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListGameBinaryRecordsResponse>) => void) => UseQueryResult<ListGameBinaryRecordsResponse, AxiosError<ApiError>>;
/**
 * Create a game binary record. Other detail info: `key` should follow these rules: 1. support uppercase and lowercase letters, numbers, and separators **&#34;-&#34;**, **&#34;_&#34;**, **&#34;.&#34;** are allowed 2. begin and end with letters or numbers 3. spaces are not allowed 4. separators must not appears twice in a row Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.Binary, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_CreateBinaryMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PublicGameBinaryRecordCreate;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PublicGameBinaryRecordCreate;
}>;
/**
 * Bulk get game binary records. Maximum key per request 20.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.BinaryBulk, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_CreateBinaryBulkMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkGetGameBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkGetGameRecordRequest;
}>, "mutationKey">, callback?: (data: BulkGetGameBinaryRecordResponse) => void) => UseMutationResult<BulkGetGameBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkGetGameRecordRequest;
}>;
/**
 * Delete a game binary record.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.Binary_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_DeleteBinary_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * Get a game binary record by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.Binary_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_GetBinary_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
}, options?: Omit<UseQueryOptions<GameBinaryRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameBinaryRecordResponse>) => void) => UseQueryResult<GameBinaryRecordResponse, AxiosError<ApiError>>;
/**
 * Update a game binary record file by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.Binary_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_UpdateBinary_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: BinaryRecordRequest;
}>, "mutationKey">, callback?: (data: GameBinaryRecordResponse) => void) => UseMutationResult<GameBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: BinaryRecordRequest;
}>;
/**
 * Request presigned URL to upload the binary record to s3. Other detail info: Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameBinaryRecord.Presigned_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameBinaryRecordApi_CreatePresigned_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: UploadBinaryRecordRequest;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: UploadBinaryRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PublicGameRecord {
    RecordBulk = "Cloudsave.PublicGameRecord.RecordBulk",
    Record_ByKey = "Cloudsave.PublicGameRecord.Record_ByKey"
}
/**
 * Bulk get game records. Maximum key per request 20.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameRecord.RecordBulk, input]
 * }
 * ```
 */
declare const usePublicGameRecordApi_FetchRecordBulk: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: BulkGetGameRecordRequest;
}, options?: Omit<UseQueryOptions<BulkGetGameRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetGameRecordResponse>) => void) => UseQueryResult<BulkGetGameRecordResponse, AxiosError<ApiError>>;
/**
 * Delete records by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameRecord.Record_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameRecordApi_DeleteRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * Get game record by its key.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameRecord.Record_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameRecordApi_GetRecord_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
}, options?: Omit<UseQueryOptions<GameRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameRecordResponse>) => void) => UseQueryResult<GameRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new game record or append the existing game record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameRecord.Record_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameRecordApi_CreateRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>, "mutationKey">, callback?: (data: GameRecordResponse) => void) => UseMutationResult<GameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>;
/**
 * ## Description This endpoints will create new game record or replace the existing game record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicGameRecord.Record_ByKey, input]
 * }
 * ```
 */
declare const usePublicGameRecordApi_UpdateRecord_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>, "mutationKey">, callback?: (data: GameRecordResponse) => void) => UseMutationResult<GameRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
    data: GameRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PublicPlayerBinaryRecord {
    UsersMeBinaries = "Cloudsave.PublicPlayerBinaryRecord.UsersMeBinaries",
    UserMeBinaryBulk = "Cloudsave.PublicPlayerBinaryRecord.UserMeBinaryBulk",
    Binary_ByUserId = "Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId",
    Binary_ByUserId_ByKey = "Cloudsave.PublicPlayerBinaryRecord.Binary_ByUserId_ByKey",
    BinariesPublic_ByUserId = "Cloudsave.PublicPlayerBinaryRecord.BinariesPublic_ByUserId",
    PublicBulkUser_ByKey = "Cloudsave.PublicPlayerBinaryRecord.PublicBulkUser_ByKey",
    BinaryBulk_ByUserId = "Cloudsave.PublicPlayerBinaryRecord.BinaryBulk_ByUserId",
    Public_ByUserId_ByKey = "Cloudsave.PublicPlayerBinaryRecord.Public_ByUserId_ByKey",
    Metadata_ByUserId_ByKey = "Cloudsave.PublicPlayerBinaryRecord.Metadata_ByUserId_ByKey",
    Presigned_ByUserId_ByKey = "Cloudsave.PublicPlayerBinaryRecord.Presigned_ByUserId_ByKey"
}
/**
 * Retrieve list of my binary records by namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.UsersMeBinaries, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_GetUsersMeBinaries: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        query?: string | null;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListPlayerBinaryRecordsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerBinaryRecordsResponse>) => void) => UseQueryResult<ListPlayerBinaryRecordsResponse, AxiosError<ApiError>>;
/**
 * Retrieve player record key and payload in bulk under given namespace. Maximum bulk key limit per request 20
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.UserMeBinaryBulk, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_CreateUserMeBinaryBulkMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkGetPlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkGetPlayerRecordsRequest;
}>, "mutationKey">, callback?: (data: BulkGetPlayerBinaryRecordResponse) => void) => UseMutationResult<BulkGetPlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkGetPlayerRecordsRequest;
}>;
/**
 * Create a player binary record. Other detail info: `key` should follow these rules: 1. support uppercase and lowercase letters, numbers, and separators **&#34;-&#34;**, **&#34;_&#34;**, **&#34;.&#34;** are allowed 2. begin and end with letters or numbers 3. spaces are not allowed 4. separators must not appears twice in a row Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Binary_ByUserId, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_CreateBinary_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PublicPlayerBinaryRecordCreate;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PublicPlayerBinaryRecordCreate;
}>;
/**
 * Delete a player binary record. Only player who own the record can delete it
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Binary_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_DeleteBinary_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>;
/**
 * Get a player binary record by its key. **Private Record**: Only user who own the record could retrieve it.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Binary_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_GetBinary_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerBinaryRecordResponse>) => void) => UseQueryResult<PlayerBinaryRecordResponse, AxiosError<ApiError>>;
/**
 * Update a player binary record file by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Binary_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_UpdateBinary_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: BinaryRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerBinaryRecordResponse) => void) => UseMutationResult<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: BinaryRecordRequest;
}>;
/**
 * Retrieve list of other player public binary records under given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.BinariesPublic_ByUserId, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_GetBinariesPublic_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListPlayerBinaryRecordsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerBinaryRecordsResponse>) => void) => UseQueryResult<ListPlayerBinaryRecordsResponse, AxiosError<ApiError>>;
/**
 * Bulk get other player&#39;s public binary record by userIds, max allowed 20 at a time. Only record with `isPublic=true` can be retrieved using this endpoint.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.PublicBulkUser_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_FetchPublicBulkUser_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
    data: BulkUserIDsRequest;
}, options?: Omit<UseQueryOptions<BulkGetPlayerBinaryRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetPlayerBinaryRecordResponse>) => void) => UseQueryResult<BulkGetPlayerBinaryRecordResponse, AxiosError<ApiError>>;
/**
 * Retrieve other player public binary record in bulk under given namespace. Maximum bulk key limit per request 20
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.BinaryBulk_ByUserId, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_FetchBinaryBulk_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    data: BulkGetPlayerRecordsRequest;
}, options?: Omit<UseQueryOptions<BulkGetPlayerBinaryRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetPlayerBinaryRecordResponse>) => void) => UseQueryResult<BulkGetPlayerBinaryRecordResponse, AxiosError<ApiError>>;
/**
 * Get other player&#39;s public binary record. Only record with `isPublic=true` can be retrieved using this endpoint.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_GetPublic_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerBinaryRecordResponse>) => void) => UseQueryResult<PlayerBinaryRecordResponse, AxiosError<ApiError>>;
/**
 * Update a player binary record metadata by its key
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Metadata_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_UpdateMetadata_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerBinaryRecordMetadataPublicRequest;
}>, "mutationKey">, callback?: (data: PlayerBinaryRecordResponse) => void) => UseMutationResult<PlayerBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerBinaryRecordMetadataPublicRequest;
}>;
/**
 * Request presigned URL to upload the binary record to s3. Other detail info: Supported file types: jpeg, jpg, png, bmp, gif, mp3, webp, and bin.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerBinaryRecord.Presigned_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerBinaryRecordApi_CreatePresigned_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: UploadBinaryRecordRequest;
}>, "mutationKey">, callback?: (data: UploadBinaryRecordResponse) => void) => UseMutationResult<UploadBinaryRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: UploadBinaryRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PublicPlayerRecord {
    UsersMeRecords = "Cloudsave.PublicPlayerRecord.UsersMeRecords",
    UserMeRecordBulk = "Cloudsave.PublicPlayerRecord.UserMeRecordBulk",
    Record_ByUserId_ByKey = "Cloudsave.PublicPlayerRecord.Record_ByUserId_ByKey",
    RecordsPublic_ByUserId = "Cloudsave.PublicPlayerRecord.RecordsPublic_ByUserId",
    PublicMeUser_ByKey = "Cloudsave.PublicPlayerRecord.PublicMeUser_ByKey",
    PublicBulkUser_ByKey = "Cloudsave.PublicPlayerRecord.PublicBulkUser_ByKey",
    RecordBulk_ByUserId = "Cloudsave.PublicPlayerRecord.RecordBulk_ByUserId",
    Public_ByUserId_ByKey = "Cloudsave.PublicPlayerRecord.Public_ByUserId_ByKey"
}
/**
 * Retrieve list of player records key under given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.UsersMeRecords, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_GetUsersMeRecords: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListPlayerRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerRecordKeysResponse>) => void) => UseQueryResult<ListPlayerRecordKeysResponse, AxiosError<ApiError>>;
/**
 * Retrieve player record key and payload in bulk under given namespace. Maximum bulk key limit per request 20
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.UserMeRecordBulk, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_CreateUserMeRecordBulkMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkGetPlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkGetPlayerRecordsRequest;
}>, "mutationKey">, callback?: (data: BulkGetPlayerRecordResponse) => void) => UseMutationResult<BulkGetPlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkGetPlayerRecordsRequest;
}>;
/**
 * Delete player record by its key. Only user that own the player record could delete it.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_DeleteRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
}>;
/**
 * Get player record by its key. **Private Record**: Only user that own the player record could retrieve it.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_GetRecord_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerRecordResponse>) => void) => UseQueryResult<PlayerRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new player record or append the existing player record. Only user that own the existing player record could modify. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. is_public (default: false, type: bool) Indicate whether the player record is a public record or not. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;is_public&#34;: true } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_CreateRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;
/**
 * ## Description This endpoints will create new player record or replace the existing player record. Only user that own the existing player record could modify it. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Record Metadata Metadata allows user to define the behaviour of the record. Metadata can be defined in request body with field name **__META**. When creating record, if **__META** field is not defined, the metadata value will use the default value. When updating record, if **__META** field is not defined, the existing metadata value will stay as is. **Metadata List:** 1. is_public (default: false, type: bool) Indicate whether the player record is a public record or not. **Request Body Example:** ``` { &#34;__META&#34;: { &#34;is_public&#34;: true } ... } ```
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Record_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_UpdateRecord_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;
/**
 * Retrieve list of other public player records key under given namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.RecordsPublic_ByUserId, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_GetRecordsPublic_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
        tags?: string[];
    };
}, options?: Omit<UseQueryOptions<ListPlayerRecordKeysResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListPlayerRecordKeysResponse>) => void) => UseQueryResult<ListPlayerRecordKeysResponse, AxiosError<ApiError>>;
/**
 * Delete player public record. ## Warning: This endpoint is going to deprecate This endpoint is going to deprecate in the future please don&#39;t use it. For alternative, please use these endpoints: - **POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.PublicMeUser_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_DeletePublicMeUser_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    key: string;
}>;
/**
 * Bulk get other player&#39;s record that is public by userIds, max allowed 20 at a time. Only record with `isPublic=true` that can be retrieved using this endpoint.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.PublicBulkUser_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_FetchPublicBulkUser_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    key: string;
    data: BulkUserIDsRequest;
}, options?: Omit<UseQueryOptions<BulkGetPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetPlayerRecordResponse>) => void) => UseQueryResult<BulkGetPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * Retrieve other player public record key and payload in bulk under given namespace. Maximum bulk key limit per request 20
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.RecordBulk_ByUserId, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_FetchRecordBulk_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    data: BulkGetPlayerRecordsRequest;
}, options?: Omit<UseQueryOptions<BulkGetPlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BulkGetPlayerRecordResponse>) => void) => UseQueryResult<BulkGetPlayerRecordResponse, AxiosError<ApiError>>;
/**
 * Get other player&#39;s record that is public. Only record with `isPublic=true` that can be retrieved using this endpoint.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_GetPublic_ByUserId_ByKey: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    key: string;
}, options?: Omit<UseQueryOptions<PlayerRecordResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerRecordResponse>) => void) => UseQueryResult<PlayerRecordResponse, AxiosError<ApiError>>;
/**
 * ## Description This endpoints will create new player public record or append the existing player public record. **Append example:** Example 1 - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }` Example 2 - Existing JSON: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }` - Result: `{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Warning: This endpoint is going to deprecate This endpoint is going to deprecate in the future please don&#39;t use it. For alternative, please use these endpoints: - **POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_CreatePublic_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;
/**
 * ## Description This endpoints will create new player public record or replace the existing player public record. **Replace behaviour:** The existing value will be replaced completely with the new value. Example - Existing JSON: `{ &#34;data1&#34;: &#34;value&#34; }` - New JSON: `{ &#34;data2&#34;: &#34;new value&#34; }` - Result: `{ &#34;data2&#34;: &#34;new value&#34; }` ## Restriction This is the restriction of Key Naming for the record: 1. Cannot use **&#34;.&#34;** as the key name - `{ &#34;data.2&#34;: &#34;value&#34; }` 2. Cannot use **&#34;$&#34;** as the prefix in key names - `{ &#34;$data&#34;: &#34;value&#34; }` 3. Cannot use empty string in key names - `{ &#34;&#34;: &#34;value&#34; }` ## Reserved Word Reserved Word List: **__META** The reserved word cannot be used as a field in record value, If still defining the field when creating or updating the record, it will be ignored. ## Warning: This endpoint is going to deprecate This endpoint is going to deprecate in the future please don&#39;t use it. For alternative, please use these endpoints: - **POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}** and utilizing **__META** functionality - **DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}**
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicPlayerRecord.Public_ByUserId_ByKey, input]
 * }
 * ```
 */
declare const usePublicPlayerRecordApi_UpdatePublic_ByUserId_ByKeyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>, "mutationKey">, callback?: (data: PlayerRecordResponse) => void) => UseMutationResult<PlayerRecordResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    key: string;
    data: PlayerRecordRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PublicTags {
    Tags = "Cloudsave.PublicTags.Tags"
}
/**
 * ## Description Retrieve list of available tags by namespace
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PublicTags.Tags, input]
 * }
 * ```
 */
declare const usePublicTagsApi_GetTags: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<ListTagsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListTagsResponse>) => void) => UseQueryResult<ListTagsResponse, AxiosError<ApiError>>;

export { Key_ConcurrentRecord, Key_ConcurrentRecordAdmin, Key_GameBinaryRecordAdmin, Key_GameRecordAdmin, Key_PlayerBinaryRecordAdmin, Key_PlayerRecordAdmin, Key_PluginConfigAdmin, Key_PublicGameBinaryRecord, Key_PublicGameRecord, Key_PublicPlayerBinaryRecord, Key_PublicPlayerRecord, Key_PublicTags, Key_RecordAdmin, Key_TagsAdmin, Key_TtlConfigAdmin, useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByKeyMutation, useConcurrentRecordAdminApi_UpdateConcurrentAdminrecord_ByUserId_ByKeyMutation, useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByKeyMutation, useConcurrentRecordAdminApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation, useConcurrentRecordAdminApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation, useConcurrentRecordApi_UpdateConcurrentRecord_ByKeyMutation, useConcurrentRecordApi_UpdateConcurrentRecord_ByUserId_ByKeyMutation, useConcurrentRecordApi_UpdatePublicConcurrent_ByUserId_ByKeyMutation, useGameBinaryRecordAdminApi_CreateBinaryMutation, useGameBinaryRecordAdminApi_CreatePresigned_ByKeyMutation, useGameBinaryRecordAdminApi_DeleteBinary_ByKeyMutation, useGameBinaryRecordAdminApi_GetBinaries, useGameBinaryRecordAdminApi_GetBinary_ByKey, useGameBinaryRecordAdminApi_UpdateBinary_ByKeyMutation, useGameBinaryRecordAdminApi_UpdateMetadata_ByKeyMutation, useGameRecordAdminApi_CreateRecord_ByKeyMutation, useGameRecordAdminApi_DeleteRecord_ByKeyMutation, useGameRecordAdminApi_GetRecord_ByKey, useGameRecordAdminApi_GetRecords, useGameRecordAdminApi_UpdateRecord_ByKeyMutation, usePlayerBinaryRecordAdminApi_CreateBinary_ByUserIdMutation, usePlayerBinaryRecordAdminApi_CreatePresigned_ByUserId_ByKeyMutation, usePlayerBinaryRecordAdminApi_DeleteBinary_ByUserId_ByKeyMutation, usePlayerBinaryRecordAdminApi_GetBinaries_ByUserId, usePlayerBinaryRecordAdminApi_GetBinary_ByUserId_ByKey, usePlayerBinaryRecordAdminApi_UpdateBinary_ByUserId_ByKeyMutation, usePlayerBinaryRecordAdminApi_UpdateMetadata_ByUserId_ByKeyMutation, usePlayerRecordAdminApi_CreatePublic_ByUserId_ByKeyMutation, usePlayerRecordAdminApi_CreateRecord_ByUserId_ByKeyMutation, usePlayerRecordAdminApi_DeletePublic_ByUserId_ByKeyMutation, usePlayerRecordAdminApi_DeleteRecord_ByUserId_ByKeyMutation, usePlayerRecordAdminApi_FetchBulkUser_ByKey, usePlayerRecordAdminApi_FetchRecordBulk_ByUserId, usePlayerRecordAdminApi_FetchUserBulkRecordSize, usePlayerRecordAdminApi_GetPublic_ByUserId_ByKey, usePlayerRecordAdminApi_GetRecord_ByUserId_ByKey, usePlayerRecordAdminApi_GetRecords_ByUserId, usePlayerRecordAdminApi_GetSize_ByUserId_ByKey, usePlayerRecordAdminApi_GetUsersRecords, usePlayerRecordAdminApi_UpdateBulkUser_ByKeyMutation, usePlayerRecordAdminApi_UpdatePublic_ByUserId_ByKeyMutation, usePlayerRecordAdminApi_UpdateRecordBulk_ByUserIdMutation, usePlayerRecordAdminApi_UpdateRecord_ByUserId_ByKeyMutation, usePluginConfigAdminApi_CreatePluginMutation, usePluginConfigAdminApi_DeletePluginMutation, usePluginConfigAdminApi_GetPlugins, usePluginConfigAdminApi_PatchPluginMutation, usePublicGameBinaryRecordApi_CreateBinaryBulkMutation, usePublicGameBinaryRecordApi_CreateBinaryMutation, usePublicGameBinaryRecordApi_CreatePresigned_ByKeyMutation, usePublicGameBinaryRecordApi_DeleteBinary_ByKeyMutation, usePublicGameBinaryRecordApi_GetBinaries, usePublicGameBinaryRecordApi_GetBinary_ByKey, usePublicGameBinaryRecordApi_UpdateBinary_ByKeyMutation, usePublicGameRecordApi_CreateRecord_ByKeyMutation, usePublicGameRecordApi_DeleteRecord_ByKeyMutation, usePublicGameRecordApi_FetchRecordBulk, usePublicGameRecordApi_GetRecord_ByKey, usePublicGameRecordApi_UpdateRecord_ByKeyMutation, usePublicPlayerBinaryRecordApi_CreateBinary_ByUserIdMutation, usePublicPlayerBinaryRecordApi_CreatePresigned_ByUserId_ByKeyMutation, usePublicPlayerBinaryRecordApi_CreateUserMeBinaryBulkMutation, usePublicPlayerBinaryRecordApi_DeleteBinary_ByUserId_ByKeyMutation, usePublicPlayerBinaryRecordApi_FetchBinaryBulk_ByUserId, usePublicPlayerBinaryRecordApi_FetchPublicBulkUser_ByKey, usePublicPlayerBinaryRecordApi_GetBinariesPublic_ByUserId, usePublicPlayerBinaryRecordApi_GetBinary_ByUserId_ByKey, usePublicPlayerBinaryRecordApi_GetPublic_ByUserId_ByKey, usePublicPlayerBinaryRecordApi_GetUsersMeBinaries, usePublicPlayerBinaryRecordApi_UpdateBinary_ByUserId_ByKeyMutation, usePublicPlayerBinaryRecordApi_UpdateMetadata_ByUserId_ByKeyMutation, usePublicPlayerRecordApi_CreatePublic_ByUserId_ByKeyMutation, usePublicPlayerRecordApi_CreateRecord_ByUserId_ByKeyMutation, usePublicPlayerRecordApi_CreateUserMeRecordBulkMutation, usePublicPlayerRecordApi_DeletePublicMeUser_ByKeyMutation, usePublicPlayerRecordApi_DeleteRecord_ByUserId_ByKeyMutation, usePublicPlayerRecordApi_FetchPublicBulkUser_ByKey, usePublicPlayerRecordApi_FetchRecordBulk_ByUserId, usePublicPlayerRecordApi_GetPublic_ByUserId_ByKey, usePublicPlayerRecordApi_GetRecord_ByUserId_ByKey, usePublicPlayerRecordApi_GetRecordsPublic_ByUserId, usePublicPlayerRecordApi_GetUsersMeRecords, usePublicPlayerRecordApi_UpdatePublic_ByUserId_ByKeyMutation, usePublicPlayerRecordApi_UpdateRecord_ByUserId_ByKeyMutation, usePublicTagsApi_GetTags, useRecordAdminApi_CreateAdminrecord_ByKeyMutation, useRecordAdminApi_CreateAdminrecord_ByUserId_ByKeyMutation, useRecordAdminApi_DeleteAdminrecord_ByKeyMutation, useRecordAdminApi_DeleteAdminrecord_ByUserId_ByKeyMutation, useRecordAdminApi_FetchAdminrecordBulk, useRecordAdminApi_FetchAdminrecordBulk_ByUserId, useRecordAdminApi_FetchBulkUser_ByKey, useRecordAdminApi_GetAdminrecord_ByKey, useRecordAdminApi_GetAdminrecord_ByUserId_ByKey, useRecordAdminApi_GetAdminrecords, useRecordAdminApi_GetAdminrecords_ByUserId, useRecordAdminApi_UpdateAdminrecord_ByKeyMutation, useRecordAdminApi_UpdateAdminrecord_ByUserId_ByKeyMutation, useTagsAdminApi_CreateTagMutation, useTagsAdminApi_DeleteTag_ByTagMutation, useTagsAdminApi_GetTags, useTtlConfigAdminApi_DeleteTtl_ByKeyMutation, useTtlConfigAdminApi_DeleteTtl_ByKey_ByNSMutation };
