import {
  AchievementInfo,
  AchievementPlatformAdmin$,
  AchievementPlatformAdminApi,
  Action,
  AdditionalData,
  AdyenConfig,
  AliPayConfig,
  AnonymizationAdmin$,
  AnonymizationAdminApi,
  AppConfig,
  AppEntitlementInfo,
  AppEntitlementPagingSlicedResult,
  AppInfo,
  AppLocalization,
  AppleIapConfigInfo,
  AppleIapConfigVersionInfo,
  AvailableComparison,
  AvailablePredicate,
  AvailablePredicateArray,
  AvailablePrice,
  BaseTlsConfig,
  BasicCategoryInfo,
  BasicCategoryInfoArray,
  BasicItem,
  BasicItemArray,
  BillingAccount,
  BillingHistoryInfo,
  BillingHistoryPagingSlicedResult,
  BinarySchema,
  BoxItem,
  BulkCreditResult,
  BulkDebitResult,
  BulkEntitlementGrantResult,
  BulkEntitlementRevokeResult,
  BulkOperationResult,
  BundledItemInfo,
  CampaignAdmin$,
  CampaignAdminApi,
  CampaignBatchNameInfo,
  CampaignBatchNameInfoArray,
  CampaignDynamicInfo,
  CampaignIfc,
  CampaignInfo,
  CampaignPagingSlicedResult,
  CatalogChangeInfo,
  CatalogChangePagingResult,
  CatalogChangeStatistics,
  CatalogChangesAdmin$,
  CatalogChangesAdminApi,
  CatalogConfigInfo,
  CatalogDefinitionInfo,
  CatalogDefinitionInfoArray,
  Category$,
  CategoryAdmin$,
  CategoryAdminApi,
  CategoryApi,
  CategoryInfo,
  CategoryInfoArray,
  CheckoutConfig,
  ClawbackAdmin$,
  ClawbackAdminApi,
  ClawbackInfo,
  ClientRequestParameter,
  CodeCreateResult,
  CodeInfo,
  CodeInfoPagingSlicedResult,
  ConditionGroup,
  ConditionGroupValidateResult,
  ConditionMatchResult,
  ConsumableEntitlementRevocationConfig,
  ConsumeItem,
  CreditPayload,
  CreditRequest,
  CreditResult,
  CreditRevocation,
  CreditSummary,
  Currency$,
  CurrencyAdmin$,
  CurrencyAdminApi,
  CurrencyApi,
  CurrencyConfig,
  CurrencyInfo,
  CurrencyInfoArray,
  CurrencySummary,
  CurrencyWallet,
  CurrencyWalletArray,
  Customization,
  DebitByCurrencyCodeRequest,
  DebitPayload,
  DebitResult,
  DeductionDetail,
  DetailedWalletTransactionInfo,
  DetailedWalletTransactionPagingSlicedResult,
  DiscountCategory,
  DiscountCodeDeductionDetail,
  DiscountCodeInfo,
  DiscountConfig,
  DiscountItem,
  Dlc$,
  DlcAdmin$,
  DlcAdminApi,
  DlcApi,
  DlcConfigRewardShortInfo,
  DlcItem,
  DlcItemConfigInfo,
  DlcRecord,
  DurableEntitlementRevocationConfig,
  Entitlement$,
  EntitlementAdmin$,
  EntitlementAdminApi,
  EntitlementApi,
  EntitlementConfigInfo,
  EntitlementDecrementResult,
  EntitlementGrant,
  EntitlementGrantResult,
  EntitlementHistoryInfo,
  EntitlementHistoryInfoArray,
  EntitlementIfc,
  EntitlementInfo,
  EntitlementInfoArray,
  EntitlementLootBoxReward,
  EntitlementOriginSyncResult,
  EntitlementOwnership,
  EntitlementOwnershipArray,
  EntitlementPagingSlicedResult,
  EntitlementPlatformConfigInfo,
  EntitlementPrechekResult,
  EntitlementRevocation,
  EntitlementRevocationConfig,
  EntitlementRevokeResult,
  EntitlementSoldResult,
  EntitlementSplitResult,
  EntitlementSummary,
  EntitlementTransferResult,
  EpicGamesIapConfigInfo,
  EpicGamesReconcileResult,
  EpicGamesReconcileResultArray,
  EstimatedPriceInfo,
  EstimatedPriceInfoArray,
  ExtensionFulfillmentSummary,
  FixedPeriodRotationConfig,
  FulFillItemPayload,
  FulfillBundledItemResult,
  FulfillItemResult,
  Fulfillment$,
  FulfillmentActionHistory,
  FulfillmentAdmin$,
  FulfillmentAdminApi,
  FulfillmentApi,
  FulfillmentError,
  FulfillmentHistoryInfo,
  FulfillmentHistoryPagingSlicedResult,
  FulfillmentInfo,
  FulfillmentItem,
  FulfillmentItemArray,
  FulfillmentPagingSlicedResult,
  FulfillmentResult,
  FulfillmentScriptAdmin$,
  FulfillmentScriptAdminApi,
  FulfillmentScriptInfo,
  FulfillmentScriptInfoArray,
  FulfillmentStateInfo,
  FulfillmentV2Result,
  FullAppInfo,
  FullCategoryInfo,
  FullCategoryInfoArray,
  FullItemInfo,
  FullItemInfoArray,
  FullItemPagingResult,
  FullItemPagingSlicedResult,
  FullSectionInfo,
  FullViewInfo,
  GoogleIapConfigInfo,
  GoogleReceiptResolveResult,
  GrpcServerInfo,
  HierarchicalCategoryInfo,
  HierarchicalCategoryInfoArray,
  Iap$,
  IapAdmin$,
  IapAdminApi,
  IapApi,
  IapClawbackPagingSlicedResult,
  IapConsumeHistoryInfo,
  IapConsumeHistoryPagingSlicedResult,
  IapItemConfigInfo,
  IapItemEntry,
  IapItemFlatEntry,
  IapItemMappingInfo,
  IapNotificationAdmin$,
  IapNotificationAdminApi,
  IapOrderInfo,
  IapOrderPagingSlicedResult,
  IapSubscription$,
  IapSubscriptionAdmin$,
  IapSubscriptionAdminApi,
  IapSubscriptionApi,
  Image,
  ImportErrorDetails,
  ImportStoreAppInfo,
  ImportStoreCategoryInfo,
  ImportStoreError,
  ImportStoreHistoryInfo,
  ImportStoreHistoryPagingResult,
  ImportStoreItemInfo,
  ImportStoreResult,
  ImportStoreSectionInfo,
  ImportStoreViewInfo,
  InventoryConfig,
  InvoiceAdmin$,
  InvoiceAdminApi,
  InvoiceCurrencySummary,
  InvoiceSummary,
  Item$,
  ItemAcquireResult,
  ItemAdmin$,
  ItemAdminApi,
  ItemApi,
  ItemDynamicDataInfo,
  ItemId,
  ItemIdArray,
  ItemInfo,
  ItemInfoArray,
  ItemNaming,
  ItemPagingSlicedResult,
  ItemPurchaseConditionValidateResult,
  ItemPurchaseConditionValidateResultArray,
  ItemRevocation,
  ItemSnapshot,
  ItemTypeConfigInfo,
  ItemTypeConfigInfoArray,
  KeyGroupAdmin$,
  KeyGroupAdminApi,
  KeyGroupDynamicInfo,
  KeyGroupInfo,
  KeyGroupPagingSlicedResult,
  KeyInfo,
  KeyPagingSliceResult,
  ListViewInfo,
  ListViewInfoArray,
  Localization,
  LootBoxConfig,
  LootBoxPluginConfigInfo,
  LootBoxReward,
  NeonPayConfig,
  NotificationPagingSlicedResult,
  NotificationProcessResult,
  OculusIapConfigInfo,
  OculusReconcileResult,
  OculusReconcileResultArray,
  Operation,
  OptionBoxConfig,
  Order,
  Order$,
  OrderAdmin$,
  OrderAdminApi,
  OrderApi,
  OrderBundleItemInfo,
  OrderCreationOptions,
  OrderDedicatedAdmin$,
  OrderDedicatedAdminApi,
  OrderDiscountPreviewResponse,
  OrderGrantInfo,
  OrderHistoryInfo,
  OrderHistoryInfoArray,
  OrderInfo,
  OrderPagingResult,
  OrderPagingSlicedResult,
  OrderStatistics,
  OrderSyncResult,
  Ownership,
  OwnershipToken,
  Paging,
  PayPalConfig,
  PaymentAccount,
  PaymentAccount$,
  PaymentAccountApi,
  PaymentAccountArray,
  PaymentAdmin$,
  PaymentAdminApi,
  PaymentCallbackConfigAdmin$,
  PaymentCallbackConfigAdminApi,
  PaymentCallbackConfigInfo,
  PaymentConfigAdmin$,
  PaymentConfigAdminApi,
  PaymentData,
  PaymentDedicatedAdmin$,
  PaymentDedicatedAdminApi,
  PaymentDomainWhitelistConfigInfo,
  PaymentMerchantConfigInfo,
  PaymentMethod,
  PaymentMethodArray,
  PaymentNotificationInfo,
  PaymentNotificationPagingSlicedResult,
  PaymentOrder,
  PaymentOrderChargeStatus,
  PaymentOrderCreateResult,
  PaymentOrderDetails,
  PaymentOrderInfo,
  PaymentOrderNeonPayConfig,
  PaymentOrderPagingSlicedResult,
  PaymentOrderPaidResult,
  PaymentOrderRefundResult,
  PaymentOrderSyncResult,
  PaymentProcessResult,
  PaymentProviderConfigInfo,
  PaymentProviderConfigPagingSlicedResult,
  PaymentStation$,
  PaymentStationApi,
  PaymentTaxConfigInfo,
  PaymentUrl,
  PlatformAccountClosureAdmin$,
  PlatformAccountClosureAdminApi,
  PlatformAccountClosureHistoryInfo,
  PlatformAccountClosureHistoryInfoArray,
  PlatformAdmin$,
  PlatformAdminApi,
  PlatformDlcConfigInfo,
  PlatformDlcEntry,
  PlatformOwnership,
  PlatformReward,
  PlatformRewardCurrency,
  PlatformRewardItem,
  PlatformWallet,
  PlatformWalletConfigInfo,
  PlayStationIapConfigInfo,
  PlayStationReconcileResult,
  PlayStationReconcileResultArray,
  PopulatedItemInfo,
  Predicate,
  PredicateValidateResult,
  PublicCustomConfigInfo,
  PublicEntitlementHistoryInfo,
  PurchaseCondition,
  PurchasedItemCount,
  Recurring,
  RecurringChargeResult,
  RedeemHistoryInfo,
  RedeemHistoryPagingSlicedResult,
  RedeemResult,
  RedeemableItem,
  RegionDataItem,
  RequestHistory,
  Requirement,
  RevocationAdmin$,
  RevocationAdminApi,
  RevocationConfigInfo,
  RevocationError,
  RevocationHistoryInfo,
  RevocationHistoryPagingSlicedResult,
  RevocationPluginConfigInfo,
  RevocationResult,
  RevokeCurrency,
  RevokeEntitlement,
  RevokeEntitlementPayload,
  RevokeEntry,
  RevokeFulfillmentV2Result,
  RevokeItem,
  RevokeItemSummary,
  RevokeResult,
  Reward$,
  RewardAdmin$,
  RewardAdminApi,
  RewardApi,
  RewardCondition,
  RewardInfo,
  RewardItem,
  RewardMigrationResult,
  RewardPagingSlicedResult,
  SaleConfig,
  Section$,
  SectionAdmin$,
  SectionAdminApi,
  SectionApi,
  SectionInfo,
  SectionInfoArray,
  SectionItem,
  SectionPagingSlicedResult,
  SectionPluginConfigInfo,
  ServicePluginConfigAdmin$,
  ServicePluginConfigAdminApi,
  ServicePluginConfigInfo,
  SessionPlatformAdmin$,
  SessionPlatformAdminApi,
  SimpleDlcRewardItem,
  SimpleEntitlement,
  SimpleUserDlc,
  SimpleUserDlcRewardContent,
  SimpleUserDlcRewardContentsResponse,
  SimpleWallet,
  Slide,
  StackableEntitlementInfo,
  StackableEntitlementInfoArray,
  SteamIapConfig,
  SteamIapConfigInfo,
  Store$,
  StoreAdmin$,
  StoreAdminApi,
  StoreApi,
  StoreBackupInfo,
  StoreInfo,
  StoreInfoArray,
  StripeConfig,
  SubItemAvailablePrice,
  Subscribable,
  Subscription$,
  SubscriptionActivityInfo,
  SubscriptionActivityPagingSlicedResult,
  SubscriptionAdmin$,
  SubscriptionAdminApi,
  SubscriptionApi,
  SubscriptionInfo,
  SubscriptionPagingSlicedResult,
  SubscriptionSummary,
  TaxResult,
  TestResult,
  ThirdPartySubscriptionOwnership,
  ThirdPartySubscriptionTransactionHistoryInfo,
  ThirdPartySubscriptionTransactionHistoryPagingSlicedResult,
  ThirdPartySubscriptionTransactionInfo,
  ThirdPartySubscriptionTransactionPagingSlicedResult,
  ThirdPartyUserSubscriptionInfo,
  ThirdPartyUserSubscriptionPagingSlicedResult,
  TicketAcquireResult,
  TicketAdmin$,
  TicketAdminApi,
  TicketBoothId,
  TicketDynamicInfo,
  TicketSaleIncrementResult,
  TimeLimitedBalance,
  TimedOwnership,
  TlsConfig,
  TradeActionAdmin$,
  TradeActionAdminApi,
  TradeActionPagingSlicedResult,
  TradeChainActionHistoryInfo,
  Transaction,
  TransactionAmountDetails,
  TwitchIapConfigInfo,
  TwitchSyncResult,
  TwitchSyncResultArray,
  UserDlc,
  UserDlcRecord,
  UserDlcRecordArray,
  UserEntitlementHistoryPagingSlicedResult,
  UserEntitlementHistoryPagingSlicedResultArray,
  View$,
  ViewAdmin$,
  ViewAdminApi,
  ViewApi,
  ViewInfo,
  ViewInfoArray,
  Wallet$,
  WalletAdmin$,
  WalletAdminApi,
  WalletApi,
  WalletInfo,
  WalletPagingSlicedResult,
  WalletRevocationConfig,
  WalletTransactionInfo,
  WalletTransactionPagingSlicedResult,
  WxPayConfigInfo,
  XblIapConfigInfo,
  XblReconcileResult,
  XblReconcileResultArray,
  XblUserAchievements,
  XsollaConfig,
  XsollaPaywallConfig
} from "./chunk-HBC3LCMM.js";

// src/generated-definitions/ActionRequest.ts
import { z as z2 } from "zod";

// src/generated-definitions/OperationRequest.ts
import { z } from "zod";
var OperationRequest = z.object({
  creditPayload: CreditPayload.nullish(),
  debitPayload: DebitPayload.nullish(),
  fulFillItemPayload: FulFillItemPayload.nullish(),
  revokeEntitlementPayload: RevokeEntitlementPayload.nullish(),
  type: z.enum(["CREDIT_WALLET", "DEBIT_WALLET", "FULFILL_ITEM", "REVOKE_ENTITLEMENT"]).nullish()
});

// src/generated-definitions/ActionRequest.ts
var ActionRequest = z2.object({ operations: z2.array(OperationRequest).nullish(), userId: z2.string().nullish() });

// src/generated-definitions/AdditionalDataEntitlement.ts
import { z as z4 } from "zod";

// src/generated-definitions/ClientTransaction.ts
import { z as z3 } from "zod";
var ClientTransaction = z3.object({ amountConsumed: z3.number().int().nullish(), clientTransactionId: z3.string().nullish() });

// src/generated-definitions/AdditionalDataEntitlement.ts
var AdditionalDataEntitlement = z4.object({
  clientTransaction: z4.array(ClientTransaction).nullish(),
  entitlementId: z4.string().nullish(),
  usageCount: z4.number().int().nullish()
});

// src/generated-definitions/AdminEntitlementDecrement.ts
import { z as z5 } from "zod";
var AdminEntitlementDecrement = z5.object({
  metadata: z5.record(z5.any()).nullish(),
  options: z5.array(z5.string()).nullish(),
  platform: z5.string().nullish(),
  requestId: z5.string().nullish(),
  useCount: z5.number().int().nullish()
});

// src/generated-definitions/AdminEntitlementSoldRequest.ts
import { z as z6 } from "zod";
var AdminEntitlementSoldRequest = z6.object({
  platform: z6.string().nullish(),
  requestId: z6.string().nullish(),
  useCount: z6.number().int().nullish()
});

// src/generated-definitions/AdminOrderCreate.ts
import { z as z7 } from "zod";
var AdminOrderCreate = z7.object({
  currencyCode: z7.string(),
  currencyNamespace: z7.string().nullish(),
  discountCodes: z7.array(z7.string()).nullish(),
  discountedPrice: z7.number().int(),
  entitlementPlatform: z7.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]).nullish(),
  ext: z7.record(z7.any()).nullish(),
  itemId: z7.string(),
  language: z7.string().nullish(),
  options: OrderCreationOptions.nullish(),
  platform: z7.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]).nullish(),
  price: z7.number().int().nullish(),
  quantity: z7.number().int(),
  region: z7.string(),
  returnUrl: z7.string().nullish(),
  sandbox: z7.boolean().nullish(),
  sectionId: z7.string().nullish()
});

// src/generated-definitions/AppleIapConfigRequest.ts
import { z as z8 } from "zod";
var AppleIapConfigRequest = z8.object({
  appAppleId: z8.number().int().nullish(),
  bundleId: z8.string(),
  issuerId: z8.string().nullish(),
  keyId: z8.string().nullish(),
  password: z8.string().nullish(),
  version: z8.enum(["V1", "V2"]).nullish()
});

// src/generated-definitions/AppleIapReceipt.ts
import { z as z9 } from "zod";
var AppleIapReceipt = z9.object({
  excludeOldTransactions: z9.boolean().nullish(),
  language: z9.string().nullish(),
  productId: z9.string(),
  receiptData: z9.string(),
  region: z9.string().nullish(),
  transactionId: z9.string()
});

// src/generated-definitions/AppleIapRequest.ts
import { z as z10 } from "zod";
var AppleIapRequest = z10.object({ transactionId: z10.string() });

// src/generated-definitions/AppUpdate.ts
import { z as z11 } from "zod";
var AppUpdate = z11.object({
  carousel: z11.array(Slide).nullish(),
  developer: z11.string().nullish(),
  forumUrl: z11.string().nullish(),
  genres: z11.array(
    z11.enum([
      "Action",
      "Adventure",
      "Casual",
      "FreeToPlay",
      "Indie",
      "MassivelyMultiplayer",
      "RPG",
      "Racing",
      "Simulation",
      "Sports",
      "Strategy"
    ])
  ).nullish(),
  localizations: z11.record(AppLocalization).nullish(),
  platformRequirements: z11.record(z11.array(Requirement)).nullish(),
  platforms: z11.array(z11.enum(["Android", "IOS", "Linux", "MacOS", "Windows"])).nullish(),
  players: z11.array(z11.enum(["Coop", "CrossPlatformMulti", "LocalCoop", "MMO", "Multi", "Single"])).nullish(),
  primaryGenre: z11.enum([
    "Action",
    "Adventure",
    "Casual",
    "FreeToPlay",
    "Indie",
    "MassivelyMultiplayer",
    "RPG",
    "Racing",
    "Simulation",
    "Sports",
    "Strategy"
  ]).nullish(),
  publisher: z11.string().nullish(),
  releaseDate: z11.string().nullish(),
  websiteUrl: z11.string().nullish()
});

// src/generated-definitions/BaseCustomConfig.ts
import { z as z12 } from "zod";
var BaseCustomConfig = z12.object({ connectionType: z12.enum(["INSECURE", "TLS"]), grpcServerAddress: z12.string() });

// src/generated-definitions/BulkCreditRequest.ts
import { z as z13 } from "zod";
var BulkCreditRequest = z13.object({
  creditRequest: CreditRequest.nullish(),
  currencyCode: z13.string().nullish(),
  userIds: z13.array(z13.string()).nullish()
});

// src/generated-definitions/BulkDebitRequest.ts
import { z as z14 } from "zod";
var BulkDebitRequest = z14.object({
  currencyCode: z14.string().nullish(),
  request: DebitByCurrencyCodeRequest.nullish(),
  userIds: z14.array(z14.string()).nullish()
});

// src/generated-definitions/BulkEntitlementGrantRequest.ts
import { z as z15 } from "zod";
var BulkEntitlementGrantRequest = z15.object({
  entitlementGrantList: z15.array(EntitlementGrant).nullish(),
  userIds: z15.array(z15.string()).nullish()
});

// src/generated-definitions/BulkRegionDataChangeRequest.ts
import { z as z17 } from "zod";

// src/generated-definitions/RegionDataChange.ts
import { z as z16 } from "zod";
var RegionDataChange = z16.object({
  itemIdentities: z16.array(z16.string()).nullish(),
  itemIdentityType: z16.enum(["ITEM_ID", "ITEM_SKU"]),
  regionData: z16.record(z16.array(RegionDataItem)).nullish()
});

// src/generated-definitions/BulkRegionDataChangeRequest.ts
var BulkRegionDataChangeRequest = z17.object({ changes: z17.array(RegionDataChange).nullish() });

// src/generated-definitions/CampaignBatchNameChange.ts
import { z as z18 } from "zod";
var CampaignBatchNameChange = z18.object({ newName: z18.string().nullish(), oldName: z18.string().nullish() });

// src/generated-definitions/CampaignCreate.ts
import { z as z19 } from "zod";
var CampaignCreate = z19.object({
  description: z19.string().nullish(),
  discountConfig: DiscountConfig.nullish(),
  items: z19.array(RedeemableItem).nullish(),
  maxRedeemCountPerCampaignPerUser: z19.number().int().nullish(),
  maxRedeemCountPerCode: z19.number().int().nullish(),
  maxRedeemCountPerCodePerUser: z19.number().int().nullish(),
  maxSaleCount: z19.number().int().nullish(),
  name: z19.string(),
  redeemEnd: z19.string().nullish(),
  redeemStart: z19.string().nullish(),
  redeemType: z19.enum(["DISCOUNT", "ITEM"]).nullish(),
  status: z19.enum(["ACTIVE", "INACTIVE"]).nullish(),
  tags: z19.array(z19.string()).nullish(),
  type: z19.enum(["REDEMPTION"]).nullish()
});

// src/generated-definitions/CampaignUpdate.ts
import { z as z20 } from "zod";
var CampaignUpdate = z20.object({
  description: z20.string().nullish(),
  discountConfig: DiscountConfig.nullish(),
  items: z20.array(RedeemableItem).nullish(),
  maxRedeemCountPerCampaignPerUser: z20.number().int().nullish(),
  maxRedeemCountPerCode: z20.number().int().nullish(),
  maxRedeemCountPerCodePerUser: z20.number().int().nullish(),
  maxSaleCount: z20.number().int().nullish(),
  name: z20.string(),
  redeemEnd: z20.string().nullish(),
  redeemStart: z20.string().nullish(),
  redeemType: z20.enum(["DISCOUNT", "ITEM"]).nullish(),
  status: z20.enum(["ACTIVE", "INACTIVE"]).nullish(),
  tags: z20.array(z20.string()).nullish()
});

// src/generated-definitions/CancelRequest.ts
import { z as z21 } from "zod";
var CancelRequest = z21.object({ immediate: z21.boolean().nullish(), reason: z21.string().nullish() });

// src/generated-definitions/CatalogConfigUpdate.ts
import { z as z22 } from "zod";
var CatalogConfigUpdate = z22.object({ enableInventoryCheck: z22.boolean() });

// src/generated-definitions/CategoryCreate.ts
import { z as z23 } from "zod";
var CategoryCreate = z23.object({ categoryPath: z23.string(), localizationDisplayNames: z23.record(z23.string()) });

// src/generated-definitions/CategoryUpdate.ts
import { z as z24 } from "zod";
var CategoryUpdate = z24.object({ localizationDisplayNames: z24.record(z24.string()) });

// src/generated-definitions/CodeCreate.ts
import { z as z25 } from "zod";
var CodeCreate = z25.object({
  batchName: z25.string().nullish(),
  codeValue: z25.string().nullish(),
  quantity: z25.number().int().nullish()
});

// src/generated-definitions/CurrencyCreate.ts
import { z as z26 } from "zod";
var CurrencyCreate = z26.object({
  currencyCode: z26.string(),
  currencySymbol: z26.string().nullish(),
  currencyType: z26.enum(["REAL", "VIRTUAL"]).nullish(),
  decimals: z26.number().int().nullish(),
  localizationDescriptions: z26.record(z26.string()).nullish()
});

// src/generated-definitions/CurrencyUpdate.ts
import { z as z27 } from "zod";
var CurrencyUpdate = z27.object({ localizationDescriptions: z27.record(z27.string()).nullish() });

// src/generated-definitions/DebitByWalletPlatformRequest.ts
import { z as z28 } from "zod";
var DebitByWalletPlatformRequest = z28.object({
  amount: z28.number().int(),
  debitBalanceSource: z28.enum(["DLC_REVOCATION", "EXPIRATION", "IAP_REVOCATION", "ORDER_REVOCATION", "OTHER", "PAYMENT", "TRADE"]).nullish(),
  metadata: z28.record(z28.any()).nullish(),
  reason: z28.string().nullish(),
  walletPlatform: z28.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]).nullish()
});

// src/generated-definitions/DebitRequest.ts
import { z as z29 } from "zod";
var DebitRequest = z29.object({
  amount: z29.number().int(),
  balanceSource: z29.enum(["DLC_REVOCATION", "EXPIRATION", "IAP_REVOCATION", "ORDER_REVOCATION", "OTHER", "PAYMENT", "TRADE"]).nullish(),
  metadata: z29.record(z29.any()).nullish(),
  reason: z29.string().nullish()
});

// src/generated-definitions/DeleteRewardConditionRequest.ts
import { z as z30 } from "zod";
var DeleteRewardConditionRequest = z30.object({ conditionName: z30.string().nullish(), userId: z30.string().nullish() });

// src/generated-definitions/DlcItemConfigUpdate.ts
import { z as z31 } from "zod";
var DlcItemConfigUpdate = z31.object({ data: z31.array(DlcItem).nullish() });

// src/generated-definitions/EntitlementPlatformConfigUpdate.ts
import { z as z32 } from "zod";
var EntitlementPlatformConfigUpdate = z32.object({
  allowedPlatformOrigins: z32.array(z32.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"])).nullish()
});

// src/generated-definitions/EntitlementRevokeRequest.ts
import { z as z33 } from "zod";
var EntitlementRevokeRequest = z33.object({ metadata: z33.record(z33.any()).nullish() });

// src/generated-definitions/EntitlementSoldRequest.ts
import { z as z34 } from "zod";
var EntitlementSoldRequest = z34.object({ requestId: z34.string().nullish(), useCount: z34.number().int().nullish() });

// src/generated-definitions/EntitlementSplitRequest.ts
import { z as z36 } from "zod";

// src/generated-definitions/PublicEntitlementMetadata.ts
import { z as z35 } from "zod";
var PublicEntitlementMetadata = z35.object({ operationSource: z35.enum(["INVENTORY"]).nullish() });

// src/generated-definitions/EntitlementSplitRequest.ts
var EntitlementSplitRequest = z36.object({ metadata: PublicEntitlementMetadata.nullish(), useCount: z36.number().int().nullish() });

// src/generated-definitions/EntitlementTransferRequest.ts
import { z as z37 } from "zod";
var EntitlementTransferRequest = z37.object({
  entitlementId: z37.string().nullish(),
  metadata: PublicEntitlementMetadata.nullish(),
  useCount: z37.number().int().nullish()
});

// src/generated-definitions/EntitlementUpdate.ts
import { z as z38 } from "zod";
var EntitlementUpdate = z38.object({
  collectionId: z38.string().nullish(),
  endDate: z38.string().nullish(),
  nullFieldList: z38.array(z38.string()).nullish(),
  origin: z38.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  reason: z38.string().nullish(),
  startDate: z38.string().nullish(),
  status: z38.enum(["ACTIVE", "CONSUMED", "INACTIVE", "REVOKED", "SOLD"]).nullish(),
  useCount: z38.number().int().nullish()
});

// src/generated-definitions/EpicGamesDlcSyncRequest.ts
import { z as z39 } from "zod";
var EpicGamesDlcSyncRequest = z39.object({ epicGamesJwtToken: z39.string().nullish() });

// src/generated-definitions/EpicGamesIapConfigRequest.ts
import { z as z40 } from "zod";
var EpicGamesIapConfigRequest = z40.object({ sandboxId: z40.string() });

// src/generated-definitions/EpicGamesReconcileRequest.ts
import { z as z41 } from "zod";
var EpicGamesReconcileRequest = z41.object({ epicGamesJwtToken: z41.string().nullish() });

// src/generated-definitions/ErrorEntity.ts
import { z as z43 } from "zod";

// src/generated-definitions/Permission.ts
import { z as z42 } from "zod";
var Permission = z42.object({ action: z42.number().int().nullish(), resource: z42.string().nullish() });

// src/generated-definitions/ErrorEntity.ts
var ErrorEntity = z43.object({
  devStackTrace: z43.string().nullish(),
  errorCode: z43.number().int(),
  errorMessage: z43.string(),
  messageVariables: z43.record(z43.string()).nullish(),
  requiredPermission: Permission.nullish()
});

// src/generated-definitions/EventAdditionalData.ts
import { z as z44 } from "zod";
var EventAdditionalData = z44.object({ entitlement: z44.array(AdditionalDataEntitlement).nullish(), purpose: z44.string().nullish() });

// src/generated-definitions/EventPayload.ts
import { z as z45 } from "zod";
var EventPayload = z45.object({ payload: z45.record(z45.any()).nullish() });

// src/generated-definitions/ExportStoreRequest.ts
import { z as z46 } from "zod";
var ExportStoreRequest = z46.object({ itemIds: z46.array(z46.string()).nullish() });

// src/generated-definitions/ExportStoreToCsvRequest.ts
import { z as z47 } from "zod";
var ExportStoreToCsvRequest = z47.object({
  catalogType: z47.enum(["APP", "CATEGORY", "ITEM", "SECTION", "VIEW"]),
  fieldsToBeIncluded: z47.array(z47.string()).nullish(),
  idsToBeExported: z47.array(z47.string()).nullish(),
  storeId: z47.string().nullish()
});

// src/generated-definitions/ExternalPaymentOrderCreate.ts
import { z as z48 } from "zod";
var ExternalPaymentOrderCreate = z48.object({
  currencyCode: z48.string().nullish(),
  currencyNamespace: z48.string().nullish(),
  customParameters: z48.record(z48.any()).nullish(),
  description: z48.string(),
  extOrderNo: z48.string(),
  extUserId: z48.string().nullish(),
  itemType: z48.enum(["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]).nullish(),
  language: z48.string().nullish(),
  metadata: z48.record(z48.string()).nullish(),
  notifyUrl: z48.string().nullish(),
  omitNotification: z48.boolean().nullish(),
  platform: z48.string().nullish(),
  price: z48.number().int(),
  recurringPaymentOrderNo: z48.string().nullish(),
  region: z48.string().nullish(),
  returnUrl: z48.string().nullish(),
  sandbox: z48.boolean().nullish(),
  sku: z48.string().nullish(),
  subscriptionId: z48.string().nullish(),
  targetNamespace: z48.string(),
  targetUserId: z48.string(),
  title: z48.string()
});

// src/generated-definitions/FieldValidationError.ts
import { z as z49 } from "zod";
var FieldValidationError = z49.object({
  errorCode: z49.string().nullish(),
  errorField: z49.string().nullish(),
  errorMessage: z49.string().nullish(),
  errorValue: z49.string().nullish(),
  messageVariables: z49.record(z49.string()).nullish()
});

// src/generated-definitions/FulfillCodeRequest.ts
import { z as z50 } from "zod";
var FulfillCodeRequest = z50.object({ code: z50.string(), language: z50.string().nullish(), region: z50.string().nullish() });

// src/generated-definitions/FulfillmentRequest.ts
import { z as z52 } from "zod";

// src/generated-definitions/OrderSummary.ts
import { z as z51 } from "zod";
var OrderSummary = z51.object({ currency: CurrencySummary.nullish(), ext: z51.record(z51.any()).nullish(), free: z51.boolean().nullish() });

// src/generated-definitions/FulfillmentRequest.ts
var FulfillmentRequest = z52.object({
  duration: z52.number().int().nullish(),
  endDate: z52.string().nullish(),
  entitlementCollectionId: z52.string().nullish(),
  entitlementOrigin: z52.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  itemId: z52.string().nullish(),
  itemSku: z52.string().nullish(),
  language: z52.string().nullish(),
  metadata: z52.record(z52.any()).nullish(),
  order: OrderSummary.nullish(),
  orderNo: z52.string().nullish(),
  origin: z52.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  overrideBundleItemQty: z52.record(z52.number().int()).nullish(),
  quantity: z52.number().int(),
  region: z52.string().nullish(),
  source: z52.enum([
    "ACHIEVEMENT",
    "CONSUME_ENTITLEMENT",
    "DLC",
    "EXPIRATION",
    "GIFT",
    "IAP",
    "IAP_CHARGEBACK_REVERSED",
    "ORDER_REVOCATION",
    "OTHER",
    "PAYMENT",
    "PROMOTION",
    "PURCHASE",
    "REDEEM_CODE",
    "REFERRAL_BONUS",
    "REWARD",
    "SELL_BACK"
  ]).nullish(),
  startDate: z52.string().nullish(),
  storeId: z52.string().nullish()
});

// src/generated-definitions/FulfillmentScriptCreate.ts
import { z as z53 } from "zod";
var FulfillmentScriptCreate = z53.object({ grantDays: z53.string().nullish() });

// src/generated-definitions/FulfillmentScriptUpdate.ts
import { z as z54 } from "zod";
var FulfillmentScriptUpdate = z54.object({ grantDays: z54.string().nullish() });

// src/generated-definitions/FulfillmentV2Request.ts
import { z as z56 } from "zod";

// src/generated-definitions/FulfillmentV2RequestItem.ts
import { z as z55 } from "zod";
var FulfillmentV2RequestItem = z55.object({
  duration: z55.number().int().nullish(),
  endDate: z55.string().nullish(),
  entitlementCollectionId: z55.string().nullish(),
  entitlementOrigin: z55.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  itemId: z55.string().nullish(),
  itemSku: z55.string().nullish(),
  language: z55.string().nullish(),
  metadata: z55.record(z55.any()).nullish(),
  orderNo: z55.string().nullish(),
  origin: z55.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  quantity: z55.number().int(),
  region: z55.string().nullish(),
  source: z55.enum([
    "ACHIEVEMENT",
    "CONSUME_ENTITLEMENT",
    "DLC",
    "EXPIRATION",
    "GIFT",
    "IAP",
    "IAP_CHARGEBACK_REVERSED",
    "ORDER_REVOCATION",
    "OTHER",
    "PAYMENT",
    "PROMOTION",
    "PURCHASE",
    "REDEEM_CODE",
    "REFERRAL_BONUS",
    "REWARD",
    "SELL_BACK"
  ]).nullish(),
  startDate: z55.string().nullish(),
  storeId: z55.string().nullish()
});

// src/generated-definitions/FulfillmentV2Request.ts
var FulfillmentV2Request = z56.object({ items: z56.array(FulfillmentV2RequestItem).nullish() });

// src/generated-definitions/GoogleIapConfigRequest.ts
import { z as z57 } from "zod";
var GoogleIapConfigRequest = z57.object({
  applicationName: z57.string(),
  notificationTokenAudience: z57.string().nullish(),
  notificationTokenEmail: z57.string().nullish(),
  serviceAccountId: z57.string()
});

// src/generated-definitions/GoogleIapReceipt.ts
import { z as z58 } from "zod";
var GoogleIapReceipt = z58.object({
  autoAck: z58.boolean().nullish(),
  autoConsume: z58.boolean().nullish(),
  language: z58.string().nullish(),
  orderId: z58.string(),
  packageName: z58.string(),
  productId: z58.string().nullish(),
  purchaseTime: z58.number().int().nullish(),
  purchaseToken: z58.string(),
  region: z58.string().nullish(),
  subscriptionPurchase: z58.boolean().nullish()
});

// src/generated-definitions/GrantSubscriptionDaysRequest.ts
import { z as z59 } from "zod";
var GrantSubscriptionDaysRequest = z59.object({ grantDays: z59.number().int(), reason: z59.string().nullish() });

// src/generated-definitions/IapItemConfigUpdate.ts
import { z as z60 } from "zod";
var IapItemConfigUpdate = z60.object({ data: z60.array(IapItemEntry).nullish() });

// src/generated-definitions/InGameItemSync.ts
import { z as z61 } from "zod";
var InGameItemSync = z61.object({ categoryPath: z61.string(), targetItemId: z61.string(), targetNamespace: z61.string() });

// src/generated-definitions/ItemAcquireRequest.ts
import { z as z62 } from "zod";
var ItemAcquireRequest = z62.object({ count: z62.number().int(), orderNo: z62.string() });

// src/generated-definitions/ItemCreate.ts
import { z as z64 } from "zod";

// src/generated-definitions/RegionDataItemDto.ts
import { z as z63 } from "zod";
var RegionDataItemDto = z63.object({
  currencyCode: z63.string(),
  currencyNamespace: z63.string(),
  currencyType: z63.enum(["REAL", "VIRTUAL"]),
  discountAmount: z63.number().int().nullish(),
  discountExpireAt: z63.string().nullish(),
  discountPercentage: z63.number().int().nullish(),
  discountPurchaseAt: z63.string().nullish(),
  expireAt: z63.string().nullish(),
  price: z63.number().int(),
  purchaseAt: z63.string().nullish(),
  trialPrice: z63.number().int().nullish()
});

// src/generated-definitions/ItemCreate.ts
var ItemCreate = z64.object({
  appId: z64.string().nullish(),
  appType: z64.enum(["DEMO", "DLC", "GAME", "SOFTWARE"]).nullish(),
  baseAppId: z64.string().nullish(),
  boothName: z64.string().nullish(),
  categoryPath: z64.string(),
  clazz: z64.string().nullish(),
  displayOrder: z64.number().int().nullish(),
  entitlementType: z64.enum(["CONSUMABLE", "DURABLE"]),
  ext: z64.record(z64.any()).nullish(),
  features: z64.array(z64.string()).nullish(),
  flexible: z64.boolean().nullish(),
  images: z64.array(Image).nullish(),
  inventoryConfig: InventoryConfig.nullish(),
  itemIds: z64.array(z64.string()).nullish(),
  itemQty: z64.record(z64.number().int()).nullish(),
  itemType: z64.enum([
    "APP",
    "BUNDLE",
    "CODE",
    "COINS",
    "EXTENSION",
    "INGAMEITEM",
    "LOOTBOX",
    "MEDIA",
    "OPTIONBOX",
    "SEASON",
    "SUBSCRIPTION"
  ]),
  listable: z64.boolean().nullish(),
  localizations: z64.record(Localization),
  lootBoxConfig: LootBoxConfig.nullish(),
  maxCount: z64.number().int().nullish(),
  maxCountPerUser: z64.number().int().nullish(),
  name: z64.string(),
  optionBoxConfig: OptionBoxConfig.nullish(),
  purchasable: z64.boolean().nullish(),
  recurring: Recurring.nullish(),
  regionData: z64.record(z64.array(RegionDataItemDto)),
  saleConfig: SaleConfig.nullish(),
  seasonType: z64.enum(["PASS", "TIER"]).nullish(),
  sectionExclusive: z64.boolean().nullish(),
  sellable: z64.boolean().nullish(),
  sku: z64.string().nullish(),
  stackable: z64.boolean().nullish(),
  status: z64.enum(["ACTIVE", "INACTIVE"]),
  tags: z64.array(z64.string()).nullish(),
  targetCurrencyCode: z64.string().nullish(),
  targetNamespace: z64.string().nullish(),
  thumbnailUrl: z64.string().nullish(),
  useCount: z64.number().int().nullish()
});

// src/generated-definitions/ItemPurchaseConditionValidateRequest.ts
import { z as z65 } from "zod";
var ItemPurchaseConditionValidateRequest = z65.object({ itemIds: z65.array(z65.string()).nullish() });

// src/generated-definitions/ItemReturnRequest.ts
import { z as z66 } from "zod";
var ItemReturnRequest = z66.object({ orderNo: z66.string() });

// src/generated-definitions/ItemTypeConfigCreate.ts
import { z as z67 } from "zod";
var ItemTypeConfigCreate = z67.object({
  clazz: z67.string().nullish(),
  dryRun: z67.boolean().nullish(),
  fulfillmentUrl: z67.string(),
  itemType: z67.enum([
    "APP",
    "BUNDLE",
    "CODE",
    "COINS",
    "EXTENSION",
    "INGAMEITEM",
    "LOOTBOX",
    "MEDIA",
    "OPTIONBOX",
    "SEASON",
    "SUBSCRIPTION"
  ]),
  purchaseConditionUrl: z67.string().nullish()
});

// src/generated-definitions/ItemTypeConfigUpdate.ts
import { z as z68 } from "zod";
var ItemTypeConfigUpdate = z68.object({
  clazz: z68.string().nullish(),
  dryRun: z68.boolean().nullish(),
  fulfillmentUrl: z68.string(),
  purchaseConditionUrl: z68.string().nullish()
});

// src/generated-definitions/ItemUpdate.ts
import { z as z69 } from "zod";
var ItemUpdate = z69.object({
  appId: z69.string().nullish(),
  appType: z69.enum(["DEMO", "DLC", "GAME", "SOFTWARE"]).nullish(),
  baseAppId: z69.string().nullish(),
  boothName: z69.string().nullish(),
  categoryPath: z69.string().nullish(),
  clazz: z69.string().nullish(),
  displayOrder: z69.number().int().nullish(),
  entitlementType: z69.enum(["CONSUMABLE", "DURABLE"]),
  ext: z69.record(z69.any()).nullish(),
  features: z69.array(z69.string()).nullish(),
  flexible: z69.boolean().nullish(),
  images: z69.array(Image).nullish(),
  inventoryConfig: InventoryConfig.nullish(),
  itemIds: z69.array(z69.string()).nullish(),
  itemQty: z69.record(z69.number().int()).nullish(),
  itemType: z69.enum([
    "APP",
    "BUNDLE",
    "CODE",
    "COINS",
    "EXTENSION",
    "INGAMEITEM",
    "LOOTBOX",
    "MEDIA",
    "OPTIONBOX",
    "SEASON",
    "SUBSCRIPTION"
  ]),
  listable: z69.boolean().nullish(),
  localizations: z69.record(Localization).nullish(),
  lootBoxConfig: LootBoxConfig.nullish(),
  maxCount: z69.number().int().nullish(),
  maxCountPerUser: z69.number().int().nullish(),
  name: z69.string().nullish(),
  optionBoxConfig: OptionBoxConfig.nullish(),
  purchasable: z69.boolean().nullish(),
  recurring: Recurring.nullish(),
  regionData: z69.record(z69.array(RegionDataItemDto)).nullish(),
  saleConfig: SaleConfig.nullish(),
  seasonType: z69.enum(["PASS", "TIER"]).nullish(),
  sectionExclusive: z69.boolean().nullish(),
  sellable: z69.boolean().nullish(),
  sku: z69.string().nullish(),
  stackable: z69.boolean().nullish(),
  status: z69.enum(["ACTIVE", "INACTIVE"]).nullish(),
  tags: z69.array(z69.string()).nullish(),
  targetCurrencyCode: z69.string().nullish(),
  targetNamespace: z69.string().nullish(),
  thumbnailUrl: z69.string().nullish(),
  useCount: z69.number().int().nullish()
});

// src/generated-definitions/KeyGroupCreate.ts
import { z as z70 } from "zod";
var KeyGroupCreate = z70.object({
  description: z70.string().nullish(),
  name: z70.string(),
  status: z70.enum(["ACTIVE", "INACTIVE"]).nullish(),
  tags: z70.array(z70.string()).nullish()
});

// src/generated-definitions/KeyGroupUpdate.ts
import { z as z71 } from "zod";
var KeyGroupUpdate = z71.object({
  description: z71.string().nullish(),
  name: z71.string(),
  status: z71.enum(["ACTIVE", "INACTIVE"]).nullish(),
  tags: z71.array(z71.string()).nullish()
});

// src/generated-definitions/LootBoxPluginConfigUpdate.ts
import { z as z72 } from "zod";
var LootBoxPluginConfigUpdate = z72.object({
  appConfig: AppConfig.nullish(),
  customConfig: BaseCustomConfig.nullish(),
  extendType: z72.enum(["APP", "CUSTOM"])
});

// src/generated-definitions/MockIapReceipt.ts
import { z as z73 } from "zod";
var MockIapReceipt = z73.object({
  itemIdentityType: z73.enum(["ITEM_ID", "ITEM_SKU"]).nullish(),
  language: z73.string().nullish(),
  productId: z73.string(),
  region: z73.string().nullish(),
  transactionId: z73.string().nullish(),
  type: z73.enum(["APPLE", "EPICGAMES", "GOOGLE", "OCULUS", "PLAYSTATION", "STADIA", "STEAM", "TWITCH", "XBOX"])
});

// src/generated-definitions/OculusIapConfigRequest.ts
import { z as z74 } from "zod";
var OculusIapConfigRequest = z74.object({ appId: z74.string(), appSecret: z74.string().nullish() });

// src/generated-definitions/OrderCreate.ts
import { z as z75 } from "zod";
var OrderCreate = z75.object({
  currencyCode: z75.string(),
  discountCodes: z75.array(z75.string()).nullish(),
  discountedPrice: z75.number().int(),
  ext: z75.record(z75.any()).nullish(),
  itemId: z75.string(),
  language: z75.string().nullish(),
  price: z75.number().int().nullish(),
  quantity: z75.number().int(),
  region: z75.string().nullish(),
  returnUrl: z75.string().nullish(),
  sectionId: z75.string().nullish()
});

// src/generated-definitions/OrderDiscountPreviewRequest.ts
import { z as z76 } from "zod";
var OrderDiscountPreviewRequest = z76.object({
  currencyCode: z76.string(),
  discountCodes: z76.array(z76.string()).nullish(),
  discountedPrice: z76.number().int(),
  itemId: z76.string(),
  price: z76.number().int().nullish(),
  quantity: z76.number().int()
});

// src/generated-definitions/OrderRefundCreate.ts
import { z as z77 } from "zod";
var OrderRefundCreate = z77.object({ description: z77.string() });

// src/generated-definitions/OrderUpdate.ts
import { z as z78 } from "zod";
var OrderUpdate = z78.object({
  status: z78.enum([
    "CHARGEBACK",
    "CHARGEBACK_REVERSED",
    "CHARGED",
    "CLOSED",
    "DELETED",
    "FULFILLED",
    "FULFILL_FAILED",
    "INIT",
    "REFUNDED",
    "REFUNDING",
    "REFUND_FAILED"
  ]),
  statusReason: z78.string()
});

// src/generated-definitions/PaymentCallbackConfigUpdate.ts
import { z as z79 } from "zod";
var PaymentCallbackConfigUpdate = z79.object({
  dryRun: z79.boolean().nullish(),
  notifyUrl: z79.string().nullish(),
  privateKey: z79.string().nullish()
});

// src/generated-definitions/PaymentDomainWhitelistConfigEdit.ts
import { z as z80 } from "zod";
var PaymentDomainWhitelistConfigEdit = z80.object({ domains: z80.array(z80.string()) });

// src/generated-definitions/PaymentOrderChargeRequest.ts
import { z as z81 } from "zod";
var PaymentOrderChargeRequest = z81.object({
  extTxId: z81.string().nullish(),
  paymentMethod: z81.string().nullish(),
  paymentProvider: z81.enum(["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"])
});

// src/generated-definitions/PaymentOrderCreate.ts
import { z as z82 } from "zod";
var PaymentOrderCreate = z82.object({
  currencyCode: z82.string().nullish(),
  currencyNamespace: z82.string().nullish(),
  customParameters: z82.record(z82.any()).nullish(),
  description: z82.string(),
  extOrderNo: z82.string(),
  extUserId: z82.string().nullish(),
  itemType: z82.enum(["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]).nullish(),
  language: z82.string().nullish(),
  metadata: z82.record(z82.string()).nullish(),
  notifyUrl: z82.string().nullish(),
  omitNotification: z82.boolean().nullish(),
  platform: z82.string().nullish(),
  price: z82.number().int(),
  recurringPaymentOrderNo: z82.string().nullish(),
  region: z82.string().nullish(),
  returnUrl: z82.string().nullish(),
  sandbox: z82.boolean().nullish(),
  sku: z82.string().nullish(),
  subscriptionId: z82.string().nullish(),
  title: z82.string()
});

// src/generated-definitions/PaymentOrderNotifySimulation.ts
import { z as z83 } from "zod";
var PaymentOrderNotifySimulation = z83.object({
  amount: z83.number().int().nullish(),
  currencyCode: z83.string(),
  notifyType: z83.enum(["CHARGE", "REFUND"]),
  paymentProvider: z83.enum(["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]),
  salesTax: z83.number().int().nullish(),
  vat: z83.number().int().nullish()
});

// src/generated-definitions/PaymentOrderRefund.ts
import { z as z84 } from "zod";
var PaymentOrderRefund = z84.object({ description: z84.string() });

// src/generated-definitions/PaymentProviderConfigEdit.ts
import { z as z85 } from "zod";
var PaymentProviderConfigEdit = z85.object({
  aggregate: z85.enum(["ADYEN", "CHECKOUT", "NEONPAY", "STRIPE", "XSOLLA"]).nullish(),
  namespace: z85.string(),
  region: z85.string(),
  sandboxTaxJarApiToken: z85.string().nullish(),
  specials: z85.array(z85.enum(["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"])).nullish(),
  taxJarApiToken: z85.string().nullish(),
  taxJarEnabled: z85.boolean().nullish(),
  useGlobalTaxJarApiToken: z85.boolean().nullish()
});

// src/generated-definitions/PaymentRequest.ts
import { z as z86 } from "zod";
var PaymentRequest = z86.object({
  amount: z86.number().int(),
  metadata: z86.record(z86.any()).nullish(),
  walletPlatform: z86.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]).nullish()
});

// src/generated-definitions/PaymentTaxConfigEdit.ts
import { z as z87 } from "zod";
var PaymentTaxConfigEdit = z87.object({
  sandboxTaxJarApiToken: z87.string().nullish(),
  taxJarApiToken: z87.string().nullish(),
  taxJarEnabled: z87.boolean().nullish(),
  taxJarProductCodesMapping: z87.record(z87.string()).nullish()
});

// src/generated-definitions/PaymentToken.ts
import { z as z88 } from "zod";
var PaymentToken = z88.object({ token: z88.string().nullish() });

// src/generated-definitions/PaymentUrlCreate.ts
import { z as z89 } from "zod";
var PaymentUrlCreate = z89.object({
  neonPayConfig: PaymentOrderNeonPayConfig.nullish(),
  paymentOrderNo: z89.string(),
  paymentProvider: z89.enum(["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]),
  returnUrl: z89.string().nullish(),
  ui: z89.string().nullish(),
  zipCode: z89.string().nullish()
});

// src/generated-definitions/PlatformDlcConfigUpdate.ts
import { z as z90 } from "zod";
var PlatformDlcConfigUpdate = z90.object({ data: z90.array(PlatformDlcEntry).nullish() });

// src/generated-definitions/PlatformSubscribeRequest.ts
import { z as z91 } from "zod";
var PlatformSubscribeRequest = z91.object({
  grantDays: z91.number().int(),
  itemId: z91.string(),
  language: z91.string().nullish(),
  reason: z91.string().nullish(),
  region: z91.string().nullish(),
  source: z91.string().nullish()
});

// src/generated-definitions/PlatformWalletConfigUpdate.ts
import { z as z92 } from "zod";
var PlatformWalletConfigUpdate = z92.object({
  allowedBalanceOrigins: z92.array(z92.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"])).nullish()
});

// src/generated-definitions/PlayStationDlcSyncMultiServiceLabelsRequest.ts
import { z as z93 } from "zod";
var PlayStationDlcSyncMultiServiceLabelsRequest = z93.object({ serviceLabels: z93.array(z93.number().int()).nullish() });

// src/generated-definitions/PlayStationDlcSyncRequest.ts
import { z as z94 } from "zod";
var PlayStationDlcSyncRequest = z94.object({ serviceLabel: z94.number().int().nullish() });

// src/generated-definitions/PlaystationIapConfigRequest.ts
import { z as z95 } from "zod";
var PlaystationIapConfigRequest = z95.object({
  backOfficeServerClientId: z95.string().nullish(),
  backOfficeServerClientSecret: z95.string().nullish(),
  enableStreamJob: z95.boolean().nullish(),
  environment: z95.string(),
  streamName: z95.string().nullish(),
  streamPartnerName: z95.string().nullish()
});

// src/generated-definitions/PlayStationMultiServiceLabelsReconcileRequest.ts
import { z as z96 } from "zod";
var PlayStationMultiServiceLabelsReconcileRequest = z96.object({
  currencyCode: z96.string().nullish(),
  price: z96.number().nullish(),
  productId: z96.string().nullish(),
  serviceLabels: z96.array(z96.number().int()).nullish()
});

// src/generated-definitions/PlayStationReconcileRequest.ts
import { z as z97 } from "zod";
var PlayStationReconcileRequest = z97.object({
  currencyCode: z97.string().nullish(),
  price: z97.number().nullish(),
  productId: z97.string().nullish(),
  serviceLabel: z97.number().int().nullish()
});

// src/generated-definitions/PreCheckFulfillmentRequest.ts
import { z as z98 } from "zod";
var PreCheckFulfillmentRequest = z98.object({
  itemId: z98.string().nullish(),
  itemSku: z98.string().nullish(),
  quantity: z98.number().int()
});

// src/generated-definitions/PsnEntitlementOwnershipRequest.ts
import { z as z99 } from "zod";
var PsnEntitlementOwnershipRequest = z99.object({ accessToken: z99.string().nullish(), serviceLabel: z99.number().int().nullish() });

// src/generated-definitions/PublicEntitlementDecrement.ts
import { z as z100 } from "zod";
var PublicEntitlementDecrement = z100.object({
  metadata: PublicEntitlementMetadata.nullish(),
  options: z100.array(z100.string()).nullish(),
  requestId: z100.string().nullish(),
  useCount: z100.number().int().nullish()
});

// src/generated-definitions/PurchaseConditionUpdate.ts
import { z as z101 } from "zod";
var PurchaseConditionUpdate = z101.object({ purchaseCondition: PurchaseCondition.nullish() });

// src/generated-definitions/RedeemRequest.ts
import { z as z102 } from "zod";
var RedeemRequest = z102.object({ code: z102.string(), orderNo: z102.string().nullish() });

// src/generated-definitions/RevocationConfigUpdate.ts
import { z as z103 } from "zod";
var RevocationConfigUpdate = z103.object({
  entitlement: EntitlementRevocationConfig.nullish(),
  wallet: WalletRevocationConfig.nullish()
});

// src/generated-definitions/RevocationPluginConfigUpdate.ts
import { z as z104 } from "zod";
var RevocationPluginConfigUpdate = z104.object({
  appConfig: AppConfig.nullish(),
  customConfig: BaseCustomConfig.nullish(),
  extendType: z104.enum(["APP", "CUSTOM"])
});

// src/generated-definitions/RevocationRequest.ts
import { z as z105 } from "zod";
var RevocationRequest = z105.object({
  meta: z105.record(z105.any()).nullish(),
  reason: z105.string().nullish(),
  revokeEntries: z105.array(RevokeEntry).nullish(),
  source: z105.enum(["DLC", "IAP", "ORDER", "OTHER"]).nullish(),
  transactionId: z105.string().nullish()
});

// src/generated-definitions/RevokeUseCountRequest.ts
import { z as z106 } from "zod";
var RevokeUseCountRequest = z106.object({ reason: z106.string().nullish(), useCount: z106.number().int().nullish() });

// src/generated-definitions/RewardCreate.ts
import { z as z107 } from "zod";
var RewardCreate = z107.object({
  description: z107.string().nullish(),
  eventTopic: z107.string(),
  maxAwarded: z107.number().int().nullish(),
  maxAwardedPerUser: z107.number().int().nullish(),
  namespaceExpression: z107.string().nullish(),
  rewardCode: z107.string(),
  rewardConditions: z107.array(RewardCondition).nullish(),
  userIdExpression: z107.string().nullish()
});

// src/generated-definitions/RewardsRequest.ts
import { z as z108 } from "zod";
var RewardsRequest = z108.object({
  entitlementCollectionId: z108.string().nullish(),
  entitlementOrigin: z108.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  metadata: z108.record(z108.any()).nullish(),
  origin: z108.enum(["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]).nullish(),
  rewards: z108.array(PlatformReward),
  source: z108.enum([
    "ACHIEVEMENT",
    "CONSUME_ENTITLEMENT",
    "DLC",
    "EXPIRATION",
    "GIFT",
    "IAP",
    "IAP_CHARGEBACK_REVERSED",
    "ORDER_REVOCATION",
    "OTHER",
    "PAYMENT",
    "PROMOTION",
    "PURCHASE",
    "REDEEM_CODE",
    "REFERRAL_BONUS",
    "REWARD",
    "SELL_BACK"
  ]).nullish(),
  transactionId: z108.string().nullish()
});

// src/generated-definitions/RewardUpdate.ts
import { z as z109 } from "zod";
var RewardUpdate = z109.object({
  description: z109.string().nullish(),
  eventTopic: z109.string(),
  maxAwarded: z109.number().int().nullish(),
  maxAwardedPerUser: z109.number().int().nullish(),
  namespaceExpression: z109.string().nullish(),
  rewardCode: z109.string(),
  rewardConditions: z109.array(RewardCondition).nullish(),
  userIdExpression: z109.string().nullish()
});

// src/generated-definitions/SectionCreate.ts
import { z as z110 } from "zod";
var SectionCreate = z110.object({
  active: z110.boolean().nullish(),
  displayOrder: z110.number().int().nullish(),
  endDate: z110.string(),
  ext: z110.record(z110.any()).nullish(),
  fixedPeriodRotationConfig: FixedPeriodRotationConfig.nullish(),
  items: z110.array(SectionItem).nullish(),
  localizations: z110.record(Localization),
  name: z110.string(),
  rotationType: z110.enum(["CUSTOM", "FIXED_PERIOD", "NONE"]).nullish(),
  startDate: z110.string(),
  viewId: z110.string().nullish()
});

// src/generated-definitions/SectionPluginConfigUpdate.ts
import { z as z111 } from "zod";
var SectionPluginConfigUpdate = z111.object({
  appConfig: AppConfig.nullish(),
  customConfig: BaseCustomConfig.nullish(),
  extendType: z111.enum(["APP", "CUSTOM"])
});

// src/generated-definitions/SectionUpdate.ts
import { z as z112 } from "zod";
var SectionUpdate = z112.object({
  active: z112.boolean().nullish(),
  displayOrder: z112.number().int().nullish(),
  endDate: z112.string(),
  ext: z112.record(z112.any()).nullish(),
  fixedPeriodRotationConfig: FixedPeriodRotationConfig.nullish(),
  items: z112.array(SectionItem).nullish(),
  localizations: z112.record(Localization),
  name: z112.string(),
  rotationType: z112.enum(["CUSTOM", "FIXED_PERIOD", "NONE"]).nullish(),
  startDate: z112.string(),
  viewId: z112.string().nullish()
});

// src/generated-definitions/ServicePluginConfigUpdate.ts
import { z as z113 } from "zod";
var ServicePluginConfigUpdate = z113.object({ grpcServerAddress: z113.string().nullish() });

// src/generated-definitions/SteamAchievement.ts
import { z as z114 } from "zod";
var SteamAchievement = z114.object({ id: z114.string().nullish(), value: z114.number().int().nullish() });

// src/generated-definitions/SteamAchievementUpdateRequest.ts
import { z as z115 } from "zod";
var SteamAchievementUpdateRequest = z115.object({
  achievements: z115.array(SteamAchievement).nullish(),
  steamUserId: z115.string().nullish()
});

// src/generated-definitions/SteamDlcSyncRequest.ts
import { z as z116 } from "zod";
var SteamDlcSyncRequest = z116.object({ appId: z116.string().nullish(), steamId: z116.string() });

// src/generated-definitions/SteamIapConfigRequest.ts
import { z as z117 } from "zod";
var SteamIapConfigRequest = z117.object({ appId: z117.string(), publisherAuthenticationKey: z117.string().nullish() });

// src/generated-definitions/SteamSyncRequest.ts
import { z as z118 } from "zod";
var SteamSyncRequest = z118.object({
  appId: z118.string(),
  currencyCode: z118.string().nullish(),
  language: z118.string().nullish(),
  price: z118.number().nullish(),
  productId: z118.string().nullish(),
  region: z118.string().nullish(),
  steamId: z118.string()
});

// src/generated-definitions/StoreCreate.ts
import { z as z119 } from "zod";
var StoreCreate = z119.object({
  defaultLanguage: z119.string().nullish(),
  defaultRegion: z119.string().nullish(),
  description: z119.string().nullish(),
  supportedLanguages: z119.array(z119.string()).nullish(),
  supportedRegions: z119.array(z119.string()).nullish(),
  title: z119.string()
});

// src/generated-definitions/StoreUpdate.ts
import { z as z120 } from "zod";
var StoreUpdate = z120.object({
  defaultLanguage: z120.string().nullish(),
  defaultRegion: z120.string().nullish(),
  description: z120.string().nullish(),
  supportedLanguages: z120.array(z120.string()).nullish(),
  supportedRegions: z120.array(z120.string()).nullish(),
  title: z120.string()
});

// src/generated-definitions/StreamEvent.ts
import { z as z122 } from "zod";

// src/generated-definitions/StreamEventBody.ts
import { z as z121 } from "zod";
var StreamEventBody = z121.object({
  account: z121.string().nullish(),
  additionalData: EventAdditionalData.nullish(),
  originalTitleName: z121.string().nullish(),
  paymentProductSKU: z121.string().nullish(),
  purchaseDate: z121.string().nullish(),
  sourceOrderItemId: z121.string().nullish(),
  titleName: z121.string().nullish()
});

// src/generated-definitions/StreamEvent.ts
var StreamEvent = z122.object({
  body: StreamEventBody.nullish(),
  eventDomain: z122.string().nullish(),
  eventSource: z122.string().nullish(),
  eventType: z122.string().nullish(),
  eventVersion: z122.number().int().nullish(),
  id: z122.string().nullish(),
  timestamp: z122.string().nullish()
});

// src/generated-definitions/SubscribeRequest.ts
import { z as z123 } from "zod";
var SubscribeRequest = z123.object({
  currencyCode: z123.string(),
  itemId: z123.string(),
  language: z123.string().nullish(),
  region: z123.string().nullish(),
  returnUrl: z123.string().nullish(),
  source: z123.string().nullish()
});

// src/generated-definitions/TicketAcquireRequest.ts
import { z as z124 } from "zod";
var TicketAcquireRequest = z124.object({ count: z124.number().int(), orderNo: z124.string() });

// src/generated-definitions/TicketSaleDecrementRequest.ts
import { z as z125 } from "zod";
var TicketSaleDecrementRequest = z125.object({ orderNo: z125.string() });

// src/generated-definitions/TicketSaleIncrementRequest.ts
import { z as z126 } from "zod";
var TicketSaleIncrementRequest = z126.object({ count: z126.number().int(), orderNo: z126.string() });

// src/generated-definitions/TradeChainedActionCommitRequest.ts
import { z as z127 } from "zod";
var TradeChainedActionCommitRequest = z127.object({
  actions: z127.array(ActionRequest).nullish(),
  metadata: z127.record(z127.any()).nullish(),
  needPreCheck: z127.boolean().nullish(),
  transactionId: z127.string().nullish(),
  type: z127.string().nullish()
});

// src/generated-definitions/TradeNotification.ts
import { z as z128 } from "zod";
var TradeNotification = z128.object({
  additionalData: AdditionalData.nullish(),
  authorisedTime: z128.string().nullish(),
  chargebackReversedTime: z128.string().nullish(),
  chargebackTime: z128.string().nullish(),
  chargedTime: z128.string().nullish(),
  createdTime: z128.string().nullish(),
  currency: CurrencySummary,
  customParameters: z128.record(z128.any()).nullish(),
  extOrderNo: z128.string(),
  extTxId: z128.string().nullish(),
  extUserId: z128.string().nullish(),
  issuedAt: z128.string(),
  metadata: z128.record(z128.string()).nullish(),
  namespace: z128.string(),
  nonceStr: z128.string(),
  paymentData: PaymentData.nullish(),
  paymentMethod: z128.string().nullish(),
  paymentMethodFee: z128.number().int().nullish(),
  paymentOrderNo: z128.string(),
  paymentProvider: z128.enum(["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]),
  paymentProviderFee: z128.number().int().nullish(),
  paymentStationUrl: z128.string().nullish(),
  price: z128.number().int(),
  refundedTime: z128.string().nullish(),
  salesTax: z128.number().int().nullish(),
  sandbox: z128.boolean(),
  sku: z128.string().nullish(),
  status: z128.enum([
    "AUTHORISED",
    "AUTHORISE_FAILED",
    "CHARGEBACK",
    "CHARGEBACK_REVERSED",
    "CHARGED",
    "CHARGE_FAILED",
    "DELETED",
    "INIT",
    "NOTIFICATION_OF_CHARGEBACK",
    "REFUNDED",
    "REFUNDING",
    "REFUND_FAILED",
    "REQUEST_FOR_INFORMATION"
  ]),
  statusReason: z128.string().nullish(),
  subscriptionId: z128.string().nullish(),
  subtotalPrice: z128.number().int().nullish(),
  targetNamespace: z128.string().nullish(),
  targetUserId: z128.string().nullish(),
  tax: z128.number().int().nullish(),
  totalPrice: z128.number().int().nullish(),
  totalTax: z128.number().int().nullish(),
  txEndTime: z128.string().nullish(),
  type: z128.string(),
  userId: z128.string().nullish(),
  vat: z128.number().int().nullish()
});

// src/generated-definitions/TwitchIapConfigRequest.ts
import { z as z129 } from "zod";
var TwitchIapConfigRequest = z129.object({
  clientId: z129.string().nullish(),
  clientSecret: z129.string().nullish(),
  organizationId: z129.string().nullish()
});

// src/generated-definitions/TwitchSyncRequest.ts
import { z as z130 } from "zod";
var TwitchSyncRequest = z130.object({ gameId: z130.string().nullish(), language: z130.string().nullish(), region: z130.string().nullish() });

// src/generated-definitions/ValidationErrorEntity.ts
import { z as z131 } from "zod";
var ValidationErrorEntity = z131.object({
  errorCode: z131.number().int(),
  errorMessage: z131.string(),
  errors: z131.array(FieldValidationError).nullish()
});

// src/generated-definitions/ViewCreate.ts
import { z as z132 } from "zod";
var ViewCreate = z132.object({ displayOrder: z132.number().int(), localizations: z132.record(Localization), name: z132.string() });

// src/generated-definitions/ViewUpdate.ts
import { z as z133 } from "zod";
var ViewUpdate = z133.object({
  displayOrder: z133.number().int().nullish(),
  localizations: z133.record(Localization).nullish(),
  name: z133.string()
});

// src/generated-definitions/WxPayConfigRequest.ts
import { z as z134 } from "zod";
var WxPayConfigRequest = z134.object({
  appId: z134.string().nullish(),
  key: z134.string().nullish(),
  mchid: z134.string().nullish(),
  returnUrl: z134.string().nullish()
});

// src/generated-definitions/XblAchievementUpdateRequest.ts
import { z as z136 } from "zod";

// src/generated-definitions/XboxAchievement.ts
import { z as z135 } from "zod";
var XboxAchievement = z135.object({ id: z135.string().nullish(), percentComplete: z135.number().int().nullish() });

// src/generated-definitions/XblAchievementUpdateRequest.ts
var XblAchievementUpdateRequest = z136.object({
  achievements: z136.array(XboxAchievement).nullish(),
  serviceConfigId: z136.string().nullish(),
  titleId: z136.string().nullish(),
  xboxUserId: z136.string().nullish()
});

// src/generated-definitions/XblDlcSyncRequest.ts
import { z as z137 } from "zod";
var XblDlcSyncRequest = z137.object({ xstsToken: z137.string().nullish() });

// src/generated-definitions/XblEntitlementOwnershipRequest.ts
import { z as z138 } from "zod";
var XblEntitlementOwnershipRequest = z138.object({ delegationToken: z138.string().nullish(), sandboxId: z138.string().nullish() });

// src/generated-definitions/XblIapConfigRequest.ts
import { z as z139 } from "zod";
var XblIapConfigRequest = z139.object({ relyingPartyCert: z139.string() });

// src/generated-definitions/XblReconcileRequest.ts
import { z as z140 } from "zod";
var XblReconcileRequest = z140.object({
  currencyCode: z140.string().nullish(),
  price: z140.number().nullish(),
  productId: z140.string().nullish(),
  xstsToken: z140.string().nullish()
});

// src/generated-definitions/XblUserSessionRequest.ts
import { z as z141 } from "zod";
var XblUserSessionRequest = z141.object({
  gameSessionId: z141.string(),
  payload: z141.record(z141.any()),
  scid: z141.string(),
  sessionTemplateName: z141.string()
});

// src/generated-definitions/XsollaPaywallConfigRequest.ts
import { z as z142 } from "zod";
var XsollaPaywallConfigRequest = z142.object({
  device: z142.enum(["DESKTOP", "MOBILE"]).nullish(),
  showCloseButton: z142.boolean().nullish(),
  size: z142.enum(["LARGE", "MEDIUM", "SMALL"]).nullish(),
  theme: z142.enum(["DARK", "DEFAULT", "DEFAULT_DARK"]).nullish()
});

// package.json
var name = "@accelbyte/sdk-platform";
var version = "6.0.0";
var author = "AccelByte Inc";

// src/Platform.ts
console.log(`${name}@${version}`);
var apis = {
  OrderDedicatedAdminApi,
  ItemAdminApi,
  PaymentDedicatedAdminApi,
  PaymentConfigAdminApi,
  FulfillmentScriptAdminApi,
  ViewAdminApi,
  OrderAdminApi,
  StoreAdminApi,
  RewardAdminApi,
  WalletAdminApi,
  SectionAdminApi,
  CampaignAdminApi,
  KeyGroupAdminApi,
  CategoryAdminApi,
  CurrencyAdminApi,
  EntitlementAdminApi,
  TradeActionAdminApi,
  SubscriptionAdminApi,
  IapAdminApi,
  PaymentAdminApi,
  DlcAdminApi,
  InvoiceAdminApi,
  FulfillmentAdminApi,
  IapNotificationAdminApi,
  IapSubscriptionAdminApi,
  RevocationAdminApi,
  TicketAdminApi,
  ServicePluginConfigAdminApi,
  ClawbackAdminApi,
  PaymentCallbackConfigAdminApi,
  SessionPlatformAdminApi,
  AchievementPlatformAdminApi,
  AnonymizationAdminApi,
  PlatformAccountClosureAdminApi,
  CatalogChangesAdminApi,
  PlatformAdminApi,
  DlcApi,
  StoreApi,
  CategoryApi,
  CurrencyApi,
  ItemApi,
  PaymentStationApi,
  RewardApi,
  IapApi,
  ViewApi,
  OrderApi,
  SectionApi,
  EntitlementApi,
  SubscriptionApi,
  FulfillmentApi,
  PaymentAccountApi,
  WalletApi,
  IapSubscriptionApi,
  version: () => console.log({
    version,
    name,
    author
  })
};
var Platform = apis;

// src/custom/clients/Ecommerce.ts
var OrderStatus = Order.shape.status.unwrap().unwrap();

// src/custom/clients/PlatformClient.ts
var _PlatformClient = class _PlatformClient {
  static async getCurrencyMap(sdk) {
    const { data: currencies } = await Platform.CurrencyApi(sdk).getCurrencies();
    const currMap = currencies.reduce(
      (currencyMap, cr) => {
        currencyMap.set(cr.currencyCode, cr);
        return currencyMap;
      },
      /* @__PURE__ */ new Map()
    );
    return currMap;
  }
};
/**
 * get a map of wallet represented by its currency code. Taken from LegacyWalletApi
 */
_PlatformClient.getWalletMap = async (userId, currencyCodes, sdk) => {
  const wallets = await Promise.all(
    currencyCodes.map(
      (currencyCode) => Platform.WalletApi(sdk).getWallet_ByUserId_ByCurrencyCode(userId, currencyCode).then((result2) => {
        return result2.data;
      }).catch((error) => {
        throw error;
      })
    )
  );
  const result = wallets.reduce(
    (map, wallet) => {
      map.set(wallet.currencyCode, wallet);
      return map;
    },
    /* @__PURE__ */ new Map()
  );
  return result;
};
/**
 * Fetch all information needed for a user to check the user's availability to purchase the item
 */
_PlatformClient.fetchPrePurchaseInformation = async ({ userId, item, sdk }) => {
  const [currencyMapResult, availableItemInfoResult, itemOwnershipResult, baseAppOwnershipResult, purchaseConditionValidationResult] = await Promise.all([
    _PlatformClient.getCurrencyMap(sdk),
    Platform.ItemApi(sdk).getDynamic_ByItemId(item.itemId),
    userId && item.itemId ? Platform.EntitlementApi(sdk).getEntitlementsOwnershipAny_ByUserId(userId, {
      itemIds: [item.itemId].filter(Boolean)
    }) : null,
    userId && item.baseAppId ? Platform.EntitlementApi(sdk).getEntitlementsOwnershipAny_ByUserId(userId, {
      appIds: [item.baseAppId].filter(Boolean)
    }) : null,
    userId ? Platform.ItemApi(sdk).createItemPurchaseConditionValidate({
      itemIds: [item.itemId]
    }) : null
  ]);
  return {
    currencyMapResult,
    availableItemInfoResult,
    itemOwnershipResult,
    baseAppOwnershipResult,
    purchaseConditionValidationResult
  };
};
var PlatformClient = _PlatformClient;
export {
  AchievementInfo,
  AchievementPlatformAdmin$,
  AchievementPlatformAdminApi,
  Action,
  ActionRequest,
  AdditionalData,
  AdditionalDataEntitlement,
  AdminEntitlementDecrement,
  AdminEntitlementSoldRequest,
  AdminOrderCreate,
  AdyenConfig,
  AliPayConfig,
  AnonymizationAdmin$,
  AnonymizationAdminApi,
  AppConfig,
  AppEntitlementInfo,
  AppEntitlementPagingSlicedResult,
  AppInfo,
  AppLocalization,
  AppUpdate,
  AppleIapConfigInfo,
  AppleIapConfigRequest,
  AppleIapConfigVersionInfo,
  AppleIapReceipt,
  AppleIapRequest,
  AvailableComparison,
  AvailablePredicate,
  AvailablePredicateArray,
  AvailablePrice,
  BaseCustomConfig,
  BaseTlsConfig,
  BasicCategoryInfo,
  BasicCategoryInfoArray,
  BasicItem,
  BasicItemArray,
  BillingAccount,
  BillingHistoryInfo,
  BillingHistoryPagingSlicedResult,
  BinarySchema,
  BoxItem,
  BulkCreditRequest,
  BulkCreditResult,
  BulkDebitRequest,
  BulkDebitResult,
  BulkEntitlementGrantRequest,
  BulkEntitlementGrantResult,
  BulkEntitlementRevokeResult,
  BulkOperationResult,
  BulkRegionDataChangeRequest,
  BundledItemInfo,
  CampaignAdmin$,
  CampaignAdminApi,
  CampaignBatchNameChange,
  CampaignBatchNameInfo,
  CampaignBatchNameInfoArray,
  CampaignCreate,
  CampaignDynamicInfo,
  CampaignIfc,
  CampaignInfo,
  CampaignPagingSlicedResult,
  CampaignUpdate,
  CancelRequest,
  CatalogChangeInfo,
  CatalogChangePagingResult,
  CatalogChangeStatistics,
  CatalogChangesAdmin$,
  CatalogChangesAdminApi,
  CatalogConfigInfo,
  CatalogConfigUpdate,
  CatalogDefinitionInfo,
  CatalogDefinitionInfoArray,
  Category$,
  CategoryAdmin$,
  CategoryAdminApi,
  CategoryApi,
  CategoryCreate,
  CategoryInfo,
  CategoryInfoArray,
  CategoryUpdate,
  CheckoutConfig,
  ClawbackAdmin$,
  ClawbackAdminApi,
  ClawbackInfo,
  ClientRequestParameter,
  ClientTransaction,
  CodeCreate,
  CodeCreateResult,
  CodeInfo,
  CodeInfoPagingSlicedResult,
  ConditionGroup,
  ConditionGroupValidateResult,
  ConditionMatchResult,
  ConsumableEntitlementRevocationConfig,
  ConsumeItem,
  CreditPayload,
  CreditRequest,
  CreditResult,
  CreditRevocation,
  CreditSummary,
  Currency$,
  CurrencyAdmin$,
  CurrencyAdminApi,
  CurrencyApi,
  CurrencyConfig,
  CurrencyCreate,
  CurrencyInfo,
  CurrencyInfoArray,
  CurrencySummary,
  CurrencyUpdate,
  CurrencyWallet,
  CurrencyWalletArray,
  Customization,
  DebitByCurrencyCodeRequest,
  DebitByWalletPlatformRequest,
  DebitPayload,
  DebitRequest,
  DebitResult,
  DeductionDetail,
  DeleteRewardConditionRequest,
  DetailedWalletTransactionInfo,
  DetailedWalletTransactionPagingSlicedResult,
  DiscountCategory,
  DiscountCodeDeductionDetail,
  DiscountCodeInfo,
  DiscountConfig,
  DiscountItem,
  Dlc$,
  DlcAdmin$,
  DlcAdminApi,
  DlcApi,
  DlcConfigRewardShortInfo,
  DlcItem,
  DlcItemConfigInfo,
  DlcItemConfigUpdate,
  DlcRecord,
  DurableEntitlementRevocationConfig,
  Entitlement$,
  EntitlementAdmin$,
  EntitlementAdminApi,
  EntitlementApi,
  EntitlementConfigInfo,
  EntitlementDecrementResult,
  EntitlementGrant,
  EntitlementGrantResult,
  EntitlementHistoryInfo,
  EntitlementHistoryInfoArray,
  EntitlementIfc,
  EntitlementInfo,
  EntitlementInfoArray,
  EntitlementLootBoxReward,
  EntitlementOriginSyncResult,
  EntitlementOwnership,
  EntitlementOwnershipArray,
  EntitlementPagingSlicedResult,
  EntitlementPlatformConfigInfo,
  EntitlementPlatformConfigUpdate,
  EntitlementPrechekResult,
  EntitlementRevocation,
  EntitlementRevocationConfig,
  EntitlementRevokeRequest,
  EntitlementRevokeResult,
  EntitlementSoldRequest,
  EntitlementSoldResult,
  EntitlementSplitRequest,
  EntitlementSplitResult,
  EntitlementSummary,
  EntitlementTransferRequest,
  EntitlementTransferResult,
  EntitlementUpdate,
  EpicGamesDlcSyncRequest,
  EpicGamesIapConfigInfo,
  EpicGamesIapConfigRequest,
  EpicGamesReconcileRequest,
  EpicGamesReconcileResult,
  EpicGamesReconcileResultArray,
  ErrorEntity,
  EstimatedPriceInfo,
  EstimatedPriceInfoArray,
  EventAdditionalData,
  EventPayload,
  ExportStoreRequest,
  ExportStoreToCsvRequest,
  ExtensionFulfillmentSummary,
  ExternalPaymentOrderCreate,
  FieldValidationError,
  FixedPeriodRotationConfig,
  FulFillItemPayload,
  FulfillBundledItemResult,
  FulfillCodeRequest,
  FulfillItemResult,
  Fulfillment$,
  FulfillmentActionHistory,
  FulfillmentAdmin$,
  FulfillmentAdminApi,
  FulfillmentApi,
  FulfillmentError,
  FulfillmentHistoryInfo,
  FulfillmentHistoryPagingSlicedResult,
  FulfillmentInfo,
  FulfillmentItem,
  FulfillmentItemArray,
  FulfillmentPagingSlicedResult,
  FulfillmentRequest,
  FulfillmentResult,
  FulfillmentScriptAdmin$,
  FulfillmentScriptAdminApi,
  FulfillmentScriptCreate,
  FulfillmentScriptInfo,
  FulfillmentScriptInfoArray,
  FulfillmentScriptUpdate,
  FulfillmentStateInfo,
  FulfillmentV2Request,
  FulfillmentV2RequestItem,
  FulfillmentV2Result,
  FullAppInfo,
  FullCategoryInfo,
  FullCategoryInfoArray,
  FullItemInfo,
  FullItemInfoArray,
  FullItemPagingResult,
  FullItemPagingSlicedResult,
  FullSectionInfo,
  FullViewInfo,
  GoogleIapConfigInfo,
  GoogleIapConfigRequest,
  GoogleIapReceipt,
  GoogleReceiptResolveResult,
  GrantSubscriptionDaysRequest,
  GrpcServerInfo,
  HierarchicalCategoryInfo,
  HierarchicalCategoryInfoArray,
  Iap$,
  IapAdmin$,
  IapAdminApi,
  IapApi,
  IapClawbackPagingSlicedResult,
  IapConsumeHistoryInfo,
  IapConsumeHistoryPagingSlicedResult,
  IapItemConfigInfo,
  IapItemConfigUpdate,
  IapItemEntry,
  IapItemFlatEntry,
  IapItemMappingInfo,
  IapNotificationAdmin$,
  IapNotificationAdminApi,
  IapOrderInfo,
  IapOrderPagingSlicedResult,
  IapSubscription$,
  IapSubscriptionAdmin$,
  IapSubscriptionAdminApi,
  IapSubscriptionApi,
  Image,
  ImportErrorDetails,
  ImportStoreAppInfo,
  ImportStoreCategoryInfo,
  ImportStoreError,
  ImportStoreHistoryInfo,
  ImportStoreHistoryPagingResult,
  ImportStoreItemInfo,
  ImportStoreResult,
  ImportStoreSectionInfo,
  ImportStoreViewInfo,
  InGameItemSync,
  InventoryConfig,
  InvoiceAdmin$,
  InvoiceAdminApi,
  InvoiceCurrencySummary,
  InvoiceSummary,
  Item$,
  ItemAcquireRequest,
  ItemAcquireResult,
  ItemAdmin$,
  ItemAdminApi,
  ItemApi,
  ItemCreate,
  ItemDynamicDataInfo,
  ItemId,
  ItemIdArray,
  ItemInfo,
  ItemInfoArray,
  ItemNaming,
  ItemPagingSlicedResult,
  ItemPurchaseConditionValidateRequest,
  ItemPurchaseConditionValidateResult,
  ItemPurchaseConditionValidateResultArray,
  ItemReturnRequest,
  ItemRevocation,
  ItemSnapshot,
  ItemTypeConfigCreate,
  ItemTypeConfigInfo,
  ItemTypeConfigInfoArray,
  ItemTypeConfigUpdate,
  ItemUpdate,
  KeyGroupAdmin$,
  KeyGroupAdminApi,
  KeyGroupCreate,
  KeyGroupDynamicInfo,
  KeyGroupInfo,
  KeyGroupPagingSlicedResult,
  KeyGroupUpdate,
  KeyInfo,
  KeyPagingSliceResult,
  ListViewInfo,
  ListViewInfoArray,
  Localization,
  LootBoxConfig,
  LootBoxPluginConfigInfo,
  LootBoxPluginConfigUpdate,
  LootBoxReward,
  MockIapReceipt,
  NeonPayConfig,
  NotificationPagingSlicedResult,
  NotificationProcessResult,
  OculusIapConfigInfo,
  OculusIapConfigRequest,
  OculusReconcileResult,
  OculusReconcileResultArray,
  Operation,
  OperationRequest,
  OptionBoxConfig,
  Order,
  Order$,
  OrderAdmin$,
  OrderAdminApi,
  OrderApi,
  OrderBundleItemInfo,
  OrderCreate,
  OrderCreationOptions,
  OrderDedicatedAdmin$,
  OrderDedicatedAdminApi,
  OrderDiscountPreviewRequest,
  OrderDiscountPreviewResponse,
  OrderGrantInfo,
  OrderHistoryInfo,
  OrderHistoryInfoArray,
  OrderInfo,
  OrderPagingResult,
  OrderPagingSlicedResult,
  OrderRefundCreate,
  OrderStatistics,
  OrderStatus,
  OrderSummary,
  OrderSyncResult,
  OrderUpdate,
  Ownership,
  OwnershipToken,
  Paging,
  PayPalConfig,
  PaymentAccount,
  PaymentAccount$,
  PaymentAccountApi,
  PaymentAccountArray,
  PaymentAdmin$,
  PaymentAdminApi,
  PaymentCallbackConfigAdmin$,
  PaymentCallbackConfigAdminApi,
  PaymentCallbackConfigInfo,
  PaymentCallbackConfigUpdate,
  PaymentConfigAdmin$,
  PaymentConfigAdminApi,
  PaymentData,
  PaymentDedicatedAdmin$,
  PaymentDedicatedAdminApi,
  PaymentDomainWhitelistConfigEdit,
  PaymentDomainWhitelistConfigInfo,
  PaymentMerchantConfigInfo,
  PaymentMethod,
  PaymentMethodArray,
  PaymentNotificationInfo,
  PaymentNotificationPagingSlicedResult,
  PaymentOrder,
  PaymentOrderChargeRequest,
  PaymentOrderChargeStatus,
  PaymentOrderCreate,
  PaymentOrderCreateResult,
  PaymentOrderDetails,
  PaymentOrderInfo,
  PaymentOrderNeonPayConfig,
  PaymentOrderNotifySimulation,
  PaymentOrderPagingSlicedResult,
  PaymentOrderPaidResult,
  PaymentOrderRefund,
  PaymentOrderRefundResult,
  PaymentOrderSyncResult,
  PaymentProcessResult,
  PaymentProviderConfigEdit,
  PaymentProviderConfigInfo,
  PaymentProviderConfigPagingSlicedResult,
  PaymentRequest,
  PaymentStation$,
  PaymentStationApi,
  PaymentTaxConfigEdit,
  PaymentTaxConfigInfo,
  PaymentToken,
  PaymentUrl,
  PaymentUrlCreate,
  Permission,
  Platform,
  PlatformAccountClosureAdmin$,
  PlatformAccountClosureAdminApi,
  PlatformAccountClosureHistoryInfo,
  PlatformAccountClosureHistoryInfoArray,
  PlatformAdmin$,
  PlatformAdminApi,
  PlatformClient,
  PlatformDlcConfigInfo,
  PlatformDlcConfigUpdate,
  PlatformDlcEntry,
  PlatformOwnership,
  PlatformReward,
  PlatformRewardCurrency,
  PlatformRewardItem,
  PlatformSubscribeRequest,
  PlatformWallet,
  PlatformWalletConfigInfo,
  PlatformWalletConfigUpdate,
  PlayStationDlcSyncMultiServiceLabelsRequest,
  PlayStationDlcSyncRequest,
  PlayStationIapConfigInfo,
  PlayStationMultiServiceLabelsReconcileRequest,
  PlayStationReconcileRequest,
  PlayStationReconcileResult,
  PlayStationReconcileResultArray,
  PlaystationIapConfigRequest,
  PopulatedItemInfo,
  PreCheckFulfillmentRequest,
  Predicate,
  PredicateValidateResult,
  PsnEntitlementOwnershipRequest,
  PublicCustomConfigInfo,
  PublicEntitlementDecrement,
  PublicEntitlementHistoryInfo,
  PublicEntitlementMetadata,
  PurchaseCondition,
  PurchaseConditionUpdate,
  PurchasedItemCount,
  Recurring,
  RecurringChargeResult,
  RedeemHistoryInfo,
  RedeemHistoryPagingSlicedResult,
  RedeemRequest,
  RedeemResult,
  RedeemableItem,
  RegionDataChange,
  RegionDataItem,
  RegionDataItemDto,
  RequestHistory,
  Requirement,
  RevocationAdmin$,
  RevocationAdminApi,
  RevocationConfigInfo,
  RevocationConfigUpdate,
  RevocationError,
  RevocationHistoryInfo,
  RevocationHistoryPagingSlicedResult,
  RevocationPluginConfigInfo,
  RevocationPluginConfigUpdate,
  RevocationRequest,
  RevocationResult,
  RevokeCurrency,
  RevokeEntitlement,
  RevokeEntitlementPayload,
  RevokeEntry,
  RevokeFulfillmentV2Result,
  RevokeItem,
  RevokeItemSummary,
  RevokeResult,
  RevokeUseCountRequest,
  Reward$,
  RewardAdmin$,
  RewardAdminApi,
  RewardApi,
  RewardCondition,
  RewardCreate,
  RewardInfo,
  RewardItem,
  RewardMigrationResult,
  RewardPagingSlicedResult,
  RewardUpdate,
  RewardsRequest,
  SaleConfig,
  Section$,
  SectionAdmin$,
  SectionAdminApi,
  SectionApi,
  SectionCreate,
  SectionInfo,
  SectionInfoArray,
  SectionItem,
  SectionPagingSlicedResult,
  SectionPluginConfigInfo,
  SectionPluginConfigUpdate,
  SectionUpdate,
  ServicePluginConfigAdmin$,
  ServicePluginConfigAdminApi,
  ServicePluginConfigInfo,
  ServicePluginConfigUpdate,
  SessionPlatformAdmin$,
  SessionPlatformAdminApi,
  SimpleDlcRewardItem,
  SimpleEntitlement,
  SimpleUserDlc,
  SimpleUserDlcRewardContent,
  SimpleUserDlcRewardContentsResponse,
  SimpleWallet,
  Slide,
  StackableEntitlementInfo,
  StackableEntitlementInfoArray,
  SteamAchievement,
  SteamAchievementUpdateRequest,
  SteamDlcSyncRequest,
  SteamIapConfig,
  SteamIapConfigInfo,
  SteamIapConfigRequest,
  SteamSyncRequest,
  Store$,
  StoreAdmin$,
  StoreAdminApi,
  StoreApi,
  StoreBackupInfo,
  StoreCreate,
  StoreInfo,
  StoreInfoArray,
  StoreUpdate,
  StreamEvent,
  StreamEventBody,
  StripeConfig,
  SubItemAvailablePrice,
  Subscribable,
  SubscribeRequest,
  Subscription$,
  SubscriptionActivityInfo,
  SubscriptionActivityPagingSlicedResult,
  SubscriptionAdmin$,
  SubscriptionAdminApi,
  SubscriptionApi,
  SubscriptionInfo,
  SubscriptionPagingSlicedResult,
  SubscriptionSummary,
  TaxResult,
  TestResult,
  ThirdPartySubscriptionOwnership,
  ThirdPartySubscriptionTransactionHistoryInfo,
  ThirdPartySubscriptionTransactionHistoryPagingSlicedResult,
  ThirdPartySubscriptionTransactionInfo,
  ThirdPartySubscriptionTransactionPagingSlicedResult,
  ThirdPartyUserSubscriptionInfo,
  ThirdPartyUserSubscriptionPagingSlicedResult,
  TicketAcquireRequest,
  TicketAcquireResult,
  TicketAdmin$,
  TicketAdminApi,
  TicketBoothId,
  TicketDynamicInfo,
  TicketSaleDecrementRequest,
  TicketSaleIncrementRequest,
  TicketSaleIncrementResult,
  TimeLimitedBalance,
  TimedOwnership,
  TlsConfig,
  TradeActionAdmin$,
  TradeActionAdminApi,
  TradeActionPagingSlicedResult,
  TradeChainActionHistoryInfo,
  TradeChainedActionCommitRequest,
  TradeNotification,
  Transaction,
  TransactionAmountDetails,
  TwitchIapConfigInfo,
  TwitchIapConfigRequest,
  TwitchSyncRequest,
  TwitchSyncResult,
  TwitchSyncResultArray,
  UserDlc,
  UserDlcRecord,
  UserDlcRecordArray,
  UserEntitlementHistoryPagingSlicedResult,
  UserEntitlementHistoryPagingSlicedResultArray,
  ValidationErrorEntity,
  View$,
  ViewAdmin$,
  ViewAdminApi,
  ViewApi,
  ViewCreate,
  ViewInfo,
  ViewInfoArray,
  ViewUpdate,
  Wallet$,
  WalletAdmin$,
  WalletAdminApi,
  WalletApi,
  WalletInfo,
  WalletPagingSlicedResult,
  WalletRevocationConfig,
  WalletTransactionInfo,
  WalletTransactionPagingSlicedResult,
  WxPayConfigInfo,
  WxPayConfigRequest,
  XblAchievementUpdateRequest,
  XblDlcSyncRequest,
  XblEntitlementOwnershipRequest,
  XblIapConfigInfo,
  XblIapConfigRequest,
  XblReconcileRequest,
  XblReconcileResult,
  XblReconcileResultArray,
  XblUserAchievements,
  XblUserSessionRequest,
  XboxAchievement,
  XsollaConfig,
  XsollaPaywallConfig,
  XsollaPaywallConfigRequest
};
