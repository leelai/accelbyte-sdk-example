import { AccelByteSDK, SdkSetConfigParam, ApiError } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseQueryOptions, UseQueryResult, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
import { X as XblUserAchievements, a as XblAchievementUpdateRequest, S as SteamAchievementUpdateRequest, C as CampaignPagingSlicedResult, c as CampaignInfo, b as CampaignCreate, d as CodeInfo, e as CampaignUpdate, f as RedeemResult, R as RedeemRequest, g as CodeInfoPagingSlicedResult, i as CodeCreateResult, h as CodeCreate, j as CampaignDynamicInfo, k as CampaignBatchNameChange, l as CampaignBatchNameInfoArray, m as RedeemHistoryPagingSlicedResult, B as BulkOperationResult, n as CatalogChangePagingResult, o as StoreInfo, p as CatalogChangeStatistics, F as FullCategoryInfoArray, r as FullCategoryInfo, q as CategoryCreate, s as BasicCategoryInfoArray, t as CategoryUpdate, I as IapClawbackPagingSlicedResult, v as ClawbackInfo, u as StreamEvent, w as CurrencyInfoArray, y as CurrencyInfo, x as CurrencyCreate, z as CurrencyUpdate, A as CurrencyConfig, D as CurrencySummary, E as DlcItemConfigInfo, G as DlcItemConfigUpdate, U as UserDlc, P as PlatformDlcConfigInfo, H as PlatformDlcConfigUpdate, J as UserDlcRecordArray, K as EntitlementPagingSlicedResult, M as BulkEntitlementGrantResult, L as BulkEntitlementGrantRequest, N as BulkEntitlementRevokeResult, O as EntitlementConfigInfo, T as StackableEntitlementInfoArray, Q as EntitlementGrant, V as EntitlementInfo, W as AppEntitlementInfo, Y as AppEntitlementPagingSlicedResult, Z as EntitlementInfoArray, _ as EntitlementPlatformConfigInfo, $ as EntitlementPlatformConfigUpdate, a0 as Ownership, a1 as EntitlementUpdate, a2 as TimedOwnership, a3 as EntitlementOwnershipArray, a5 as EntitlementSoldResult, a4 as AdminEntitlementSoldRequest, a6 as EntitlementRevokeRequest, a7 as EntitlementHistoryInfoArray, a9 as EntitlementDecrementResult, a8 as AdminEntitlementDecrement, aa as RevokeUseCountRequest, ab as EntitlementIfc, ac as EntitlementPrechekResult, ad as FulfillmentPagingSlicedResult, ae as FulfillmentHistoryPagingSlicedResult, ag as FulfillmentResult, af as FulfillmentRequest, ah as FulfillCodeRequest, ai as RewardsRequest, ak as FulfillmentItemArray, aj as PreCheckFulfillmentRequest, am as FulfillmentV2Result, al as FulfillmentV2Request, an as RevokeFulfillmentV2Result, ao as FulfillmentScriptInfoArray, ap as FulfillmentScriptInfo, aq as FulfillmentScriptUpdate, ar as FulfillmentScriptCreate, as as XblIapConfigInfo, at as XblIapConfigRequest, au as IapItemConfigInfo, av as IapItemConfigUpdate, aw as AppleIapConfigInfo, ax as AppleIapConfigRequest, ay as SteamIapConfig, aA as SteamIapConfigInfo, az as SteamIapConfigRequest, aB as GoogleIapConfigInfo, aC as GoogleIapConfigRequest, aD as OculusIapConfigInfo, aE as OculusIapConfigRequest, aF as TwitchIapConfigInfo, aG as TwitchIapConfigRequest, aH as IapOrderPagingSlicedResult, aI as EpicGamesIapConfigInfo, aJ as EpicGamesIapConfigRequest, aK as PlayStationIapConfigInfo, aL as PlaystationIapConfigRequest, aM as TestResult, aN as MockIapReceipt, aO as IapConsumeHistoryPagingSlicedResult, aP as NotificationPagingSlicedResult, aQ as ThirdPartyUserSubscriptionPagingSlicedResult, aR as ThirdPartyUserSubscriptionInfo, aS as ThirdPartySubscriptionTransactionPagingSlicedResult, aT as ThirdPartySubscriptionTransactionInfo, aU as ThirdPartySubscriptionTransactionHistoryPagingSlicedResult, aV as ThirdPartySubscriptionOwnership, aW as InvoiceSummary, aX as ItemTypeConfigInfoArray, aY as ItemTypeConfigCreate, aZ as ItemTypeConfigInfo, a_ as ItemTypeConfigUpdate, b0 as FullItemInfo, a$ as ItemCreate, b1 as InGameItemSync, b2 as FullItemInfoArray, b3 as FullItemPagingSlicedResult, b4 as ItemUpdate, b5 as BulkRegionDataChangeRequest, b6 as FullAppInfo, b7 as AppUpdate, b8 as PopulatedItemInfo, b9 as ItemId, ba as ItemInfoArray, bb as ItemIdArray, bc as FullItemPagingResult, bd as EstimatedPriceInfo, be as ItemReturnRequest, bf as AvailablePredicateArray, bh as ItemAcquireResult, bg as ItemAcquireRequest, bi as ItemDynamicDataInfo, bj as BasicItemArray, bk as PurchaseConditionUpdate, bm as ItemPurchaseConditionValidateResultArray, bl as ItemPurchaseConditionValidateRequest, bn as KeyGroupPagingSlicedResult, bp as KeyGroupInfo, bo as KeyGroupCreate, bq as KeyGroupUpdate, br as KeyPagingSliceResult, bs as KeyGroupDynamicInfo, bt as OrderPagingResult, bu as OrderStatistics, bv as OrderInfo, bw as OrderPagingSlicedResult, bx as AdminOrderCreate, by as OrderRefundCreate, bz as OrderUpdate, bA as PurchasedItemCount, bB as OrderGrantInfo, bC as OrderHistoryInfoArray, bD as TradeNotification, bE as OrderSyncResult, bF as PaymentOrderPagingSlicedResult, bG as PaymentNotificationPagingSlicedResult, bI as PaymentOrderInfo, bH as PaymentOrderCreate, bJ as PaymentOrderChargeRequest, bK as PaymentOrderChargeStatus, bM as NotificationProcessResult, bL as PaymentOrderNotifySimulation, bN as PaymentOrderRefund, bO as PaymentCallbackConfigInfo, bP as PaymentCallbackConfigUpdate, bQ as PaymentTaxConfigInfo, bR as PaymentTaxConfigEdit, bS as PaymentProviderConfigPagingSlicedResult, bU as PaymentProviderConfigInfo, bT as PaymentProviderConfigEdit, bV as PaymentMerchantConfigInfo, bW as AdyenConfig, bX as WxPayConfigRequest, bY as AliPayConfig, bZ as PayPalConfig, b_ as StripeConfig, b$ as XsollaConfig, c0 as NeonPayConfig, c1 as CheckoutConfig, c2 as XsollaPaywallConfigRequest, c3 as PaymentDomainWhitelistConfigInfo, c4 as PaymentDomainWhitelistConfigEdit, c5 as PaymentOrderSyncResult, c7 as PaymentOrderCreateResult, c6 as ExternalPaymentOrderCreate, c8 as PaymentOrderRefundResult, c9 as PlatformAccountClosureHistoryInfoArray, cb as PlatformOwnership, ca as XblEntitlementOwnershipRequest, cc as PsnEntitlementOwnershipRequest, cd as RevocationConfigInfo, ce as RevocationConfigUpdate, cf as RevocationHistoryPagingSlicedResult, ch as RevocationResult, cg as RevocationRequest, cj as RewardInfo, ci as RewardCreate, ck as RewardUpdate, cl as RewardPagingSlicedResult, cn as ConditionMatchResult, cm as EventPayload, co as DeleteRewardConditionRequest, cp as SectionPagingSlicedResult, cr as FullSectionInfo, cq as SectionCreate, cs as SectionUpdate, ct as ServicePluginConfigInfo, cu as ServicePluginConfigUpdate, cv as LootBoxPluginConfigInfo, cw as LootBoxPluginConfigUpdate, cx as SectionPluginConfigInfo, cy as SectionPluginConfigUpdate, cz as RevocationPluginConfigInfo, cA as RevocationPluginConfigUpdate, cB as GrpcServerInfo, cC as XblUserSessionRequest, cD as StoreInfoArray, cE as StoreCreate, cF as CatalogConfigInfo, cG as CatalogConfigUpdate, cH as StoreUpdate, cI as ImportStoreResult, cJ as ExportStoreToCsvRequest, cK as StoreBackupInfo, cL as CatalogDefinitionInfoArray, cM as ExportStoreRequest, cN as ImportStoreHistoryPagingResult, cO as SubscriptionPagingSlicedResult, cP as SubscriptionActivityPagingSlicedResult, cQ as RecurringChargeResult, cR as SubscriptionInfo, cS as PlatformSubscribeRequest, cT as Subscribable, cU as GrantSubscriptionDaysRequest, cV as CancelRequest, cW as BillingHistoryPagingSlicedResult, cX as TicketDynamicInfo, cY as TicketBoothId, cZ as TicketSaleDecrementRequest, c$ as TicketSaleIncrementResult, c_ as TicketSaleIncrementRequest, d1 as TicketAcquireResult, d0 as TicketAcquireRequest, d3 as TradeChainActionHistoryInfo, d2 as TradeChainedActionCommitRequest, d4 as TradeActionPagingSlicedResult, d5 as ListViewInfoArray, d7 as FullViewInfo, d6 as ViewCreate, d8 as ViewUpdate, d9 as WalletPagingSlicedResult, db as BulkDebitResult, da as BulkDebitRequest, dd as BulkCreditResult, dc as BulkCreditRequest, de as WalletInfo, df as PlatformWalletConfigInfo, dg as PlatformWalletConfigUpdate, dh as DebitRequest, di as CurrencyWalletArray, dj as CreditRequest, dl as PlatformWallet, dk as PaymentRequest, dm as DetailedWalletTransactionPagingSlicedResult, dn as DebitByWalletPlatformRequest, dp as DebitByCurrencyCodeRequest, dq as WalletTransactionPagingSlicedResult, ds as CategoryInfoArray, dt as HierarchicalCategoryInfoArray, du as CategoryInfo, dv as SimpleUserDlcRewardContentsResponse, dw as DlcConfigRewardShortInfo, dx as PlayStationDlcSyncRequest, dy as XblDlcSyncRequest, dz as SteamDlcSyncRequest, dA as EpicGamesDlcSyncRequest, dB as PlayStationDlcSyncMultiServiceLabelsRequest, dC as UserEntitlementHistoryPagingSlicedResultArray, dD as OwnershipToken, dE as EntitlementSoldRequest, dG as EntitlementSplitResult, dF as EntitlementSplitRequest, dI as EntitlementTransferResult, dH as EntitlementTransferRequest, dJ as PublicEntitlementDecrement, dK as IapItemMappingInfo, dL as AppleIapConfigVersionInfo, dN as TwitchSyncResultArray, dM as TwitchSyncRequest, dP as PlayStationReconcileResultArray, dO as PlayStationReconcileRequest, dR as XblReconcileResultArray, dQ as XblReconcileRequest, dS as SteamSyncRequest, dT as OculusReconcileResultArray, dU as AppleIapReceipt, dW as EpicGamesReconcileResultArray, dV as EpicGamesReconcileRequest, dY as GoogleReceiptResolveResult, dX as GoogleIapReceipt, dZ as AppleIapRequest, d_ as PlayStationMultiServiceLabelsReconcileRequest, d$ as ItemInfo, e0 as ItemPagingSlicedResult, e1 as EstimatedPriceInfoArray, e2 as AppInfo, e3 as OrderCreate, e5 as OrderDiscountPreviewResponse, e4 as OrderDiscountPreviewRequest, e6 as PaymentAccountArray, e7 as TaxResult, e9 as PaymentUrl, e8 as PaymentUrlCreate, ea as BinarySchema, eb as PaymentMethodArray, ec as Customization, ee as PaymentProcessResult, ed as PaymentToken, ef as PaymentOrderDetails, eg as PaymentOrderPaidResult, eh as SectionInfoArray, ei as SubscribeRequest, ej as ViewInfoArray } from './XblReconcileResultArray-DFVv4dm6.cjs';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_AchievementPlatformAdmin {
    AchievementXbl_ByUserId = "Platform.AchievementPlatformAdmin.AchievementXbl_ByUserId",
    AchievementSteam_ByUserId = "Platform.AchievementPlatformAdmin.AchievementSteam_ByUserId"
}
/**
 * This API is used to get xbox live user achievements(Only for test).
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AchievementPlatformAdmin.AchievementXbl_ByUserId, input]
 * }
 * ```
 */
declare const useAchievementPlatformAdminApi_GetAchievementXbl_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        xboxUserId: string | null;
    };
}, options?: Omit<UseQueryOptions<XblUserAchievements, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XblUserAchievements>) => void) => UseQueryResult<XblUserAchievements, AxiosError<ApiError>>;
/**
 * This API is used to update xbox live achievements.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AchievementPlatformAdmin.AchievementXbl_ByUserId, input]
 * }
 * ```
 */
declare const useAchievementPlatformAdminApi_UpdateAchievementXbl_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblAchievementUpdateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblAchievementUpdateRequest;
}>;
/**
 * This API is used to unlock steam achievement.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AchievementPlatformAdmin.AchievementSteam_ByUserId, input]
 * }
 * ```
 */
declare const useAchievementPlatformAdminApi_UpdateAchievementSteam_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SteamAchievementUpdateRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SteamAchievementUpdateRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_AnonymizationAdmin {
    AnonymizationOrder_ByUserId = "Platform.AnonymizationAdmin.AnonymizationOrder_ByUserId",
    AnonymizationPayment_ByUserId = "Platform.AnonymizationAdmin.AnonymizationPayment_ByUserId",
    AnonymizationWallet_ByUserId = "Platform.AnonymizationAdmin.AnonymizationWallet_ByUserId",
    AnonymizationCampaign_ByUserId = "Platform.AnonymizationAdmin.AnonymizationCampaign_ByUserId",
    AnonymizationRevocation_ByUserId = "Platform.AnonymizationAdmin.AnonymizationRevocation_ByUserId",
    AnonymizationFulfillment_ByUserId = "Platform.AnonymizationAdmin.AnonymizationFulfillment_ByUserId",
    AnonymizationEntitlement_ByUserId = "Platform.AnonymizationAdmin.AnonymizationEntitlement_ByUserId",
    AnonymizationIntegration_ByUserId = "Platform.AnonymizationAdmin.AnonymizationIntegration_ByUserId",
    AnonymizationSubscription_ByUserId = "Platform.AnonymizationAdmin.AnonymizationSubscription_ByUserId"
}
/**
 * Anonymize order. At current it will only anonymize order, order history.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationOrder_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationOrder_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize payment. At current it will only anonymize payment order, payment order history.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationPayment_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationPayment_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize wallet. At current it will only anonymize wallet, wallet transaction.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationWallet_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationWallet_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize campaign. At current it will only anonymize redeem history.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationCampaign_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationCampaign_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize revocation. At current it will only anonymize revocation history.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationRevocation_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationRevocation_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize fulfillment. At current it will only anonymize fulfillment history.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationFulfillment_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationFulfillment_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize entitlement. At current it will only anonymize entitlement, entitlement history.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationEntitlement_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationEntitlement_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize integrations. At current it will only anonymize iap histories.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationIntegration_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationIntegration_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Anonymize subscription. At current it will anonymize subscription, billing history and subscription activity.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_AnonymizationAdmin.AnonymizationSubscription_ByUserId, input]
 * }
 * ```
 */
declare const useAnonymizationAdminApi_DeleteAnonymizationSubscription_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_CampaignAdmin {
    Campaigns = "Platform.CampaignAdmin.Campaigns",
    Campaign = "Platform.CampaignAdmin.Campaign",
    Code_ByCode = "Platform.CampaignAdmin.Code_ByCode",
    Enable_ByCode = "Platform.CampaignAdmin.Enable_ByCode",
    Disable_ByCode = "Platform.CampaignAdmin.Disable_ByCode",
    Campaign_ByCampaignId = "Platform.CampaignAdmin.Campaign_ByCampaignId",
    Redemption_ByUserId = "Platform.CampaignAdmin.Redemption_ByUserId",
    CodeCampaign_ByCampaignId = "Platform.CampaignAdmin.CodeCampaign_ByCampaignId",
    Dynamic_ByCampaignId = "Platform.CampaignAdmin.Dynamic_ByCampaignId",
    BatchName_ByCampaignId = "Platform.CampaignAdmin.BatchName_ByCampaignId",
    BatchNames_ByCampaignId = "Platform.CampaignAdmin.BatchNames_ByCampaignId",
    HistoryCodes_ByCampaignId = "Platform.CampaignAdmin.HistoryCodes_ByCampaignId",
    CodesCsv_ByCampaignId = "Platform.CampaignAdmin.CodesCsv_ByCampaignId",
    EnableBulkCode_ByCampaignId = "Platform.CampaignAdmin.EnableBulkCode_ByCampaignId",
    DisableBulkCode_ByCampaignId = "Platform.CampaignAdmin.DisableBulkCode_ByCampaignId"
}
/**
 * Query campaigns, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of campaigns&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Campaigns, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetCampaigns: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        tag?: string | null;
    };
}, options?: Omit<UseQueryOptions<CampaignPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CampaignPagingSlicedResult>) => void) => UseQueryResult<CampaignPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Create campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created campaign&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Campaign, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_CreateCampaignMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CampaignInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CampaignCreate;
}>, "mutationKey">, callback?: (data: CampaignInfo) => void) => UseMutationResult<CampaignInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CampaignCreate;
}>;
/**
 * Get campaign code, it will check code whether available to redeem if redeemable true.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: code info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Code_ByCode, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetCode_ByCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    code: string;
    queryParams?: {
        redeemable?: boolean | null;
        withBatchName?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<CodeInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CodeInfo>) => void) => UseQueryResult<CodeInfo, AxiosError<ApiError>>;
/**
 * Enable code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enabled code&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Enable_ByCode, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_UpdateEnable_ByCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CodeInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    code: string;
}>, "mutationKey">, callback?: (data: CodeInfo) => void) => UseMutationResult<CodeInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    code: string;
}>;
/**
 * Disable code.&lt;p&gt;Disable an active code, the code can&#39;t be disabled if it has already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disabled code&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Disable_ByCode, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_UpdateDisable_ByCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CodeInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    code: string;
}>, "mutationKey">, callback?: (data: CodeInfo) => void) => UseMutationResult<CodeInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    code: string;
}>;
/**
 * Get campaign info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Campaign_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetCampaign_ByCampaignId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    campaignId: string;
}, options?: Omit<UseQueryOptions<CampaignInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CampaignInfo>) => void) => UseQueryResult<CampaignInfo, AxiosError<ApiError>>;
/**
 * Update campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated campaign&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Campaign_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_UpdateCampaign_ByCampaignIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CampaignInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    data: CampaignUpdate;
}>, "mutationKey">, callback?: (data: CampaignInfo) => void) => UseMutationResult<CampaignInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    data: CampaignUpdate;
}>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Redeem code. If the campaign which the code belongs to is INACTIVE, the code couldn&#39;t be redeemed even if its status is ACTIVE.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Redeem result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Redemption_ByUserId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_CreateRedemption_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RedeemResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RedeemRequest;
}>, "mutationKey">, callback?: (data: RedeemResult) => void) => UseMutationResult<RedeemResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RedeemRequest;
}>;
/**
 * Query campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of codes&lt;/li&gt;&lt;li&gt;The &lt;i&gt;batchName&lt;/i&gt; field in the codes response will be present only when the &lt;i&gt;withBatchName&lt;/i&gt; parameter is &lt;i&gt;true&lt;/i&gt;, or when the &lt;i&gt;batchName&lt;/i&gt; filter is not blank.&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.CodeCampaign_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetCodeCampaign_ByCampaignId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        batchName?: string | null;
        batchNo?: number[];
        code?: string | null;
        limit?: number;
        offset?: number;
        withBatchName?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<CodeInfoPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CodeInfoPagingSlicedResult>) => void) => UseQueryResult<CodeInfoPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to create campaign codes, it will increase the batch No. based on last creation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: number of codes created&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.CodeCampaign_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_CreateCodeCampaign_ByCampaignIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CodeCreateResult, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    data: CodeCreate;
}>, "mutationKey">, callback?: (data: CodeCreateResult) => void) => UseMutationResult<CodeCreateResult, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    data: CodeCreate;
}>;
/**
 * Get campaign dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign dynamic&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.Dynamic_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetDynamic_ByCampaignId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    campaignId: string;
}, options?: Omit<UseQueryOptions<CampaignDynamicInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CampaignDynamicInfo>) => void) => UseQueryResult<CampaignDynamicInfo, AxiosError<ApiError>>;
/**
 * Change campaign batch name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.BatchName_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_UpdateBatchName_ByCampaignIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    data: CampaignBatchNameChange;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    data: CampaignBatchNameChange;
}>;
/**
 * Query campaign batch name by fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of campaign batch names&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.BatchNames_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetBatchNames_ByCampaignId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        batchName?: string | null;
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<CampaignBatchNameInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CampaignBatchNameInfoArray>) => void) => UseQueryResult<CampaignBatchNameInfoArray, AxiosError<ApiError>>;
/**
 * Query redeem history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of redeem history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.HistoryCodes_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetHistoryCodes_ByCampaignId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        code?: string | null;
        limit?: number;
        offset?: number;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RedeemHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RedeemHistoryPagingSlicedResult>) => void) => UseQueryResult<RedeemHistoryPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Download all or a batch of campaign&#39;s codes as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: codes csv file&lt;/li&gt;&lt;li&gt;The csv file will always have &lt;i&gt;Batch Name&lt;/i&gt; column, but this column will be filled only when the &lt;i&gt;withBatchName&lt;/i&gt; parameter is &lt;i&gt;true&lt;/i&gt;, or when the &lt;i&gt;batchName&lt;/i&gt; filter is not blank.&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.CodesCsv_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_GetCodesCsv_ByCampaignId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
        withBatchName?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * Bulk enable campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually enabled&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.EnableBulkCode_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_UpdateEnableBulkCode_ByCampaignIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    };
}>, "mutationKey">, callback?: (data: BulkOperationResult) => void) => UseMutationResult<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    };
}>;
/**
 * Bulk disable codes.&lt;p&gt;Bulk disable campaign codes, all matched codes will be disabled except those have already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually disabled&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CampaignAdmin.DisableBulkCode_ByCampaignId, input]
 * }
 * ```
 */
declare const useCampaignAdminApi_UpdateDisableBulkCode_ByCampaignIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    };
}>, "mutationKey">, callback?: (data: BulkOperationResult) => void) => UseMutationResult<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    campaignId: string;
    queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_CatalogChangesAdmin {
    CatalogChangeSelectAll_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangeSelectAll_ByStoreId",
    CatalogChangesByCriteria_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangesByCriteria_ByStoreId",
    CatalogChangePublishAll_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangePublishAll_ByStoreId",
    CatalogChangesStatistics_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangesStatistics_ByStoreId",
    CatalogChangeUnselectAll_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangeUnselectAll_ByStoreId",
    CatalogChangePublishSelected_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangePublishSelected_ByStoreId",
    Select_ByStoreId_ByChangeId = "Platform.CatalogChangesAdmin.Select_ByStoreId_ByChangeId",
    Unselect_ByStoreId_ByChangeId = "Platform.CatalogChangesAdmin.Unselect_ByStoreId_ByChangeId",
    CatalogChangeSelectAllByCriteria_ByStoreId = "Platform.CatalogChangesAdmin.CatalogChangeSelectAllByCriteria_ByStoreId"
}
/**
 * Select all changes.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangeSelectAll_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateCatalogChangeSelectAll_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>;
/**
 * This API is used to query changes .&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the pagination of changes&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangesByCriteria_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_GetCatalogChangesByCriteria_ByStoreId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        selected?: boolean | null;
        sortBy?: string[];
        status?: "PUBLISHED" | "UNPUBLISHED";
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
        withTotal?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<CatalogChangePagingResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CatalogChangePagingResult>) => void) => UseQueryResult<CatalogChangePagingResult, AxiosError<ApiError>>;
/**
 * This API is used to publish all unpublished changes.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: no content&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangePublishAll_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateCatalogChangePublishAll_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>;
/**
 * This API is used to query catalog changes statistics .&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: catalog changes statistics changes&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangesStatistics_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_GetCatalogChangesStatistics_ByStoreId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    };
}, options?: Omit<UseQueryOptions<CatalogChangeStatistics, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CatalogChangeStatistics>) => void) => UseQueryResult<CatalogChangeStatistics, AxiosError<ApiError>>;
/**
 * Unselect all change.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangeUnselectAll_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateCatalogChangeUnselectAll_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>;
/**
 * This API is used to publish selected unpublished changes.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: no content&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangePublishSelected_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateCatalogChangePublishSelected_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>;
/**
 * Select a change, it will be included when partial publish.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.Select_ByStoreId_ByChangeId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateSelect_ByStoreId_ByChangeIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    changeId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    changeId: string;
}>;
/**
 * Unselect a change, it will not be included when partial publish.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.Unselect_ByStoreId_ByChangeId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateUnselect_ByStoreId_ByChangeIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    changeId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    changeId: string;
}>;
/**
 * Select all changes by criteria
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CatalogChangesAdmin.CatalogChangeSelectAllByCriteria_ByStoreId, input]
 * }
 * ```
 */
declare const useCatalogChangesAdminApi_UpdateCatalogChangeSelectAllByCriteria_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        selected?: boolean | null;
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        selected?: boolean | null;
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_CategoryAdmin {
    Categories = "Platform.CategoryAdmin.Categories",
    Category = "Platform.CategoryAdmin.Category",
    CategoriesBasic = "Platform.CategoryAdmin.CategoriesBasic",
    Category_ByCategoryPath = "Platform.CategoryAdmin.Category_ByCategoryPath",
    Children_ByCategoryPath = "Platform.CategoryAdmin.Children_ByCategoryPath",
    Descendants_ByCategoryPath = "Platform.CategoryAdmin.Descendants_ByCategoryPath"
}
/**
 * This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Categories, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_GetCategories: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullCategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullCategoryInfoArray>) => void) => UseQueryResult<FullCategoryInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to create category.&lt;p&gt;A category is a path separated by &#34;/&#34;. A category also has localized display names. Example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizationDisplayNames&#34;: \{&#34;en&#34; : &#34;Games&#34;} }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Category, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_CreateCategoryMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullCategoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CategoryCreate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullCategoryInfo) => void) => UseMutationResult<FullCategoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CategoryCreate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to list all categories&#39; basic info of a store ordered by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of categories&#39; paths&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.CategoriesBasic, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_GetCategoriesBasic: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<BasicCategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BasicCategoryInfoArray>) => void) => UseQueryResult<BasicCategoryInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to delete category by category path. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Category_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_DeleteCategory_ByCategoryPathMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullCategoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    categoryPath: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullCategoryInfo) => void) => UseMutationResult<FullCategoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    categoryPath: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Category_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_GetCategory_ByCategoryPath: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    categoryPath: string;
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullCategoryInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullCategoryInfo>) => void) => UseQueryResult<FullCategoryInfo, AxiosError<ApiError>>;
/**
 * This API is used to update category. &lt;p&gt; The category update data is a category object, example as:&lt;pre&gt;&lt;code&gt;{ &#34;storeId&#34;: &#34;store-id&#34;, &#34;localizationDisplayNames&#34;: {&#34;en&#34; : &#34;Games&#34;} }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the updated category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Category_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_UpdateCategory_ByCategoryPathMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullCategoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    categoryPath: string;
    data: CategoryUpdate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullCategoryInfo) => void) => UseMutationResult<FullCategoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    categoryPath: string;
    data: CategoryUpdate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Children_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_GetChildren_ByCategoryPath: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    categoryPath: string;
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullCategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullCategoryInfoArray>) => void) => UseQueryResult<FullCategoryInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CategoryAdmin.Descendants_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryAdminApi_GetDescendants_ByCategoryPath: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    categoryPath: string;
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullCategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullCategoryInfoArray>) => void) => UseQueryResult<FullCategoryInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_ClawbackAdmin {
    IapClawbackHistories = "Platform.ClawbackAdmin.IapClawbackHistories",
    IapClawbackPlaystationMock = "Platform.ClawbackAdmin.IapClawbackPlaystationMock"
}
/**
 * Query clawback history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated clawback history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ClawbackAdmin.IapClawbackHistories, input]
 * }
 * ```
 */
declare const useClawbackAdminApi_GetIapClawbackHistories: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endTime?: string | null;
        eventType?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "OTHER" | "REFUND";
        externalOrderId?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        status?: "FAIL" | "IGNORED" | "INIT" | "SUCCESS";
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<IapClawbackPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<IapClawbackPagingSlicedResult>) => void) => UseQueryResult<IapClawbackPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Mock Sync PlayStation Clawback event..
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ClawbackAdmin.IapClawbackPlaystationMock, input]
 * }
 * ```
 */
declare const useClawbackAdminApi_CreateIapClawbackPlaystationMockMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ClawbackInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: StreamEvent;
}>, "mutationKey">, callback?: (data: ClawbackInfo) => void) => UseMutationResult<ClawbackInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: StreamEvent;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_CurrencyAdmin {
    Currencies = "Platform.CurrencyAdmin.Currencies",
    Currency = "Platform.CurrencyAdmin.Currency",
    Currency_ByCurrencyCode = "Platform.CurrencyAdmin.Currency_ByCurrencyCode",
    Config_ByCurrencyCode = "Platform.CurrencyAdmin.Config_ByCurrencyCode",
    Summary_ByCurrencyCode = "Platform.CurrencyAdmin.Summary_ByCurrencyCode"
}
/**
 * List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CurrencyAdmin.Currencies, input]
 * }
 * ```
 */
declare const useCurrencyAdminApi_GetCurrencies: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        currencyType?: "REAL" | "VIRTUAL";
    };
}, options?: Omit<UseQueryOptions<CurrencyInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CurrencyInfoArray>) => void) => UseQueryResult<CurrencyInfoArray, AxiosError<ApiError>>;
/**
 * Create a currency.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created currency&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CurrencyAdmin.Currency, input]
 * }
 * ```
 */
declare const useCurrencyAdminApi_CreateCurrencyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CurrencyInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CurrencyCreate;
}>, "mutationKey">, callback?: (data: CurrencyInfo) => void) => UseMutationResult<CurrencyInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CurrencyCreate;
}>;
/**
 * Delete a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CurrencyAdmin.Currency_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useCurrencyAdminApi_DeleteCurrency_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CurrencyInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    currencyCode: string;
}>, "mutationKey">, callback?: (data: CurrencyInfo) => void) => UseMutationResult<CurrencyInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    currencyCode: string;
}>;
/**
 * Update a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated currency&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CurrencyAdmin.Currency_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useCurrencyAdminApi_UpdateCurrency_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CurrencyInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    currencyCode: string;
    data: CurrencyUpdate;
}>, "mutationKey">, callback?: (data: CurrencyInfo) => void) => UseMutationResult<CurrencyInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    currencyCode: string;
    data: CurrencyUpdate;
}>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get currency config by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CurrencyAdmin.Config_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useCurrencyAdminApi_GetConfig_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    currencyCode: string;
}, options?: Omit<UseQueryOptions<CurrencyConfig, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CurrencyConfig>) => void) => UseQueryResult<CurrencyConfig, AxiosError<ApiError>>;
/**
 * Get currency summary by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CurrencyAdmin.Summary_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useCurrencyAdminApi_GetSummary_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    currencyCode: string;
}, options?: Omit<UseQueryOptions<CurrencySummary, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CurrencySummary>) => void) => UseQueryResult<CurrencySummary, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_DlcAdmin {
    DlcConfigItem = "Platform.DlcAdmin.DlcConfigItem",
    Dlc_ByUserId = "Platform.DlcAdmin.Dlc_ByUserId",
    DlcConfigPlatformMap = "Platform.DlcAdmin.DlcConfigPlatformMap",
    DlcRecords_ByUserId = "Platform.DlcAdmin.DlcRecords_ByUserId"
}
/**
 * delete a DLC item config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcConfigItem, input]
 * }
 * ```
 */
declare const useDlcAdminApi_DeleteDlcConfigItemMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get DLC item config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcConfigItem, input]
 * }
 * ```
 */
declare const useDlcAdminApi_GetDlcConfigItem: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<DlcItemConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DlcItemConfigInfo>) => void) => UseQueryResult<DlcItemConfigInfo, AxiosError<ApiError>>;
/**
 * Update DLC item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated DLC item config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcConfigItem, input]
 * }
 * ```
 */
declare const useDlcAdminApi_UpdateDlcConfigItemMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<DlcItemConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: DlcItemConfigUpdate;
}>, "mutationKey">, callback?: (data: DlcItemConfigInfo) => void) => UseMutationResult<DlcItemConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: DlcItemConfigUpdate;
}>;
/**
 * Get user dlc by platform.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.Dlc_ByUserId, input]
 * }
 * ```
 */
declare const useDlcAdminApi_GetDlc_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        type: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
    };
}, options?: Omit<UseQueryOptions<UserDlc, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<UserDlc>) => void) => UseQueryResult<UserDlc, AxiosError<ApiError>>;
/**
 * delete a Platform DLC config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcConfigPlatformMap, input]
 * }
 * ```
 */
declare const useDlcAdminApi_DeleteDlcConfigPlatformMapMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get Platform DLC config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcConfigPlatformMap, input]
 * }
 * ```
 */
declare const useDlcAdminApi_GetDlcConfigPlatformMap: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PlatformDlcConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlatformDlcConfigInfo>) => void) => UseQueryResult<PlatformDlcConfigInfo, AxiosError<ApiError>>;
/**
 * Update Platform DLC config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated Platform DLC config&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for platform dlc map&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcConfigPlatformMap, input]
 * }
 * ```
 */
declare const useDlcAdminApi_UpdateDlcConfigPlatformMapMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformDlcConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlatformDlcConfigUpdate;
}>, "mutationKey">, callback?: (data: PlatformDlcConfigInfo) => void) => UseMutationResult<PlatformDlcConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlatformDlcConfigUpdate;
}>;
/**
 * Get user dlc records.&lt;br&gt;Note: includeAllNamespaces means this endpoint will return user dlcs from all namespace, example scenario isadmin may need to check the user dlcs before unlink a 3rd party account, so the user dlcs should be from all namespaces because unlinking is a platform level action &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DlcAdmin.DlcRecords_ByUserId, input]
 * }
 * ```
 */
declare const useDlcAdminApi_GetDlcRecords_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        includeAllNamespaces?: boolean | null;
        status?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED";
        type?: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
    };
}, options?: Omit<UseQueryOptions<UserDlcRecordArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<UserDlcRecordArray>) => void) => UseQueryResult<UserDlcRecordArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_EntitlementAdmin {
    Entitlements = "Platform.EntitlementAdmin.Entitlements",
    EntitlementGrant = "Platform.EntitlementAdmin.EntitlementGrant",
    EntitlementRevoke = "Platform.EntitlementAdmin.EntitlementRevoke",
    EntitlementsByItemIds = "Platform.EntitlementAdmin.EntitlementsByItemIds",
    EntitlementsConfigInfo = "Platform.EntitlementAdmin.EntitlementsConfigInfo",
    Entitlements_ByUserId = "Platform.EntitlementAdmin.Entitlements_ByUserId",
    Entitlement_ByUserId = "Platform.EntitlementAdmin.Entitlement_ByUserId",
    Entitlement_ByEntitlementId = "Platform.EntitlementAdmin.Entitlement_ByEntitlementId",
    EntitlementsBySku_ByUserId = "Platform.EntitlementAdmin.EntitlementsBySku_ByUserId",
    EntitlementRevoke_ByUserId = "Platform.EntitlementAdmin.EntitlementRevoke_ByUserId",
    EntitlementsByAppId_ByUserId = "Platform.EntitlementAdmin.EntitlementsByAppId_ByUserId",
    EntitlementsByItemId_ByUserId = "Platform.EntitlementAdmin.EntitlementsByItemId_ByUserId",
    EntitlementsByAppType_ByUserId = "Platform.EntitlementAdmin.EntitlementsByAppType_ByUserId",
    EntitlementsByItemIds_ByUserId = "Platform.EntitlementAdmin.EntitlementsByItemIds_ByUserId",
    EntitlementConfig_ByPlatform = "Platform.EntitlementAdmin.EntitlementConfig_ByPlatform",
    EntitlementRevokeById_ByUserId = "Platform.EntitlementAdmin.EntitlementRevokeById_ByUserId",
    EntitlementsOwnershipAny_ByUserId = "Platform.EntitlementAdmin.EntitlementsOwnershipAny_ByUserId",
    Entitlement_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.Entitlement_ByUserId_ByEntitlementId",
    EntitlementsOwnershipAnyOf_ByUserId = "Platform.EntitlementAdmin.EntitlementsOwnershipAnyOf_ByUserId",
    EntitlementsOwnershipBySku_ByUserId = "Platform.EntitlementAdmin.EntitlementsOwnershipBySku_ByUserId",
    EntitlementConfigEntitlementOriginEnable = "Platform.EntitlementAdmin.EntitlementConfigEntitlementOriginEnable",
    EntitlementsOwnershipByAppId_ByUserId = "Platform.EntitlementAdmin.EntitlementsOwnershipByAppId_ByUserId",
    EntitlementsOwnershipByItemId_ByUserId = "Platform.EntitlementAdmin.EntitlementsOwnershipByItemId_ByUserId",
    EntitlementsOwnershipByItemIds_ByUserId = "Platform.EntitlementAdmin.EntitlementsOwnershipByItemIds_ByUserId",
    Sell_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.Sell_ByUserId_ByEntitlementId",
    Enable_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.Enable_ByUserId_ByEntitlementId",
    Revoke_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.Revoke_ByUserId_ByEntitlementId",
    Disable_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.Disable_ByUserId_ByEntitlementId",
    History_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.History_ByUserId_ByEntitlementId",
    Decrement_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.Decrement_ByUserId_ByEntitlementId",
    RevokeByUseCount_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.RevokeByUseCount_ByUserId_ByEntitlementId",
    RevokeByUseCountPreCheck_ByUserId_ByEntitlementId = "Platform.EntitlementAdmin.RevokeByUseCountPreCheck_ByUserId_ByEntitlementId"
}
/**
 * Query entitlements.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Entitlements, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlements: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        activeOnly?: boolean | null;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        entitlementName?: string | null;
        itemId?: string[];
        limit?: number;
        offset?: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<EntitlementPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementPagingSlicedResult>) => void) => UseQueryResult<EntitlementPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Grant entitlements to multiple users, skipped granting will be treated as fail.&lt;br&gt;&lt;br&gt;Notes: &lt;br&gt;&lt;br&gt;Support Item Types:&lt;ul&gt;&lt;li&gt;&lt;i&gt;APP&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;INGAMEITEM&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;CODE&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUBSCRIPTION&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MEDIA&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;OPTIONBOX&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;LOOTBOX&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk grant entitlements result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementGrant, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_CreateEntitlementGrantMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkEntitlementGrantResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkEntitlementGrantRequest;
}>, "mutationKey">, callback?: (data: BulkEntitlementGrantResult) => void) => UseMutationResult<BulkEntitlementGrantResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkEntitlementGrantRequest;
}>;
/**
 * Revoke entitlements, skipped revocation will be treated as fail.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk revoke entitlements result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementRevoke, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_CreateEntitlementRevokeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkEntitlementRevokeResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: string[];
}>, "mutationKey">, callback?: (data: BulkEntitlementRevokeResult) => void) => UseMutationResult<BulkEntitlementRevokeResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: string[];
}>;
/**
 * Query entitlements by Item Ids.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsByItemIds, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsByItemIds: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        activeOnly?: boolean | null;
        itemIds?: string[];
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<EntitlementPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementPagingSlicedResult>) => void) => UseQueryResult<EntitlementPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Get entitlement config info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsConfigInfo, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsConfigInfo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        withoutCache?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<EntitlementConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementConfigInfo>) => void) => UseQueryResult<EntitlementConfigInfo, AxiosError<ApiError>>;
/**
 * Query entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Entitlements_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlements_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        collectionId?: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        entitlementName?: string | null;
        features?: string[];
        fuzzyMatchName?: boolean | null;
        itemId?: string[];
        limit?: number;
        offset?: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
    };
}, options?: Omit<UseQueryOptions<EntitlementPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementPagingSlicedResult>) => void) => UseQueryResult<EntitlementPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Grant user entitlement.&lt;br&gt;&lt;br&gt;Notes: &lt;br&gt;&lt;br&gt;will skip un-supported item if input un-supported item types, please use /admin/namespaces/{namespace}/users/{userId}/fulfillment endpoint if want to fulfill other item type, like coin item&lt;br&gt;&lt;br&gt;Support Item Types:&lt;ul&gt;&lt;li&gt;&lt;i&gt;APP&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;INGAMEITEM&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;CODE&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUBSCRIPTION&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MEDIA&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;OPTIONBOX&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;LOOTBOX&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: granted entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Entitlement_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_CreateEntitlement_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StackableEntitlementInfoArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: EntitlementGrant[];
}>, "mutationKey">, callback?: (data: StackableEntitlementInfoArray) => void) => UseMutationResult<StackableEntitlementInfoArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: EntitlementGrant[];
}>;
/**
 * Get entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Entitlement_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlement_ByEntitlementId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    entitlementId: string;
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Get user entitlement by sku.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsBySku_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsBySku_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Revoke all entitlements of a user (This API is for testing purpose only)&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoked entitlements count&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementRevoke_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateEntitlementRevoke_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: BulkOperationResult) => void) => UseMutationResult<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Get user app entitlement by appId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsByAppId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsByAppId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        appId: string | null;
        activeOnly?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<AppEntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppEntitlementInfo>) => void) => UseQueryResult<AppEntitlementInfo, AxiosError<ApiError>>;
/**
 * Get user entitlement by itemId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsByItemId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsByItemId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
        activeOnly?: boolean | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsByAppType_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsByAppType_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        appType: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        activeOnly?: boolean | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<AppEntitlementPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppEntitlementPagingSlicedResult>) => void) => UseQueryResult<AppEntitlementPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Get user entitlements by itemIds.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsByItemIds_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsByItemIds_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        ids?: string[];
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<EntitlementInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfoArray>) => void) => UseQueryResult<EntitlementInfoArray, AxiosError<ApiError>>;
/**
 * Get platform entitlement config list.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementConfig_ByPlatform, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementConfig_ByPlatform: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    platform: string;
}, options?: Omit<UseQueryOptions<EntitlementPlatformConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementPlatformConfigInfo>) => void) => UseQueryResult<EntitlementPlatformConfigInfo, AxiosError<ApiError>>;
/**
 * Update platform entitlement config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform entitlement config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementConfig_ByPlatform, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateEntitlementConfig_ByPlatformMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementPlatformConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    platform: string;
    data: EntitlementPlatformConfigUpdate;
}>, "mutationKey">, callback?: (data: EntitlementPlatformConfigInfo) => void) => UseMutationResult<EntitlementPlatformConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    platform: string;
    data: EntitlementPlatformConfigUpdate;
}>;
/**
 * Revoke user&#39;s entitlements by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlements count&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementRevokeById_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateEntitlementRevokeById_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    queryParams: {
        entitlementIds: string | null;
    };
}>, "mutationKey">, callback?: (data: BulkOperationResult) => void) => UseMutationResult<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    queryParams: {
        entitlementIds: string | null;
    };
}>;
/**
 * Exists any user active entitlement of specified itemIds, skus and appIds
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsOwnershipAny_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsOwnershipAny_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        platform?: string | null;
        skus?: string[];
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Entitlement_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlement_ByUserId_ByEntitlementId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Entitlement_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateEntitlement_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementUpdate;
}>, "mutationKey">, callback?: (data: EntitlementInfo) => void) => UseMutationResult<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementUpdate;
}>;
/**
 * Exists any user active entitlement of specified items.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsOwnershipAnyOf_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsOwnershipAnyOf_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemIds: string[];
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * Get user entitlement ownership by sku.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsOwnershipBySku_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsOwnershipBySku_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<TimedOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TimedOwnership>) => void) => UseQueryResult<TimedOwnership, AxiosError<ApiError>>;
/**
 * Enable Entitlement origin feature.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementConfigEntitlementOriginEnable, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateEntitlementConfigEntitlementOriginEnableMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementConfigInfo, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: EntitlementConfigInfo) => void) => UseMutationResult<EntitlementConfigInfo, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get user app entitlement ownership by appId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsOwnershipByAppId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsOwnershipByAppId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        appId: string | null;
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * Get user entitlement ownership by itemId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsOwnershipByItemId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsOwnershipByItemId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<TimedOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TimedOwnership>) => void) => UseQueryResult<TimedOwnership, AxiosError<ApiError>>;
/**
 * Get user entitlement ownership by itemIds.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.EntitlementsOwnershipByItemIds_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetEntitlementsOwnershipByItemIds_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        ids?: string[];
        platform?: string | null;
    };
}, options?: Omit<UseQueryOptions<EntitlementOwnershipArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementOwnershipArray>) => void) => UseQueryResult<EntitlementOwnershipArray, AxiosError<ApiError>>;
/**
 * Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Sell_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateSell_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementSoldResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: AdminEntitlementSoldRequest;
}>, "mutationKey">, callback?: (data: EntitlementSoldResult) => void) => UseMutationResult<EntitlementSoldResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: AdminEntitlementSoldRequest;
}>;
/**
 * Enable user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enable entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Enable_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateEnable_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}>, "mutationKey">, callback?: (data: EntitlementInfo) => void) => UseMutationResult<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}>;
/**
 * Revoke user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Revoke_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateRevoke_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementRevokeRequest;
}>, "mutationKey">, callback?: (data: EntitlementInfo) => void) => UseMutationResult<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementRevokeRequest;
}>;
/**
 * Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can&#39;t consume.&lt;br&gt;&lt;b&gt;Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disable entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Disable_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateDisable_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}>, "mutationKey">, callback?: (data: EntitlementInfo) => void) => UseMutationResult<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}>;
/**
 * Get user entitlement histories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of entitlement history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.History_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetHistory_ByUserId_ByEntitlementId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}, options?: Omit<UseQueryOptions<EntitlementHistoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementHistoryInfoArray>) => void) => UseQueryResult<EntitlementHistoryInfoArray, AxiosError<ApiError>>;
/**
 * Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.Decrement_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementDecrementResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: AdminEntitlementDecrement;
}>, "mutationKey">, callback?: (data: EntitlementDecrementResult) => void) => UseMutationResult<EntitlementDecrementResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: AdminEntitlementDecrement;
}>;
/**
 * @deprecated
 * Revoke specified use count of user entitlement. please use /{entitlementId}/revoke/byUseCount endpoint instead of this endpoint&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.RevokeByUseCount_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_UpdateRevokeByUseCount_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: RevokeUseCountRequest;
}>, "mutationKey">, callback?: (data: EntitlementInfo) => void) => UseMutationResult<EntitlementInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: RevokeUseCountRequest;
}>;
/**
 * Revoke specified count of user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: The revoked entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.RevokeByUseCount_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_CreateRevokeByUseCount_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementIfc, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: RevokeUseCountRequest;
}>, "mutationKey">, callback?: (data: EntitlementIfc) => void) => UseMutationResult<EntitlementIfc, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: RevokeUseCountRequest;
}>;
/**
 * Checks if specified use count of user entitlement can be revoked without actually revoking it.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: true if revokable, false otherwise&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EntitlementAdmin.RevokeByUseCountPreCheck_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementAdminApi_GetRevokeByUseCountPreCheck_ByUserId_ByEntitlementId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    queryParams: {
        quantity: number;
    };
}, options?: Omit<UseQueryOptions<EntitlementPrechekResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementPrechekResult>) => void) => UseQueryResult<EntitlementPrechekResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_FulfillmentAdmin {
    Fulfillments_v2 = "Platform.FulfillmentAdmin.Fulfillments_v2",
    FulfillmentHistory = "Platform.FulfillmentAdmin.FulfillmentHistory",
    Fulfillment_ByUserId = "Platform.FulfillmentAdmin.Fulfillment_ByUserId",
    FulfillmentCode_ByUserId = "Platform.FulfillmentAdmin.FulfillmentCode_ByUserId",
    FulfillmentReward_ByUserId = "Platform.FulfillmentAdmin.FulfillmentReward_ByUserId",
    FulfillmentPreCheck_ByUserId = "Platform.FulfillmentAdmin.FulfillmentPreCheck_ByUserId",
    FulfillmentReward_ByUserId_v2 = "Platform.FulfillmentAdmin.FulfillmentReward_ByUserId_v2",
    Fulfillment_ByUserId_ByTransactionId_v2 = "Platform.FulfillmentAdmin.Fulfillment_ByUserId_ByTransactionId_v2",
    Retry_ByUserId_ByTransactionId_v2 = "Platform.FulfillmentAdmin.Retry_ByUserId_ByTransactionId_v2",
    Revoke_ByUserId_ByTransactionId_v2 = "Platform.FulfillmentAdmin.Revoke_ByUserId_ByTransactionId_v2"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Query fulfillments in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of fulfillment info:&lt;ul&gt;&lt;li&gt;storeId in items can be ignored&lt;/li&gt;&lt;li&gt;error in successList will always be null&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.Fulfillments_v2, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_GetFulfillments_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        state?: "FULFILLED" | "FULFILL_FAILED" | "REVOKED" | "REVOKE_FAILED";
        transactionId?: string | null;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FulfillmentPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FulfillmentPagingSlicedResult>) => void) => UseQueryResult<FulfillmentPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Query fulfillment histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query fulfillment history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.FulfillmentHistory, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_GetFulfillmentHistory: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        status?: "FAIL" | "SUCCESS";
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FulfillmentHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FulfillmentHistoryPagingSlicedResult>) => void) => UseQueryResult<FulfillmentHistoryPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Fulfill item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.Fulfillment_ByUserId, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_CreateFulfillment_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FulfillmentRequest;
}>, "mutationKey">, callback?: (data: FulfillmentResult) => void) => UseMutationResult<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FulfillmentRequest;
}>;
/**
 * Redeem campaign code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.FulfillmentCode_ByUserId, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_CreateFulfillmentCode_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FulfillCodeRequest;
}>, "mutationKey">, callback?: (data: FulfillmentResult) => void) => UseMutationResult<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FulfillCodeRequest;
}>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.FulfillmentReward_ByUserId, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RewardsRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RewardsRequest;
}>;
/**
 * Retrieve and check fulfillment items based on the provided request.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of fulfillment items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.FulfillmentPreCheck_ByUserId, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_CreateFulfillmentPreCheck_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentItemArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PreCheckFulfillmentRequest;
}>, "mutationKey">, callback?: (data: FulfillmentItemArray) => void) => UseMutationResult<FulfillmentItemArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PreCheckFulfillmentRequest;
}>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;li&gt;&lt;i&gt;rewards Item unsupported Type&lt;/i&gt;: SUBSCRIPTION&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.FulfillmentReward_ByUserId_v2, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RewardsRequest;
}>, "mutationKey">, callback?: (data: FulfillmentResult) => void) => UseMutationResult<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RewardsRequest;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Fulfill items by transactionId.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: storeId, region, language, and entitlementCollectionId can be ignored.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.Fulfillment_ByUserId_ByTransactionId_v2, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_UpdateFulfillment_ByUserId_ByTransactionIdMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentV2Result, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    transactionId: string;
    data: FulfillmentV2Request;
}>, "mutationKey">, callback?: (data: FulfillmentV2Result) => void) => UseMutationResult<FulfillmentV2Result, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    transactionId: string;
    data: FulfillmentV2Request;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Retry fulfill items by transactionId without sending the original payload.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.Retry_ByUserId_ByTransactionId_v2, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_UpdateRetry_ByUserId_ByTransactionIdMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentV2Result, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    transactionId: string;
}>, "mutationKey">, callback?: (data: FulfillmentV2Result) => void) => UseMutationResult<FulfillmentV2Result, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    transactionId: string;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Revoke items by transactionId.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentAdmin.Revoke_ByUserId_ByTransactionId_v2, input]
 * }
 * ```
 */
declare const useFulfillmentAdminApi_UpdateRevoke_ByUserId_ByTransactionIdMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RevokeFulfillmentV2Result, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    transactionId: string;
}>, "mutationKey">, callback?: (data: RevokeFulfillmentV2Result) => void) => UseMutationResult<RevokeFulfillmentV2Result, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    transactionId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_FulfillmentScriptAdmin {
    FulfillmentScripts = "Platform.FulfillmentScriptAdmin.FulfillmentScripts",
    FulfillmentScript_ById = "Platform.FulfillmentScriptAdmin.FulfillmentScript_ById"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;List all fulfillment scripts.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentScriptAdmin.FulfillmentScripts, input]
 * }
 * ```
 */
declare const useFulfillmentScriptAdminApi_GetFulfillmentScripts: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<FulfillmentScriptInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FulfillmentScriptInfoArray>) => void) => UseQueryResult<FulfillmentScriptInfoArray, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete fulfillment script.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentScriptAdmin.FulfillmentScript_ById, input]
 * }
 * ```
 */
declare const useFulfillmentScriptAdminApi_DeleteFulfillmentScript_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get fulfillment script by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get fulfillment script&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentScriptAdmin.FulfillmentScript_ById, input]
 * }
 * ```
 */
declare const useFulfillmentScriptAdminApi_GetFulfillmentScript_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
}, options?: Omit<UseQueryOptions<FulfillmentScriptInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FulfillmentScriptInfo>) => void) => UseQueryResult<FulfillmentScriptInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update fulfillment script.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentScriptAdmin.FulfillmentScript_ById, input]
 * }
 * ```
 */
declare const useFulfillmentScriptAdminApi_PatchFulfillmentScript_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentScriptInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: FulfillmentScriptUpdate;
}>, "mutationKey">, callback?: (data: FulfillmentScriptInfo) => void) => UseMutationResult<FulfillmentScriptInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: FulfillmentScriptUpdate;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Create fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;Fulfillment scripts are used for adding custom fulfillment logic based on &lt;b&gt;ITEM_TYPE&lt;/b&gt;: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.&lt;br&gt;Example for grantDays: &lt;br&gt;&lt;code&gt;order &amp;&amp; ((order.currency &amp;&amp; order.currency.currencyCode) == &#39;LP&#39; || order.isFree) ? 30 : -1&lt;/code&gt;&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_FulfillmentScriptAdmin.FulfillmentScript_ById, input]
 * }
 * ```
 */
declare const useFulfillmentScriptAdminApi_CreateFulfillmentScript_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentScriptInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: FulfillmentScriptCreate;
}>, "mutationKey">, callback?: (data: FulfillmentScriptInfo) => void) => UseMutationResult<FulfillmentScriptInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: FulfillmentScriptCreate;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_IapAdmin {
    IapConfigXbl = "Platform.IapAdmin.IapConfigXbl",
    IapConfigItem = "Platform.IapAdmin.IapConfigItem",
    IapConfigApple = "Platform.IapAdmin.IapConfigApple",
    IapConfigSteam = "Platform.IapAdmin.IapConfigSteam",
    IapConfigGoogle = "Platform.IapAdmin.IapConfigGoogle",
    IapConfigOculu = "Platform.IapAdmin.IapConfigOculu",
    IapConfigOculus = "Platform.IapAdmin.IapConfigOculus",
    IapConfigTwitch = "Platform.IapAdmin.IapConfigTwitch",
    Iap_ByUserId = "Platform.IapAdmin.Iap_ByUserId",
    IapConfigXblCert = "Platform.IapAdmin.IapConfigXblCert",
    IapConfigEpicgame = "Platform.IapAdmin.IapConfigEpicgame",
    IapConfigEpicgames = "Platform.IapAdmin.IapConfigEpicgames",
    IapConfigAppleCert = "Platform.IapAdmin.IapConfigAppleCert",
    IapConfigGoogleCert = "Platform.IapAdmin.IapConfigGoogleCert",
    IapConfigPlaystation = "Platform.IapAdmin.IapConfigPlaystation",
    IapAll_ByUserId = "Platform.IapAdmin.IapAll_ByUserId",
    IapConfigPlaystationValidate = "Platform.IapAdmin.IapConfigPlaystationValidate",
    IapMockReceipt_ByUserId = "Platform.IapAdmin.IapMockReceipt_ByUserId",
    IapConsumeHistory_ByUserId = "Platform.IapAdmin.IapConsumeHistory_ByUserId"
}
/**
 * Delete xbl iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigXbl, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigXblMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get xbox iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: xbox iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigXbl, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigXbl: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<XblIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XblIapConfigInfo>) => void) => UseQueryResult<XblIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update xbl iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigXbl, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigXblMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<XblIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XblIapConfigRequest;
}>, "mutationKey">, callback?: (data: XblIapConfigInfo) => void) => UseMutationResult<XblIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XblIapConfigRequest;
}>;
/**
 * delete a iap item config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigItem, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigItemMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get iap item config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigItem, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigItem: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<IapItemConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<IapItemConfigInfo>) => void) => UseQueryResult<IapItemConfigInfo, AxiosError<ApiError>>;
/**
 * Update iap item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated iap item config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigItem, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigItemMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<IapItemConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: IapItemConfigUpdate;
}>, "mutationKey">, callback?: (data: IapItemConfigInfo) => void) => UseMutationResult<IapItemConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: IapItemConfigUpdate;
}>;
/**
 * Delete apple iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigApple, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigAppleMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get apple iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: apple iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigApple, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigApple: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<AppleIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppleIapConfigInfo>) => void) => UseQueryResult<AppleIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update apple iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigApple, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigAppleMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AppleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AppleIapConfigRequest;
}>, "mutationKey">, callback?: (data: AppleIapConfigInfo) => void) => UseMutationResult<AppleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AppleIapConfigRequest;
}>;
/**
 * Delete steam iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigSteam, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigSteamMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get steam iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigSteam, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigSteam: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<SteamIapConfig, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SteamIapConfig>) => void) => UseQueryResult<SteamIapConfig, AxiosError<ApiError>>;
/**
 * Update steam iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigSteam, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigSteamMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SteamIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: SteamIapConfigRequest;
}>, "mutationKey">, callback?: (data: SteamIapConfigInfo) => void) => UseMutationResult<SteamIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: SteamIapConfigRequest;
}>;
/**
 * Delete google iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigGoogle, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigGoogleMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get google iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: google iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigGoogle, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigGoogle: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GoogleIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GoogleIapConfigInfo>) => void) => UseQueryResult<GoogleIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update google iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigGoogle, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigGoogleMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GoogleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: GoogleIapConfigRequest;
}>, "mutationKey">, callback?: (data: GoogleIapConfigInfo) => void) => UseMutationResult<GoogleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: GoogleIapConfigRequest;
}>;
/**
 * Delete oculus iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigOculu, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigOculuMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get oculus iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigOculus, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigOculus: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<OculusIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OculusIapConfigInfo>) => void) => UseQueryResult<OculusIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update oculus iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigOculu, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigOculuMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OculusIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: OculusIapConfigRequest;
}>, "mutationKey">, callback?: (data: OculusIapConfigInfo) => void) => UseMutationResult<OculusIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: OculusIapConfigRequest;
}>;
/**
 * Delete twitch iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigTwitch, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigTwitchMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get twitch iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: twitch iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigTwitch, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigTwitch: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<TwitchIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TwitchIapConfigInfo>) => void) => UseQueryResult<TwitchIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update twitch iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated twitch iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigTwitch, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigTwitchMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TwitchIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TwitchIapConfigRequest;
}>, "mutationKey">, callback?: (data: TwitchIapConfigInfo) => void) => UseMutationResult<TwitchIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TwitchIapConfigRequest;
}>;
/**
 * Query IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.Iap_ByUserId, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIap_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        productId?: string | null;
        startTime?: string | null;
        status?: "FAILED" | "FULFILLED" | "VERIFIED";
        type?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
    };
}, options?: Omit<UseQueryOptions<IapOrderPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<IapOrderPagingSlicedResult>) => void) => UseQueryResult<IapOrderPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Upload xbl business partner cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigXblCert, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigXblCertMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<XblIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
        password?: string | null;
    };
}>, "mutationKey">, callback?: (data: XblIapConfigInfo) => void) => UseMutationResult<XblIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
        password?: string | null;
    };
}>;
/**
 * Delete epic games iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigEpicgame, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigEpicgameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get epic games iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: epic games iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigEpicgames, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigEpicgames: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<EpicGamesIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EpicGamesIapConfigInfo>) => void) => UseQueryResult<EpicGamesIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update epic games iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated epic games iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigEpicgame, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigEpicgameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EpicGamesIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: EpicGamesIapConfigRequest;
}>, "mutationKey">, callback?: (data: EpicGamesIapConfigInfo) => void) => UseMutationResult<EpicGamesIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: EpicGamesIapConfigRequest;
}>;
/**
 * Upload Apple Store p8 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigAppleCert, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigAppleCertMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AppleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: AppleIapConfigInfo) => void) => UseMutationResult<AppleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>;
/**
 * Upload google play p12 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigGoogleCert, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigGoogleCertMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GoogleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: GoogleIapConfigInfo) => void) => UseMutationResult<GoogleIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>;
/**
 * Delete playstation iap config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigPlaystation, input]
 * }
 * ```
 */
declare const useIapAdminApi_DeleteIapConfigPlaystationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get playstation iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: playstation iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigPlaystation, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigPlaystation: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PlayStationIapConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayStationIapConfigInfo>) => void) => UseQueryResult<PlayStationIapConfigInfo, AxiosError<ApiError>>;
/**
 * Update playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated playstation iap config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigPlaystation, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigPlaystationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayStationIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlaystationIapConfigRequest;
}>, "mutationKey">, callback?: (data: PlayStationIapConfigInfo) => void) => UseMutationResult<PlayStationIapConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlaystationIapConfigRequest;
}>;
/**
 * Query all user IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of iap orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapAll_ByUserId, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapAll_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<IapOrderPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<IapOrderPagingSlicedResult>) => void) => UseQueryResult<IapOrderPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Validate playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Test Results&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigPlaystationValidate, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConfigPlaystationValidate: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * Validate playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Test Results&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConfigPlaystationValidate, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapConfigPlaystationValidateMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlaystationIapConfigRequest;
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlaystationIapConfigRequest;
}>;
/**
 * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Mock fulfill iap item without validate receipt.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapMockReceipt_ByUserId, input]
 * }
 * ```
 */
declare const useIapAdminApi_UpdateIapMockReceipt_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: MockIapReceipt;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: MockIapReceipt;
}>;
/**
 * Query IAP consume history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap consume history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapAdmin.IapConsumeHistory_ByUserId, input]
 * }
 * ```
 */
declare const useIapAdminApi_GetIapConsumeHistory_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        status?: "FAIL" | "PENDING" | "SUCCESS";
        type?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
    };
}, options?: Omit<UseQueryOptions<IapConsumeHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<IapConsumeHistoryPagingSlicedResult>) => void) => UseQueryResult<IapConsumeHistoryPagingSlicedResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_IapNotificationAdmin {
    IapNotifications = "Platform.IapNotificationAdmin.IapNotifications"
}
/**
 * Query third party notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Third Party Platform notifications&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapNotificationAdmin.IapNotifications, input]
 * }
 * ```
 */
declare const useIapNotificationAdminApi_GetIapNotifications: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endDate?: string | null;
        externalId?: string | null;
        limit?: number;
        offset?: number;
        source?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        startDate?: string | null;
        status?: "ERROR" | "IGNORED" | "PROCESSED" | "WARN";
        type?: string | null;
    };
}, options?: Omit<UseQueryOptions<NotificationPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<NotificationPagingSlicedResult>) => void) => UseQueryResult<NotificationPagingSlicedResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_IapSubscriptionAdmin {
    IapSubscriptions = "Platform.IapSubscriptionAdmin.IapSubscriptions",
    IapSubscriptions_ByUserId = "Platform.IapSubscriptionAdmin.IapSubscriptions_ByUserId",
    IapSubscription_ByUserId_ById = "Platform.IapSubscriptionAdmin.IapSubscription_ByUserId_ById",
    SyncIap_ByUserId_ById = "Platform.IapSubscriptionAdmin.SyncIap_ByUserId_ById",
    IapSubscriptionsTransactions_ByUserId = "Platform.IapSubscriptionAdmin.IapSubscriptionsTransactions_ByUserId",
    IapSubscriptionTransaction_ByUserId_ById = "Platform.IapSubscriptionAdmin.IapSubscriptionTransaction_ByUserId_ById",
    SyncSubscriptionIap_ByUserId_ById = "Platform.IapSubscriptionAdmin.SyncSubscriptionIap_ByUserId_ById",
    HistoriesSubscriptionsIap_ByUserId_ById = "Platform.IapSubscriptionAdmin.HistoriesSubscriptionsIap_ByUserId_ById",
    OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform = "Platform.IapSubscriptionAdmin.OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform",
    OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform = "Platform.IapSubscriptionAdmin.OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform"
}
/**
 * Query subscriptions, default sort by updatedAt Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.IapSubscriptions, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetIapSubscriptions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        productId?: string | null;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ThirdPartyUserSubscriptionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartyUserSubscriptionPagingSlicedResult>) => void) => UseQueryResult<ThirdPartyUserSubscriptionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Query user subscription, default sort by updatedAtOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.IapSubscriptions_ByUserId, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetIapSubscriptions_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        productId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ThirdPartyUserSubscriptionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartyUserSubscriptionPagingSlicedResult>) => void) => UseQueryResult<ThirdPartyUserSubscriptionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Admin get user subscription details.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.IapSubscription_ByUserId_ById, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetIapSubscription_ByUserId_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    id: string;
}, options?: Omit<UseQueryOptions<ThirdPartyUserSubscriptionInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartyUserSubscriptionInfo>) => void) => UseQueryResult<ThirdPartyUserSubscriptionInfo, AxiosError<ApiError>>;
/**
 * Sync Subscription Status
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.SyncIap_ByUserId_ById, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_UpdateSyncIap_ByUserId_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ThirdPartyUserSubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    id: string;
}>, "mutationKey">, callback?: (data: ThirdPartyUserSubscriptionInfo) => void) => UseMutationResult<ThirdPartyUserSubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    id: string;
}>;
/**
 * Admin query user subscription transactions, default sort by startAt timeOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.IapSubscriptionsTransactions_ByUserId, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetIapSubscriptionsTransactions_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        productId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ThirdPartySubscriptionTransactionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartySubscriptionTransactionPagingSlicedResult>) => void) => UseQueryResult<ThirdPartySubscriptionTransactionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Admin get user subscription details.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.IapSubscriptionTransaction_ByUserId_ById, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetIapSubscriptionTransaction_ByUserId_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    id: string;
}, options?: Omit<UseQueryOptions<ThirdPartySubscriptionTransactionInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartySubscriptionTransactionInfo>) => void) => UseQueryResult<ThirdPartySubscriptionTransactionInfo, AxiosError<ApiError>>;
/**
 * Sync Subscription Status
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.SyncSubscriptionIap_ByUserId_ById, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_UpdateSyncSubscriptionIap_ByUserId_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ThirdPartySubscriptionTransactionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    id: string;
}>, "mutationKey">, callback?: (data: ThirdPartySubscriptionTransactionInfo) => void) => UseMutationResult<ThirdPartySubscriptionTransactionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    id: string;
}>;
/**
 * Get Subscription Transaction Update History
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.HistoriesSubscriptionsIap_ByUserId_ById, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetHistoriesSubscriptionsIap_ByUserId_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    id: string;
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<ThirdPartySubscriptionTransactionHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartySubscriptionTransactionHistoryPagingSlicedResult>) => void) => UseQueryResult<ThirdPartySubscriptionTransactionHistoryPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Get user third party subscription by subscription group id.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    platform: string;
    queryParams: {
        groupId: string | null;
    };
}, options?: Omit<UseQueryOptions<ThirdPartySubscriptionOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartySubscriptionOwnership>) => void) => UseQueryResult<ThirdPartySubscriptionOwnership, AxiosError<ApiError>>;
/**
 * Get user third party subscription by subscription product id.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscriptionAdmin.OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform, input]
 * }
 * ```
 */
declare const useIapSubscriptionAdminApi_GetOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    platform: string;
    queryParams: {
        productId: string | null;
    };
}, options?: Omit<UseQueryOptions<ThirdPartySubscriptionOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartySubscriptionOwnership>) => void) => UseQueryResult<ThirdPartySubscriptionOwnership, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_InvoiceAdmin {
    InvoiceSummary = "Platform.InvoiceAdmin.InvoiceSummary",
    InvoiceDetailsCsv = "Platform.InvoiceAdmin.InvoiceDetailsCsv"
}
/**
 * Generate invoice summary.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_InvoiceAdmin.InvoiceSummary, input]
 * }
 * ```
 */
declare const useInvoiceAdminApi_GetInvoiceSummary: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endTime: string | null;
        feature: string | null;
        itemId: string | null;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        startTime: string | null;
    };
}, options?: Omit<UseQueryOptions<InvoiceSummary, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<InvoiceSummary>) => void) => UseQueryResult<InvoiceSummary, AxiosError<ApiError>>;
/**
 * Download invoice details as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: invoice details csv file&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_InvoiceAdmin.InvoiceDetailsCsv, input]
 * }
 * ```
 */
declare const useInvoiceAdminApi_GetInvoiceDetailsCsv: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endTime: string | null;
        feature: string | null;
        itemId: string | null;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        startTime: string | null;
    };
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_ItemAdmin {
    ItemsConfigs = "Platform.ItemAdmin.ItemsConfigs",
    ItemConfig = "Platform.ItemAdmin.ItemConfig",
    ItemConfig_ById = "Platform.ItemAdmin.ItemConfig_ById",
    ItemsConfigsSearch = "Platform.ItemAdmin.ItemsConfigsSearch",
    Item = "Platform.ItemAdmin.Item",
    ItemsByIds = "Platform.ItemAdmin.ItemsByIds",
    ItemsBySku = "Platform.ItemAdmin.ItemsBySku",
    ItemsSearch = "Platform.ItemAdmin.ItemsSearch",
    ItemsByAppId = "Platform.ItemAdmin.ItemsByAppId",
    Item_ByItemId = "Platform.ItemAdmin.Item_ByItemId",
    ItemsByCriteria = "Platform.ItemAdmin.ItemsByCriteria",
    ItemRegiondata = "Platform.ItemAdmin.ItemRegiondata",
    App_ByItemId = "Platform.ItemAdmin.App_ByItemId",
    ItemsBySkuLocale = "Platform.ItemAdmin.ItemsBySkuLocale",
    ItemsItemIdBySku = "Platform.ItemAdmin.ItemsItemIdBySku",
    ItemsLocaleByIds = "Platform.ItemAdmin.ItemsLocaleByIds",
    ItemsItemIdBySkus = "Platform.ItemAdmin.ItemsItemIdBySkus",
    ItemsUncategorized = "Platform.ItemAdmin.ItemsUncategorized",
    ItemsByCriteria_v2 = "Platform.ItemAdmin.ItemsByCriteria_v2",
    ItemsEstimatedPrice = "Platform.ItemAdmin.ItemsEstimatedPrice",
    Enable_ByItemId = "Platform.ItemAdmin.Enable_ByItemId",
    Locale_ByItemId = "Platform.ItemAdmin.Locale_ByItemId",
    Return_ByItemId = "Platform.ItemAdmin.Return_ByItemId",
    ItemsPredicateTypes = "Platform.ItemAdmin.ItemsPredicateTypes",
    Acquire_ByItemId = "Platform.ItemAdmin.Acquire_ByItemId",
    Disable_ByItemId = "Platform.ItemAdmin.Disable_ByItemId",
    Dynamic_ByItemId = "Platform.ItemAdmin.Dynamic_ByItemId",
    ItemsByFeaturesBasic = "Platform.ItemAdmin.ItemsByFeaturesBasic",
    Feature_ByItemId_ByFeature = "Platform.ItemAdmin.Feature_ByItemId_ByFeature",
    PurchaseCondition_ByItemId = "Platform.ItemAdmin.PurchaseCondition_ByItemId",
    ItemPurchaseConditionValidate = "Platform.ItemAdmin.ItemPurchaseConditionValidate"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get all item type configs.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsConfigs, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsConfigs: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<ItemTypeConfigInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemTypeConfigInfoArray>) => void) => UseQueryResult<ItemTypeConfigInfoArray, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to create an item type config.&lt;p&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemConfig, input]
 * }
 * ```
 */
declare const useItemAdminApi_CreateItemConfigMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemTypeConfigCreate;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemTypeConfigCreate;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to delete an item type config permanently.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemConfig_ById, input]
 * }
 * ```
 */
declare const useItemAdminApi_DeleteItemConfig_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get an item type config.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemConfig_ById, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemConfig_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
}, options?: Omit<UseQueryOptions<ItemTypeConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemTypeConfigInfo>) => void) => UseQueryResult<ItemTypeConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to update an item type config.&lt;p&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemConfig_ById, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateItemConfig_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ItemTypeConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: ItemTypeConfigUpdate;
}>, "mutationKey">, callback?: (data: ItemTypeConfigInfo) => void) => UseMutationResult<ItemTypeConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: ItemTypeConfigUpdate;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get an item type config.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsConfigsSearch, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsConfigsSearch: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        clazz?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemTypeConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemTypeConfigInfo>) => void) => UseQueryResult<ItemTypeConfigInfo, AxiosError<ApiError>>;
/**
 * This API is used to create an item. APP item only can created in publisher namespace.&lt;p&gt;An item create example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;title&#34;:&#34;required&#34;, &#34;description&#34;:&#34;optional&#34;, &#34;longDescription&#34;:&#34;optional&#34;, &#34;localExt&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \} \} \}, &#34;images&#34;: \[ \{ &#34;as&#34;:&#34;optional, image for&#34;, &#34;caption&#34;:&#34;optional&#34;, &#34;height&#34;:10, &#34;width&#34;:10, &#34;imageUrl&#34;:&#34;http://img-url-required&#34;, &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34; \} \], &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;, &#34;status&#34;: &#34;ACTIVE&#34;, &#34;listable&#34;: true, &#34;purchasable&#34;: true, &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;, &#34;name&#34;: &#34;required, also will be used as entitlement name&#34;, &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable), &#34;stackable&#34;: false, &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;, &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;, &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;, &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;, &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;, &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item created belongs to the publisher namespace&#34;, &#34;sku&#34;: &#34;optional, commonly unique item code&#34;, &#34;regionData&#34;: \{ &#34;US(store&#39;s default region is required)&#34;: \[ \{ &#34;price&#34;:10, &#34;discountPercentage&#34;: 0(integer, optional, range[0,100], discountedPrice = price \* ((100 - discountPercentage) \* 0.01), will use it to calculate discounted price if it is not 0), &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0), &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;, &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;, &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present), &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; \} \] \}, &#34;itemIds&#34;: \[ &#34;itemId&#34; \], &#34;itemQty&#34;: \{ &#34;itemId&#34;:1 \}, &#34;recurring&#34;: \{ &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;, &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set), &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set), &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7) \}, &#34;tags&#34;: \[ &#34;exampleTag24&#34; \], &#34;features&#34;: \[ &#34;feature&#34; \], &#34;clazz&#34;: &#34;weapon&#34;, &#34;boothName&#34;: &#34;C_campaign1&#34;, &#34;displayOrder&#34;: 1000, &#34;ext&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \}, &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED), &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE) }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created item data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for item extension and localization extension and inventory config custom attributes&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Item, input]
 * }
 * ```
 */
declare const useItemAdminApi_CreateItemMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemCreate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemCreate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to sync an in game item in game namespace to publisher namespace, only INGAMEITEM, CODE, COINS and SEASON are supported&lt;p&gt;The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Item, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateItemMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: InGameItemSync;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: InGameItemSync;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsByIds, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsByIds: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemIds: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemInfoArray>) => void) => UseQueryResult<FullItemInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsBySku, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsBySku: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemInfo>) => void) => UseQueryResult<FullItemInfo, AxiosError<ApiError>>;
/**
 * This API is used to search items by keyword in title, description and long description within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsSearch, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsSearch: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        keyword: string | null;
        language: string | null;
        activeOnly?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        sortBy?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemPagingSlicedResult>) => void) => UseQueryResult<FullItemPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to get the item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsByAppId, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsByAppId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        appId: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemInfo>) => void) => UseQueryResult<FullItemInfo, AxiosError<ApiError>>;
/**
 * This API is used to delete an item permanently.&lt;p&gt;force: the default value should be: false. When the value is: &lt;li&gt;&lt;i&gt;false:&lt;i&gt;only the items in the draft store that have never been published yet can be removed.&lt;/li&gt;&lt;li&gt;&lt;i&gt;true:&lt;i&gt;the item in the draft store(even been published before) can be removed.&lt;/li&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Item_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_DeleteItem_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        force?: boolean | null;
        storeId?: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        force?: boolean | null;
        storeId?: string | null;
    };
}>;
/**
 * This API is used to get an item.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Item_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItem_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemInfo>) => void) => UseQueryResult<FullItemInfo, AxiosError<ApiError>>;
/**
 * This API is used to update an item.&lt;p&gt;An item update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;title&#34;:&#34;required&#34;, &#34;description&#34;:&#34;optional&#34;, &#34;longDescription&#34;:&#34;optional&#34;, &#34;localExt&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \} \} \}, &#34;images&#34;: \[ \{ &#34;as&#34;:&#34;optional, image for&#34;, &#34;caption&#34;:&#34;optional&#34;, &#34;height&#34;:10, &#34;width&#34;:10, &#34;imageUrl&#34;:&#34;http://img-url-required&#34;, &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34; \} \], &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;, &#34;status&#34;: &#34;ACTIVE&#34;, &#34;listable&#34;: true, &#34;purchasable&#34;: true, &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;, &#34;name&#34;: &#34;optional&#34;, &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable), &#34;stackable&#34;: false, &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;, &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;, &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;, &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;, &#34;sku&#34;: &#34;optional, commonly unique item code&#34;, &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;, &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item created belongs to the publisher namespace&#34;, &#34;regionData&#34;: \{ &#34;US(store&#39;s default region is required)&#34;: \[ \{ &#34;price&#34;:10, &#34;discountPercentage&#34;:0(integer, optional, range[0,100], discountedPrice = price\*((100 - discountPercentage) \* 0.01), if it is not 0, will use it to calculate discounted price), &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0), &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;, &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;, &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present), &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; \} \] \}, &#34;itemIds&#34;: \[ &#34;itemId&#34; \], &#34;itemQty&#34;: \{ &#34;itemId&#34;:1 \}, &#34;recurring&#34;: \{ &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;, &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set), &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set), &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7) \}, &#34;tags&#34;: \[ &#34;exampleTag24&#34; \], &#34;features&#34;: \[ &#34;feature&#34; \], &#34;clazz&#34;: &#34;weapon&#34;, &#34;boothName&#34;: &#34;C_campaign1&#34;, &#34;displayOrder&#34;: 1000, &#34;ext&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \}, &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED), &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, new value should &gt;= old value if both old value and new value is limited, unset when item type is CODE) }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for item extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Item_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateItem_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: ItemUpdate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: ItemUpdate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to query items by criteria within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsByCriteria, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsByCriteria: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        activeOnly?: boolean | null;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        availableDate?: string | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        region?: string | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
        targetNamespace?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemPagingSlicedResult>) => void) => UseQueryResult<FullItemPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to update region data of items in bulk &lt;br /&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemRegiondata, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateItemRegiondataMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkRegionDataChangeRequest;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkRegionDataChangeRequest;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get an app info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.App_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetApp_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullAppInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullAppInfo>) => void) => UseQueryResult<FullAppInfo, AxiosError<ApiError>>;
/**
 * This API is used to update an app.&lt;p&gt;An app update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;developer&#34;: &#34;accelbyte&#34;, &#34;publisher&#34;: &#34;accelbyte&#34;, &#34;websiteUrl&#34;: &#34;http://accelbyte.io&#34;, &#34;forumUrl&#34;: &#34;http://accelbyte.io&#34;, &#34;platforms&#34;: \[&#34;Windows(allowed values: Windows, MacOS, Linux, IOS, Android)&#34;\], &#34;platformRequirements&#34;: \{ &#34;Windows&#34;: \[ \{ &#34;label&#34;:&#34;minimum(can be minimum or recommended)&#34;, &#34;osVersion&#34;:&#34;os version&#34;, &#34;processor&#34;:&#34;processor&#34;, &#34;ram&#34;:&#34;RAM&#34;, &#34;graphics&#34;:&#34;graphics&#34;, &#34;directXVersion&#34;:&#34;directXVersion&#34;, &#34;diskSpace&#34;:&#34;diskSpace&#34;, &#34;soundCard&#34;:&#34;soundCard&#34;, &#34;additionals&#34;:&#34;additionals&#34; \} \] \}, &#34;carousel&#34;: \[ \{ &#34;type&#34;:&#34;image(allowed values: image, video)&#34;, &#34;videoSource&#34;:&#34;generic(allowed values:generic, youtube, viemo)&#34;, &#34;url&#34;:&#34;url&#34;, &#34;alt&#34;:&#34;alternative url or text&#34;, &#34;thumbnailUrl&#34;:&#34;thumbnail url&#34;, &#34;previewUrl&#34;:&#34;preview url&#34;, \} \], &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;slogan&#34;:&#34;slogan&#34;, &#34;announcement&#34;:&#34;announcement&#34;, \} \}, &#34;primaryGenre&#34;: &#34;Action&#34;, &#34;genres&#34;: \[&#34;Action&#34;, &#34;Adventure&#34;\], &#34;players&#34;: \[&#34;Single&#34;\], &#34;releaseDate&#34;: &#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated app data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.App_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateApp_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullAppInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: AppUpdate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullAppInfo) => void) => UseMutationResult<FullAppInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: AppUpdate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsBySkuLocale, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsBySkuLocale: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<PopulatedItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PopulatedItemInfo>) => void) => UseQueryResult<PopulatedItemInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to get the itemId by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the itemId with sku&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsItemIdBySku, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsItemIdBySku: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemId, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemId>) => void) => UseQueryResult<ItemId, AxiosError<ApiError>>;
/**
 * This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsLocaleByIds, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsLocaleByIds: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemIds: string | null;
        activeOnly?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemInfoArray>) => void) => UseQueryResult<ItemInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get an list of itemId by list of sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsItemIdBySkus, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsItemIdBySkus: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        sku?: string[];
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemIdArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemIdArray>) => void) => UseQueryResult<ItemIdArray, AxiosError<ApiError>>;
/**
 * This API is used to query uncategorized items within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of uncategorized items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsUncategorized, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsUncategorized: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        activeOnly?: boolean | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullItemPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemPagingSlicedResult>) => void) => UseQueryResult<FullItemPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to query items by criteria within a store.&lt;p&gt;The behaviour for itemStatus query parameter:&lt;li&gt;TRUE: Show only ACTIVE items&lt;/li&gt;&lt;li&gt;FALSE: Show only INACTIVE items&lt;/li&gt;&lt;li&gt;Not provided: show both ACTIVE and INACTIVE items&lt;/li&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsByCriteria_v2, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsByCriteria_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        availableDate?: string | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemName?: string | null;
        itemStatus?: "ACTIVE" | "INACTIVE";
        itemType?: string[];
        limit?: number;
        offset?: number;
        region?: string | null;
        sectionExclusive?: boolean | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
        targetNamespace?: string | null;
        withTotal?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<FullItemPagingResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullItemPagingResult>) => void) => UseQueryResult<FullItemPagingResult, AxiosError<ApiError>>;
/**
 * This API is used to get estimated prices of a flexible pricing bundle
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsEstimatedPrice, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsEstimatedPrice: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemIds: string | null;
        userId: string | null;
        platform?: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<EstimatedPriceInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EstimatedPriceInfo>) => void) => UseQueryResult<EstimatedPriceInfo, AxiosError<ApiError>>;
/**
 * Enable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Enable_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateEnable_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Locale_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetLocale_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        activeOnly?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<PopulatedItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PopulatedItemInfo>) => void) => UseQueryResult<PopulatedItemInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Return_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateReturn_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: ItemReturnRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: ItemReturnRequest;
}>;
/**
 * Get available predicate types.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: available predicate types&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsPredicateTypes, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsPredicateTypes: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<AvailablePredicateArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AvailablePredicateArray>) => void) => UseQueryResult<AvailablePredicateArray, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Acquire_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateAcquire_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ItemAcquireResult, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: ItemAcquireRequest;
}>, "mutationKey">, callback?: (data: ItemAcquireResult) => void) => UseMutationResult<ItemAcquireResult, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: ItemAcquireRequest;
}>;
/**
 * Disable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Disable_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateDisable_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * Get item dynamic data for published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Dynamic_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetDynamic_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
}, options?: Omit<UseQueryOptions<ItemDynamicDataInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemDynamicDataInfo>) => void) => UseQueryResult<ItemDynamicDataInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to list basic items by features.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of basic items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemsByFeaturesBasic, input]
 * }
 * ```
 */
declare const useItemAdminApi_GetItemsByFeaturesBasic: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        activeOnly?: boolean | null;
        features?: string[];
    };
}, options?: Omit<UseQueryOptions<BasicItemArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BasicItemArray>) => void) => UseQueryResult<BasicItemArray, AxiosError<ApiError>>;
/**
 * Remove a feature from an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Feature_ByItemId_ByFeature, input]
 * }
 * ```
 */
declare const useItemAdminApi_DeleteFeature_ByItemId_ByFeatureMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    feature: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    feature: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * Add a feature to an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.Feature_ByItemId_ByFeature, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdateFeature_ByItemId_ByFeatureMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    feature: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    feature: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to update item purchase condition
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.PurchaseCondition_ByItemId, input]
 * }
 * ```
 */
declare const useItemAdminApi_UpdatePurchaseCondition_ByItemIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: PurchaseConditionUpdate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullItemInfo) => void) => UseMutationResult<FullItemInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    itemId: string;
    data: PurchaseConditionUpdate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to validate user purchase condition
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ItemAdmin.ItemPurchaseConditionValidate, input]
 * }
 * ```
 */
declare const useItemAdminApi_CreateItemPurchaseConditionValidateMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ItemPurchaseConditionValidateResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemPurchaseConditionValidateRequest;
    queryParams: {
        userId: string | null;
        platform?: string | null;
    };
}>, "mutationKey">, callback?: (data: ItemPurchaseConditionValidateResultArray) => void) => UseMutationResult<ItemPurchaseConditionValidateResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemPurchaseConditionValidateRequest;
    queryParams: {
        userId: string | null;
        platform?: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_KeyGroupAdmin {
    Keygroups = "Platform.KeyGroupAdmin.Keygroups",
    Keygroup = "Platform.KeyGroupAdmin.Keygroup",
    KeygroupsByBoothName = "Platform.KeyGroupAdmin.KeygroupsByBoothName",
    Keygroup_ByKeyGroupId = "Platform.KeyGroupAdmin.Keygroup_ByKeyGroupId",
    Keys_ByKeyGroupId = "Platform.KeyGroupAdmin.Keys_ByKeyGroupId",
    Key_ByKeyGroupId = "Platform.KeyGroupAdmin.Key_ByKeyGroupId",
    Dynamic_ByKeyGroupId = "Platform.KeyGroupAdmin.Dynamic_ByKeyGroupId"
}
/**
 * Query key groups, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of key group&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Keygroups, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_GetKeygroups: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        tag?: string | null;
    };
}, options?: Omit<UseQueryOptions<KeyGroupPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<KeyGroupPagingSlicedResult>) => void) => UseQueryResult<KeyGroupPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Create key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created key group&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Keygroup, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_CreateKeygroupMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<KeyGroupInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: KeyGroupCreate;
}>, "mutationKey">, callback?: (data: KeyGroupInfo) => void) => UseMutationResult<KeyGroupInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: KeyGroupCreate;
}>;
/**
 * @deprecated
 * Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.KeygroupsByBoothName, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_GetKeygroupsByBoothName: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        boothName: string | null;
    };
}, options?: Omit<UseQueryOptions<KeyGroupInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<KeyGroupInfo>) => void) => UseQueryResult<KeyGroupInfo, AxiosError<ApiError>>;
/**
 * Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Keygroup_ByKeyGroupId, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_GetKeygroup_ByKeyGroupId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    keyGroupId: string;
}, options?: Omit<UseQueryOptions<KeyGroupInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<KeyGroupInfo>) => void) => UseQueryResult<KeyGroupInfo, AxiosError<ApiError>>;
/**
 * Update key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated key group&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Keygroup_ByKeyGroupId, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_UpdateKeygroup_ByKeyGroupIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<KeyGroupInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    keyGroupId: string;
    data: KeyGroupUpdate;
}>, "mutationKey">, callback?: (data: KeyGroupInfo) => void) => UseMutationResult<KeyGroupInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    keyGroupId: string;
    data: KeyGroupUpdate;
}>;
/**
 * This API is used to list keys of a key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: keys&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Keys_ByKeyGroupId, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_GetKeys_ByKeyGroupId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    keyGroupId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
        status?: "ACQUIRED" | "ACTIVE";
    };
}, options?: Omit<UseQueryOptions<KeyPagingSliceResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<KeyPagingSliceResult>) => void) => UseQueryResult<KeyPagingSliceResult, AxiosError<ApiError>>;
/**
 * This API is used to upload keys with csv format to a key group.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Key_ByKeyGroupId, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_CreateKey_ByKeyGroupIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    keyGroupId: string;
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: BulkOperationResult) => void) => UseMutationResult<BulkOperationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    keyGroupId: string;
    data: {
        file?: File;
    };
}>;
/**
 * Get key group dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_KeyGroupAdmin.Dynamic_ByKeyGroupId, input]
 * }
 * ```
 */
declare const useKeyGroupAdminApi_GetDynamic_ByKeyGroupId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    keyGroupId: string;
}, options?: Omit<UseQueryOptions<KeyGroupDynamicInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<KeyGroupDynamicInfo>) => void) => UseQueryResult<KeyGroupDynamicInfo, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_OrderAdmin {
    Orders = "Platform.OrderAdmin.Orders",
    OrdersStats = "Platform.OrderAdmin.OrdersStats",
    Order_ByOrderNo = "Platform.OrderAdmin.Order_ByOrderNo",
    Orders_ByUserId = "Platform.OrderAdmin.Orders_ByUserId",
    Order_ByUserId = "Platform.OrderAdmin.Order_ByUserId",
    Refund_ByOrderNo = "Platform.OrderAdmin.Refund_ByOrderNo",
    Order_ByUserId_ByOrderNo = "Platform.OrderAdmin.Order_ByUserId_ByOrderNo",
    OrdersCountOfItem_ByUserId = "Platform.OrderAdmin.OrdersCountOfItem_ByUserId",
    Grant_ByUserId_ByOrderNo = "Platform.OrderAdmin.Grant_ByUserId_ByOrderNo",
    Fulfill_ByUserId_ByOrderNo = "Platform.OrderAdmin.Fulfill_ByUserId_ByOrderNo",
    History_ByUserId_ByOrderNo = "Platform.OrderAdmin.History_ByUserId_ByOrderNo",
    ReceiptPdf_ByUserId_ByOrderNo = "Platform.OrderAdmin.ReceiptPdf_ByUserId_ByOrderNo",
    Notification_ByUserId_ByOrderNo = "Platform.OrderAdmin.Notification_ByUserId_ByOrderNo"
}
/**
 * Query orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Orders, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetOrders: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        orderNos?: string[];
        sortBy?: string | null;
        startTime?: string | null;
        status?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CLOSED" | "DELETED" | "FULFILLED" | "FULFILL_FAILED" | "INIT" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED";
        withTotal?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<OrderPagingResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderPagingResult>) => void) => UseQueryResult<OrderPagingResult, AxiosError<ApiError>>;
/**
 * Get Order Statistics.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order statistics&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.OrdersStats, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetOrdersStats: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<OrderStatistics, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderStatistics>) => void) => UseQueryResult<OrderStatistics, AxiosError<ApiError>>;
/**
 * Get order by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order instance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Order_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetOrder_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    orderNo: string;
}, options?: Omit<UseQueryOptions<OrderInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderInfo>) => void) => UseQueryResult<OrderInfo, AxiosError<ApiError>>;
/**
 * Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Orders_ByUserId, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetOrders_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        discounted?: boolean | null;
        itemId?: string | null;
        limit?: number;
        offset?: number;
        status?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CLOSED" | "DELETED" | "FULFILLED" | "FULFILL_FAILED" | "INIT" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED";
    };
}, options?: Omit<UseQueryOptions<OrderPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderPagingSlicedResult>) => void) => UseQueryResult<OrderPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Admin Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;sandbox default value is &lt;b&gt;false&lt;/b&gt;&lt;/li&gt;&lt;li&gt;platform default value is &lt;b&gt;Other&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for ext field&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Order_ByUserId, input]
 * }
 * ```
 */
declare const useOrderAdminApi_CreateOrder_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AdminOrderCreate;
}>, "mutationKey">, callback?: (data: OrderInfo) => void) => UseMutationResult<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AdminOrderCreate;
}>;
/**
 * Refund order by orderNo.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Refund_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_UpdateRefund_ByOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    orderNo: string;
    data: OrderRefundCreate;
}>, "mutationKey">, callback?: (data: OrderInfo) => void) => UseMutationResult<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    orderNo: string;
    data: OrderRefundCreate;
}>;
/**
 * Get an order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Order_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetOrder_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<OrderInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderInfo>) => void) => UseQueryResult<OrderInfo, AxiosError<ApiError>>;
/**
 * Update order status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Order_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_UpdateOrder_ByUserId_ByOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
    data: OrderUpdate;
}>, "mutationKey">, callback?: (data: OrderInfo) => void) => UseMutationResult<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
    data: OrderUpdate;
}>;
/**
 * This API is used to get the count of purchased item which is the order target.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Item purchased count&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.OrdersCountOfItem_ByUserId, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetOrdersCountOfItem_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
    };
}, options?: Omit<UseQueryOptions<PurchasedItemCount, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PurchasedItemCount>) => void) => UseQueryResult<PurchasedItemCount, AxiosError<ApiError>>;
/**
 * @deprecated
 * Get user order grant that fulfilled by this order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order grant&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Grant_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetGrant_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<OrderGrantInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderGrantInfo>) => void) => UseQueryResult<OrderGrantInfo, AxiosError<ApiError>>;
/**
 * Fulfill an order if the order is charged but fulfill failed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfilled order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Fulfill_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_UpdateFulfill_ByUserId_ByOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}>, "mutationKey">, callback?: (data: OrderInfo) => void) => UseMutationResult<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}>;
/**
 * Get user order history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.History_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetHistory_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<OrderHistoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderHistoryInfoArray>) => void) => UseQueryResult<OrderHistoryInfoArray, AxiosError<ApiError>>;
/**
 * Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.ReceiptPdf_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_GetReceiptPdf_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderAdmin.Notification_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderAdminApi_CreateNotification_ByUserId_ByOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
    data: TradeNotification;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
    data: TradeNotification;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_OrderDedicatedAdmin {
    Orders = "Platform.OrderDedicatedAdmin.Orders"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_OrderDedicatedAdmin.Orders, input]
 * }
 * ```
 */
declare const useOrderDedicatedAdminApi_GetOrders: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        end: string | null;
        start: string | null;
        nextEvaluatedKey?: string | null;
    };
}, options?: Omit<UseQueryOptions<OrderSyncResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderSyncResult>) => void) => UseQueryResult<OrderSyncResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PaymentAdmin {
    PaymentOrders = "Platform.PaymentAdmin.PaymentOrders",
    PaymentNotifications = "Platform.PaymentAdmin.PaymentNotifications",
    PaymentOrdersByExtTxId = "Platform.PaymentAdmin.PaymentOrdersByExtTxId",
    PaymentOrder_ByUserId = "Platform.PaymentAdmin.PaymentOrder_ByUserId",
    PaymentOrder_ByPaymentOrderNo = "Platform.PaymentAdmin.PaymentOrder_ByPaymentOrderNo",
    StatusPayment_ByPaymentOrderNo = "Platform.PaymentAdmin.StatusPayment_ByPaymentOrderNo",
    SimulateNotificationPayment_ByPaymentOrderNo = "Platform.PaymentAdmin.SimulateNotificationPayment_ByPaymentOrderNo",
    RefundPayment_ByUserId_ByPaymentOrderNo = "Platform.PaymentAdmin.RefundPayment_ByUserId_ByPaymentOrderNo"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query payment orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.PaymentOrders, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_GetPaymentOrders: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        channel?: "EXTERNAL" | "INTERNAL";
        extTxId?: string | null;
        limit?: number;
        offset?: number;
        status?: "AUTHORISED" | "AUTHORISE_FAILED" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CHARGE_FAILED" | "DELETED" | "INIT" | "NOTIFICATION_OF_CHARGEBACK" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "REQUEST_FOR_INFORMATION";
    };
}, options?: Omit<UseQueryOptions<PaymentOrderPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentOrderPagingSlicedResult>) => void) => UseQueryResult<PaymentOrderPagingSlicedResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment notifications&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.PaymentNotifications, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_GetPaymentNotifications: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endDate?: string | null;
        externalId?: string | null;
        limit?: number;
        notificationSource?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        notificationType?: string | null;
        offset?: number;
        paymentOrderNo?: string | null;
        startDate?: string | null;
        status?: "ERROR" | "IGNORED" | "PROCESSED" | "WARN";
    };
}, options?: Omit<UseQueryOptions<PaymentNotificationPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentNotificationPagingSlicedResult>) => void) => UseQueryResult<PaymentNotificationPagingSlicedResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;List external order No by external transaction id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.PaymentOrdersByExtTxId, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_GetPaymentOrdersByExtTxId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        extTxId: string | null;
    };
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to create payment order from justice service. The result contains the payment station url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for custom parameters and meta data&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.PaymentOrder_ByUserId, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_CreatePaymentOrder_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentOrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PaymentOrderCreate;
}>, "mutationKey">, callback?: (data: PaymentOrderInfo) => void) => UseMutationResult<PaymentOrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PaymentOrderCreate;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order by paymentOrderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.PaymentOrder_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_GetPaymentOrder_ByPaymentOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    paymentOrderNo: string;
}, options?: Omit<UseQueryOptions<PaymentOrderInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentOrderInfo>) => void) => UseQueryResult<PaymentOrderInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.PaymentOrder_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_UpdatePaymentOrder_ByPaymentOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentOrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentOrderChargeRequest;
}>, "mutationKey">, callback?: (data: PaymentOrderInfo) => void) => UseMutationResult<PaymentOrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentOrderChargeRequest;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order charge status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order charge status&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.StatusPayment_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_GetStatusPayment_ByPaymentOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    paymentOrderNo: string;
}, options?: Omit<UseQueryOptions<PaymentOrderChargeStatus, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentOrderChargeStatus>) => void) => UseQueryResult<PaymentOrderChargeStatus, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Simulate payment notification on sandbox payment order, usually for test usage to simulate real currency payment notification.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: notification process result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.SimulateNotificationPayment_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_UpdateSimulateNotificationPayment_ByPaymentOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<NotificationProcessResult, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentOrderNotifySimulation;
}>, "mutationKey">, callback?: (data: NotificationProcessResult) => void) => UseMutationResult<NotificationProcessResult, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentOrderNotifySimulation;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to refund order by paymentOrderNo from justice service.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAdmin.RefundPayment_ByUserId_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentAdminApi_UpdateRefundPayment_ByUserId_ByPaymentOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentOrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    paymentOrderNo: string;
    data: PaymentOrderRefund;
}>, "mutationKey">, callback?: (data: PaymentOrderInfo) => void) => UseMutationResult<PaymentOrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    paymentOrderNo: string;
    data: PaymentOrderRefund;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PaymentCallbackConfigAdmin {
    PaymentConfigCallback = "Platform.PaymentCallbackConfigAdmin.PaymentConfigCallback"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentCallbackConfigAdmin.PaymentConfigCallback, input]
 * }
 * ```
 */
declare const usePaymentCallbackConfigAdminApi_GetPaymentConfigCallback: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PaymentCallbackConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentCallbackConfigInfo>) => void) => UseQueryResult<PaymentCallbackConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentCallbackConfigAdmin.PaymentConfigCallback, input]
 * }
 * ```
 */
declare const usePaymentCallbackConfigAdminApi_UpdatePaymentConfigCallbackMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentCallbackConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentCallbackConfigUpdate;
}>, "mutationKey">, callback?: (data: PaymentCallbackConfigInfo) => void) => UseMutationResult<PaymentCallbackConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentCallbackConfigUpdate;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PaymentConfigAdmin {
    PaymentConfigTax = "Platform.PaymentConfigAdmin.PaymentConfigTax",
    PaymentConfigProvider = "Platform.PaymentConfigAdmin.PaymentConfigProvider",
    PaymentConfigMerchant_ById = "Platform.PaymentConfigAdmin.PaymentConfigMerchant_ById",
    PaymentConfigProvider_ById = "Platform.PaymentConfigAdmin.PaymentConfigProvider_ById",
    PaymentConfigMerchantMatched = "Platform.PaymentConfigAdmin.PaymentConfigMerchantMatched",
    PaymentConfigProviderMatched = "Platform.PaymentConfigAdmin.PaymentConfigProviderMatched",
    PaymentConfigProviderSpecial = "Platform.PaymentConfigAdmin.PaymentConfigProviderSpecial",
    PaymentConfigProviderAggregate = "Platform.PaymentConfigAdmin.PaymentConfigProviderAggregate",
    AdyenconfigPayment_ById = "Platform.PaymentConfigAdmin.AdyenconfigPayment_ById",
    WxpayconfigPayment_ById = "Platform.PaymentConfigAdmin.WxpayconfigPayment_ById",
    PaymentConfigMerchantAdyenconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantAdyenconfigTest",
    PaymentConfigMerchantWxpayconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantWxpayconfigTest",
    AlipayconfigPayment_ById = "Platform.PaymentConfigAdmin.AlipayconfigPayment_ById",
    PaypalconfigPayment_ById = "Platform.PaymentConfigAdmin.PaypalconfigPayment_ById",
    StripeconfigPayment_ById = "Platform.PaymentConfigAdmin.StripeconfigPayment_ById",
    XsollaconfigPayment_ById = "Platform.PaymentConfigAdmin.XsollaconfigPayment_ById",
    PaymentConfigMerchantAlipayconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantAlipayconfigTest",
    PaymentConfigMerchantPaypalconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantPaypalconfigTest",
    PaymentConfigMerchantStripeconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantStripeconfigTest",
    PaymentConfigMerchantXsollaconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantXsollaconfigTest",
    NeonpayconfigPayment_ById = "Platform.PaymentConfigAdmin.NeonpayconfigPayment_ById",
    PaymentConfigMerchantNeonpayconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantNeonpayconfigTest",
    CheckoutconfigPayment_ById = "Platform.PaymentConfigAdmin.CheckoutconfigPayment_ById",
    XsollauiconfigPayment_ById = "Platform.PaymentConfigAdmin.XsollauiconfigPayment_ById",
    PaymentConfigMerchantCheckoutconfigTest = "Platform.PaymentConfigAdmin.PaymentConfigMerchantCheckoutconfigTest",
    PaymentConfigDomains = "Platform.PaymentConfigAdmin.PaymentConfigDomains",
    PaymentConfigDomain = "Platform.PaymentConfigAdmin.PaymentConfigDomain",
    AdyenconfigTestPayment_ById = "Platform.PaymentConfigAdmin.AdyenconfigTestPayment_ById",
    WxpayconfigCertPayment_ById = "Platform.PaymentConfigAdmin.WxpayconfigCertPayment_ById",
    WxpayconfigTestPayment_ById = "Platform.PaymentConfigAdmin.WxpayconfigTestPayment_ById",
    AlipayconfigTestPayment_ById = "Platform.PaymentConfigAdmin.AlipayconfigTestPayment_ById",
    PaypalconfigTestPayment_ById = "Platform.PaymentConfigAdmin.PaypalconfigTestPayment_ById",
    StripeconfigTestPayment_ById = "Platform.PaymentConfigAdmin.StripeconfigTestPayment_ById",
    XsollaconfigTestPayment_ById = "Platform.PaymentConfigAdmin.XsollaconfigTestPayment_ById",
    NeonpayconfigTestPayment_ById = "Platform.PaymentConfigAdmin.NeonpayconfigTestPayment_ById",
    CheckoutconfigTestPayment_ById = "Platform.PaymentConfigAdmin.CheckoutconfigTestPayment_ById"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment global tax config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigTax, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigTax: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PaymentTaxConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentTaxConfigInfo>) => void) => UseQueryResult<PaymentTaxConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment tax config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarEnabled&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;required, when taxJarEnabled is true and there is no existing token&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandboxTaxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarProductCodesMapping&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;key is item type(APP|COINS|INGAMEITEM|BUNDLE|CODE|SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment global tax config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigTax, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdatePaymentConfigTaxMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentTaxConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentTaxConfigEdit;
}>, "mutationKey">, callback?: (data: PaymentTaxConfigInfo) => void) => UseMutationResult<PaymentTaxConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentTaxConfigEdit;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProvider, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigProvider: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        namespace?: string | null;
        offset?: number;
        region?: string | null;
    };
}, options?: Omit<UseQueryOptions<PaymentProviderConfigPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentProviderConfigPagingSlicedResult>) => void) => UseQueryResult<PaymentProviderConfigPagingSlicedResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Create payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProvider, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigProviderMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentProviderConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentProviderConfigEdit;
}>, "mutationKey">, callback?: (data: PaymentProviderConfigInfo) => void) => UseMutationResult<PaymentProviderConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentProviderConfigEdit;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment merchant config by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchant_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigMerchant_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
}, options?: Omit<UseQueryOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentMerchantConfigInfo>) => void) => UseQueryResult<PaymentMerchantConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProvider_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_DeletePaymentConfigProvider_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProvider_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdatePaymentConfigProvider_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentProviderConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: PaymentProviderConfigEdit;
}>, "mutationKey">, callback?: (data: PaymentProviderConfigInfo) => void) => UseMutationResult<PaymentProviderConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: PaymentProviderConfigEdit;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Debug matched payment merchant config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantMatched, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigMerchantMatched: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        namespace?: string | null;
        region?: string | null;
    };
}, options?: Omit<UseQueryOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentMerchantConfigInfo>) => void) => UseQueryResult<PaymentMerchantConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Debug matched payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProviderMatched, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigProviderMatched: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        namespace?: string | null;
        region?: string | null;
    };
}, options?: Omit<UseQueryOptions<PaymentProviderConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentProviderConfigInfo>) => void) => UseQueryResult<PaymentProviderConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get special payment providers, such as ALIPAY, WXPAY.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProviderSpecial, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigProviderSpecial: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get aggregate payment providers, such as XSOLLA, ADYEN.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigProviderAggregate, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigProviderAggregate: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update adyen config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.AdyenconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateAdyenconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: AdyenConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: AdyenConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update wxpay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.WxpayconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateWxpayconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: WxPayConfigRequest;
    queryParams?: {
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: WxPayConfigRequest;
    queryParams?: {
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test adyen configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;merchantAccount&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;notificationHmacKey&lt;/li&gt;&lt;li&gt;notificationUsername&lt;/li&gt;&lt;li&gt;notificationPassword&lt;/li&gt;&lt;li&gt;liveEndpointUrlPrefix&lt;/li&gt;&lt;li&gt;allowedPaymentMethods&lt;/li&gt;&lt;li&gt;blockedPaymentMethods&lt;/li&gt;&lt;li&gt;settings&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantAdyenconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantAdyenconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AdyenConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AdyenConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test WxPay configuration. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantWxpayconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantWxpayconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: WxPayConfigRequest;
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: WxPayConfigRequest;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update alipay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.AlipayconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateAlipayconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: AliPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: AliPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update PayPal config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaypalconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdatePaypalconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: PayPalConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: PayPalConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update stripe config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.StripeconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateStripeconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: StripeConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: StripeConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update xsolla configuration. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.XsollaconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateXsollaconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: XsollaConfig;
    queryParams?: {
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: XsollaConfig;
    queryParams?: {
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test AliPay configuration.Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantAlipayconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantAlipayconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AliPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: AliPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test PayPal configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;clientID&lt;/li&gt;&lt;li&gt;clientSecret&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;webHookId&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantPaypalconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantPaypalconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PayPalConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PayPalConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test stripe configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;li&gt;allowedPaymentMethodTypes&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;publishableKey&lt;/li&gt;&lt;li&gt;webhookSecret&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantStripeconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantStripeconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: StripeConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: StripeConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check xsolla configuration, Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;merchantId&lt;/li&gt;&lt;li&gt;projectId&lt;/li&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;projectSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantXsollaconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantXsollaconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XsollaConfig;
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XsollaConfig;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update Neon Pay config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.NeonpayconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateNeonpayconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: NeonPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: NeonPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check Neon Pay configuration, Reference: &lt;a href=&#34;https://docs.neonpay.com/docs/checkout&#34;&gt;Neon Pay Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;webhookSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantNeonpayconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantNeonpayconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NeonPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: NeonPayConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update checkout.com config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.CheckoutconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateCheckoutconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: CheckoutConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: CheckoutConfig;
    queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update xsolla UI configuration.Reference: &lt;a href=&#34;https://developers.xsolla.com/api.html#ui-integrations&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.XsollauiconfigPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateXsollauiconfigPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: XsollaPaywallConfigRequest;
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: XsollaPaywallConfigRequest;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test checkout.com configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;publicKey&lt;/li&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigMerchantCheckoutconfigTest, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_CreatePaymentConfigMerchantCheckoutconfigTestMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CheckoutConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: TestResult) => void) => UseMutationResult<TestResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CheckoutConfig;
    queryParams?: {
        sandbox?: boolean | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment domain whitelist config by namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment domain whitelist config info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigDomains, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaymentConfigDomains: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PaymentDomainWhitelistConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentDomainWhitelistConfigInfo>) => void) => UseQueryResult<PaymentDomainWhitelistConfigInfo, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment provider config by namespace.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;domains&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;list of domains to whitelist for the return URL.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Validation&lt;/i&gt;: the domain should include the protocol (http/https), but the whitelist check will only compare the host part (www.example.com)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment domain whitelist config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaymentConfigDomain, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdatePaymentConfigDomainMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentDomainWhitelistConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentDomainWhitelistConfigEdit;
}>, "mutationKey">, callback?: (data: PaymentDomainWhitelistConfigInfo) => void) => UseMutationResult<PaymentDomainWhitelistConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentDomainWhitelistConfigEdit;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test adyen configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.AdyenconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetAdyenconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
    queryParams?: {
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Upload wxpay cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.WxpayconfigCertPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_UpdateWxpayconfigCertPayment_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: PaymentMerchantConfigInfo) => void) => UseMutationResult<PaymentMerchantConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    id: string;
    data: {
        file?: File;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test WxPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.WxpayconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetWxpayconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test AliPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test alipay config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.AlipayconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetAlipayconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
    queryParams?: {
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test PayPal configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.PaypalconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetPaypalconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
    queryParams?: {
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test stripe configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.StripeconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetStripeconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
    queryParams?: {
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test xsolla configuration in payment merchant config. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test xsolla config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.XsollaconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetXsollaconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test Neon Pay configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.NeonpayconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetNeonpayconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
    queryParams?: {
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test checkout.com configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentConfigAdmin.CheckoutconfigTestPayment_ById, input]
 * }
 * ```
 */
declare const usePaymentConfigAdminApi_GetCheckoutconfigTestPayment_ById: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    id: string;
    queryParams?: {
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<TestResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TestResult>) => void) => UseQueryResult<TestResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PaymentDedicatedAdmin {
    PaymentOrders = "Platform.PaymentDedicatedAdmin.PaymentOrders",
    PaymentOrder = "Platform.PaymentDedicatedAdmin.PaymentOrder",
    RefundPayment_ByPaymentOrderNo = "Platform.PaymentDedicatedAdmin.RefundPayment_ByPaymentOrderNo"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync payment orders&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentDedicatedAdmin.PaymentOrders, input]
 * }
 * ```
 */
declare const usePaymentDedicatedAdminApi_GetPaymentOrders: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        end: string | null;
        start: string | null;
        nextEvaluatedKey?: string | null;
    };
}, options?: Omit<UseQueryOptions<PaymentOrderSyncResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentOrderSyncResult>) => void) => UseQueryResult<PaymentOrderSyncResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;p&gt;This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in, should be publisher namespace if it&#39;s a Steam like platform that share &lt;br&gt;payment config cross namespaces, otherwise it&#39;s the game namespace&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;External order number, it should be unique in invoker order system&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;User id for the order owner in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be user character id &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;price which should be greater than 0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item title&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency code, default is USD&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency namespace, default is publisher namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Country of the user, will get from user info if not present&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;language&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Language of the user&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandbox&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;set to true will create sandbox order that not real paid for xsolla/alipay and will not validate &lt;br&gt;price for wxpay.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;returnUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized return url for redirect once payment finished, leave unset to use configuration in &lt;br&gt;namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;notifyUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized notify url for payment web hook, leave unset to use configuration in namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Custom parameters&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;extOrderNo&#34;: &#34;123456789&#34;, &#34;sku&#34;: &#34;sku&#34;, &#34;targetNamespace&#34;: &#34;game1&#34;, &#34;targetUserId&#34;: &#34;94451623768940d58416ca33ca767ec3&#34;, &#34;extUserId&#34;: &#34;678&#34;, &#34;title&#34;: &#34;Frostmourne&#34;, &#34;description\&#34;: &#34;Here was power. Here was despair&#34;, &#34;price&#34;: 100, &#34;region&#34;: &#34;CN&#34;, &#34;language&#34;: &#34;zh-CN&#34;, &#34;currencyCode&#34;: &#34;USD&#34;, &#34;currencyNamespace&#34;: &#34;accelbyte&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Payment Notification:&lt;/h4&gt;&lt;p&gt;After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;payload&#34;: &#34;{ \&#34;type\&#34;: \&#34;payment\&#34;, \&#34;nonceStr\&#34;: \&#34;34c1dcf3eb58455eb161465bbfc0b590\&#34;, \&#34;paymentOrderNo\&#34;: \&#34;18081239088\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;targetNamespace\&#34;: \&#34;game1\&#34;, \&#34;targetUserId\&#34;: \&#34;94451623768940d58416ca33ca767ec3\&#34;, \&#34;extOrderNo\&#34;: \&#34;123456789\&#34;, \&#34;sku\&#34;: \&#34;sku\&#34;, \&#34;extUserId\&#34;: \&#34;678\&#34;, \&#34;price\&#34;: 100, \&#34;paymentProvider\&#34;: \&#34;XSOLLA\&#34;, \&#34;vat\&#34;: 0, \&#34;salesTax\&#34;: 0, \&#34;paymentProviderFee\&#34;: 0, \&#34;paymentMethodFee\&#34;: 0, \&#34;currency\&#34;: { \&#34;currencyCode\&#34;: \&#34;USD\&#34;, \&#34;currencySymbol\&#34;: \&#34;$\&#34;, \&#34;currencyType\&#34;: \&#34;REAL\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;decimals\&#34;: 2 }, \&#34;status\&#34;: \&#34;CHARGED\&#34;, \&#34;createdTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;chargedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34; }&#34;, &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Payment notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider, allowed values: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, can be timestamp or uuid&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created payment order info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentDedicatedAdmin.PaymentOrder, input]
 * }
 * ```
 */
declare const usePaymentDedicatedAdminApi_CreatePaymentOrderMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentOrderCreateResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ExternalPaymentOrderCreate;
}>, "mutationKey">, callback?: (data: PaymentOrderCreateResult) => void) => UseMutationResult<PaymentOrderCreateResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ExternalPaymentOrderCreate;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;p&gt;This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. &lt;ul&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDED&#34;, usually wallet paid, it indicates payment order already refunded&lt;/li&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDING&#34;, usually real money paid, platform will send notification to registered notify url once refund successfully&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order number&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund description&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;description&#34;: &#34;Repeated item.&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Refund Notification:&lt;/h4&gt;&lt;p&gt;It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Refund notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Refund notification Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;payload&#34;: &#34;{ \&#34;type\&#34;: \&#34;payment\&#34;, \&#34;nonceStr\&#34;: \&#34;34c1dcf3eb58455eb161465bbfc0b590\&#34;, \&#34;paymentOrderNo\&#34;: \&#34;18081239088\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;targetNamespace\&#34;: \&#34;game1\&#34;, \&#34;targetUserId\&#34;: \&#34;94451623768940d58416ca33ca767ec3\&#34;, \&#34;extOrderNo\&#34;: \&#34;123456789\&#34;, \&#34;sku\&#34;: \&#34;sku\&#34;, \&#34;extUserId\&#34;: \&#34;678\&#34;, \&#34;price\&#34;: 100, \&#34;paymentProvider\&#34;: \&#34;XSOLLA\&#34;, \&#34;vat\&#34;: 0, \&#34;salesTax\&#34;: 0, \&#34;paymentProviderFee\&#34;: 0, \&#34;paymentMethodFee\&#34;: 0, \&#34;currency\&#34;: { \&#34;currencyCode\&#34;: \&#34;USD\&#34;, \&#34;currencySymbol\&#34;: \&#34;$\&#34;, \&#34;currencyType\&#34;: \&#34;REAL\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;decimals\&#34;: 2 }, \&#34;status\&#34;: \&#34;REFUNDED\&#34;, \&#34;createdTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;chargedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;refundedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34; }&#34;, &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Refund notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order refund status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;refundedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order refunded&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentDedicatedAdmin.RefundPayment_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentDedicatedAdminApi_UpdateRefundPayment_ByPaymentOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentOrderRefundResult, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentOrderRefund;
}>, "mutationKey">, callback?: (data: PaymentOrderRefundResult) => void) => UseMutationResult<PaymentOrderRefundResult, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentOrderRefund;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlatformAccountClosureAdmin {
    PlatformClosureHistory_ByUserId = "Platform.PlatformAccountClosureAdmin.PlatformClosureHistory_ByUserId"
}
/**
 * Get user platform account closure history.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlatformAccountClosureAdmin.PlatformClosureHistory_ByUserId, input]
 * }
 * ```
 */
declare const usePlatformAccountClosureAdminApi_GetPlatformClosureHistory_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<PlatformAccountClosureHistoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlatformAccountClosureHistoryInfoArray>) => void) => UseQueryResult<PlatformAccountClosureHistoryInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlatformAdmin {
    OwnershipXblPlatform_ByProductSku = "Platform.PlatformAdmin.OwnershipXblPlatform_ByProductSku",
    OwnershipPsnPlatform_ByEntitlementLabel = "Platform.PlatformAdmin.OwnershipPsnPlatform_ByEntitlementLabel"
}
/**
 * Get Xbox entitlement ownership by product sku.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlatformAdmin.OwnershipXblPlatform_ByProductSku, input]
 * }
 * ```
 */
declare const usePlatformAdminApi_CreateOwnershipXblPlatform_ByProductSkuMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformOwnership, AxiosError<ApiError>, SdkSetConfigParam & {
    productSku: string;
    data: XblEntitlementOwnershipRequest;
}>, "mutationKey">, callback?: (data: PlatformOwnership) => void) => UseMutationResult<PlatformOwnership, AxiosError<ApiError>, SdkSetConfigParam & {
    productSku: string;
    data: XblEntitlementOwnershipRequest;
}>;
/**
 * Get user psn entitlement ownership by entitlement label.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlatformAdmin.OwnershipPsnPlatform_ByEntitlementLabel, input]
 * }
 * ```
 */
declare const usePlatformAdminApi_CreateOwnershipPsnPlatform_ByEntitlementLabelMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<Ownership, AxiosError<ApiError>, SdkSetConfigParam & {
    entitlementLabel: string;
    data: PsnEntitlementOwnershipRequest;
}>, "mutationKey">, callback?: (data: Ownership) => void) => UseMutationResult<Ownership, AxiosError<ApiError>, SdkSetConfigParam & {
    entitlementLabel: string;
    data: PsnEntitlementOwnershipRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_RevocationAdmin {
    RevocationConfig = "Platform.RevocationAdmin.RevocationConfig",
    RevocationHistory = "Platform.RevocationAdmin.RevocationHistory",
    Revocation_ByUserId = "Platform.RevocationAdmin.Revocation_ByUserId"
}
/**
 * Delete revocation config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RevocationAdmin.RevocationConfig, input]
 * }
 * ```
 */
declare const useRevocationAdminApi_DeleteRevocationConfigMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get revocation configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Revocation config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RevocationAdmin.RevocationConfig, input]
 * }
 * ```
 */
declare const useRevocationAdminApi_GetRevocationConfig: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<RevocationConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RevocationConfigInfo>) => void) => UseQueryResult<RevocationConfigInfo, AxiosError<ApiError>>;
/**
 * Update revocation configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Revocation config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RevocationAdmin.RevocationConfig, input]
 * }
 * ```
 */
declare const useRevocationAdminApi_UpdateRevocationConfigMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RevocationConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RevocationConfigUpdate;
}>, "mutationKey">, callback?: (data: RevocationConfigInfo) => void) => UseMutationResult<RevocationConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RevocationConfigUpdate;
}>;
/**
 * Query revocation histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query revocation history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RevocationAdmin.RevocationHistory, input]
 * }
 * ```
 */
declare const useRevocationAdminApi_GetRevocationHistory: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        source?: "DLC" | "IAP" | "ORDER" | "OTHER";
        startTime?: string | null;
        status?: "FAIL" | "SUCCESS";
        transactionId?: string | null;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RevocationHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RevocationHistoryPagingSlicedResult>) => void) => UseQueryResult<RevocationHistoryPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Do revocation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revocation results&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RevocationAdmin.Revocation_ByUserId, input]
 * }
 * ```
 */
declare const useRevocationAdminApi_UpdateRevocation_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RevocationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RevocationRequest;
}>, "mutationKey">, callback?: (data: RevocationResult) => void) => UseMutationResult<RevocationResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: RevocationRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_RewardAdmin {
    Reward = "Platform.RewardAdmin.Reward",
    RewardsExport = "Platform.RewardAdmin.RewardsExport",
    RewardImport = "Platform.RewardAdmin.RewardImport",
    Reward_ByRewardId = "Platform.RewardAdmin.Reward_ByRewardId",
    RewardsByCriteria = "Platform.RewardAdmin.RewardsByCriteria",
    Match_ByRewardId = "Platform.RewardAdmin.Match_ByRewardId",
    Record_ByRewardId = "Platform.RewardAdmin.Record_ByRewardId"
}
/**
 * This API is used to create a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created reward data&lt;/li&gt;&lt;li&gt;&lt;i&gt;Acceptable values for rewardItem&#39;s identityType are&lt;/i&gt;: ITEM_ID or ITEM_SKU&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.Reward, input]
 * }
 * ```
 */
declare const useRewardAdminApi_CreateRewardMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RewardInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RewardCreate;
}>, "mutationKey">, callback?: (data: RewardInfo) => void) => UseMutationResult<RewardInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RewardCreate;
}>;
/**
 * Export reward configurations for a given namespace into file. At current, only JSON file is supported.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.RewardsExport, input]
 * }
 * ```
 */
declare const useRewardAdminApi_GetRewardsExport: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * Import reward configurations for a given namespace from file. At current, only JSON file is supported.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.RewardImport, input]
 * }
 * ```
 */
declare const useRewardAdminApi_CreateRewardImportMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
    queryParams: {
        replaceExisting: boolean | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
    queryParams: {
        replaceExisting: boolean | null;
    };
}>;
/**
 * This API is used to delete a reward by reward Id. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted reward data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.Reward_ByRewardId, input]
 * }
 * ```
 */
declare const useRewardAdminApi_DeleteReward_ByRewardIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RewardInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
}>, "mutationKey">, callback?: (data: RewardInfo) => void) => UseMutationResult<RewardInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
}>;
/**
 * This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.Reward_ByRewardId, input]
 * }
 * ```
 */
declare const useRewardAdminApi_GetReward_ByRewardId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    rewardId: string;
}, options?: Omit<UseQueryOptions<RewardInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RewardInfo>) => void) => UseQueryResult<RewardInfo, AxiosError<ApiError>>;
/**
 * This API is used to update a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;li&gt;&lt;i&gt;Acceptable values for rewardItem&#39;s identityType are&lt;/i&gt;: ITEM_ID or ITEM_SKU&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.Reward_ByRewardId, input]
 * }
 * ```
 */
declare const useRewardAdminApi_UpdateReward_ByRewardIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RewardInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
    data: RewardUpdate;
}>, "mutationKey">, callback?: (data: RewardInfo) => void) => UseMutationResult<RewardInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
    data: RewardUpdate;
}>;
/**
 * This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.RewardsByCriteria, input]
 * }
 * ```
 */
declare const useRewardAdminApi_GetRewardsByCriteria: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        eventTopic?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
    };
}, options?: Omit<UseQueryOptions<RewardPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RewardPagingSlicedResult>) => void) => UseQueryResult<RewardPagingSlicedResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: match result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.Match_ByRewardId, input]
 * }
 * ```
 */
declare const useRewardAdminApi_UpdateMatch_ByRewardIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ConditionMatchResult, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
    data: EventPayload;
}>, "mutationKey">, callback?: (data: ConditionMatchResult) => void) => UseMutationResult<ConditionMatchResult, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
    data: EventPayload;
}>;
/**
 * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; This API is used to delete a reward condition record by reward Id and condition Name (optional). &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: 204 No Content &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RewardAdmin.Record_ByRewardId, input]
 * }
 * ```
 */
declare const useRewardAdminApi_DeleteRecord_ByRewardIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
    data: DeleteRewardConditionRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    rewardId: string;
    data: DeleteRewardConditionRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_SectionAdmin {
    Sections = "Platform.SectionAdmin.Sections",
    Section = "Platform.SectionAdmin.Section",
    Section_BySectionId = "Platform.SectionAdmin.Section_BySectionId",
    SectionPurgeExpired = "Platform.SectionAdmin.SectionPurgeExpired"
}
/**
 * This API is used to query sections.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated sections&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SectionAdmin.Sections, input]
 * }
 * ```
 */
declare const useSectionAdminApi_GetSections: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        end?: string | null;
        limit?: number;
        offset?: number;
        start?: string | null;
        storeId?: string | null;
        viewId?: string | null;
    };
}, options?: Omit<UseQueryOptions<SectionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SectionPagingSlicedResult>) => void) => UseQueryResult<SectionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to create a section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created a section&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for section extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SectionAdmin.Section, input]
 * }
 * ```
 */
declare const useSectionAdminApi_CreateSectionMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullSectionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: SectionCreate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullSectionInfo) => void) => UseMutationResult<FullSectionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: SectionCreate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to delete s section.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SectionAdmin.Section_BySectionId, input]
 * }
 * ```
 */
declare const useSectionAdminApi_DeleteSection_BySectionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sectionId: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sectionId: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get a section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: section data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SectionAdmin.Section_BySectionId, input]
 * }
 * ```
 */
declare const useSectionAdminApi_GetSection_BySectionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sectionId: string;
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullSectionInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullSectionInfo>) => void) => UseQueryResult<FullSectionInfo, AxiosError<ApiError>>;
/**
 * This API is used to update s section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated section data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for section extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SectionAdmin.Section_BySectionId, input]
 * }
 * ```
 */
declare const useSectionAdminApi_UpdateSection_BySectionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullSectionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    sectionId: string;
    data: SectionUpdate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullSectionInfo) => void) => UseMutationResult<FullSectionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    sectionId: string;
    data: SectionUpdate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to purge expired section.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SectionAdmin.SectionPurgeExpired, input]
 * }
 * ```
 */
declare const useSectionAdminApi_DeleteSectionPurgeExpiredMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    queryParams: {
        storeId: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_ServicePluginConfigAdmin {
    ConfigServicePlugin = "Platform.ServicePluginConfigAdmin.ConfigServicePlugin",
    ConfigsServicePlugin = "Platform.ServicePluginConfigAdmin.ConfigsServicePlugin",
    CatalogPluginLootbox = "Platform.ServicePluginConfigAdmin.CatalogPluginLootbox",
    CatalogPluginsLootbox = "Platform.ServicePluginConfigAdmin.CatalogPluginsLootbox",
    CatalogPluginSection = "Platform.ServicePluginConfigAdmin.CatalogPluginSection",
    CatalogPluginsSection = "Platform.ServicePluginConfigAdmin.CatalogPluginsSection",
    RevocationPluginRevocation = "Platform.ServicePluginConfigAdmin.RevocationPluginRevocation",
    RevocationPluginsRevocation = "Platform.ServicePluginConfigAdmin.RevocationPluginsRevocation",
    CatalogPluginsLootboxGrpcInfo = "Platform.ServicePluginConfigAdmin.CatalogPluginsLootboxGrpcInfo",
    CatalogPluginLootboxCustomConfigCert = "Platform.ServicePluginConfigAdmin.CatalogPluginLootboxCustomConfigCert",
    CatalogPluginSectionCustomConfigCert = "Platform.ServicePluginConfigAdmin.CatalogPluginSectionCustomConfigCert",
    RevocationPluginRevocationRevocationCustomConfigCert = "Platform.ServicePluginConfigAdmin.RevocationPluginRevocationRevocationCustomConfigCert"
}
/**
 * @deprecated
 * Delete service plugin config
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.ConfigServicePlugin, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_DeleteConfigServicePluginMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * @deprecated
 * Get service plugin config
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.ConfigsServicePlugin, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_GetConfigsServicePlugin: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<ServicePluginConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ServicePluginConfigInfo>) => void) => UseQueryResult<ServicePluginConfigInfo, AxiosError<ApiError>>;
/**
 * @deprecated
 * Update catalog config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.ConfigServicePlugin, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateConfigServicePluginMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ServicePluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ServicePluginConfigUpdate;
}>, "mutationKey">, callback?: (data: ServicePluginConfigInfo) => void) => UseMutationResult<ServicePluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ServicePluginConfigUpdate;
}>;
/**
 * Delete service plugin config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginLootbox, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_DeleteCatalogPluginLootboxMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get lootbox plugin config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginsLootbox, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_GetCatalogPluginsLootbox: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<LootBoxPluginConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<LootBoxPluginConfigInfo>) => void) => UseQueryResult<LootBoxPluginConfigInfo, AxiosError<ApiError>>;
/**
 * Update lootbox plugin config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginLootbox, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<LootBoxPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: LootBoxPluginConfigUpdate;
}>, "mutationKey">, callback?: (data: LootBoxPluginConfigInfo) => void) => UseMutationResult<LootBoxPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: LootBoxPluginConfigUpdate;
}>;
/**
 * Delete section plugin config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginSection, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_DeleteCatalogPluginSectionMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get section plugin config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginsSection, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_GetCatalogPluginsSection: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<SectionPluginConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SectionPluginConfigInfo>) => void) => UseQueryResult<SectionPluginConfigInfo, AxiosError<ApiError>>;
/**
 * Update section config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginSection, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateCatalogPluginSectionMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SectionPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: SectionPluginConfigUpdate;
}>, "mutationKey">, callback?: (data: SectionPluginConfigInfo) => void) => UseMutationResult<SectionPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: SectionPluginConfigUpdate;
}>;
/**
 * Delete service plugin config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.RevocationPluginRevocation, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_DeleteRevocationPluginRevocationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get revocation plugin config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.RevocationPluginsRevocation, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_GetRevocationPluginsRevocation: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<RevocationPluginConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RevocationPluginConfigInfo>) => void) => UseQueryResult<RevocationPluginConfigInfo, AxiosError<ApiError>>;
/**
 * Update revocation plugin config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.RevocationPluginRevocation, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RevocationPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RevocationPluginConfigUpdate;
}>, "mutationKey">, callback?: (data: RevocationPluginConfigInfo) => void) => UseMutationResult<RevocationPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: RevocationPluginConfigUpdate;
}>;
/**
 * Get lootbox plugin gRPC info.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginsLootboxGrpcInfo, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_GetCatalogPluginsLootboxGrpcInfo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        force?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<GrpcServerInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GrpcServerInfo>) => void) => UseQueryResult<GrpcServerInfo, AxiosError<ApiError>>;
/**
 * Upload lootbox plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginLootboxCustomConfigCert, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxCustomConfigCertMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<LootBoxPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: LootBoxPluginConfigInfo) => void) => UseMutationResult<LootBoxPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>;
/**
 * Upload section plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.CatalogPluginSectionCustomConfigCert, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateCatalogPluginSectionCustomConfigCertMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SectionPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: SectionPluginConfigInfo) => void) => UseMutationResult<SectionPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>;
/**
 * Upload revocation plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ServicePluginConfigAdmin.RevocationPluginRevocationRevocationCustomConfigCert, input]
 * }
 * ```
 */
declare const useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationRevocationCustomConfigCertMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RevocationPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>, "mutationKey">, callback?: (data: RevocationPluginConfigInfo) => void) => UseMutationResult<RevocationPluginConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_SessionPlatformAdmin {
    SessionXbl_ByUserId = "Platform.SessionPlatformAdmin.SessionXbl_ByUserId"
}
/**
 * This API is used to register/update a session on xbox.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionPlatformAdmin.SessionXbl_ByUserId, input]
 * }
 * ```
 */
declare const useSessionPlatformAdminApi_UpdateSessionXbl_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblUserSessionRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblUserSessionRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_StoreAdmin {
    Stores = "Platform.StoreAdmin.Stores",
    Store = "Platform.StoreAdmin.Store",
    StoreImport = "Platform.StoreAdmin.StoreImport",
    CatalogConfigs = "Platform.StoreAdmin.CatalogConfigs",
    CatalogConfig = "Platform.StoreAdmin.CatalogConfig",
    Store_ByStoreId = "Platform.StoreAdmin.Store_ByStoreId",
    StorePublished = "Platform.StoreAdmin.StorePublished",
    StoresPublished = "Platform.StoreAdmin.StoresPublished",
    StoreImport_v2 = "Platform.StoreAdmin.StoreImport_v2",
    StoreExportByCsv = "Platform.StoreAdmin.StoreExportByCsv",
    Clone_ByStoreId = "Platform.StoreAdmin.Clone_ByStoreId",
    Export_ByStoreId = "Platform.StoreAdmin.Export_ByStoreId",
    StoresPublishedBackup = "Platform.StoreAdmin.StoresPublishedBackup",
    StoresCatalogDefinition = "Platform.StoreAdmin.StoresCatalogDefinition",
    StorePublishedRollback = "Platform.StoreAdmin.StorePublishedRollback",
    Export_ByStoreId_v2 = "Platform.StoreAdmin.Export_ByStoreId_v2",
    StoresDownloadCsvTemplates = "Platform.StoreAdmin.StoresDownloadCsvTemplates",
    ImportByCsv_ByStoreId = "Platform.StoreAdmin.ImportByCsv_ByStoreId",
    ImportHistory_ByStoreId = "Platform.StoreAdmin.ImportHistory_ByStoreId"
}
/**
 * This API is used to list stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Stores, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetStores: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<StoreInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<StoreInfoArray>) => void) => UseQueryResult<StoreInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to create a non published store in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created store data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Store, input]
 * }
 * ```
 */
declare const useStoreAdminApi_CreateStoreMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: StoreCreate;
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: StoreCreate;
}>;
/**
 * @deprecated
 * This API is used to import a store.&lt;p&gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/import to import store.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoreImport, input]
 * }
 * ```
 */
declare const useStoreAdminApi_UpdateStoreImportMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
    queryParams?: {
        storeId?: string | null;
    };
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
    queryParams?: {
        storeId?: string | null;
    };
}>;
/**
 * Get catalog config.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.CatalogConfigs, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetCatalogConfigs: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<CatalogConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CatalogConfigInfo>) => void) => UseQueryResult<CatalogConfigInfo, AxiosError<ApiError>>;
/**
 * Update catalog config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated catalog config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.CatalogConfig, input]
 * }
 * ```
 */
declare const useStoreAdminApi_UpdateCatalogConfigMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<CatalogConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CatalogConfigUpdate;
}>, "mutationKey">, callback?: (data: CatalogConfigInfo) => void) => UseMutationResult<CatalogConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CatalogConfigUpdate;
}>;
/**
 * This API is used to delete a store. Only non published store can be deleted.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Store_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_DeleteStore_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
}>;
/**
 * This API is used to get a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Store_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetStore_ByStoreId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    storeId: string;
}, options?: Omit<UseQueryOptions<StoreInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<StoreInfo>) => void) => UseQueryResult<StoreInfo, AxiosError<ApiError>>;
/**
 * This API is used to Update a store basic info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Store_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_UpdateStore_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    data: StoreUpdate;
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    data: StoreUpdate;
}>;
/**
 * This API is used to delete published store including category and items before release to public.&lt;p&gt;&lt;b&gt;Warning: Please do not use this API once published to public user.&lt;/b&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StorePublished, input]
 * }
 * ```
 */
declare const useStoreAdminApi_DeleteStorePublishedMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * This API is used to get a published store basic info, exclude category and item information.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoresPublished, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetStoresPublished: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<StoreInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<StoreInfo>) => void) => UseQueryResult<StoreInfo, AxiosError<ApiError>>;
/**
 * This API is used to import a store.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoreImport_v2, input]
 * }
 * ```
 */
declare const useStoreAdminApi_UpdateStoreImportMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ImportStoreResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
    queryParams?: {
        storeId?: string | null;
        strictMode?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: ImportStoreResult) => void) => UseMutationResult<ImportStoreResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file?: File;
    };
    queryParams?: {
        storeId?: string | null;
        strictMode?: boolean | null;
    };
}>;
/**
 * This API is used to export a store to CSV format
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoreExportByCsv, input]
 * }
 * ```
 */
declare const useStoreAdminApi_CreateStoreExportByCsvMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ExportStoreToCsvRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ExportStoreToCsvRequest;
}>;
/**
 * This API is used to clone a store. Usually clone a draft store to published store because published store can&#39;t directly edit content.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: clone store info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Clone_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_UpdateClone_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        targetStoreId?: string | null;
    };
}>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        targetStoreId?: string | null;
    };
}>;
/**
 * @deprecated
 * This API is used to export a store.&lt;p&gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/export to export store.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Export_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetExport_ByStoreId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    storeId: string;
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * This API is used to get a store&#39;s backup. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store backup info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoresPublishedBackup, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetStoresPublishedBackup: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<StoreBackupInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<StoreBackupInfo>) => void) => UseQueryResult<StoreBackupInfo, AxiosError<ApiError>>;
/**
 * This API is used to get catalog definition for import/export store by CSV&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: catalog definition&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoresCatalogDefinition, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetStoresCatalogDefinition: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        catalogType: "APP" | "CATEGORY" | "ITEM" | "SECTION" | "VIEW";
    };
}, options?: Omit<UseQueryOptions<CatalogDefinitionInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CatalogDefinitionInfoArray>) => void) => UseQueryResult<CatalogDefinitionInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to rollback a published store. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StorePublishedRollback, input]
 * }
 * ```
 */
declare const useStoreAdminApi_UpdateStorePublishedRollbackMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: StoreInfo) => void) => UseMutationResult<StoreInfo, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * This API is used to export a whole or partial store.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.Export_ByStoreId_v2, input]
 * }
 * ```
 */
declare const useStoreAdminApi_CreateExport_ByStoreIdMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    data: ExportStoreRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    data: ExportStoreRequest;
}>;
/**
 * This API is used to download store csv templates for store importing by CSV feature
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.StoresDownloadCsvTemplates, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetStoresDownloadCsvTemplates: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * This API is used to import a store by CSV format.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.ImportByCsv_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_CreateImportByCsv_ByStoreIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ImportStoreResult, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    data: {
        category: File;
        display: File;
        item: File;
        notes: string | null;
        section: File;
    };
}>, "mutationKey">, callback?: (data: ImportStoreResult) => void) => UseMutationResult<ImportStoreResult, AxiosError<ApiError>, SdkSetConfigParam & {
    storeId: string;
    data: {
        category: File;
        display: File;
        item: File;
        notes: string | null;
        section: File;
    };
}>;
/**
 * This API is used to query import store history
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_StoreAdmin.ImportHistory_ByStoreId, input]
 * }
 * ```
 */
declare const useStoreAdminApi_GetImportHistory_ByStoreId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    storeId: string;
    queryParams?: {
        end?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string | null;
        start?: string | null;
        success?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<ImportStoreHistoryPagingResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ImportStoreHistoryPagingResult>) => void) => UseQueryResult<ImportStoreHistoryPagingResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_SubscriptionAdmin {
    Subscriptions = "Platform.SubscriptionAdmin.Subscriptions",
    Subscriptions_ByUserId = "Platform.SubscriptionAdmin.Subscriptions_ByUserId",
    SubscriptionsActivities_ByUserId = "Platform.SubscriptionAdmin.SubscriptionsActivities_ByUserId",
    Recurring_BySubscriptionId = "Platform.SubscriptionAdmin.Recurring_BySubscriptionId",
    Subscription_ByUserId_BySubscriptionId = "Platform.SubscriptionAdmin.Subscription_ByUserId_BySubscriptionId",
    SubscriptionPlatformSubscribe_ByUserId = "Platform.SubscriptionAdmin.SubscriptionPlatformSubscribe_ByUserId",
    SubscriptionsSubscribableByItemId_ByUserId = "Platform.SubscriptionAdmin.SubscriptionsSubscribableByItemId_ByUserId",
    Grant_ByUserId_BySubscriptionId = "Platform.SubscriptionAdmin.Grant_ByUserId_BySubscriptionId",
    Cancel_ByUserId_BySubscriptionId = "Platform.SubscriptionAdmin.Cancel_ByUserId_BySubscriptionId",
    History_ByUserId_BySubscriptionId = "Platform.SubscriptionAdmin.History_ByUserId_BySubscriptionId",
    Notification_ByUserId_BySubscriptionId = "Platform.SubscriptionAdmin.Notification_ByUserId_BySubscriptionId"
}
/**
 * Query subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscriptions&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Subscriptions, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_GetSubscriptions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        chargeStatus?: "CHARGED" | "CHARGE_FAILED" | "NEVER" | "RECURRING_CHARGING" | "SETUP";
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: "ACTIVE" | "CANCELLED" | "EXPIRED" | "INIT";
        subscribedBy?: "PLATFORM" | "USER";
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<SubscriptionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SubscriptionPagingSlicedResult>) => void) => UseQueryResult<SubscriptionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Subscriptions_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_GetSubscriptions_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        chargeStatus?: "CHARGED" | "CHARGE_FAILED" | "NEVER" | "RECURRING_CHARGING" | "SETUP";
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: "ACTIVE" | "CANCELLED" | "EXPIRED" | "INIT";
        subscribedBy?: "PLATFORM" | "USER";
    };
}, options?: Omit<UseQueryOptions<SubscriptionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SubscriptionPagingSlicedResult>) => void) => UseQueryResult<SubscriptionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Get user subscription activity.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription activity&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.SubscriptionsActivities_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_GetSubscriptionsActivities_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        excludeSystem?: boolean | null;
        limit?: number;
        offset?: number;
        subscriptionId?: string | null;
    };
}, options?: Omit<UseQueryOptions<SubscriptionActivityPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SubscriptionActivityPagingSlicedResult>) => void) => UseQueryResult<SubscriptionActivityPagingSlicedResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Recurring charge subscription, it will trigger recurring charge if the USER subscription status is ACTIVE, nextBillingDate is before now and no fail recurring charge within X(default 12) hours.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: recurring charge result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Recurring_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_UpdateRecurring_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<RecurringChargeResult, AxiosError<ApiError>, SdkSetConfigParam & {
    subscriptionId: string;
}>, "mutationKey">, callback?: (data: RecurringChargeResult) => void) => UseMutationResult<RecurringChargeResult, AxiosError<ApiError>, SdkSetConfigParam & {
    subscriptionId: string;
}>;
/**
 * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Delete user subscription.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Subscription_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_DeleteSubscription_ByUserId_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
}>;
/**
 * Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Subscription_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_GetSubscription_ByUserId_BySubscriptionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
}, options?: Omit<UseQueryOptions<SubscriptionInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SubscriptionInfo>) => void) => UseQueryResult<SubscriptionInfo, AxiosError<ApiError>>;
/**
 * Free subscribe by platform, can used by other justice service to redeem/reward the subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.SubscriptionPlatformSubscribe_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_CreateSubscriptionPlatformSubscribe_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlatformSubscribeRequest;
}>, "mutationKey">, callback?: (data: SubscriptionInfo) => void) => UseMutationResult<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlatformSubscribeRequest;
}>;
/**
 * Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.SubscriptionsSubscribableByItemId_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_GetSubscriptionsSubscribableByItemId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
    };
}, options?: Omit<UseQueryOptions<Subscribable, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Subscribable>) => void) => UseQueryResult<Subscribable, AxiosError<ApiError>>;
/**
 * Grant days to a subscription, if grantDays is positive, it will add free days and push the next billing date by the amount of day.&lt;br&gt;if the grantDays is negative or zero, it only apply to active/cancelled subscription, remove days will decrease current period end, and move the next billing date closer.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Grant_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_UpdateGrant_ByUserId_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: GrantSubscriptionDaysRequest;
}>, "mutationKey">, callback?: (data: SubscriptionInfo) => void) => UseMutationResult<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: GrantSubscriptionDaysRequest;
}>;
/**
 * Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Set force true, will ignore the error if subscription is during recurring charging.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Cancel_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_UpdateCancel_ByUserId_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: CancelRequest;
    queryParams?: {
        force?: boolean | null;
    };
}>, "mutationKey">, callback?: (data: SubscriptionInfo) => void) => UseMutationResult<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: CancelRequest;
    queryParams?: {
        force?: boolean | null;
    };
}>;
/**
 * Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription billing history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.History_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_GetHistory_ByUserId_BySubscriptionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    queryParams?: {
        excludeFree?: boolean | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<BillingHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BillingHistoryPagingSlicedResult>) => void) => UseQueryResult<BillingHistoryPagingSlicedResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SubscriptionAdmin.Notification_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionAdminApi_CreateNotification_ByUserId_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: TradeNotification;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: TradeNotification;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_TicketAdmin {
    Ticket_ByBoothName = "Platform.TicketAdmin.Ticket_ByBoothName",
    Id_ByBoothName = "Platform.TicketAdmin.Id_ByBoothName",
    Decrement_ByBoothName = "Platform.TicketAdmin.Decrement_ByBoothName",
    Increment_ByBoothName = "Platform.TicketAdmin.Increment_ByBoothName",
    Ticket_ByUserId_ByBoothName = "Platform.TicketAdmin.Ticket_ByUserId_ByBoothName"
}
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get ticket(code/key) dynamic based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket dynamic&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TicketAdmin.Ticket_ByBoothName, input]
 * }
 * ```
 */
declare const useTicketAdminApi_GetTicket_ByBoothName: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    boothName: string;
}, options?: Omit<UseQueryOptions<TicketDynamicInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TicketDynamicInfo>) => void) => UseQueryResult<TicketDynamicInfo, AxiosError<ApiError>>;
/**
 * Get ticket(code/key) booth ID.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket booth id&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TicketAdmin.Id_ByBoothName, input]
 * }
 * ```
 */
declare const useTicketAdminApi_GetId_ByBoothName: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    boothName: string;
}, options?: Omit<UseQueryOptions<TicketBoothId, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TicketBoothId>) => void) => UseQueryResult<TicketBoothId, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Decrease ticket(code/key) sale if requested orderNo is already increased.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TicketAdmin.Decrement_ByBoothName, input]
 * }
 * ```
 */
declare const useTicketAdminApi_UpdateDecrement_ByBoothNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    boothName: string;
    data: TicketSaleDecrementRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    boothName: string;
    data: TicketSaleDecrementRequest;
}>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; increase ticket(code/key) sale.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Ticket sale increment result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TicketAdmin.Increment_ByBoothName, input]
 * }
 * ```
 */
declare const useTicketAdminApi_UpdateIncrement_ByBoothNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TicketSaleIncrementResult, AxiosError<ApiError>, SdkSetConfigParam & {
    boothName: string;
    data: TicketSaleIncrementRequest;
}>, "mutationKey">, callback?: (data: TicketSaleIncrementResult) => void) => UseMutationResult<TicketSaleIncrementResult, AxiosError<ApiError>, SdkSetConfigParam & {
    boothName: string;
    data: TicketSaleIncrementRequest;
}>;
/**
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Acquire ticket(code/key) based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TicketAdmin.Ticket_ByUserId_ByBoothName, input]
 * }
 * ```
 */
declare const useTicketAdminApi_CreateTicket_ByUserId_ByBoothNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TicketAcquireResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    boothName: string;
    data: TicketAcquireRequest;
}>, "mutationKey">, callback?: (data: TicketAcquireResult) => void) => UseMutationResult<TicketAcquireResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    boothName: string;
    data: TicketAcquireRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_TradeActionAdmin {
    TradeCommit = "Platform.TradeActionAdmin.TradeCommit",
    Trade_ByTransactionId = "Platform.TradeActionAdmin.Trade_ByTransactionId",
    TradeHistoryByCriteria = "Platform.TradeActionAdmin.TradeHistoryByCriteria"
}
/**
 * This API is used to create a chained operations&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: chain action history&lt;/li&gt;&lt;li&gt;&lt;i&gt;FULFILL_ITEM operation supported item type&lt;/i&gt;: INGAMEITEM,LOOTBOX,OPTIONBOX&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for metadata&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TradeActionAdmin.TradeCommit, input]
 * }
 * ```
 */
declare const useTradeActionAdminApi_CreateTradeCommitMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TradeChainActionHistoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TradeChainedActionCommitRequest;
}>, "mutationKey">, callback?: (data: TradeChainActionHistoryInfo) => void) => UseMutationResult<TradeChainActionHistoryInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TradeChainedActionCommitRequest;
}>;
/**
 * This API is used to fetch a specific trade history using transaction ID&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: trade history based on transaction ID&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TradeActionAdmin.Trade_ByTransactionId, input]
 * }
 * ```
 */
declare const useTradeActionAdminApi_GetTrade_ByTransactionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    transactionId: string;
}, options?: Omit<UseQueryOptions<TradeChainActionHistoryInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TradeChainActionHistoryInfo>) => void) => UseQueryResult<TradeChainActionHistoryInfo, AxiosError<ApiError>>;
/**
 * This API is used to fetch trade history based on the provided criteria&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: trade history list based on criteria&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_TradeActionAdmin.TradeHistoryByCriteria, input]
 * }
 * ```
 */
declare const useTradeActionAdminApi_GetTradeHistoryByCriteria: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        status?: "FAILED" | "INIT" | "SUCCESS";
        type?: string | null;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<TradeActionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TradeActionPagingSlicedResult>) => void) => UseQueryResult<TradeActionPagingSlicedResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_ViewAdmin {
    Views = "Platform.ViewAdmin.Views",
    View = "Platform.ViewAdmin.View",
    View_ByViewId = "Platform.ViewAdmin.View_ByViewId"
}
/**
 * This API is used to list all views.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of views&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ViewAdmin.Views, input]
 * }
 * ```
 */
declare const useViewAdminApi_GetViews: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ListViewInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ListViewInfoArray>) => void) => UseQueryResult<ListViewInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to create a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created a view&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ViewAdmin.View, input]
 * }
 * ```
 */
declare const useViewAdminApi_CreateViewMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullViewInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ViewCreate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullViewInfo) => void) => UseMutationResult<FullViewInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ViewCreate;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to delete a view.It will also delete all the related sections
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ViewAdmin.View_ByViewId, input]
 * }
 * ```
 */
declare const useViewAdminApi_DeleteView_ByViewIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    viewId: string;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    viewId: string;
    queryParams: {
        storeId: string | null;
    };
}>;
/**
 * This API is used to get a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: view data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ViewAdmin.View_ByViewId, input]
 * }
 * ```
 */
declare const useViewAdminApi_GetView_ByViewId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    viewId: string;
    queryParams?: {
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<FullViewInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<FullViewInfo>) => void) => UseQueryResult<FullViewInfo, AxiosError<ApiError>>;
/**
 * This API is used to update a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated view data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ViewAdmin.View_ByViewId, input]
 * }
 * ```
 */
declare const useViewAdminApi_UpdateView_ByViewIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FullViewInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    viewId: string;
    data: ViewUpdate;
    queryParams: {
        storeId: string | null;
    };
}>, "mutationKey">, callback?: (data: FullViewInfo) => void) => UseMutationResult<FullViewInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    viewId: string;
    data: ViewUpdate;
    queryParams: {
        storeId: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_WalletAdmin {
    Wallets = "Platform.WalletAdmin.Wallets",
    WalletDebit = "Platform.WalletAdmin.WalletDebit",
    WalletCredit = "Platform.WalletAdmin.WalletCredit",
    Wallet_ByWalletId = "Platform.WalletAdmin.Wallet_ByWalletId",
    Wallet_ByUserId_ByWalletId = "Platform.WalletAdmin.Wallet_ByUserId_ByWalletId",
    WalletConfig_ByPlatform = "Platform.WalletAdmin.WalletConfig_ByPlatform",
    Debit_ByUserId_ByWalletId = "Platform.WalletAdmin.Debit_ByUserId_ByWalletId",
    WalletConfigReset_ByPlatform = "Platform.WalletAdmin.WalletConfigReset_ByPlatform",
    Enable_ByUserId_ByWalletId = "Platform.WalletAdmin.Enable_ByUserId_ByWalletId",
    Disable_ByUserId_ByWalletId = "Platform.WalletAdmin.Disable_ByUserId_ByWalletId",
    WalletsCurrenciesSummary_ByUserId = "Platform.WalletAdmin.WalletsCurrenciesSummary_ByUserId",
    Check_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.Check_ByUserId_ByCurrencyCode",
    Credit_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.Credit_ByUserId_ByCurrencyCode",
    Payment_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.Payment_ByUserId_ByCurrencyCode",
    Transactions_ByUserId_ByWalletId = "Platform.WalletAdmin.Transactions_ByUserId_ByWalletId",
    BalanceCheck_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.BalanceCheck_ByUserId_ByCurrencyCode",
    DebitWallet_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.DebitWallet_ByUserId_ByCurrencyCode",
    DebitByWalletPlatform_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.DebitByWalletPlatform_ByUserId_ByCurrencyCode",
    TransactionsWallets_ByUserId_ByCurrencyCode = "Platform.WalletAdmin.TransactionsWallets_ByUserId_ByCurrencyCode"
}
/**
 * @deprecated
 * Query wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated wallets info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Wallets, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetWallets: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        currencyCode?: string | null;
        limit?: number;
        offset?: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<WalletPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<WalletPagingSlicedResult>) => void) => UseQueryResult<WalletPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Debit different users&#39; wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk credit result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.WalletDebit, input]
 * }
 * ```
 */
declare const useWalletAdminApi_CreateWalletDebitMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkDebitResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkDebitRequest[];
}>, "mutationKey">, callback?: (data: BulkDebitResult) => void) => UseMutationResult<BulkDebitResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkDebitRequest[];
}>;
/**
 * Credit different users&#39; wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk credit result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.WalletCredit, input]
 * }
 * ```
 */
declare const useWalletAdminApi_CreateWalletCreditMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<BulkCreditResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkCreditRequest[];
}>, "mutationKey">, callback?: (data: BulkCreditResult) => void) => UseMutationResult<BulkCreditResult, AxiosError<ApiError>, SdkSetConfigParam & {
    data: BulkCreditRequest[];
}>;
/**
 * @deprecated
 * get a wallet by wallet id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Wallet_ByWalletId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetWallet_ByWalletId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    walletId: string;
}, options?: Omit<UseQueryOptions<WalletInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<WalletInfo>) => void) => UseQueryResult<WalletInfo, AxiosError<ApiError>>;
/**
 * @deprecated
 * get a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Wallet_ByUserId_ByWalletId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetWallet_ByUserId_ByWalletId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    walletId: string;
}, options?: Omit<UseQueryOptions<WalletInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<WalletInfo>) => void) => UseQueryResult<WalletInfo, AxiosError<ApiError>>;
/**
 * Get platform wallet config list.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.WalletConfig_ByPlatform, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetWalletConfig_ByPlatform: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    platform: string;
}, options?: Omit<UseQueryOptions<PlatformWalletConfigInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlatformWalletConfigInfo>) => void) => UseQueryResult<PlatformWalletConfigInfo, AxiosError<ApiError>>;
/**
 * Update platform wallet config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform wallet config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.WalletConfig_ByPlatform, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateWalletConfig_ByPlatformMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformWalletConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    platform: string;
    data: PlatformWalletConfigUpdate;
}>, "mutationKey">, callback?: (data: PlatformWalletConfigInfo) => void) => UseMutationResult<PlatformWalletConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    platform: string;
    data: PlatformWalletConfigUpdate;
}>;
/**
 * @deprecated
 * Debit a user wallet.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Debit_ByUserId_ByWalletId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateDebit_ByUserId_ByWalletIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<WalletInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    walletId: string;
    data: DebitRequest;
}>, "mutationKey">, callback?: (data: WalletInfo) => void) => UseMutationResult<WalletInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    walletId: string;
    data: DebitRequest;
}>;
/**
 * Reset platform wallet config to default config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform wallet config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.WalletConfigReset_ByPlatform, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateWalletConfigReset_ByPlatformMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformWalletConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    platform: string;
}>, "mutationKey">, callback?: (data: PlatformWalletConfigInfo) => void) => UseMutationResult<PlatformWalletConfigInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    platform: string;
}>;
/**
 * @deprecated
 * enable a user wallet.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Enable_ByUserId_ByWalletId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateEnable_ByUserId_ByWalletIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    walletId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    walletId: string;
}>;
/**
 * @deprecated
 * disable a user wallet.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Disable_ByUserId_ByWalletId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateDisable_ByUserId_ByWalletIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    walletId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    walletId: string;
}>;
/**
 * Get user currency wallet summary.&lt;br&gt;Other detail info: &lt;ul&gt;(READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency wallet summary&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.WalletsCurrenciesSummary_ByUserId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetWalletsCurrenciesSummary_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<CurrencyWalletArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CurrencyWalletArray>) => void) => UseQueryResult<CurrencyWalletArray, AxiosError<ApiError>>;
/**
 * @deprecated
 * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Check wallet by balance origin and currency code whether it&#39;s inactive.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Check_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetCheck_ByUserId_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    queryParams: {
        origin: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
    };
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * Credit a user wallet by currency code and balance origin, if wallet not exists, it will create a new wallet.&lt;br&gt;Other detail info: &lt;ul&gt;(UPDATE)&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Credit_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateCredit_ByUserId_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<WalletInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: CreditRequest;
}>, "mutationKey">, callback?: (data: WalletInfo) => void) => UseMutationResult<WalletInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: CreditRequest;
}>;
/**
 * Pay with user wallet by currency code and client platform.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Payment_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdatePayment_ByUserId_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformWallet, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: PaymentRequest;
}>, "mutationKey">, callback?: (data: PlatformWallet) => void) => UseMutationResult<PlatformWallet, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: PaymentRequest;
}>;
/**
 * @deprecated
 * List user wallet transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet transaction info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.Transactions_ByUserId_ByWalletId, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetTransactions_ByUserId_ByWalletId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    walletId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<DetailedWalletTransactionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DetailedWalletTransactionPagingSlicedResult>) => void) => UseQueryResult<DetailedWalletTransactionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Checks if the user has enough balance based on the provided criteria.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: boolean value indicating if the user has enough balance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.BalanceCheck_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_CreateBalanceCheck_ByUserId_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: DebitByWalletPlatformRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: DebitByWalletPlatformRequest;
}>;
/**
 * Debit a user wallet by currency code, default is debit system wallet.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.DebitWallet_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateDebitWallet_ByUserId_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<WalletInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: DebitByCurrencyCodeRequest;
}>, "mutationKey">, callback?: (data: WalletInfo) => void) => UseMutationResult<WalletInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: DebitByCurrencyCodeRequest;
}>;
/**
 * Pay with user wallet by currency code and client platform.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for metadata&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.DebitByWalletPlatform_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_UpdateDebitByWalletPlatform_ByUserId_ByCurrencyCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformWallet, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: DebitByWalletPlatformRequest;
}>, "mutationKey">, callback?: (data: PlatformWallet) => void) => UseMutationResult<PlatformWallet, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    data: DebitByWalletPlatformRequest;
}>;
/**
 * List user currency transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency transaction info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_WalletAdmin.TransactionsWallets_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletAdminApi_GetTransactionsWallets_ByUserId_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<WalletTransactionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<WalletTransactionPagingSlicedResult>) => void) => UseQueryResult<WalletTransactionPagingSlicedResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Category {
    Categories = "Platform.Category.Categories",
    CategoriesDownload = "Platform.Category.CategoriesDownload",
    Category_ByCategoryPath = "Platform.Category.Category_ByCategoryPath",
    Children_ByCategoryPath = "Platform.Category.Children_ByCategoryPath",
    Descendants_ByCategoryPath = "Platform.Category.Descendants_ByCategoryPath"
}
/**
 * This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Category.Categories, input]
 * }
 * ```
 */
declare const useCategoryApi_GetCategories: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        language?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<CategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CategoryInfoArray>) => void) => UseQueryResult<CategoryInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to download store&#39;s structured categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: structured categories&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Category.CategoriesDownload, input]
 * }
 * ```
 */
declare const useCategoryApi_GetCategoriesDownload: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        language?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<HierarchicalCategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<HierarchicalCategoryInfoArray>) => void) => UseQueryResult<HierarchicalCategoryInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)(user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Category.Category_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryApi_GetCategory_ByCategoryPath: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    categoryPath: string;
    queryParams?: {
        language?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<CategoryInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CategoryInfo>) => void) => UseQueryResult<CategoryInfo, AxiosError<ApiError>>;
/**
 * This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Category.Children_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryApi_GetChildren_ByCategoryPath: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    categoryPath: string;
    queryParams?: {
        language?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<CategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CategoryInfoArray>) => void) => UseQueryResult<CategoryInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Category.Descendants_ByCategoryPath, input]
 * }
 * ```
 */
declare const useCategoryApi_GetDescendants_ByCategoryPath: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    categoryPath: string;
    queryParams?: {
        language?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<CategoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CategoryInfoArray>) => void) => UseQueryResult<CategoryInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Currency {
    Currencies = "Platform.Currency.Currencies"
}
/**
 * List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Currency.Currencies, input]
 * }
 * ```
 */
declare const useCurrencyApi_GetCurrencies: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        currencyType?: "REAL" | "VIRTUAL";
    };
}, options?: Omit<UseQueryOptions<CurrencyInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CurrencyInfoArray>) => void) => UseQueryResult<CurrencyInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Dlc {
    UsersMeDlcContent = "Platform.Dlc.UsersMeDlcContent",
    DlcRewardsDurableMap = "Platform.Dlc.DlcRewardsDurableMap",
    DlcPsnSync_ByUserId = "Platform.Dlc.DlcPsnSync_ByUserId",
    DlcXblSync_ByUserId = "Platform.Dlc.DlcXblSync_ByUserId",
    DlcSteamSync_ByUserId = "Platform.Dlc.DlcSteamSync_ByUserId",
    DlcOculuSync_ByUserId = "Platform.Dlc.DlcOculuSync_ByUserId",
    DlcEpicgameSync_ByUserId = "Platform.Dlc.DlcEpicgameSync_ByUserId",
    DlcPsnSyncMultiServiceLabel_ByUserId = "Platform.Dlc.DlcPsnSyncMultiServiceLabel_ByUserId"
}
/**
 * Get user dlc reward contents. If includeAllNamespaces is false, will only return the dlc synced from the current namespace&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.UsersMeDlcContent, input]
 * }
 * ```
 */
declare const useDlcApi_GetUsersMeDlcContent: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        type: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
        includeAllNamespaces?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<SimpleUserDlcRewardContentsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SimpleUserDlcRewardContentsResponse>) => void) => UseQueryResult<SimpleUserDlcRewardContentsResponse, AxiosError<ApiError>>;
/**
 * Get dlc reward simple map, only return the sku of durable item reward.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcRewardsDurableMap, input]
 * }
 * ```
 */
declare const useDlcApi_GetDlcRewardsDurableMap: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        dlcType: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
    };
}, options?: Omit<UseQueryOptions<DlcConfigRewardShortInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DlcConfigRewardShortInfo>) => void) => UseQueryResult<DlcConfigRewardShortInfo, AxiosError<ApiError>>;
/**
 * Synchronize with dlc entitlements in PSN Store.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcPsnSync_ByUserId, input]
 * }
 * ```
 */
declare const useDlcApi_UpdateDlcPsnSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationDlcSyncRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationDlcSyncRequest;
}>;
/**
 * Sync Xbox inventory&#39;s dlc items
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcXblSync_ByUserId, input]
 * }
 * ```
 */
declare const useDlcApi_UpdateDlcXblSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblDlcSyncRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblDlcSyncRequest;
}>;
/**
 * Sync steam dlc
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcSteamSync_ByUserId, input]
 * }
 * ```
 */
declare const useDlcApi_UpdateDlcSteamSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SteamDlcSyncRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SteamDlcSyncRequest;
}>;
/**
 * Sync oculus dlc
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcOculuSync_ByUserId, input]
 * }
 * ```
 */
declare const useDlcApi_UpdateDlcOculuSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Sync epic games dlc items
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcEpicgameSync_ByUserId, input]
 * }
 * ```
 */
declare const useDlcApi_UpdateDlcEpicgameSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: EpicGamesDlcSyncRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: EpicGamesDlcSyncRequest;
}>;
/**
 * Synchronize with dlc entitlements in PSN Store with multiple service labels.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Dlc.DlcPsnSyncMultiServiceLabel_ByUserId, input]
 * }
 * ```
 */
declare const useDlcApi_UpdateDlcPsnSyncMultiServiceLabel_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationDlcSyncMultiServiceLabelsRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationDlcSyncMultiServiceLabelsRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Entitlement {
    Entitlements_ByUserId = "Platform.Entitlement.Entitlements_ByUserId",
    EntitlementsByIds_ByUserId = "Platform.Entitlement.EntitlementsByIds_ByUserId",
    EntitlementsBySku_ByUserId = "Platform.Entitlement.EntitlementsBySku_ByUserId",
    EntitlementsByAppId_ByUserId = "Platform.Entitlement.EntitlementsByAppId_ByUserId",
    EntitlementsHistory_ByUserId = "Platform.Entitlement.EntitlementsHistory_ByUserId",
    UsersMeEntitlementsOwnershipAny = "Platform.Entitlement.UsersMeEntitlementsOwnershipAny",
    EntitlementsByItemId_ByUserId = "Platform.Entitlement.EntitlementsByItemId_ByUserId",
    UsersMeEntitlementsOwnershipToken = "Platform.Entitlement.UsersMeEntitlementsOwnershipToken",
    EntitlementsByAppType_ByUserId = "Platform.Entitlement.EntitlementsByAppType_ByUserId",
    UsersMeEntitlementsOwnershipBySku = "Platform.Entitlement.UsersMeEntitlementsOwnershipBySku",
    UsersMeEntitlementsOwnershipByAppId = "Platform.Entitlement.UsersMeEntitlementsOwnershipByAppId",
    UsersMeEntitlementsOwnershipByItemId = "Platform.Entitlement.UsersMeEntitlementsOwnershipByItemId",
    EntitlementsOwnershipAny_ByUserId = "Platform.Entitlement.EntitlementsOwnershipAny_ByUserId",
    Entitlement_ByUserId_ByEntitlementId = "Platform.Entitlement.Entitlement_ByUserId_ByEntitlementId",
    EntitlementsOwnershipBySku_ByUserId = "Platform.Entitlement.EntitlementsOwnershipBySku_ByUserId",
    EntitlementsOwnershipByAppId_ByUserId = "Platform.Entitlement.EntitlementsOwnershipByAppId_ByUserId",
    EntitlementsOwnershipByItemId_ByUserId = "Platform.Entitlement.EntitlementsOwnershipByItemId_ByUserId",
    EntitlementsOwnershipByItemIds_ByUserId = "Platform.Entitlement.EntitlementsOwnershipByItemIds_ByUserId",
    Sell_ByUserId_ByEntitlementId = "Platform.Entitlement.Sell_ByUserId_ByEntitlementId",
    Split_ByUserId_ByEntitlementId = "Platform.Entitlement.Split_ByUserId_ByEntitlementId",
    Transfer_ByUserId_ByEntitlementId = "Platform.Entitlement.Transfer_ByUserId_ByEntitlementId",
    Decrement_ByUserId_ByEntitlementId = "Platform.Entitlement.Decrement_ByUserId_ByEntitlementId"
}
/**
 * Query user entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.Entitlements_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlements_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        entitlementName?: string | null;
        features?: string[];
        itemId?: string[];
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<EntitlementPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementPagingSlicedResult>) => void) => UseQueryResult<EntitlementPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Get user entitlements by ids..&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsByIds_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsByIds_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        availablePlatformOnly?: boolean | null;
        ids?: string[];
    };
}, options?: Omit<UseQueryOptions<EntitlementInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfoArray>) => void) => UseQueryResult<EntitlementInfoArray, AxiosError<ApiError>>;
/**
 * @deprecated
 * Get user entitlement by sku.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsBySku_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsBySku_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    };
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Get user app entitlement by appId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsByAppId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsByAppId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        appId: string | null;
    };
}, options?: Omit<UseQueryOptions<AppEntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppEntitlementInfo>) => void) => UseQueryResult<AppEntitlementInfo, AxiosError<ApiError>>;
/**
 * Get user entitlement history&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user entitlement history list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsHistory_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsHistory_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        endDate?: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        startDate?: string | null;
    };
}, options?: Omit<UseQueryOptions<UserEntitlementHistoryPagingSlicedResultArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<UserEntitlementHistoryPagingSlicedResultArray>) => void) => UseQueryResult<UserEntitlementHistoryPagingSlicedResultArray, AxiosError<ApiError>>;
/**
 * Exists any my active entitlement of specified itemIds, skus and appIds
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.UsersMeEntitlementsOwnershipAny, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetUsersMeEntitlementsOwnershipAny: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * @deprecated
 * Get user entitlement by itemId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsByItemId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsByItemId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    };
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Gets an entitlement ownership token of specified itemIds, skus and appIds&lt;p&gt;The decoded ownership token header like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;kid&#34;: &#34;9fd4cd5f991cebe3323605cd12d3b8bfdfc73fa4&#34;, &#34;typ&#34;: &#34;JWT&#34;, &#34;alg&#34;: &#34;RS256&#34; } &lt;/code&gt;&lt;/pre&gt;That you can get the jwks by api &lt;baseUrl&gt;/platform/jwks, if the configured private key is same as IAM, &lt;p&gt;you can also get jwks from IAM endpoint. &lt;p&gt;The decoded ownership token payload like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;entitlements&#34;: [ { &#34;itemId&#34;: &#34;4c1296291f604c199f7bb7f0ee02e5f8&#34;, &#34;appType&#34;: null, &#34;appId&#34;: null, &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;itemNamespace&#34;: &#34;accelbyte&#34;, &#34;sku&#34;: &#34;prime-plus&#34; }, { &#34;itemId&#34;: &#34;e8f4974cf45c4e1f8d4f0c6990c518bd&#34;, &#34;appType&#34;: &#34;GAME&#34;, &#34;appId&#34;: &#34;omeganebula&#34;, &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;itemNamespace&#34;: &#34;accelbyte&#34;, &#34;sku&#34;: &#34;APPG005ON&#34; } ], &#34;sub&#34;: &#34;66459eb6a4e44e6fb0040bd20c1079a5&#34;, &#34;exp&#34;: 1619624360, &#34;iat&#34;: 1619624060 } &lt;/code&gt;&lt;/pre&gt;&lt;b&gt;if there&#39;s no active entitlement for the specific params, the entitlements section will be omitted&lt;/b&gt;.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.UsersMeEntitlementsOwnershipToken, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetUsersMeEntitlementsOwnershipToken: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    };
}, options?: Omit<UseQueryOptions<OwnershipToken, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OwnershipToken>) => void) => UseQueryResult<OwnershipToken, AxiosError<ApiError>>;
/**
 * Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsByAppType_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsByAppType_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        appType: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<AppEntitlementPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppEntitlementPagingSlicedResult>) => void) => UseQueryResult<AppEntitlementPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Get my entitlement ownership by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.UsersMeEntitlementsOwnershipBySku, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetUsersMeEntitlementsOwnershipBySku: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    };
}, options?: Omit<UseQueryOptions<TimedOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TimedOwnership>) => void) => UseQueryResult<TimedOwnership, AxiosError<ApiError>>;
/**
 * Get my app entitlement ownership by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace app entitlement ownership&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.UsersMeEntitlementsOwnershipByAppId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetUsersMeEntitlementsOwnershipByAppId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        appId: string | null;
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * Get my entitlement ownership by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.UsersMeEntitlementsOwnershipByItemId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetUsersMeEntitlementsOwnershipByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    };
}, options?: Omit<UseQueryOptions<TimedOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TimedOwnership>) => void) => UseQueryResult<TimedOwnership, AxiosError<ApiError>>;
/**
 * Exists any user active entitlement of specified itemIds, skus and appIds
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsOwnershipAny_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsOwnershipAny_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.Entitlement_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlement_ByUserId_ByEntitlementId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
}, options?: Omit<UseQueryOptions<EntitlementInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementInfo>) => void) => UseQueryResult<EntitlementInfo, AxiosError<ApiError>>;
/**
 * Get user entitlement ownership by sku.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsOwnershipBySku_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsOwnershipBySku_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    };
}, options?: Omit<UseQueryOptions<TimedOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TimedOwnership>) => void) => UseQueryResult<TimedOwnership, AxiosError<ApiError>>;
/**
 * Get user app entitlement ownership by appId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsOwnershipByAppId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsOwnershipByAppId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        appId: string | null;
    };
}, options?: Omit<UseQueryOptions<Ownership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Ownership>) => void) => UseQueryResult<Ownership, AxiosError<ApiError>>;
/**
 * Get user entitlement ownership by itemId.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsOwnershipByItemId_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsOwnershipByItemId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    };
}, options?: Omit<UseQueryOptions<TimedOwnership, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TimedOwnership>) => void) => UseQueryResult<TimedOwnership, AxiosError<ApiError>>;
/**
 * Get user entitlement ownership by itemIds.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.EntitlementsOwnershipByItemIds_ByUserId, input]
 * }
 * ```
 */
declare const useEntitlementApi_GetEntitlementsOwnershipByItemIds_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        ids?: string[];
    };
}, options?: Omit<UseQueryOptions<EntitlementOwnershipArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EntitlementOwnershipArray>) => void) => UseQueryResult<EntitlementOwnershipArray, AxiosError<ApiError>>;
/**
 * Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.Sell_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementApi_UpdateSell_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementSoldResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementSoldRequest;
}>, "mutationKey">, callback?: (data: EntitlementSoldResult) => void) => UseMutationResult<EntitlementSoldResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementSoldRequest;
}>;
/**
 * Split a specified use count of entitlement and create a new entitlement with splitting use count.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.Split_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementApi_UpdateSplit_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementSplitResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementSplitRequest;
}>, "mutationKey">, callback?: (data: EntitlementSplitResult) => void) => UseMutationResult<EntitlementSplitResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementSplitRequest;
}>;
/**
 * Transfer a specified use count from entitlement A to B..Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.Transfer_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementApi_UpdateTransfer_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementTransferResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementTransferRequest;
}>, "mutationKey">, callback?: (data: EntitlementTransferResult) => void) => UseMutationResult<EntitlementTransferResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: EntitlementTransferRequest;
}>;
/**
 * Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED. Client should pass item id in options if entitlement clazz is OPTIONBOX&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Entitlement.Decrement_ByUserId_ByEntitlementId, input]
 * }
 * ```
 */
declare const useEntitlementApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EntitlementDecrementResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: PublicEntitlementDecrement;
}>, "mutationKey">, callback?: (data: EntitlementDecrementResult) => void) => UseMutationResult<EntitlementDecrementResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    entitlementId: string;
    data: PublicEntitlementDecrement;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Fulfillment {
    FulfillmentCode_ByUserId = "Platform.Fulfillment.FulfillmentCode_ByUserId"
}
/**
 * Redeem campaign code, this api have rate limit, default: only allow request once per user in 2 seconds&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Fulfillment.FulfillmentCode_ByUserId, input]
 * }
 * ```
 */
declare const useFulfillmentApi_CreateFulfillmentCode_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FulfillCodeRequest;
}>, "mutationKey">, callback?: (data: FulfillmentResult) => void) => UseMutationResult<FulfillmentResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: FulfillCodeRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Iap {
    IapItemMapping = "Platform.Iap.IapItemMapping",
    IapAppleConfigVersion = "Platform.Iap.IapAppleConfigVersion",
    UserMeIapTwitchSync = "Platform.Iap.UserMeIapTwitchSync",
    IapPsnSync_ByUserId = "Platform.Iap.IapPsnSync_ByUserId",
    IapXblSync_ByUserId = "Platform.Iap.IapXblSync_ByUserId",
    IapSteamSync_ByUserId = "Platform.Iap.IapSteamSync_ByUserId",
    IapOculuSync_ByUserId = "Platform.Iap.IapOculuSync_ByUserId",
    IapTwitchSync_ByUserId = "Platform.Iap.IapTwitchSync_ByUserId",
    IapAppleReceipt_ByUserId = "Platform.Iap.IapAppleReceipt_ByUserId",
    IapEpicgameSync_ByUserId = "Platform.Iap.IapEpicgameSync_ByUserId",
    IapGoogleReceipt_ByUserId = "Platform.Iap.IapGoogleReceipt_ByUserId",
    IapAppleReceipt_ByUserId_v2 = "Platform.Iap.IapAppleReceipt_ByUserId_v2",
    IapPsnSyncMultiServiceLabel_ByUserId = "Platform.Iap.IapPsnSyncMultiServiceLabel_ByUserId"
}
/**
 * Get iap item mapping.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapItemMapping, input]
 * }
 * ```
 */
declare const useIapApi_GetIapItemMapping: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
    };
}, options?: Omit<UseQueryOptions<IapItemMappingInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<IapItemMappingInfo>) => void) => UseQueryResult<IapItemMappingInfo, AxiosError<ApiError>>;
/**
 * Get apple config version.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapAppleConfigVersion, input]
 * }
 * ```
 */
declare const useIapApi_GetIapAppleConfigVersion: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<AppleIapConfigVersionInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppleIapConfigVersionInfo>) => void) => UseQueryResult<AppleIapConfigVersionInfo, AxiosError<ApiError>>;
/**
 * Sync my game twitch drops entitlements.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.UserMeIapTwitchSync, input]
 * }
 * ```
 */
declare const useIapApi_UpdateUserMeIapTwitchSyncMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<TwitchSyncResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TwitchSyncRequest;
}>, "mutationKey">, callback?: (data: TwitchSyncResultArray) => void) => UseMutationResult<TwitchSyncResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: TwitchSyncRequest;
}>;
/**
 * Synchronize with entitlements in PSN Store.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapPsnSync_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapPsnSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayStationReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationReconcileRequest;
}>, "mutationKey">, callback?: (data: PlayStationReconcileResultArray) => void) => UseMutationResult<PlayStationReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationReconcileRequest;
}>;
/**
 * Sync Xbox inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapXblSync_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapXblSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<XblReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblReconcileRequest;
}>, "mutationKey">, callback?: (data: XblReconcileResultArray) => void) => UseMutationResult<XblReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: XblReconcileRequest;
}>;
/**
 * Sync steam inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapSteamSync_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapSteamSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SteamSyncRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SteamSyncRequest;
}>;
/**
 * Sync Oculus entitlements.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapOculuSync_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapOculuSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OculusReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: OculusReconcileResultArray) => void) => UseMutationResult<OculusReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;
/**
 * Sync twitch drops entitlements.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapTwitchSync_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapTwitchSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: TwitchSyncRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: TwitchSyncRequest;
}>;
/**
 * Verify apple iap receipt and fulfill item. don&#39;t support subscriptionOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapAppleReceipt_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapAppleReceipt_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AppleIapReceipt;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AppleIapReceipt;
}>;
/**
 * Sync epic games inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapEpicgameSync_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapEpicgameSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<EpicGamesReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: EpicGamesReconcileRequest;
}>, "mutationKey">, callback?: (data: EpicGamesReconcileResultArray) => void) => UseMutationResult<EpicGamesReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: EpicGamesReconcileRequest;
}>;
/**
 * Verify google iap receipt and fulfill item.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapGoogleReceipt_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapGoogleReceipt_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GoogleReceiptResolveResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: GoogleIapReceipt;
}>, "mutationKey">, callback?: (data: GoogleReceiptResolveResult) => void) => UseMutationResult<GoogleReceiptResolveResult, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: GoogleIapReceipt;
}>;
/**
 * Verify apple iap transaction and fulfill item, support subscriptionOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapAppleReceipt_ByUserId_v2, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapAppleReceipt_ByUserIdMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AppleIapRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: AppleIapRequest;
}>;
/**
 * Synchronize with entitlements in PSN Store with multiple service labels.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Iap.IapPsnSyncMultiServiceLabel_ByUserId, input]
 * }
 * ```
 */
declare const useIapApi_UpdateIapPsnSyncMultiServiceLabel_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayStationReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationMultiServiceLabelsReconcileRequest;
}>, "mutationKey">, callback?: (data: PlayStationReconcileResultArray) => void) => UseMutationResult<PlayStationReconcileResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: PlayStationMultiServiceLabelsReconcileRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_IapSubscription {
    IapSubscriptionPlatform_ByUserId_ByPlatform = "Platform.IapSubscription.IapSubscriptionPlatform_ByUserId_ByPlatform"
}
/**
 * Query user subscription, default sort by updatedAtOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_IapSubscription.IapSubscriptionPlatform_ByUserId_ByPlatform, input]
 * }
 * ```
 */
declare const useIapSubscriptionApi_GetIapSubscriptionPlatform_ByUserId_ByPlatform: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    platform: string;
    queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        productId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ThirdPartyUserSubscriptionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ThirdPartyUserSubscriptionPagingSlicedResult>) => void) => UseQueryResult<ThirdPartyUserSubscriptionPagingSlicedResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Item {
    ItemsBySku = "Platform.Item.ItemsBySku",
    ItemsSearch = "Platform.Item.ItemsSearch",
    ItemsByAppId = "Platform.Item.ItemsByAppId",
    ItemsByCriteria = "Platform.Item.ItemsByCriteria",
    ItemsLocaleByIds = "Platform.Item.ItemsLocaleByIds",
    ItemsEstimatedPrice = "Platform.Item.ItemsEstimatedPrice",
    Locale_ByItemId = "Platform.Item.Locale_ByItemId",
    Dynamic_ByItemId = "Platform.Item.Dynamic_ByItemId",
    AppLocale_ByItemId = "Platform.Item.AppLocale_ByItemId",
    ItemPurchaseConditionValidate = "Platform.Item.ItemPurchaseConditionValidate"
}
/**
 * This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemsBySku, input]
 * }
 * ```
 */
declare const useItemApi_GetItemsBySku: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        sku: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemInfo>) => void) => UseQueryResult<ItemInfo, AxiosError<ApiError>>;
/**
 * This API is used to search items by keyword in title, description and long description, It&#39;s language constrained, also if item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemsSearch, input]
 * }
 * ```
 */
declare const useItemApi_GetItemsSearch: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        keyword: string | null;
        language: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemPagingSlicedResult>) => void) => UseQueryResult<ItemPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to get item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemsByAppId, input]
 * }
 * ```
 */
declare const useItemApi_GetItemsByAppId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        appId: string | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemInfo>) => void) => UseQueryResult<ItemInfo, AxiosError<ApiError>>;
/**
 * This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemsByCriteria, input]
 * }
 * ```
 */
declare const useItemApi_GetItemsByCriteria: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        autoCalcEstimatedPrice?: boolean | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        language?: string | null;
        limit?: number;
        offset?: number;
        region?: string | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemPagingSlicedResult>) => void) => UseQueryResult<ItemPagingSlicedResult, AxiosError<ApiError>>;
/**
 * This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemsLocaleByIds, input]
 * }
 * ```
 */
declare const useItemApi_GetItemsLocaleByIds: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemIds: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ItemInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemInfoArray>) => void) => UseQueryResult<ItemInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get estimated prices of item
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemsEstimatedPrice, input]
 * }
 * ```
 */
declare const useItemApi_GetItemsEstimatedPrice: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        itemIds: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<EstimatedPriceInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EstimatedPriceInfoArray>) => void) => UseQueryResult<EstimatedPriceInfoArray, AxiosError<ApiError>>;
/**
 * This API is used to get an item in locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.Locale_ByItemId, input]
 * }
 * ```
 */
declare const useItemApi_GetLocale_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<PopulatedItemInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PopulatedItemInfo>) => void) => UseQueryResult<PopulatedItemInfo, AxiosError<ApiError>>;
/**
 * Get item dynamic data for a published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.Dynamic_ByItemId, input]
 * }
 * ```
 */
declare const useItemApi_GetDynamic_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
}, options?: Omit<UseQueryOptions<ItemDynamicDataInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ItemDynamicDataInfo>) => void) => UseQueryResult<ItemDynamicDataInfo, AxiosError<ApiError>>;
/**
 * This API is used to get an app in locale. If app not exist in specific region, default region app will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.AppLocale_ByItemId, input]
 * }
 * ```
 */
declare const useItemApi_GetAppLocale_ByItemId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    itemId: string;
    queryParams?: {
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<AppInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AppInfo>) => void) => UseQueryResult<AppInfo, AxiosError<ApiError>>;
/**
 * This API is used to validate user item purchase condition
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Item.ItemPurchaseConditionValidate, input]
 * }
 * ```
 */
declare const useItemApi_CreateItemPurchaseConditionValidateMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ItemPurchaseConditionValidateResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemPurchaseConditionValidateRequest;
}>, "mutationKey">, callback?: (data: ItemPurchaseConditionValidateResultArray) => void) => UseMutationResult<ItemPurchaseConditionValidateResultArray, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ItemPurchaseConditionValidateRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Order {
    Orders_ByUserId = "Platform.Order.Orders_ByUserId",
    Order_ByUserId = "Platform.Order.Order_ByUserId",
    Order_ByUserId_ByOrderNo = "Platform.Order.Order_ByUserId_ByOrderNo",
    Cancel_ByUserId_ByOrderNo = "Platform.Order.Cancel_ByUserId_ByOrderNo",
    OrderDiscountPreview_ByUserId = "Platform.Order.OrderDiscountPreview_ByUserId",
    History_ByUserId_ByOrderNo = "Platform.Order.History_ByUserId_ByOrderNo",
    ReceiptPdf_ByUserId_ByOrderNo = "Platform.Order.ReceiptPdf_ByUserId_ByOrderNo"
}
/**
 * Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.Orders_ByUserId, input]
 * }
 * ```
 */
declare const useOrderApi_GetOrders_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        discounted?: boolean | null;
        itemId?: string | null;
        limit?: number;
        offset?: number;
        status?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CLOSED" | "DELETED" | "FULFILLED" | "FULFILL_FAILED" | "INIT" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED";
    };
}, options?: Omit<UseQueryOptions<OrderPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderPagingSlicedResult>) => void) => UseQueryResult<OrderPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for ext field&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.Order_ByUserId, input]
 * }
 * ```
 */
declare const useOrderApi_CreateOrder_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: OrderCreate;
}>, "mutationKey">, callback?: (data: OrderInfo) => void) => UseMutationResult<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: OrderCreate;
}>;
/**
 * Get user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.Order_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderApi_GetOrder_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<OrderInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderInfo>) => void) => UseQueryResult<OrderInfo, AxiosError<ApiError>>;
/**
 * Cancel user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.Cancel_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderApi_UpdateCancel_ByUserId_ByOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}>, "mutationKey">, callback?: (data: OrderInfo) => void) => UseMutationResult<OrderInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}>;
/**
 * Preview order price with discount code, this api is used to auto calc order price with discount code.Notes: this api don&#39;t do full order validation, only check discount code and calc final order price.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: previewed order&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.OrderDiscountPreview_ByUserId, input]
 * }
 * ```
 */
declare const useOrderApi_CreateOrderDiscountPreview_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<OrderDiscountPreviewResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: OrderDiscountPreviewRequest;
}>, "mutationKey">, callback?: (data: OrderDiscountPreviewResponse) => void) => UseMutationResult<OrderDiscountPreviewResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: OrderDiscountPreviewRequest;
}>;
/**
 * Get user order histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.History_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderApi_GetHistory_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<OrderHistoryInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<OrderHistoryInfoArray>) => void) => UseQueryResult<OrderHistoryInfoArray, AxiosError<ApiError>>;
/**
 * Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Order.ReceiptPdf_ByUserId_ByOrderNo, input]
 * }
 * ```
 */
declare const useOrderApi_GetReceiptPdf_ByUserId_ByOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    orderNo: string;
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PaymentAccount {
    PaymentAccounts_ByUserId = "Platform.PaymentAccount.PaymentAccounts_ByUserId",
    PaymentAccount_ByUserId_ByType_ById = "Platform.PaymentAccount.PaymentAccount_ByUserId_ByType_ById"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment accounts.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment account list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAccount.PaymentAccounts_ByUserId, input]
 * }
 * ```
 */
declare const usePaymentAccountApi_GetPaymentAccounts_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<PaymentAccountArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentAccountArray>) => void) => UseQueryResult<PaymentAccountArray, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete payment account.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;:&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentAccount.PaymentAccount_ByUserId_ByType_ById, input]
 * }
 * ```
 */
declare const usePaymentAccountApi_DeletePaymentAccount_ByUserId_ByType_ByIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    type: string;
    id: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    type: string;
    id: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PaymentStation {
    PaymentTax = "Platform.PaymentStation.PaymentTax",
    PaymentLink = "Platform.PaymentStation.PaymentLink",
    PaymentQrcode = "Platform.PaymentStation.PaymentQrcode",
    PaymentMethods = "Platform.PaymentStation.PaymentMethods",
    PaymentReturnurl = "Platform.PaymentStation.PaymentReturnurl",
    PaymentPublicconfig = "Platform.PaymentStation.PaymentPublicconfig",
    PaymentCustomization = "Platform.PaymentStation.PaymentCustomization",
    PayPayment_ByPaymentOrderNo = "Platform.PaymentStation.PayPayment_ByPaymentOrderNo",
    InfoPayment_ByPaymentOrderNo = "Platform.PaymentStation.InfoPayment_ByPaymentOrderNo",
    StatusPayment_ByPaymentOrderNo = "Platform.PaymentStation.StatusPayment_ByPaymentOrderNo"
}
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check and get a payment order&#39;s should pay tax.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: tax result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentTax, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetPaymentTax: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        paymentOrderNo: string | null;
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        zipCode?: string | null;
    };
}, options?: Omit<UseQueryOptions<TaxResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TaxResult>) => void) => UseQueryResult<TaxResult, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;For Neon Pay payment provider, the &#39;neonPayConfig&#39; field can be used to provide success and cancel URL. If &#39;neonPayConfig&#39; field is not present, the &#39;returnUrl&#39; will be used for both success and cancel URL.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Get payment link&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentLink, input]
 * }
 * ```
 */
declare const usePaymentStationApi_CreatePaymentLinkMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentUrl, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentUrlCreate;
}>, "mutationKey">, callback?: (data: PaymentUrl) => void) => UseMutationResult<PaymentUrl, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PaymentUrlCreate;
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get qrcode.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: QRCode image stream&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentQrcode, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetPaymentQrcode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        code: string | null;
    };
}, options?: Omit<UseQueryOptions<BinarySchema, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BinarySchema>) => void) => UseQueryResult<BinarySchema, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment methods.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment method list&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentMethods, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetPaymentMethods: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        paymentOrderNo: string | null;
    };
}, options?: Omit<UseQueryOptions<PaymentMethodArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentMethodArray>) => void) => UseQueryResult<PaymentMethodArray, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Normalize payment return url for payment provider&lt;br&gt;Payment response: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Field&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;orderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;order no&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentStatus&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;DONE: The payment was successfully completed.&lt;/li&gt;&lt;li&gt;CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant&#39;s site before completing the transaction.&lt;/li&gt;&lt;li&gt;PENDING: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to be completed. When the shopper has completed the payment you will receive a successful AUTHORISATION.&lt;/li&gt;&lt;li&gt;RECEIVED: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to clear.&lt;/li&gt;&lt;li&gt;UNKNOWN: An error occurred during the payment processing.&lt;/li&gt;&lt;li&gt;FAILED: Shopper paid failed because of various reasons.&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;payment status reason&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;xsolla&lt;/i&gt;: parameters &#39;user_id&#39;, &#39;foreinginvoice&#39;, &#39;invoice_id&#39; and &#39;status&#39; will be automatically added to the link&lt;/li&gt;&lt;li&gt;&lt;i&gt;adyen&lt;/i&gt;: https://docs.adyen.com/developers/checkout/web-sdk&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentReturnurl, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetPaymentReturnurl: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        orderNo: string | null;
        paymentOrderNo: string | null;
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        returnUrl: string | null;
        PayerID?: string | null;
        foreinginvoice?: string | null;
        invoice_id?: string | null;
        payload?: string | null;
        redirectResult?: string | null;
        resultCode?: string | null;
        sessionId?: string | null;
        status?: string | null;
        token?: string | null;
        type?: string | null;
        user_id?: string | null;
    };
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment provider public config, at current only Strip provide public config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Public config&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentPublicconfig, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetPaymentPublicconfig: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        region: string | null;
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 * @deprecated
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: customization&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PaymentCustomization, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetPaymentCustomization: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        region: string | null;
        sandbox?: boolean | null;
    };
}, options?: Omit<UseQueryOptions<Customization, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Customization>) => void) => UseQueryResult<Customization, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Do payment(For now, this only support checkout.com).&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment process result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.PayPayment_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentStationApi_CreatePayPayment_ByPaymentOrderNoMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PaymentProcessResult, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentToken;
    queryParams?: {
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        zipCode?: string | null;
    };
}>, "mutationKey">, callback?: (data: PaymentProcessResult) => void) => UseMutationResult<PaymentProcessResult, AxiosError<ApiError>, SdkSetConfigParam & {
    paymentOrderNo: string;
    data: PaymentToken;
    queryParams?: {
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        zipCode?: string | null;
    };
}>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order details&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.InfoPayment_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetInfoPayment_ByPaymentOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    paymentOrderNo: string;
}, options?: Omit<UseQueryOptions<PaymentOrderDetails, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentOrderDetails>) => void) => UseQueryResult<PaymentOrderDetails, AxiosError<ApiError>>;
/**
 * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check payment order paid status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order paid result&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PaymentStation.StatusPayment_ByPaymentOrderNo, input]
 * }
 * ```
 */
declare const usePaymentStationApi_GetStatusPayment_ByPaymentOrderNo: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    paymentOrderNo: string;
}, options?: Omit<UseQueryOptions<PaymentOrderPaidResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PaymentOrderPaidResult>) => void) => UseQueryResult<PaymentOrderPaidResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Reward {
    RewardsByCode = "Platform.Reward.RewardsByCode",
    Reward_ByRewardId = "Platform.Reward.Reward_ByRewardId",
    RewardsByCriteria = "Platform.Reward.RewardsByCriteria"
}
/**
 * This API is used to get reward by reward code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Reward.RewardsByCode, input]
 * }
 * ```
 */
declare const useRewardApi_GetRewardsByCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        rewardCode: string | null;
    };
}, options?: Omit<UseQueryOptions<RewardInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RewardInfo>) => void) => UseQueryResult<RewardInfo, AxiosError<ApiError>>;
/**
 * This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Reward.Reward_ByRewardId, input]
 * }
 * ```
 */
declare const useRewardApi_GetReward_ByRewardId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    rewardId: string;
}, options?: Omit<UseQueryOptions<RewardInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RewardInfo>) => void) => UseQueryResult<RewardInfo, AxiosError<ApiError>>;
/**
 * This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Reward.RewardsByCriteria, input]
 * }
 * ```
 */
declare const useRewardApi_GetRewardsByCriteria: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        eventTopic?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
    };
}, options?: Omit<UseQueryOptions<RewardPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RewardPagingSlicedResult>) => void) => UseQueryResult<RewardPagingSlicedResult, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Section {
    Sections_ByUserId = "Platform.Section.Sections_ByUserId"
}
/**
 * This API is used to list active section contents.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store sections)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store sections)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: active section contents&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Section.Sections_ByUserId, input]
 * }
 * ```
 */
declare const useSectionApi_GetSections_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
        viewId?: string | null;
    };
}, options?: Omit<UseQueryOptions<SectionInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SectionInfoArray>) => void) => UseQueryResult<SectionInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Store {
    Stores = "Platform.Store.Stores"
}
/**
 * This API is used to list all stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Store.Stores, input]
 * }
 * ```
 */
declare const useStoreApi_GetStores: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<StoreInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<StoreInfoArray>) => void) => UseQueryResult<StoreInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Subscription {
    Subscriptions_ByUserId = "Platform.Subscription.Subscriptions_ByUserId",
    Subscription_ByUserId = "Platform.Subscription.Subscription_ByUserId",
    Subscription_ByUserId_BySubscriptionId = "Platform.Subscription.Subscription_ByUserId_BySubscriptionId",
    SubscriptionsSubscribableByItemId_ByUserId = "Platform.Subscription.SubscriptionsSubscribableByItemId_ByUserId",
    Cancel_ByUserId_BySubscriptionId = "Platform.Subscription.Cancel_ByUserId_BySubscriptionId",
    History_ByUserId_BySubscriptionId = "Platform.Subscription.History_ByUserId_BySubscriptionId",
    BillingAccount_ByUserId_BySubscriptionId = "Platform.Subscription.BillingAccount_ByUserId_BySubscriptionId"
}
/**
 * Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.Subscriptions_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_GetSubscriptions_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        chargeStatus?: "CHARGED" | "CHARGE_FAILED" | "NEVER" | "RECURRING_CHARGING" | "SETUP";
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: "ACTIVE" | "CANCELLED" | "EXPIRED" | "INIT";
        subscribedBy?: "PLATFORM" | "USER";
    };
}, options?: Omit<UseQueryOptions<SubscriptionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SubscriptionPagingSlicedResult>) => void) => UseQueryResult<SubscriptionPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.&lt;br&gt;&lt;b&gt;ACTIVE USER subscription can&#39;t do subscribe again.&lt;/b&gt;&lt;br&gt;&lt;b&gt;The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.&lt;/b&gt;&lt;br&gt;User with permission SANDBOX will create sandbox subscription that not real paid.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox subscription)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.Subscription_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_CreateSubscription_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SubscribeRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    data: SubscribeRequest;
}>;
/**
 * Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.Subscription_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_GetSubscription_ByUserId_BySubscriptionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
}, options?: Omit<UseQueryOptions<SubscriptionInfo, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SubscriptionInfo>) => void) => UseQueryResult<SubscriptionInfo, AxiosError<ApiError>>;
/**
 * Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.SubscriptionsSubscribableByItemId_ByUserId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_GetSubscriptionsSubscribableByItemId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        itemId: string | null;
    };
}, options?: Omit<UseQueryOptions<Subscribable, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Subscribable>) => void) => UseQueryResult<Subscribable, AxiosError<ApiError>>;
/**
 * Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.Cancel_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_UpdateCancel_ByUserId_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: CancelRequest;
}>, "mutationKey">, callback?: (data: SubscriptionInfo) => void) => UseMutationResult<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    data: CancelRequest;
}>;
/**
 * Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription history&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.History_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_GetHistory_ByUserId_BySubscriptionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
    queryParams?: {
        excludeFree?: boolean | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<BillingHistoryPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<BillingHistoryPagingSlicedResult>) => void) => UseQueryResult<BillingHistoryPagingSlicedResult, AxiosError<ApiError>>;
/**
 * Request to change a subscription billing account, this will guide user to payment station. The actual change will happen at the 0 payment notification successfully handled.&lt;br&gt;Only ACTIVE USER subscription with real currency billing account can be changed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Subscription.BillingAccount_ByUserId_BySubscriptionId, input]
 * }
 * ```
 */
declare const useSubscriptionApi_UpdateBillingAccount_ByUserId_BySubscriptionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
}>, "mutationKey">, callback?: (data: SubscriptionInfo) => void) => UseMutationResult<SubscriptionInfo, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
    subscriptionId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_View {
    Views_ByUserId = "Platform.View.Views_ByUserId"
}
/**
 * This API is used to get all views.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store views)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store views)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: all views&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_View.Views_ByUserId, input]
 * }
 * ```
 */
declare const useViewApi_GetViews_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams?: {
        language?: string | null;
        storeId?: string | null;
    };
}, options?: Omit<UseQueryOptions<ViewInfoArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ViewInfoArray>) => void) => UseQueryResult<ViewInfoArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Wallet {
    UserMeWallet_ByCurrencyCode = "Platform.Wallet.UserMeWallet_ByCurrencyCode",
    Wallet_ByUserId_ByCurrencyCode = "Platform.Wallet.Wallet_ByUserId_ByCurrencyCode",
    Transactions_ByUserId_ByCurrencyCode = "Platform.Wallet.Transactions_ByUserId_ByCurrencyCode"
}
/**
 * get my wallet by currency code and namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt; &lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user wallet&lt;/b&gt;&lt;/li&gt; &lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user wallet&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Wallet.UserMeWallet_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletApi_GetUserMeWallet_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    currencyCode: string;
}, options?: Omit<UseQueryOptions<PlatformWallet, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlatformWallet>) => void) => UseQueryResult<PlatformWallet, AxiosError<ApiError>>;
/**
 * get a wallet by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Wallet.Wallet_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletApi_GetWallet_ByUserId_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
}, options?: Omit<UseQueryOptions<PlatformWallet, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlatformWallet>) => void) => UseQueryResult<PlatformWallet, AxiosError<ApiError>>;
/**
 * List wallet transactions by currency code ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency transaction info&lt;/li&gt;&lt;/ul&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Wallet.Transactions_ByUserId_ByCurrencyCode, input]
 * }
 * ```
 */
declare const useWalletApi_GetTransactions_ByUserId_ByCurrencyCode: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    currencyCode: string;
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<WalletTransactionPagingSlicedResult, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<WalletTransactionPagingSlicedResult>) => void) => UseQueryResult<WalletTransactionPagingSlicedResult, AxiosError<ApiError>>;

export { Key_AchievementPlatformAdmin, Key_AnonymizationAdmin, Key_CampaignAdmin, Key_CatalogChangesAdmin, Key_Category, Key_CategoryAdmin, Key_ClawbackAdmin, Key_Currency, Key_CurrencyAdmin, Key_Dlc, Key_DlcAdmin, Key_Entitlement, Key_EntitlementAdmin, Key_Fulfillment, Key_FulfillmentAdmin, Key_FulfillmentScriptAdmin, Key_Iap, Key_IapAdmin, Key_IapNotificationAdmin, Key_IapSubscription, Key_IapSubscriptionAdmin, Key_InvoiceAdmin, Key_Item, Key_ItemAdmin, Key_KeyGroupAdmin, Key_Order, Key_OrderAdmin, Key_OrderDedicatedAdmin, Key_PaymentAccount, Key_PaymentAdmin, Key_PaymentCallbackConfigAdmin, Key_PaymentConfigAdmin, Key_PaymentDedicatedAdmin, Key_PaymentStation, Key_PlatformAccountClosureAdmin, Key_PlatformAdmin, Key_RevocationAdmin, Key_Reward, Key_RewardAdmin, Key_Section, Key_SectionAdmin, Key_ServicePluginConfigAdmin, Key_SessionPlatformAdmin, Key_Store, Key_StoreAdmin, Key_Subscription, Key_SubscriptionAdmin, Key_TicketAdmin, Key_TradeActionAdmin, Key_View, Key_ViewAdmin, Key_Wallet, Key_WalletAdmin, useAchievementPlatformAdminApi_GetAchievementXbl_ByUserId, useAchievementPlatformAdminApi_UpdateAchievementSteam_ByUserIdMutation, useAchievementPlatformAdminApi_UpdateAchievementXbl_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationCampaign_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationEntitlement_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationFulfillment_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationIntegration_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationOrder_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationPayment_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationRevocation_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationSubscription_ByUserIdMutation, useAnonymizationAdminApi_DeleteAnonymizationWallet_ByUserIdMutation, useCampaignAdminApi_CreateCampaignMutation, useCampaignAdminApi_CreateCodeCampaign_ByCampaignIdMutation, useCampaignAdminApi_CreateRedemption_ByUserIdMutation, useCampaignAdminApi_GetBatchNames_ByCampaignId, useCampaignAdminApi_GetCampaign_ByCampaignId, useCampaignAdminApi_GetCampaigns, useCampaignAdminApi_GetCodeCampaign_ByCampaignId, useCampaignAdminApi_GetCode_ByCode, useCampaignAdminApi_GetCodesCsv_ByCampaignId, useCampaignAdminApi_GetDynamic_ByCampaignId, useCampaignAdminApi_GetHistoryCodes_ByCampaignId, useCampaignAdminApi_UpdateBatchName_ByCampaignIdMutation, useCampaignAdminApi_UpdateCampaign_ByCampaignIdMutation, useCampaignAdminApi_UpdateDisableBulkCode_ByCampaignIdMutation, useCampaignAdminApi_UpdateDisable_ByCodeMutation, useCampaignAdminApi_UpdateEnableBulkCode_ByCampaignIdMutation, useCampaignAdminApi_UpdateEnable_ByCodeMutation, useCatalogChangesAdminApi_GetCatalogChangesByCriteria_ByStoreId, useCatalogChangesAdminApi_GetCatalogChangesStatistics_ByStoreId, useCatalogChangesAdminApi_UpdateCatalogChangePublishAll_ByStoreIdMutation, useCatalogChangesAdminApi_UpdateCatalogChangePublishSelected_ByStoreIdMutation, useCatalogChangesAdminApi_UpdateCatalogChangeSelectAllByCriteria_ByStoreIdMutation, useCatalogChangesAdminApi_UpdateCatalogChangeSelectAll_ByStoreIdMutation, useCatalogChangesAdminApi_UpdateCatalogChangeUnselectAll_ByStoreIdMutation, useCatalogChangesAdminApi_UpdateSelect_ByStoreId_ByChangeIdMutation, useCatalogChangesAdminApi_UpdateUnselect_ByStoreId_ByChangeIdMutation, useCategoryAdminApi_CreateCategoryMutation, useCategoryAdminApi_DeleteCategory_ByCategoryPathMutation, useCategoryAdminApi_GetCategories, useCategoryAdminApi_GetCategoriesBasic, useCategoryAdminApi_GetCategory_ByCategoryPath, useCategoryAdminApi_GetChildren_ByCategoryPath, useCategoryAdminApi_GetDescendants_ByCategoryPath, useCategoryAdminApi_UpdateCategory_ByCategoryPathMutation, useCategoryApi_GetCategories, useCategoryApi_GetCategoriesDownload, useCategoryApi_GetCategory_ByCategoryPath, useCategoryApi_GetChildren_ByCategoryPath, useCategoryApi_GetDescendants_ByCategoryPath, useClawbackAdminApi_CreateIapClawbackPlaystationMockMutation, useClawbackAdminApi_GetIapClawbackHistories, useCurrencyAdminApi_CreateCurrencyMutation, useCurrencyAdminApi_DeleteCurrency_ByCurrencyCodeMutation, useCurrencyAdminApi_GetConfig_ByCurrencyCode, useCurrencyAdminApi_GetCurrencies, useCurrencyAdminApi_GetSummary_ByCurrencyCode, useCurrencyAdminApi_UpdateCurrency_ByCurrencyCodeMutation, useCurrencyApi_GetCurrencies, useDlcAdminApi_DeleteDlcConfigItemMutation, useDlcAdminApi_DeleteDlcConfigPlatformMapMutation, useDlcAdminApi_GetDlcConfigItem, useDlcAdminApi_GetDlcConfigPlatformMap, useDlcAdminApi_GetDlcRecords_ByUserId, useDlcAdminApi_GetDlc_ByUserId, useDlcAdminApi_UpdateDlcConfigItemMutation, useDlcAdminApi_UpdateDlcConfigPlatformMapMutation, useDlcApi_GetDlcRewardsDurableMap, useDlcApi_GetUsersMeDlcContent, useDlcApi_UpdateDlcEpicgameSync_ByUserIdMutation, useDlcApi_UpdateDlcOculuSync_ByUserIdMutation, useDlcApi_UpdateDlcPsnSyncMultiServiceLabel_ByUserIdMutation, useDlcApi_UpdateDlcPsnSync_ByUserIdMutation, useDlcApi_UpdateDlcSteamSync_ByUserIdMutation, useDlcApi_UpdateDlcXblSync_ByUserIdMutation, useEntitlementAdminApi_CreateEntitlementGrantMutation, useEntitlementAdminApi_CreateEntitlementRevokeMutation, useEntitlementAdminApi_CreateEntitlement_ByUserIdMutation, useEntitlementAdminApi_CreateRevokeByUseCount_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_GetEntitlementConfig_ByPlatform, useEntitlementAdminApi_GetEntitlement_ByEntitlementId, useEntitlementAdminApi_GetEntitlement_ByUserId_ByEntitlementId, useEntitlementAdminApi_GetEntitlements, useEntitlementAdminApi_GetEntitlementsByAppId_ByUserId, useEntitlementAdminApi_GetEntitlementsByAppType_ByUserId, useEntitlementAdminApi_GetEntitlementsByItemId_ByUserId, useEntitlementAdminApi_GetEntitlementsByItemIds, useEntitlementAdminApi_GetEntitlementsByItemIds_ByUserId, useEntitlementAdminApi_GetEntitlementsBySku_ByUserId, useEntitlementAdminApi_GetEntitlementsConfigInfo, useEntitlementAdminApi_GetEntitlementsOwnershipAnyOf_ByUserId, useEntitlementAdminApi_GetEntitlementsOwnershipAny_ByUserId, useEntitlementAdminApi_GetEntitlementsOwnershipByAppId_ByUserId, useEntitlementAdminApi_GetEntitlementsOwnershipByItemId_ByUserId, useEntitlementAdminApi_GetEntitlementsOwnershipByItemIds_ByUserId, useEntitlementAdminApi_GetEntitlementsOwnershipBySku_ByUserId, useEntitlementAdminApi_GetEntitlements_ByUserId, useEntitlementAdminApi_GetHistory_ByUserId_ByEntitlementId, useEntitlementAdminApi_GetRevokeByUseCountPreCheck_ByUserId_ByEntitlementId, useEntitlementAdminApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_UpdateDisable_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_UpdateEnable_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_UpdateEntitlementConfigEntitlementOriginEnableMutation, useEntitlementAdminApi_UpdateEntitlementConfig_ByPlatformMutation, useEntitlementAdminApi_UpdateEntitlementRevokeById_ByUserIdMutation, useEntitlementAdminApi_UpdateEntitlementRevoke_ByUserIdMutation, useEntitlementAdminApi_UpdateEntitlement_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_UpdateRevokeByUseCount_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_UpdateRevoke_ByUserId_ByEntitlementIdMutation, useEntitlementAdminApi_UpdateSell_ByUserId_ByEntitlementIdMutation, useEntitlementApi_GetEntitlement_ByUserId_ByEntitlementId, useEntitlementApi_GetEntitlementsByAppId_ByUserId, useEntitlementApi_GetEntitlementsByAppType_ByUserId, useEntitlementApi_GetEntitlementsByIds_ByUserId, useEntitlementApi_GetEntitlementsByItemId_ByUserId, useEntitlementApi_GetEntitlementsBySku_ByUserId, useEntitlementApi_GetEntitlementsHistory_ByUserId, useEntitlementApi_GetEntitlementsOwnershipAny_ByUserId, useEntitlementApi_GetEntitlementsOwnershipByAppId_ByUserId, useEntitlementApi_GetEntitlementsOwnershipByItemId_ByUserId, useEntitlementApi_GetEntitlementsOwnershipByItemIds_ByUserId, useEntitlementApi_GetEntitlementsOwnershipBySku_ByUserId, useEntitlementApi_GetEntitlements_ByUserId, useEntitlementApi_GetUsersMeEntitlementsOwnershipAny, useEntitlementApi_GetUsersMeEntitlementsOwnershipByAppId, useEntitlementApi_GetUsersMeEntitlementsOwnershipByItemId, useEntitlementApi_GetUsersMeEntitlementsOwnershipBySku, useEntitlementApi_GetUsersMeEntitlementsOwnershipToken, useEntitlementApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation, useEntitlementApi_UpdateSell_ByUserId_ByEntitlementIdMutation, useEntitlementApi_UpdateSplit_ByUserId_ByEntitlementIdMutation, useEntitlementApi_UpdateTransfer_ByUserId_ByEntitlementIdMutation, useFulfillmentAdminApi_CreateFulfillmentCode_ByUserIdMutation, useFulfillmentAdminApi_CreateFulfillmentPreCheck_ByUserIdMutation, useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation, useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation_v2, useFulfillmentAdminApi_CreateFulfillment_ByUserIdMutation, useFulfillmentAdminApi_GetFulfillmentHistory, useFulfillmentAdminApi_GetFulfillments_v2, useFulfillmentAdminApi_UpdateFulfillment_ByUserId_ByTransactionIdMutation_v2, useFulfillmentAdminApi_UpdateRetry_ByUserId_ByTransactionIdMutation_v2, useFulfillmentAdminApi_UpdateRevoke_ByUserId_ByTransactionIdMutation_v2, useFulfillmentApi_CreateFulfillmentCode_ByUserIdMutation, useFulfillmentScriptAdminApi_CreateFulfillmentScript_ByIdMutation, useFulfillmentScriptAdminApi_DeleteFulfillmentScript_ByIdMutation, useFulfillmentScriptAdminApi_GetFulfillmentScript_ById, useFulfillmentScriptAdminApi_GetFulfillmentScripts, useFulfillmentScriptAdminApi_PatchFulfillmentScript_ByIdMutation, useIapAdminApi_DeleteIapConfigAppleMutation, useIapAdminApi_DeleteIapConfigEpicgameMutation, useIapAdminApi_DeleteIapConfigGoogleMutation, useIapAdminApi_DeleteIapConfigItemMutation, useIapAdminApi_DeleteIapConfigOculuMutation, useIapAdminApi_DeleteIapConfigPlaystationMutation, useIapAdminApi_DeleteIapConfigSteamMutation, useIapAdminApi_DeleteIapConfigTwitchMutation, useIapAdminApi_DeleteIapConfigXblMutation, useIapAdminApi_GetIapAll_ByUserId, useIapAdminApi_GetIapConfigApple, useIapAdminApi_GetIapConfigEpicgames, useIapAdminApi_GetIapConfigGoogle, useIapAdminApi_GetIapConfigItem, useIapAdminApi_GetIapConfigOculus, useIapAdminApi_GetIapConfigPlaystation, useIapAdminApi_GetIapConfigPlaystationValidate, useIapAdminApi_GetIapConfigSteam, useIapAdminApi_GetIapConfigTwitch, useIapAdminApi_GetIapConfigXbl, useIapAdminApi_GetIapConsumeHistory_ByUserId, useIapAdminApi_GetIap_ByUserId, useIapAdminApi_UpdateIapConfigAppleCertMutation, useIapAdminApi_UpdateIapConfigAppleMutation, useIapAdminApi_UpdateIapConfigEpicgameMutation, useIapAdminApi_UpdateIapConfigGoogleCertMutation, useIapAdminApi_UpdateIapConfigGoogleMutation, useIapAdminApi_UpdateIapConfigItemMutation, useIapAdminApi_UpdateIapConfigOculuMutation, useIapAdminApi_UpdateIapConfigPlaystationMutation, useIapAdminApi_UpdateIapConfigPlaystationValidateMutation, useIapAdminApi_UpdateIapConfigSteamMutation, useIapAdminApi_UpdateIapConfigTwitchMutation, useIapAdminApi_UpdateIapConfigXblCertMutation, useIapAdminApi_UpdateIapConfigXblMutation, useIapAdminApi_UpdateIapMockReceipt_ByUserIdMutation, useIapApi_GetIapAppleConfigVersion, useIapApi_GetIapItemMapping, useIapApi_UpdateIapAppleReceipt_ByUserIdMutation, useIapApi_UpdateIapAppleReceipt_ByUserIdMutation_v2, useIapApi_UpdateIapEpicgameSync_ByUserIdMutation, useIapApi_UpdateIapGoogleReceipt_ByUserIdMutation, useIapApi_UpdateIapOculuSync_ByUserIdMutation, useIapApi_UpdateIapPsnSyncMultiServiceLabel_ByUserIdMutation, useIapApi_UpdateIapPsnSync_ByUserIdMutation, useIapApi_UpdateIapSteamSync_ByUserIdMutation, useIapApi_UpdateIapTwitchSync_ByUserIdMutation, useIapApi_UpdateIapXblSync_ByUserIdMutation, useIapApi_UpdateUserMeIapTwitchSyncMutation, useIapNotificationAdminApi_GetIapNotifications, useIapSubscriptionAdminApi_GetHistoriesSubscriptionsIap_ByUserId_ById, useIapSubscriptionAdminApi_GetIapSubscriptionTransaction_ByUserId_ById, useIapSubscriptionAdminApi_GetIapSubscription_ByUserId_ById, useIapSubscriptionAdminApi_GetIapSubscriptions, useIapSubscriptionAdminApi_GetIapSubscriptionsTransactions_ByUserId, useIapSubscriptionAdminApi_GetIapSubscriptions_ByUserId, useIapSubscriptionAdminApi_GetOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform, useIapSubscriptionAdminApi_GetOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform, useIapSubscriptionAdminApi_UpdateSyncIap_ByUserId_ByIdMutation, useIapSubscriptionAdminApi_UpdateSyncSubscriptionIap_ByUserId_ByIdMutation, useIapSubscriptionApi_GetIapSubscriptionPlatform_ByUserId_ByPlatform, useInvoiceAdminApi_GetInvoiceDetailsCsv, useInvoiceAdminApi_GetInvoiceSummary, useItemAdminApi_CreateItemConfigMutation, useItemAdminApi_CreateItemMutation, useItemAdminApi_CreateItemPurchaseConditionValidateMutation, useItemAdminApi_DeleteFeature_ByItemId_ByFeatureMutation, useItemAdminApi_DeleteItemConfig_ByIdMutation, useItemAdminApi_DeleteItem_ByItemIdMutation, useItemAdminApi_GetApp_ByItemId, useItemAdminApi_GetDynamic_ByItemId, useItemAdminApi_GetItemConfig_ById, useItemAdminApi_GetItem_ByItemId, useItemAdminApi_GetItemsByAppId, useItemAdminApi_GetItemsByCriteria, useItemAdminApi_GetItemsByCriteria_v2, useItemAdminApi_GetItemsByFeaturesBasic, useItemAdminApi_GetItemsByIds, useItemAdminApi_GetItemsBySku, useItemAdminApi_GetItemsBySkuLocale, useItemAdminApi_GetItemsConfigs, useItemAdminApi_GetItemsConfigsSearch, useItemAdminApi_GetItemsEstimatedPrice, useItemAdminApi_GetItemsItemIdBySku, useItemAdminApi_GetItemsItemIdBySkus, useItemAdminApi_GetItemsLocaleByIds, useItemAdminApi_GetItemsPredicateTypes, useItemAdminApi_GetItemsSearch, useItemAdminApi_GetItemsUncategorized, useItemAdminApi_GetLocale_ByItemId, useItemAdminApi_UpdateAcquire_ByItemIdMutation, useItemAdminApi_UpdateApp_ByItemIdMutation, useItemAdminApi_UpdateDisable_ByItemIdMutation, useItemAdminApi_UpdateEnable_ByItemIdMutation, useItemAdminApi_UpdateFeature_ByItemId_ByFeatureMutation, useItemAdminApi_UpdateItemConfig_ByIdMutation, useItemAdminApi_UpdateItemMutation, useItemAdminApi_UpdateItemRegiondataMutation, useItemAdminApi_UpdateItem_ByItemIdMutation, useItemAdminApi_UpdatePurchaseCondition_ByItemIdMutation, useItemAdminApi_UpdateReturn_ByItemIdMutation, useItemApi_CreateItemPurchaseConditionValidateMutation, useItemApi_GetAppLocale_ByItemId, useItemApi_GetDynamic_ByItemId, useItemApi_GetItemsByAppId, useItemApi_GetItemsByCriteria, useItemApi_GetItemsBySku, useItemApi_GetItemsEstimatedPrice, useItemApi_GetItemsLocaleByIds, useItemApi_GetItemsSearch, useItemApi_GetLocale_ByItemId, useKeyGroupAdminApi_CreateKey_ByKeyGroupIdMutation, useKeyGroupAdminApi_CreateKeygroupMutation, useKeyGroupAdminApi_GetDynamic_ByKeyGroupId, useKeyGroupAdminApi_GetKeygroup_ByKeyGroupId, useKeyGroupAdminApi_GetKeygroups, useKeyGroupAdminApi_GetKeygroupsByBoothName, useKeyGroupAdminApi_GetKeys_ByKeyGroupId, useKeyGroupAdminApi_UpdateKeygroup_ByKeyGroupIdMutation, useOrderAdminApi_CreateNotification_ByUserId_ByOrderNoMutation, useOrderAdminApi_CreateOrder_ByUserIdMutation, useOrderAdminApi_GetGrant_ByUserId_ByOrderNo, useOrderAdminApi_GetHistory_ByUserId_ByOrderNo, useOrderAdminApi_GetOrder_ByOrderNo, useOrderAdminApi_GetOrder_ByUserId_ByOrderNo, useOrderAdminApi_GetOrders, useOrderAdminApi_GetOrdersCountOfItem_ByUserId, useOrderAdminApi_GetOrdersStats, useOrderAdminApi_GetOrders_ByUserId, useOrderAdminApi_GetReceiptPdf_ByUserId_ByOrderNo, useOrderAdminApi_UpdateFulfill_ByUserId_ByOrderNoMutation, useOrderAdminApi_UpdateOrder_ByUserId_ByOrderNoMutation, useOrderAdminApi_UpdateRefund_ByOrderNoMutation, useOrderApi_CreateOrderDiscountPreview_ByUserIdMutation, useOrderApi_CreateOrder_ByUserIdMutation, useOrderApi_GetHistory_ByUserId_ByOrderNo, useOrderApi_GetOrder_ByUserId_ByOrderNo, useOrderApi_GetOrders_ByUserId, useOrderApi_GetReceiptPdf_ByUserId_ByOrderNo, useOrderApi_UpdateCancel_ByUserId_ByOrderNoMutation, useOrderDedicatedAdminApi_GetOrders, usePaymentAccountApi_DeletePaymentAccount_ByUserId_ByType_ByIdMutation, usePaymentAccountApi_GetPaymentAccounts_ByUserId, usePaymentAdminApi_CreatePaymentOrder_ByUserIdMutation, usePaymentAdminApi_GetPaymentNotifications, usePaymentAdminApi_GetPaymentOrder_ByPaymentOrderNo, usePaymentAdminApi_GetPaymentOrders, usePaymentAdminApi_GetPaymentOrdersByExtTxId, usePaymentAdminApi_GetStatusPayment_ByPaymentOrderNo, usePaymentAdminApi_UpdatePaymentOrder_ByPaymentOrderNoMutation, usePaymentAdminApi_UpdateRefundPayment_ByUserId_ByPaymentOrderNoMutation, usePaymentAdminApi_UpdateSimulateNotificationPayment_ByPaymentOrderNoMutation, usePaymentCallbackConfigAdminApi_GetPaymentConfigCallback, usePaymentCallbackConfigAdminApi_UpdatePaymentConfigCallbackMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantAdyenconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantAlipayconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantCheckoutconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantNeonpayconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantPaypalconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantStripeconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantWxpayconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigMerchantXsollaconfigTestMutation, usePaymentConfigAdminApi_CreatePaymentConfigProviderMutation, usePaymentConfigAdminApi_DeletePaymentConfigProvider_ByIdMutation, usePaymentConfigAdminApi_GetAdyenconfigTestPayment_ById, usePaymentConfigAdminApi_GetAlipayconfigTestPayment_ById, usePaymentConfigAdminApi_GetCheckoutconfigTestPayment_ById, usePaymentConfigAdminApi_GetNeonpayconfigTestPayment_ById, usePaymentConfigAdminApi_GetPaymentConfigDomains, usePaymentConfigAdminApi_GetPaymentConfigMerchantMatched, usePaymentConfigAdminApi_GetPaymentConfigMerchant_ById, usePaymentConfigAdminApi_GetPaymentConfigProvider, usePaymentConfigAdminApi_GetPaymentConfigProviderAggregate, usePaymentConfigAdminApi_GetPaymentConfigProviderMatched, usePaymentConfigAdminApi_GetPaymentConfigProviderSpecial, usePaymentConfigAdminApi_GetPaymentConfigTax, usePaymentConfigAdminApi_GetPaypalconfigTestPayment_ById, usePaymentConfigAdminApi_GetStripeconfigTestPayment_ById, usePaymentConfigAdminApi_GetWxpayconfigTestPayment_ById, usePaymentConfigAdminApi_GetXsollaconfigTestPayment_ById, usePaymentConfigAdminApi_UpdateAdyenconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateAlipayconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateCheckoutconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateNeonpayconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdatePaymentConfigDomainMutation, usePaymentConfigAdminApi_UpdatePaymentConfigProvider_ByIdMutation, usePaymentConfigAdminApi_UpdatePaymentConfigTaxMutation, usePaymentConfigAdminApi_UpdatePaypalconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateStripeconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateWxpayconfigCertPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateWxpayconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateXsollaconfigPayment_ByIdMutation, usePaymentConfigAdminApi_UpdateXsollauiconfigPayment_ByIdMutation, usePaymentDedicatedAdminApi_CreatePaymentOrderMutation, usePaymentDedicatedAdminApi_GetPaymentOrders, usePaymentDedicatedAdminApi_UpdateRefundPayment_ByPaymentOrderNoMutation, usePaymentStationApi_CreatePayPayment_ByPaymentOrderNoMutation, usePaymentStationApi_CreatePaymentLinkMutation, usePaymentStationApi_GetInfoPayment_ByPaymentOrderNo, usePaymentStationApi_GetPaymentCustomization, usePaymentStationApi_GetPaymentMethods, usePaymentStationApi_GetPaymentPublicconfig, usePaymentStationApi_GetPaymentQrcode, usePaymentStationApi_GetPaymentReturnurl, usePaymentStationApi_GetPaymentTax, usePaymentStationApi_GetStatusPayment_ByPaymentOrderNo, usePlatformAccountClosureAdminApi_GetPlatformClosureHistory_ByUserId, usePlatformAdminApi_CreateOwnershipPsnPlatform_ByEntitlementLabelMutation, usePlatformAdminApi_CreateOwnershipXblPlatform_ByProductSkuMutation, useRevocationAdminApi_DeleteRevocationConfigMutation, useRevocationAdminApi_GetRevocationConfig, useRevocationAdminApi_GetRevocationHistory, useRevocationAdminApi_UpdateRevocationConfigMutation, useRevocationAdminApi_UpdateRevocation_ByUserIdMutation, useRewardAdminApi_CreateRewardImportMutation, useRewardAdminApi_CreateRewardMutation, useRewardAdminApi_DeleteRecord_ByRewardIdMutation, useRewardAdminApi_DeleteReward_ByRewardIdMutation, useRewardAdminApi_GetReward_ByRewardId, useRewardAdminApi_GetRewardsByCriteria, useRewardAdminApi_GetRewardsExport, useRewardAdminApi_UpdateMatch_ByRewardIdMutation, useRewardAdminApi_UpdateReward_ByRewardIdMutation, useRewardApi_GetReward_ByRewardId, useRewardApi_GetRewardsByCode, useRewardApi_GetRewardsByCriteria, useSectionAdminApi_CreateSectionMutation, useSectionAdminApi_DeleteSectionPurgeExpiredMutation, useSectionAdminApi_DeleteSection_BySectionIdMutation, useSectionAdminApi_GetSection_BySectionId, useSectionAdminApi_GetSections, useSectionAdminApi_UpdateSection_BySectionIdMutation, useSectionApi_GetSections_ByUserId, useServicePluginConfigAdminApi_DeleteCatalogPluginLootboxMutation, useServicePluginConfigAdminApi_DeleteCatalogPluginSectionMutation, useServicePluginConfigAdminApi_DeleteConfigServicePluginMutation, useServicePluginConfigAdminApi_DeleteRevocationPluginRevocationMutation, useServicePluginConfigAdminApi_GetCatalogPluginsLootbox, useServicePluginConfigAdminApi_GetCatalogPluginsLootboxGrpcInfo, useServicePluginConfigAdminApi_GetCatalogPluginsSection, useServicePluginConfigAdminApi_GetConfigsServicePlugin, useServicePluginConfigAdminApi_GetRevocationPluginsRevocation, useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxCustomConfigCertMutation, useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxMutation, useServicePluginConfigAdminApi_UpdateCatalogPluginSectionCustomConfigCertMutation, useServicePluginConfigAdminApi_UpdateCatalogPluginSectionMutation, useServicePluginConfigAdminApi_UpdateConfigServicePluginMutation, useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationMutation, useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationRevocationCustomConfigCertMutation, useSessionPlatformAdminApi_UpdateSessionXbl_ByUserIdMutation, useStoreAdminApi_CreateExport_ByStoreIdMutation_v2, useStoreAdminApi_CreateImportByCsv_ByStoreIdMutation, useStoreAdminApi_CreateStoreExportByCsvMutation, useStoreAdminApi_CreateStoreMutation, useStoreAdminApi_DeleteStorePublishedMutation, useStoreAdminApi_DeleteStore_ByStoreIdMutation, useStoreAdminApi_GetCatalogConfigs, useStoreAdminApi_GetExport_ByStoreId, useStoreAdminApi_GetImportHistory_ByStoreId, useStoreAdminApi_GetStore_ByStoreId, useStoreAdminApi_GetStores, useStoreAdminApi_GetStoresCatalogDefinition, useStoreAdminApi_GetStoresDownloadCsvTemplates, useStoreAdminApi_GetStoresPublished, useStoreAdminApi_GetStoresPublishedBackup, useStoreAdminApi_UpdateCatalogConfigMutation, useStoreAdminApi_UpdateClone_ByStoreIdMutation, useStoreAdminApi_UpdateStoreImportMutation, useStoreAdminApi_UpdateStoreImportMutation_v2, useStoreAdminApi_UpdateStorePublishedRollbackMutation, useStoreAdminApi_UpdateStore_ByStoreIdMutation, useStoreApi_GetStores, useSubscriptionAdminApi_CreateNotification_ByUserId_BySubscriptionIdMutation, useSubscriptionAdminApi_CreateSubscriptionPlatformSubscribe_ByUserIdMutation, useSubscriptionAdminApi_DeleteSubscription_ByUserId_BySubscriptionIdMutation, useSubscriptionAdminApi_GetHistory_ByUserId_BySubscriptionId, useSubscriptionAdminApi_GetSubscription_ByUserId_BySubscriptionId, useSubscriptionAdminApi_GetSubscriptions, useSubscriptionAdminApi_GetSubscriptionsActivities_ByUserId, useSubscriptionAdminApi_GetSubscriptionsSubscribableByItemId_ByUserId, useSubscriptionAdminApi_GetSubscriptions_ByUserId, useSubscriptionAdminApi_UpdateCancel_ByUserId_BySubscriptionIdMutation, useSubscriptionAdminApi_UpdateGrant_ByUserId_BySubscriptionIdMutation, useSubscriptionAdminApi_UpdateRecurring_BySubscriptionIdMutation, useSubscriptionApi_CreateSubscription_ByUserIdMutation, useSubscriptionApi_GetHistory_ByUserId_BySubscriptionId, useSubscriptionApi_GetSubscription_ByUserId_BySubscriptionId, useSubscriptionApi_GetSubscriptionsSubscribableByItemId_ByUserId, useSubscriptionApi_GetSubscriptions_ByUserId, useSubscriptionApi_UpdateBillingAccount_ByUserId_BySubscriptionIdMutation, useSubscriptionApi_UpdateCancel_ByUserId_BySubscriptionIdMutation, useTicketAdminApi_CreateTicket_ByUserId_ByBoothNameMutation, useTicketAdminApi_GetId_ByBoothName, useTicketAdminApi_GetTicket_ByBoothName, useTicketAdminApi_UpdateDecrement_ByBoothNameMutation, useTicketAdminApi_UpdateIncrement_ByBoothNameMutation, useTradeActionAdminApi_CreateTradeCommitMutation, useTradeActionAdminApi_GetTradeHistoryByCriteria, useTradeActionAdminApi_GetTrade_ByTransactionId, useViewAdminApi_CreateViewMutation, useViewAdminApi_DeleteView_ByViewIdMutation, useViewAdminApi_GetView_ByViewId, useViewAdminApi_GetViews, useViewAdminApi_UpdateView_ByViewIdMutation, useViewApi_GetViews_ByUserId, useWalletAdminApi_CreateBalanceCheck_ByUserId_ByCurrencyCodeMutation, useWalletAdminApi_CreateWalletCreditMutation, useWalletAdminApi_CreateWalletDebitMutation, useWalletAdminApi_GetCheck_ByUserId_ByCurrencyCode, useWalletAdminApi_GetTransactionsWallets_ByUserId_ByCurrencyCode, useWalletAdminApi_GetTransactions_ByUserId_ByWalletId, useWalletAdminApi_GetWalletConfig_ByPlatform, useWalletAdminApi_GetWallet_ByUserId_ByWalletId, useWalletAdminApi_GetWallet_ByWalletId, useWalletAdminApi_GetWallets, useWalletAdminApi_GetWalletsCurrenciesSummary_ByUserId, useWalletAdminApi_UpdateCredit_ByUserId_ByCurrencyCodeMutation, useWalletAdminApi_UpdateDebitByWalletPlatform_ByUserId_ByCurrencyCodeMutation, useWalletAdminApi_UpdateDebitWallet_ByUserId_ByCurrencyCodeMutation, useWalletAdminApi_UpdateDebit_ByUserId_ByWalletIdMutation, useWalletAdminApi_UpdateDisable_ByUserId_ByWalletIdMutation, useWalletAdminApi_UpdateEnable_ByUserId_ByWalletIdMutation, useWalletAdminApi_UpdatePayment_ByUserId_ByCurrencyCodeMutation, useWalletAdminApi_UpdateWalletConfigReset_ByPlatformMutation, useWalletAdminApi_UpdateWalletConfig_ByPlatformMutation, useWalletApi_GetTransactions_ByUserId_ByCurrencyCode, useWalletApi_GetUserMeWallet_ByCurrencyCode, useWalletApi_GetWallet_ByUserId_ByCurrencyCode };
