import {
  AchievementPlatformAdminApi,
  AnonymizationAdminApi,
  CampaignAdminApi,
  CatalogChangesAdminApi,
  CategoryAdminApi,
  CategoryApi,
  ClawbackAdminApi,
  CurrencyAdminApi,
  CurrencyApi,
  DlcAdminApi,
  DlcApi,
  EntitlementAdminApi,
  EntitlementApi,
  FulfillmentAdminApi,
  FulfillmentApi,
  FulfillmentScriptAdminApi,
  IapAdminApi,
  IapApi,
  IapNotificationAdminApi,
  IapSubscriptionAdminApi,
  IapSubscriptionApi,
  InvoiceAdminApi,
  ItemAdminApi,
  ItemApi,
  KeyGroupAdminApi,
  OrderAdminApi,
  OrderApi,
  OrderDedicatedAdminApi,
  PaymentAccountApi,
  PaymentAdminApi,
  PaymentCallbackConfigAdminApi,
  PaymentConfigAdminApi,
  PaymentDedicatedAdminApi,
  PaymentStationApi,
  PlatformAccountClosureAdminApi,
  PlatformAdminApi,
  RevocationAdminApi,
  RewardAdminApi,
  RewardApi,
  SectionAdminApi,
  SectionApi,
  ServicePluginConfigAdminApi,
  SessionPlatformAdminApi,
  StoreAdminApi,
  StoreApi,
  SubscriptionAdminApi,
  SubscriptionApi,
  TicketAdminApi,
  TradeActionAdminApi,
  ViewAdminApi,
  ViewApi,
  WalletAdminApi,
  WalletApi
} from "./chunk-HBC3LCMM.js";

// src/generated-admin/queries/AchievementPlatformAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_AchievementPlatformAdmin = /* @__PURE__ */ ((Key_AchievementPlatformAdmin2) => {
  Key_AchievementPlatformAdmin2["AchievementXbl_ByUserId"] = "Platform.AchievementPlatformAdmin.AchievementXbl_ByUserId";
  Key_AchievementPlatformAdmin2["AchievementSteam_ByUserId"] = "Platform.AchievementPlatformAdmin.AchievementSteam_ByUserId";
  return Key_AchievementPlatformAdmin2;
})(Key_AchievementPlatformAdmin || {});
var useAchievementPlatformAdminApi_GetAchievementXbl_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await AchievementPlatformAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAchievementXbl_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Platform.AchievementPlatformAdmin.AchievementXbl_ByUserId" /* AchievementXbl_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useAchievementPlatformAdminApi_UpdateAchievementXbl_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AchievementPlatformAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAchievementXbl_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Platform.AchievementPlatformAdmin.AchievementXbl_ByUserId" /* AchievementXbl_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAchievementPlatformAdminApi_UpdateAchievementSteam_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AchievementPlatformAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAchievementSteam_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Platform.AchievementPlatformAdmin.AchievementSteam_ByUserId" /* AchievementSteam_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/AnonymizationAdmin.query.ts
import { useMutation as useMutation2 } from "@tanstack/react-query";
var Key_AnonymizationAdmin = /* @__PURE__ */ ((Key_AnonymizationAdmin2) => {
  Key_AnonymizationAdmin2["AnonymizationOrder_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationOrder_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationPayment_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationPayment_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationWallet_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationWallet_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationCampaign_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationCampaign_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationRevocation_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationRevocation_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationFulfillment_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationFulfillment_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationEntitlement_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationEntitlement_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationIntegration_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationIntegration_ByUserId";
  Key_AnonymizationAdmin2["AnonymizationSubscription_ByUserId"] = "Platform.AnonymizationAdmin.AnonymizationSubscription_ByUserId";
  return Key_AnonymizationAdmin2;
})(Key_AnonymizationAdmin || {});
var useAnonymizationAdminApi_DeleteAnonymizationOrder_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationOrder_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationOrder_ByUserId" /* AnonymizationOrder_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationPayment_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationPayment_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationPayment_ByUserId" /* AnonymizationPayment_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationWallet_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationWallet_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationWallet_ByUserId" /* AnonymizationWallet_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationCampaign_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationCampaign_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationCampaign_ByUserId" /* AnonymizationCampaign_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationRevocation_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationRevocation_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationRevocation_ByUserId" /* AnonymizationRevocation_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationFulfillment_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationFulfillment_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationFulfillment_ByUserId" /* AnonymizationFulfillment_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationEntitlement_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationEntitlement_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationEntitlement_ByUserId" /* AnonymizationEntitlement_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationIntegration_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationIntegration_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationIntegration_ByUserId" /* AnonymizationIntegration_ByUserId */],
    mutationFn,
    ...options
  });
};
var useAnonymizationAdminApi_DeleteAnonymizationSubscription_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationSubscription_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Platform.AnonymizationAdmin.AnonymizationSubscription_ByUserId" /* AnonymizationSubscription_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/CampaignAdmin.query.ts
import { useMutation as useMutation3, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_CampaignAdmin = /* @__PURE__ */ ((Key_CampaignAdmin2) => {
  Key_CampaignAdmin2["Campaigns"] = "Platform.CampaignAdmin.Campaigns";
  Key_CampaignAdmin2["Campaign"] = "Platform.CampaignAdmin.Campaign";
  Key_CampaignAdmin2["Code_ByCode"] = "Platform.CampaignAdmin.Code_ByCode";
  Key_CampaignAdmin2["Enable_ByCode"] = "Platform.CampaignAdmin.Enable_ByCode";
  Key_CampaignAdmin2["Disable_ByCode"] = "Platform.CampaignAdmin.Disable_ByCode";
  Key_CampaignAdmin2["Campaign_ByCampaignId"] = "Platform.CampaignAdmin.Campaign_ByCampaignId";
  Key_CampaignAdmin2["Redemption_ByUserId"] = "Platform.CampaignAdmin.Redemption_ByUserId";
  Key_CampaignAdmin2["CodeCampaign_ByCampaignId"] = "Platform.CampaignAdmin.CodeCampaign_ByCampaignId";
  Key_CampaignAdmin2["Dynamic_ByCampaignId"] = "Platform.CampaignAdmin.Dynamic_ByCampaignId";
  Key_CampaignAdmin2["BatchName_ByCampaignId"] = "Platform.CampaignAdmin.BatchName_ByCampaignId";
  Key_CampaignAdmin2["BatchNames_ByCampaignId"] = "Platform.CampaignAdmin.BatchNames_ByCampaignId";
  Key_CampaignAdmin2["HistoryCodes_ByCampaignId"] = "Platform.CampaignAdmin.HistoryCodes_ByCampaignId";
  Key_CampaignAdmin2["CodesCsv_ByCampaignId"] = "Platform.CampaignAdmin.CodesCsv_ByCampaignId";
  Key_CampaignAdmin2["EnableBulkCode_ByCampaignId"] = "Platform.CampaignAdmin.EnableBulkCode_ByCampaignId";
  Key_CampaignAdmin2["DisableBulkCode_ByCampaignId"] = "Platform.CampaignAdmin.DisableBulkCode_ByCampaignId";
  return Key_CampaignAdmin2;
})(Key_CampaignAdmin || {});
var useCampaignAdminApi_GetCampaigns = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCampaigns(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.Campaigns" /* Campaigns */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_CreateCampaignMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createCampaign(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.Campaign" /* Campaign */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_GetCode_ByCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCode_ByCode(
      input2.code,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.Code_ByCode" /* Code_ByCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_UpdateEnable_ByCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateEnable_ByCode(
      input.code
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.Enable_ByCode" /* Enable_ByCode */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_UpdateDisable_ByCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDisable_ByCode(
      input.code
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.Disable_ByCode" /* Disable_ByCode */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_GetCampaign_ByCampaignId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCampaign_ByCampaignId(
      input2.campaignId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.Campaign_ByCampaignId" /* Campaign_ByCampaignId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_UpdateCampaign_ByCampaignIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCampaign_ByCampaignId(input.campaignId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.Campaign_ByCampaignId" /* Campaign_ByCampaignId */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_CreateRedemption_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createRedemption_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.Redemption_ByUserId" /* Redemption_ByUserId */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_GetCodeCampaign_ByCampaignId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCodeCampaign_ByCampaignId(input2.campaignId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.CodeCampaign_ByCampaignId" /* CodeCampaign_ByCampaignId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_CreateCodeCampaign_ByCampaignIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createCodeCampaign_ByCampaignId(input.campaignId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.CodeCampaign_ByCampaignId" /* CodeCampaign_ByCampaignId */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_GetDynamic_ByCampaignId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDynamic_ByCampaignId(
      input2.campaignId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.Dynamic_ByCampaignId" /* Dynamic_ByCampaignId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_UpdateBatchName_ByCampaignIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateBatchName_ByCampaignId(input.campaignId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.BatchName_ByCampaignId" /* BatchName_ByCampaignId */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_GetBatchNames_ByCampaignId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getBatchNames_ByCampaignId(input2.campaignId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.BatchNames_ByCampaignId" /* BatchNames_ByCampaignId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_GetHistoryCodes_ByCampaignId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistoryCodes_ByCampaignId(input2.campaignId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.HistoryCodes_ByCampaignId" /* HistoryCodes_ByCampaignId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_GetCodesCsv_ByCampaignId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CampaignAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCodesCsv_ByCampaignId(
      input2.campaignId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Platform.CampaignAdmin.CodesCsv_ByCampaignId" /* CodesCsv_ByCampaignId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCampaignAdminApi_UpdateEnableBulkCode_ByCampaignIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEnableBulkCode_ByCampaignId(input.campaignId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.EnableBulkCode_ByCampaignId" /* EnableBulkCode_ByCampaignId */],
    mutationFn,
    ...options
  });
};
var useCampaignAdminApi_UpdateDisableBulkCode_ByCampaignIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CampaignAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDisableBulkCode_ByCampaignId(input.campaignId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Platform.CampaignAdmin.DisableBulkCode_ByCampaignId" /* DisableBulkCode_ByCampaignId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/CatalogChangesAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_CatalogChangesAdmin = /* @__PURE__ */ ((Key_CatalogChangesAdmin2) => {
  Key_CatalogChangesAdmin2["CatalogChangeSelectAll_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangeSelectAll_ByStoreId";
  Key_CatalogChangesAdmin2["CatalogChangesByCriteria_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangesByCriteria_ByStoreId";
  Key_CatalogChangesAdmin2["CatalogChangePublishAll_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangePublishAll_ByStoreId";
  Key_CatalogChangesAdmin2["CatalogChangesStatistics_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangesStatistics_ByStoreId";
  Key_CatalogChangesAdmin2["CatalogChangeUnselectAll_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangeUnselectAll_ByStoreId";
  Key_CatalogChangesAdmin2["CatalogChangePublishSelected_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangePublishSelected_ByStoreId";
  Key_CatalogChangesAdmin2["Select_ByStoreId_ByChangeId"] = "Platform.CatalogChangesAdmin.Select_ByStoreId_ByChangeId";
  Key_CatalogChangesAdmin2["Unselect_ByStoreId_ByChangeId"] = "Platform.CatalogChangesAdmin.Unselect_ByStoreId_ByChangeId";
  Key_CatalogChangesAdmin2["CatalogChangeSelectAllByCriteria_ByStoreId"] = "Platform.CatalogChangesAdmin.CatalogChangeSelectAllByCriteria_ByStoreId";
  return Key_CatalogChangesAdmin2;
})(Key_CatalogChangesAdmin || {});
var useCatalogChangesAdminApi_UpdateCatalogChangeSelectAll_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogChangeSelectAll_ByStoreId(input.storeId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.CatalogChangeSelectAll_ByStoreId" /* CatalogChangeSelectAll_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useCatalogChangesAdminApi_GetCatalogChangesByCriteria_ByStoreId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CatalogChangesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCatalogChangesByCriteria_ByStoreId(input2.storeId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Platform.CatalogChangesAdmin.CatalogChangesByCriteria_ByStoreId" /* CatalogChangesByCriteria_ByStoreId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCatalogChangesAdminApi_UpdateCatalogChangePublishAll_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogChangePublishAll_ByStoreId(input.storeId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.CatalogChangePublishAll_ByStoreId" /* CatalogChangePublishAll_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useCatalogChangesAdminApi_GetCatalogChangesStatistics_ByStoreId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CatalogChangesAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCatalogChangesStatistics_ByStoreId(input2.storeId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Platform.CatalogChangesAdmin.CatalogChangesStatistics_ByStoreId" /* CatalogChangesStatistics_ByStoreId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCatalogChangesAdminApi_UpdateCatalogChangeUnselectAll_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogChangeUnselectAll_ByStoreId(input.storeId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.CatalogChangeUnselectAll_ByStoreId" /* CatalogChangeUnselectAll_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useCatalogChangesAdminApi_UpdateCatalogChangePublishSelected_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogChangePublishSelected_ByStoreId(input.storeId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.CatalogChangePublishSelected_ByStoreId" /* CatalogChangePublishSelected_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useCatalogChangesAdminApi_UpdateSelect_ByStoreId_ByChangeIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSelect_ByStoreId_ByChangeId(input.storeId, input.changeId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.Select_ByStoreId_ByChangeId" /* Select_ByStoreId_ByChangeId */],
    mutationFn,
    ...options
  });
};
var useCatalogChangesAdminApi_UpdateUnselect_ByStoreId_ByChangeIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateUnselect_ByStoreId_ByChangeId(input.storeId, input.changeId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.Unselect_ByStoreId_ByChangeId" /* Unselect_ByStoreId_ByChangeId */],
    mutationFn,
    ...options
  });
};
var useCatalogChangesAdminApi_UpdateCatalogChangeSelectAllByCriteria_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CatalogChangesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogChangeSelectAllByCriteria_ByStoreId(input.storeId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Platform.CatalogChangesAdmin.CatalogChangeSelectAllByCriteria_ByStoreId" /* CatalogChangeSelectAllByCriteria_ByStoreId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/CategoryAdmin.query.ts
import { useMutation as useMutation5, useQuery as useQuery4 } from "@tanstack/react-query";
var Key_CategoryAdmin = /* @__PURE__ */ ((Key_CategoryAdmin2) => {
  Key_CategoryAdmin2["Categories"] = "Platform.CategoryAdmin.Categories";
  Key_CategoryAdmin2["Category"] = "Platform.CategoryAdmin.Category";
  Key_CategoryAdmin2["CategoriesBasic"] = "Platform.CategoryAdmin.CategoriesBasic";
  Key_CategoryAdmin2["Category_ByCategoryPath"] = "Platform.CategoryAdmin.Category_ByCategoryPath";
  Key_CategoryAdmin2["Children_ByCategoryPath"] = "Platform.CategoryAdmin.Children_ByCategoryPath";
  Key_CategoryAdmin2["Descendants_ByCategoryPath"] = "Platform.CategoryAdmin.Descendants_ByCategoryPath";
  return Key_CategoryAdmin2;
})(Key_CategoryAdmin || {});
var useCategoryAdminApi_GetCategories = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCategories(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Platform.CategoryAdmin.Categories" /* Categories */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryAdminApi_CreateCategoryMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CategoryAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createCategory(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Platform.CategoryAdmin.Category" /* Category */],
    mutationFn,
    ...options
  });
};
var useCategoryAdminApi_GetCategoriesBasic = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCategoriesBasic(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Platform.CategoryAdmin.CategoriesBasic" /* CategoriesBasic */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryAdminApi_DeleteCategory_ByCategoryPathMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CategoryAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteCategory_ByCategoryPath(input.categoryPath, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Platform.CategoryAdmin.Category_ByCategoryPath" /* Category_ByCategoryPath */],
    mutationFn,
    ...options
  });
};
var useCategoryAdminApi_GetCategory_ByCategoryPath = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCategory_ByCategoryPath(input2.categoryPath, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Platform.CategoryAdmin.Category_ByCategoryPath" /* Category_ByCategoryPath */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryAdminApi_UpdateCategory_ByCategoryPathMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CategoryAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCategory_ByCategoryPath(input.categoryPath, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Platform.CategoryAdmin.Category_ByCategoryPath" /* Category_ByCategoryPath */],
    mutationFn,
    ...options
  });
};
var useCategoryAdminApi_GetChildren_ByCategoryPath = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getChildren_ByCategoryPath(input2.categoryPath, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Platform.CategoryAdmin.Children_ByCategoryPath" /* Children_ByCategoryPath */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryAdminApi_GetDescendants_ByCategoryPath = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDescendants_ByCategoryPath(input2.categoryPath, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Platform.CategoryAdmin.Descendants_ByCategoryPath" /* Descendants_ByCategoryPath */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/ClawbackAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery5 } from "@tanstack/react-query";
var Key_ClawbackAdmin = /* @__PURE__ */ ((Key_ClawbackAdmin2) => {
  Key_ClawbackAdmin2["IapClawbackHistories"] = "Platform.ClawbackAdmin.IapClawbackHistories";
  Key_ClawbackAdmin2["IapClawbackPlaystationMock"] = "Platform.ClawbackAdmin.IapClawbackPlaystationMock";
  return Key_ClawbackAdmin2;
})(Key_ClawbackAdmin || {});
var useClawbackAdminApi_GetIapClawbackHistories = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClawbackAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapClawbackHistories(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Platform.ClawbackAdmin.IapClawbackHistories" /* IapClawbackHistories */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClawbackAdminApi_CreateIapClawbackPlaystationMockMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClawbackAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createIapClawbackPlaystationMock(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Platform.ClawbackAdmin.IapClawbackPlaystationMock" /* IapClawbackPlaystationMock */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/CurrencyAdmin.query.ts
import { useMutation as useMutation7, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_CurrencyAdmin = /* @__PURE__ */ ((Key_CurrencyAdmin2) => {
  Key_CurrencyAdmin2["Currencies"] = "Platform.CurrencyAdmin.Currencies";
  Key_CurrencyAdmin2["Currency"] = "Platform.CurrencyAdmin.Currency";
  Key_CurrencyAdmin2["Currency_ByCurrencyCode"] = "Platform.CurrencyAdmin.Currency_ByCurrencyCode";
  Key_CurrencyAdmin2["Config_ByCurrencyCode"] = "Platform.CurrencyAdmin.Config_ByCurrencyCode";
  Key_CurrencyAdmin2["Summary_ByCurrencyCode"] = "Platform.CurrencyAdmin.Summary_ByCurrencyCode";
  return Key_CurrencyAdmin2;
})(Key_CurrencyAdmin || {});
var useCurrencyAdminApi_GetCurrencies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CurrencyAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCurrencies(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Platform.CurrencyAdmin.Currencies" /* Currencies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCurrencyAdminApi_CreateCurrencyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CurrencyAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createCurrency(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Platform.CurrencyAdmin.Currency" /* Currency */],
    mutationFn,
    ...options
  });
};
var useCurrencyAdminApi_DeleteCurrency_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CurrencyAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteCurrency_ByCurrencyCode(input.currencyCode);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Platform.CurrencyAdmin.Currency_ByCurrencyCode" /* Currency_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useCurrencyAdminApi_UpdateCurrency_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CurrencyAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCurrency_ByCurrencyCode(input.currencyCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Platform.CurrencyAdmin.Currency_ByCurrencyCode" /* Currency_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useCurrencyAdminApi_GetConfig_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CurrencyAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByCurrencyCode(
      input2.currencyCode
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Platform.CurrencyAdmin.Config_ByCurrencyCode" /* Config_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCurrencyAdminApi_GetSummary_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CurrencyAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSummary_ByCurrencyCode(input2.currencyCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Platform.CurrencyAdmin.Summary_ByCurrencyCode" /* Summary_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/DlcAdmin.query.ts
import { useMutation as useMutation8, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_DlcAdmin = /* @__PURE__ */ ((Key_DlcAdmin2) => {
  Key_DlcAdmin2["DlcConfigItem"] = "Platform.DlcAdmin.DlcConfigItem";
  Key_DlcAdmin2["Dlc_ByUserId"] = "Platform.DlcAdmin.Dlc_ByUserId";
  Key_DlcAdmin2["DlcConfigPlatformMap"] = "Platform.DlcAdmin.DlcConfigPlatformMap";
  Key_DlcAdmin2["DlcRecords_ByUserId"] = "Platform.DlcAdmin.DlcRecords_ByUserId";
  return Key_DlcAdmin2;
})(Key_DlcAdmin || {});
var useDlcAdminApi_DeleteDlcConfigItemMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteDlcConfigItem();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Platform.DlcAdmin.DlcConfigItem" /* DlcConfigItem */],
    mutationFn,
    ...options
  });
};
var useDlcAdminApi_GetDlcConfigItem = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DlcAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDlcConfigItem();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Platform.DlcAdmin.DlcConfigItem" /* DlcConfigItem */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDlcAdminApi_UpdateDlcConfigItemMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcConfigItem(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Platform.DlcAdmin.DlcConfigItem" /* DlcConfigItem */],
    mutationFn,
    ...options
  });
};
var useDlcAdminApi_GetDlc_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DlcAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDlc_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Platform.DlcAdmin.Dlc_ByUserId" /* Dlc_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDlcAdminApi_DeleteDlcConfigPlatformMapMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteDlcConfigPlatformMap();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Platform.DlcAdmin.DlcConfigPlatformMap" /* DlcConfigPlatformMap */],
    mutationFn,
    ...options
  });
};
var useDlcAdminApi_GetDlcConfigPlatformMap = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DlcAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDlcConfigPlatformMap();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Platform.DlcAdmin.DlcConfigPlatformMap" /* DlcConfigPlatformMap */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDlcAdminApi_UpdateDlcConfigPlatformMapMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcConfigPlatformMap(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Platform.DlcAdmin.DlcConfigPlatformMap" /* DlcConfigPlatformMap */],
    mutationFn,
    ...options
  });
};
var useDlcAdminApi_GetDlcRecords_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DlcAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDlcRecords_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Platform.DlcAdmin.DlcRecords_ByUserId" /* DlcRecords_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/EntitlementAdmin.query.ts
import { useMutation as useMutation9, useQuery as useQuery8 } from "@tanstack/react-query";
var Key_EntitlementAdmin = /* @__PURE__ */ ((Key_EntitlementAdmin2) => {
  Key_EntitlementAdmin2["Entitlements"] = "Platform.EntitlementAdmin.Entitlements";
  Key_EntitlementAdmin2["EntitlementGrant"] = "Platform.EntitlementAdmin.EntitlementGrant";
  Key_EntitlementAdmin2["EntitlementRevoke"] = "Platform.EntitlementAdmin.EntitlementRevoke";
  Key_EntitlementAdmin2["EntitlementsByItemIds"] = "Platform.EntitlementAdmin.EntitlementsByItemIds";
  Key_EntitlementAdmin2["EntitlementsConfigInfo"] = "Platform.EntitlementAdmin.EntitlementsConfigInfo";
  Key_EntitlementAdmin2["Entitlements_ByUserId"] = "Platform.EntitlementAdmin.Entitlements_ByUserId";
  Key_EntitlementAdmin2["Entitlement_ByUserId"] = "Platform.EntitlementAdmin.Entitlement_ByUserId";
  Key_EntitlementAdmin2["Entitlement_ByEntitlementId"] = "Platform.EntitlementAdmin.Entitlement_ByEntitlementId";
  Key_EntitlementAdmin2["EntitlementsBySku_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsBySku_ByUserId";
  Key_EntitlementAdmin2["EntitlementRevoke_ByUserId"] = "Platform.EntitlementAdmin.EntitlementRevoke_ByUserId";
  Key_EntitlementAdmin2["EntitlementsByAppId_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsByAppId_ByUserId";
  Key_EntitlementAdmin2["EntitlementsByItemId_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsByItemId_ByUserId";
  Key_EntitlementAdmin2["EntitlementsByAppType_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsByAppType_ByUserId";
  Key_EntitlementAdmin2["EntitlementsByItemIds_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsByItemIds_ByUserId";
  Key_EntitlementAdmin2["EntitlementConfig_ByPlatform"] = "Platform.EntitlementAdmin.EntitlementConfig_ByPlatform";
  Key_EntitlementAdmin2["EntitlementRevokeById_ByUserId"] = "Platform.EntitlementAdmin.EntitlementRevokeById_ByUserId";
  Key_EntitlementAdmin2["EntitlementsOwnershipAny_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsOwnershipAny_ByUserId";
  Key_EntitlementAdmin2["Entitlement_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.Entitlement_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["EntitlementsOwnershipAnyOf_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsOwnershipAnyOf_ByUserId";
  Key_EntitlementAdmin2["EntitlementsOwnershipBySku_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsOwnershipBySku_ByUserId";
  Key_EntitlementAdmin2["EntitlementConfigEntitlementOriginEnable"] = "Platform.EntitlementAdmin.EntitlementConfigEntitlementOriginEnable";
  Key_EntitlementAdmin2["EntitlementsOwnershipByAppId_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsOwnershipByAppId_ByUserId";
  Key_EntitlementAdmin2["EntitlementsOwnershipByItemId_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsOwnershipByItemId_ByUserId";
  Key_EntitlementAdmin2["EntitlementsOwnershipByItemIds_ByUserId"] = "Platform.EntitlementAdmin.EntitlementsOwnershipByItemIds_ByUserId";
  Key_EntitlementAdmin2["Sell_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.Sell_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["Enable_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.Enable_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["Revoke_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.Revoke_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["Disable_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.Disable_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["History_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.History_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["Decrement_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.Decrement_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["RevokeByUseCount_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.RevokeByUseCount_ByUserId_ByEntitlementId";
  Key_EntitlementAdmin2["RevokeByUseCountPreCheck_ByUserId_ByEntitlementId"] = "Platform.EntitlementAdmin.RevokeByUseCountPreCheck_ByUserId_ByEntitlementId";
  return Key_EntitlementAdmin2;
})(Key_EntitlementAdmin || {});
var useEntitlementAdminApi_GetEntitlements = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getEntitlements(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.Entitlements" /* Entitlements */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_CreateEntitlementGrantMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createEntitlementGrant(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.EntitlementGrant" /* EntitlementGrant */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_CreateEntitlementRevokeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createEntitlementRevoke(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.EntitlementRevoke" /* EntitlementRevoke */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsByItemIds = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByItemIds(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsByItemIds" /* EntitlementsByItemIds */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsConfigInfo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsConfigInfo(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsConfigInfo" /* EntitlementsConfigInfo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlements_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlements_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.Entitlements_ByUserId" /* Entitlements_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_CreateEntitlement_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createEntitlement_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Entitlement_ByUserId" /* Entitlement_ByUserId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlement_ByEntitlementId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlement_ByEntitlementId(input2.entitlementId);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.Entitlement_ByEntitlementId" /* Entitlement_ByEntitlementId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsBySku_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsBySku_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsBySku_ByUserId" /* EntitlementsBySku_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_UpdateEntitlementRevoke_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEntitlementRevoke_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.EntitlementRevoke_ByUserId" /* EntitlementRevoke_ByUserId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsByAppId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByAppId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsByAppId_ByUserId" /* EntitlementsByAppId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsByItemId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByItemId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsByItemId_ByUserId" /* EntitlementsByItemId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsByAppType_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByAppType_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsByAppType_ByUserId" /* EntitlementsByAppType_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsByItemIds_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByItemIds_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsByItemIds_ByUserId" /* EntitlementsByItemIds_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementConfig_ByPlatform = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementConfig_ByPlatform(input2.platform);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementConfig_ByPlatform" /* EntitlementConfig_ByPlatform */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_UpdateEntitlementConfig_ByPlatformMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEntitlementConfig_ByPlatform(input.platform, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.EntitlementConfig_ByPlatform" /* EntitlementConfig_ByPlatform */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_UpdateEntitlementRevokeById_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEntitlementRevokeById_ByUserId(input.userId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.EntitlementRevokeById_ByUserId" /* EntitlementRevokeById_ByUserId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsOwnershipAny_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipAny_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsOwnershipAny_ByUserId" /* EntitlementsOwnershipAny_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlement_ByUserId_ByEntitlementId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlement_ByUserId_ByEntitlementId(input2.userId, input2.entitlementId);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.Entitlement_ByUserId_ByEntitlementId" /* Entitlement_ByUserId_ByEntitlementId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_UpdateEntitlement_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEntitlement_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Entitlement_ByUserId_ByEntitlementId" /* Entitlement_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsOwnershipAnyOf_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipAnyOf_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsOwnershipAnyOf_ByUserId" /* EntitlementsOwnershipAnyOf_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsOwnershipBySku_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipBySku_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsOwnershipBySku_ByUserId" /* EntitlementsOwnershipBySku_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_UpdateEntitlementConfigEntitlementOriginEnableMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEntitlementConfigEntitlementOriginEnable();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.EntitlementConfigEntitlementOriginEnable" /* EntitlementConfigEntitlementOriginEnable */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsOwnershipByAppId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipByAppId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsOwnershipByAppId_ByUserId" /* EntitlementsOwnershipByAppId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsOwnershipByItemId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipByItemId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsOwnershipByItemId_ByUserId" /* EntitlementsOwnershipByItemId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_GetEntitlementsOwnershipByItemIds_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipByItemIds_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.EntitlementsOwnershipByItemIds_ByUserId" /* EntitlementsOwnershipByItemIds_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_UpdateSell_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSell_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Sell_ByUserId_ByEntitlementId" /* Sell_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_UpdateEnable_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEnable_ByUserId_ByEntitlementId(input.userId, input.entitlementId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Enable_ByUserId_ByEntitlementId" /* Enable_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_UpdateRevoke_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevoke_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Revoke_ByUserId_ByEntitlementId" /* Revoke_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_UpdateDisable_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDisable_ByUserId_ByEntitlementId(input.userId, input.entitlementId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Disable_ByUserId_ByEntitlementId" /* Disable_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetHistory_ByUserId_ByEntitlementId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistory_ByUserId_ByEntitlementId(input2.userId, input2.entitlementId);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.History_ByUserId_ByEntitlementId" /* History_ByUserId_ByEntitlementId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementAdminApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDecrement_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.Decrement_ByUserId_ByEntitlementId" /* Decrement_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_UpdateRevokeByUseCount_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevokeByUseCount_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.RevokeByUseCount_ByUserId_ByEntitlementId" /* RevokeByUseCount_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_CreateRevokeByUseCount_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createRevokeByUseCount_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Platform.EntitlementAdmin.RevokeByUseCount_ByUserId_ByEntitlementId" /* RevokeByUseCount_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementAdminApi_GetRevokeByUseCountPreCheck_ByUserId_ByEntitlementId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRevokeByUseCountPreCheck_ByUserId_ByEntitlementId(input2.userId, input2.entitlementId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Platform.EntitlementAdmin.RevokeByUseCountPreCheck_ByUserId_ByEntitlementId" /* RevokeByUseCountPreCheck_ByUserId_ByEntitlementId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/FulfillmentAdmin.query.ts
import { useMutation as useMutation10, useQuery as useQuery9 } from "@tanstack/react-query";
var Key_FulfillmentAdmin = /* @__PURE__ */ ((Key_FulfillmentAdmin2) => {
  Key_FulfillmentAdmin2["Fulfillments_v2"] = "Platform.FulfillmentAdmin.Fulfillments_v2";
  Key_FulfillmentAdmin2["FulfillmentHistory"] = "Platform.FulfillmentAdmin.FulfillmentHistory";
  Key_FulfillmentAdmin2["Fulfillment_ByUserId"] = "Platform.FulfillmentAdmin.Fulfillment_ByUserId";
  Key_FulfillmentAdmin2["FulfillmentCode_ByUserId"] = "Platform.FulfillmentAdmin.FulfillmentCode_ByUserId";
  Key_FulfillmentAdmin2["FulfillmentReward_ByUserId"] = "Platform.FulfillmentAdmin.FulfillmentReward_ByUserId";
  Key_FulfillmentAdmin2["FulfillmentPreCheck_ByUserId"] = "Platform.FulfillmentAdmin.FulfillmentPreCheck_ByUserId";
  Key_FulfillmentAdmin2["FulfillmentReward_ByUserId_v2"] = "Platform.FulfillmentAdmin.FulfillmentReward_ByUserId_v2";
  Key_FulfillmentAdmin2["Fulfillment_ByUserId_ByTransactionId_v2"] = "Platform.FulfillmentAdmin.Fulfillment_ByUserId_ByTransactionId_v2";
  Key_FulfillmentAdmin2["Retry_ByUserId_ByTransactionId_v2"] = "Platform.FulfillmentAdmin.Retry_ByUserId_ByTransactionId_v2";
  Key_FulfillmentAdmin2["Revoke_ByUserId_ByTransactionId_v2"] = "Platform.FulfillmentAdmin.Revoke_ByUserId_ByTransactionId_v2";
  return Key_FulfillmentAdmin2;
})(Key_FulfillmentAdmin || {});
var useFulfillmentAdminApi_GetFulfillments_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FulfillmentAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFulfillments_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Platform.FulfillmentAdmin.Fulfillments_v2" /* Fulfillments_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFulfillmentAdminApi_GetFulfillmentHistory = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FulfillmentAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getFulfillmentHistory(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Platform.FulfillmentAdmin.FulfillmentHistory" /* FulfillmentHistory */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFulfillmentAdminApi_CreateFulfillment_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillment_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.Fulfillment_ByUserId" /* Fulfillment_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_CreateFulfillmentCode_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillmentCode_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.FulfillmentCode_ByUserId" /* FulfillmentCode_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillmentReward_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.FulfillmentReward_ByUserId" /* FulfillmentReward_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_CreateFulfillmentPreCheck_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillmentPreCheck_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.FulfillmentPreCheck_ByUserId" /* FulfillmentPreCheck_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillmentReward_ByUserId_v2(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.FulfillmentReward_ByUserId_v2" /* FulfillmentReward_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_UpdateFulfillment_ByUserId_ByTransactionIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateFulfillment_ByUserId_ByTransactionId_v2(input.userId, input.transactionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.Fulfillment_ByUserId_ByTransactionId_v2" /* Fulfillment_ByUserId_ByTransactionId_v2 */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_UpdateRetry_ByUserId_ByTransactionIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRetry_ByUserId_ByTransactionId_v2(input.userId, input.transactionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.Retry_ByUserId_ByTransactionId_v2" /* Retry_ByUserId_ByTransactionId_v2 */],
    mutationFn,
    ...options
  });
};
var useFulfillmentAdminApi_UpdateRevoke_ByUserId_ByTransactionIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevoke_ByUserId_ByTransactionId_v2(input.userId, input.transactionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Platform.FulfillmentAdmin.Revoke_ByUserId_ByTransactionId_v2" /* Revoke_ByUserId_ByTransactionId_v2 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/FulfillmentScriptAdmin.query.ts
import { useMutation as useMutation11, useQuery as useQuery10 } from "@tanstack/react-query";
var Key_FulfillmentScriptAdmin = /* @__PURE__ */ ((Key_FulfillmentScriptAdmin2) => {
  Key_FulfillmentScriptAdmin2["FulfillmentScripts"] = "Platform.FulfillmentScriptAdmin.FulfillmentScripts";
  Key_FulfillmentScriptAdmin2["FulfillmentScript_ById"] = "Platform.FulfillmentScriptAdmin.FulfillmentScript_ById";
  return Key_FulfillmentScriptAdmin2;
})(Key_FulfillmentScriptAdmin || {});
var useFulfillmentScriptAdminApi_GetFulfillmentScripts = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FulfillmentScriptAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getFulfillmentScripts();
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Platform.FulfillmentScriptAdmin.FulfillmentScripts" /* FulfillmentScripts */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFulfillmentScriptAdminApi_DeleteFulfillmentScript_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentScriptAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteFulfillmentScript_ById(input.id);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Platform.FulfillmentScriptAdmin.FulfillmentScript_ById" /* FulfillmentScript_ById */],
    mutationFn,
    ...options
  });
};
var useFulfillmentScriptAdminApi_GetFulfillmentScript_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await FulfillmentScriptAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getFulfillmentScript_ById(input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Platform.FulfillmentScriptAdmin.FulfillmentScript_ById" /* FulfillmentScript_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useFulfillmentScriptAdminApi_PatchFulfillmentScript_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentScriptAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchFulfillmentScript_ById(input.id, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Platform.FulfillmentScriptAdmin.FulfillmentScript_ById" /* FulfillmentScript_ById */],
    mutationFn,
    ...options
  });
};
var useFulfillmentScriptAdminApi_CreateFulfillmentScript_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentScriptAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillmentScript_ById(input.id, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Platform.FulfillmentScriptAdmin.FulfillmentScript_ById" /* FulfillmentScript_ById */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/IapAdmin.query.ts
import { useMutation as useMutation12, useQuery as useQuery11 } from "@tanstack/react-query";
var Key_IapAdmin = /* @__PURE__ */ ((Key_IapAdmin2) => {
  Key_IapAdmin2["IapConfigXbl"] = "Platform.IapAdmin.IapConfigXbl";
  Key_IapAdmin2["IapConfigItem"] = "Platform.IapAdmin.IapConfigItem";
  Key_IapAdmin2["IapConfigApple"] = "Platform.IapAdmin.IapConfigApple";
  Key_IapAdmin2["IapConfigSteam"] = "Platform.IapAdmin.IapConfigSteam";
  Key_IapAdmin2["IapConfigGoogle"] = "Platform.IapAdmin.IapConfigGoogle";
  Key_IapAdmin2["IapConfigOculu"] = "Platform.IapAdmin.IapConfigOculu";
  Key_IapAdmin2["IapConfigOculus"] = "Platform.IapAdmin.IapConfigOculus";
  Key_IapAdmin2["IapConfigTwitch"] = "Platform.IapAdmin.IapConfigTwitch";
  Key_IapAdmin2["Iap_ByUserId"] = "Platform.IapAdmin.Iap_ByUserId";
  Key_IapAdmin2["IapConfigXblCert"] = "Platform.IapAdmin.IapConfigXblCert";
  Key_IapAdmin2["IapConfigEpicgame"] = "Platform.IapAdmin.IapConfigEpicgame";
  Key_IapAdmin2["IapConfigEpicgames"] = "Platform.IapAdmin.IapConfigEpicgames";
  Key_IapAdmin2["IapConfigAppleCert"] = "Platform.IapAdmin.IapConfigAppleCert";
  Key_IapAdmin2["IapConfigGoogleCert"] = "Platform.IapAdmin.IapConfigGoogleCert";
  Key_IapAdmin2["IapConfigPlaystation"] = "Platform.IapAdmin.IapConfigPlaystation";
  Key_IapAdmin2["IapAll_ByUserId"] = "Platform.IapAdmin.IapAll_ByUserId";
  Key_IapAdmin2["IapConfigPlaystationValidate"] = "Platform.IapAdmin.IapConfigPlaystationValidate";
  Key_IapAdmin2["IapMockReceipt_ByUserId"] = "Platform.IapAdmin.IapMockReceipt_ByUserId";
  Key_IapAdmin2["IapConsumeHistory_ByUserId"] = "Platform.IapAdmin.IapConsumeHistory_ByUserId";
  return Key_IapAdmin2;
})(Key_IapAdmin || {});
var useIapAdminApi_DeleteIapConfigXblMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigXbl();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigXbl" /* IapConfigXbl */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigXbl = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigXbl();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigXbl" /* IapConfigXbl */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigXblMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigXbl(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigXbl" /* IapConfigXbl */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigItemMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigItem();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigItem" /* IapConfigItem */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigItem = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigItem();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigItem" /* IapConfigItem */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigItemMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigItem(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigItem" /* IapConfigItem */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigAppleMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigApple();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigApple" /* IapConfigApple */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigApple = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigApple();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigApple" /* IapConfigApple */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigAppleMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigApple(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigApple" /* IapConfigApple */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigSteamMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigSteam();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigSteam" /* IapConfigSteam */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigSteam = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigSteam();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigSteam" /* IapConfigSteam */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigSteamMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigSteam(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigSteam" /* IapConfigSteam */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigGoogleMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigGoogle();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigGoogle" /* IapConfigGoogle */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigGoogle = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigGoogle();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigGoogle" /* IapConfigGoogle */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigGoogleMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigGoogle(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigGoogle" /* IapConfigGoogle */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigOculuMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigOculu();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigOculu" /* IapConfigOculu */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigOculus = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigOculus();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigOculus" /* IapConfigOculus */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigOculuMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigOculu(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigOculu" /* IapConfigOculu */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigTwitchMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigTwitch();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigTwitch" /* IapConfigTwitch */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigTwitch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigTwitch();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigTwitch" /* IapConfigTwitch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigTwitchMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigTwitch(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigTwitch" /* IapConfigTwitch */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIap_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIap_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.Iap_ByUserId" /* Iap_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigXblCertMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigXblCert(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigXblCert" /* IapConfigXblCert */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigEpicgameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigEpicgame();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigEpicgame" /* IapConfigEpicgame */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigEpicgames = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigEpicgames();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigEpicgames" /* IapConfigEpicgames */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigEpicgameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigEpicgame(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigEpicgame" /* IapConfigEpicgame */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigAppleCertMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigAppleCert(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigAppleCert" /* IapConfigAppleCert */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigGoogleCertMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigGoogleCert(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigGoogleCert" /* IapConfigGoogleCert */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_DeleteIapConfigPlaystationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteIapConfigPlaystation();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigPlaystation" /* IapConfigPlaystation */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConfigPlaystation = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConfigPlaystation();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigPlaystation" /* IapConfigPlaystation */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigPlaystationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapConfigPlaystation(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigPlaystation" /* IapConfigPlaystation */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapAll_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapAll_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapAll_ByUserId" /* IapAll_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_GetIapConfigPlaystationValidate = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapConfigPlaystationValidate();
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConfigPlaystationValidate" /* IapConfigPlaystationValidate */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapAdminApi_UpdateIapConfigPlaystationValidateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateIapConfigPlaystationValidate(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapConfigPlaystationValidate" /* IapConfigPlaystationValidate */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_UpdateIapMockReceipt_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapMockReceipt_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Platform.IapAdmin.IapMockReceipt_ByUserId" /* IapMockReceipt_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapAdminApi_GetIapConsumeHistory_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapConsumeHistory_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Platform.IapAdmin.IapConsumeHistory_ByUserId" /* IapConsumeHistory_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/IapNotificationAdmin.query.ts
import { useQuery as useQuery12 } from "@tanstack/react-query";
var Key_IapNotificationAdmin = /* @__PURE__ */ ((Key_IapNotificationAdmin2) => {
  Key_IapNotificationAdmin2["IapNotifications"] = "Platform.IapNotificationAdmin.IapNotifications";
  return Key_IapNotificationAdmin2;
})(Key_IapNotificationAdmin || {});
var useIapNotificationAdminApi_GetIapNotifications = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapNotificationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapNotifications(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Platform.IapNotificationAdmin.IapNotifications" /* IapNotifications */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/IapSubscriptionAdmin.query.ts
import { useMutation as useMutation13, useQuery as useQuery13 } from "@tanstack/react-query";
var Key_IapSubscriptionAdmin = /* @__PURE__ */ ((Key_IapSubscriptionAdmin2) => {
  Key_IapSubscriptionAdmin2["IapSubscriptions"] = "Platform.IapSubscriptionAdmin.IapSubscriptions";
  Key_IapSubscriptionAdmin2["IapSubscriptions_ByUserId"] = "Platform.IapSubscriptionAdmin.IapSubscriptions_ByUserId";
  Key_IapSubscriptionAdmin2["IapSubscription_ByUserId_ById"] = "Platform.IapSubscriptionAdmin.IapSubscription_ByUserId_ById";
  Key_IapSubscriptionAdmin2["SyncIap_ByUserId_ById"] = "Platform.IapSubscriptionAdmin.SyncIap_ByUserId_ById";
  Key_IapSubscriptionAdmin2["IapSubscriptionsTransactions_ByUserId"] = "Platform.IapSubscriptionAdmin.IapSubscriptionsTransactions_ByUserId";
  Key_IapSubscriptionAdmin2["IapSubscriptionTransaction_ByUserId_ById"] = "Platform.IapSubscriptionAdmin.IapSubscriptionTransaction_ByUserId_ById";
  Key_IapSubscriptionAdmin2["SyncSubscriptionIap_ByUserId_ById"] = "Platform.IapSubscriptionAdmin.SyncSubscriptionIap_ByUserId_ById";
  Key_IapSubscriptionAdmin2["HistoriesSubscriptionsIap_ByUserId_ById"] = "Platform.IapSubscriptionAdmin.HistoriesSubscriptionsIap_ByUserId_ById";
  Key_IapSubscriptionAdmin2["OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform"] = "Platform.IapSubscriptionAdmin.OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform";
  Key_IapSubscriptionAdmin2["OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform"] = "Platform.IapSubscriptionAdmin.OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform";
  return Key_IapSubscriptionAdmin2;
})(Key_IapSubscriptionAdmin || {});
var useIapSubscriptionAdminApi_GetIapSubscriptions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapSubscriptions(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.IapSubscriptions" /* IapSubscriptions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_GetIapSubscriptions_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapSubscriptions_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.IapSubscriptions_ByUserId" /* IapSubscriptions_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_GetIapSubscription_ByUserId_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapSubscription_ByUserId_ById(input2.userId, input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.IapSubscription_ByUserId_ById" /* IapSubscription_ByUserId_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_UpdateSyncIap_ByUserId_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapSubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSyncIap_ByUserId_ById(input.userId, input.id);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Platform.IapSubscriptionAdmin.SyncIap_ByUserId_ById" /* SyncIap_ByUserId_ById */],
    mutationFn,
    ...options
  });
};
var useIapSubscriptionAdminApi_GetIapSubscriptionsTransactions_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapSubscriptionsTransactions_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.IapSubscriptionsTransactions_ByUserId" /* IapSubscriptionsTransactions_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_GetIapSubscriptionTransaction_ByUserId_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapSubscriptionTransaction_ByUserId_ById(input2.userId, input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.IapSubscriptionTransaction_ByUserId_ById" /* IapSubscriptionTransaction_ByUserId_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_UpdateSyncSubscriptionIap_ByUserId_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapSubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSyncSubscriptionIap_ByUserId_ById(input.userId, input.id);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Platform.IapSubscriptionAdmin.SyncSubscriptionIap_ByUserId_ById" /* SyncSubscriptionIap_ByUserId_ById */],
    mutationFn,
    ...options
  });
};
var useIapSubscriptionAdminApi_GetHistoriesSubscriptionsIap_ByUserId_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistoriesSubscriptionsIap_ByUserId_ById(input2.userId, input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.HistoriesSubscriptionsIap_ByUserId_ById" /* HistoriesSubscriptionsIap_ByUserId_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_GetOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform(input2.userId, input2.platform, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform" /* OwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapSubscriptionAdminApi_GetOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform(input2.userId, input2.platform, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Platform.IapSubscriptionAdmin.OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform" /* OwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/InvoiceAdmin.query.ts
import { useQuery as useQuery14 } from "@tanstack/react-query";
var Key_InvoiceAdmin = /* @__PURE__ */ ((Key_InvoiceAdmin2) => {
  Key_InvoiceAdmin2["InvoiceSummary"] = "Platform.InvoiceAdmin.InvoiceSummary";
  Key_InvoiceAdmin2["InvoiceDetailsCsv"] = "Platform.InvoiceAdmin.InvoiceDetailsCsv";
  return Key_InvoiceAdmin2;
})(Key_InvoiceAdmin || {});
var useInvoiceAdminApi_GetInvoiceSummary = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await InvoiceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getInvoiceSummary(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Platform.InvoiceAdmin.InvoiceSummary" /* InvoiceSummary */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useInvoiceAdminApi_GetInvoiceDetailsCsv = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await InvoiceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getInvoiceDetailsCsv(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Platform.InvoiceAdmin.InvoiceDetailsCsv" /* InvoiceDetailsCsv */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/ItemAdmin.query.ts
import { useMutation as useMutation14, useQuery as useQuery15 } from "@tanstack/react-query";
var Key_ItemAdmin = /* @__PURE__ */ ((Key_ItemAdmin2) => {
  Key_ItemAdmin2["ItemsConfigs"] = "Platform.ItemAdmin.ItemsConfigs";
  Key_ItemAdmin2["ItemConfig"] = "Platform.ItemAdmin.ItemConfig";
  Key_ItemAdmin2["ItemConfig_ById"] = "Platform.ItemAdmin.ItemConfig_ById";
  Key_ItemAdmin2["ItemsConfigsSearch"] = "Platform.ItemAdmin.ItemsConfigsSearch";
  Key_ItemAdmin2["Item"] = "Platform.ItemAdmin.Item";
  Key_ItemAdmin2["ItemsByIds"] = "Platform.ItemAdmin.ItemsByIds";
  Key_ItemAdmin2["ItemsBySku"] = "Platform.ItemAdmin.ItemsBySku";
  Key_ItemAdmin2["ItemsSearch"] = "Platform.ItemAdmin.ItemsSearch";
  Key_ItemAdmin2["ItemsByAppId"] = "Platform.ItemAdmin.ItemsByAppId";
  Key_ItemAdmin2["Item_ByItemId"] = "Platform.ItemAdmin.Item_ByItemId";
  Key_ItemAdmin2["ItemsByCriteria"] = "Platform.ItemAdmin.ItemsByCriteria";
  Key_ItemAdmin2["ItemRegiondata"] = "Platform.ItemAdmin.ItemRegiondata";
  Key_ItemAdmin2["App_ByItemId"] = "Platform.ItemAdmin.App_ByItemId";
  Key_ItemAdmin2["ItemsBySkuLocale"] = "Platform.ItemAdmin.ItemsBySkuLocale";
  Key_ItemAdmin2["ItemsItemIdBySku"] = "Platform.ItemAdmin.ItemsItemIdBySku";
  Key_ItemAdmin2["ItemsLocaleByIds"] = "Platform.ItemAdmin.ItemsLocaleByIds";
  Key_ItemAdmin2["ItemsItemIdBySkus"] = "Platform.ItemAdmin.ItemsItemIdBySkus";
  Key_ItemAdmin2["ItemsUncategorized"] = "Platform.ItemAdmin.ItemsUncategorized";
  Key_ItemAdmin2["ItemsByCriteria_v2"] = "Platform.ItemAdmin.ItemsByCriteria_v2";
  Key_ItemAdmin2["ItemsEstimatedPrice"] = "Platform.ItemAdmin.ItemsEstimatedPrice";
  Key_ItemAdmin2["Enable_ByItemId"] = "Platform.ItemAdmin.Enable_ByItemId";
  Key_ItemAdmin2["Locale_ByItemId"] = "Platform.ItemAdmin.Locale_ByItemId";
  Key_ItemAdmin2["Return_ByItemId"] = "Platform.ItemAdmin.Return_ByItemId";
  Key_ItemAdmin2["ItemsPredicateTypes"] = "Platform.ItemAdmin.ItemsPredicateTypes";
  Key_ItemAdmin2["Acquire_ByItemId"] = "Platform.ItemAdmin.Acquire_ByItemId";
  Key_ItemAdmin2["Disable_ByItemId"] = "Platform.ItemAdmin.Disable_ByItemId";
  Key_ItemAdmin2["Dynamic_ByItemId"] = "Platform.ItemAdmin.Dynamic_ByItemId";
  Key_ItemAdmin2["ItemsByFeaturesBasic"] = "Platform.ItemAdmin.ItemsByFeaturesBasic";
  Key_ItemAdmin2["Feature_ByItemId_ByFeature"] = "Platform.ItemAdmin.Feature_ByItemId_ByFeature";
  Key_ItemAdmin2["PurchaseCondition_ByItemId"] = "Platform.ItemAdmin.PurchaseCondition_ByItemId";
  Key_ItemAdmin2["ItemPurchaseConditionValidate"] = "Platform.ItemAdmin.ItemPurchaseConditionValidate";
  return Key_ItemAdmin2;
})(Key_ItemAdmin || {});
var useItemAdminApi_GetItemsConfigs = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsConfigs();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsConfigs" /* ItemsConfigs */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_CreateItemConfigMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createItemConfig(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.ItemConfig" /* ItemConfig */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_DeleteItemConfig_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteItemConfig_ById(
      input.id
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.ItemConfig_ById" /* ItemConfig_ById */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItemConfig_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemConfig_ById(input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemConfig_ById" /* ItemConfig_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateItemConfig_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateItemConfig_ById(
      input.id,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.ItemConfig_ById" /* ItemConfig_ById */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItemsConfigsSearch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsConfigsSearch(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsConfigsSearch" /* ItemsConfigsSearch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_CreateItemMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createItem(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Item" /* Item */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_UpdateItemMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateItem(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Item" /* Item */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItemsByIds = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByIds(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsByIds" /* ItemsByIds */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsBySku = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsBySku(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsBySku" /* ItemsBySku */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsSearch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsSearch(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsSearch" /* ItemsSearch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsByAppId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByAppId(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsByAppId" /* ItemsByAppId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_DeleteItem_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteItem_ByItemId(
      input.itemId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Item_ByItemId" /* Item_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItem_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItem_ByItemId(
      input2.itemId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.Item_ByItemId" /* Item_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateItem_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateItem_ByItemId(
      input.itemId,
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Item_ByItemId" /* Item_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItemsByCriteria = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByCriteria(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsByCriteria" /* ItemsByCriteria */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateItemRegiondataMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateItemRegiondata(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.ItemRegiondata" /* ItemRegiondata */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetApp_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getApp_ByItemId(
      input2.itemId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.App_ByItemId" /* App_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateApp_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateApp_ByItemId(
      input.itemId,
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.App_ByItemId" /* App_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItemsBySkuLocale = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsBySkuLocale(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsBySkuLocale" /* ItemsBySkuLocale */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsItemIdBySku = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsItemIdBySku(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsItemIdBySku" /* ItemsItemIdBySku */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsLocaleByIds = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsLocaleByIds(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsLocaleByIds" /* ItemsLocaleByIds */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsItemIdBySkus = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsItemIdBySkus(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsItemIdBySkus" /* ItemsItemIdBySkus */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsUncategorized = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsUncategorized(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsUncategorized" /* ItemsUncategorized */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsByCriteria_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByCriteria_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsByCriteria_v2" /* ItemsByCriteria_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsEstimatedPrice = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsEstimatedPrice(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsEstimatedPrice" /* ItemsEstimatedPrice */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateEnable_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateEnable_ByItemId(
      input.itemId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Enable_ByItemId" /* Enable_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetLocale_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getLocale_ByItemId(
      input2.itemId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.Locale_ByItemId" /* Locale_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateReturn_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateReturn_ByItemId(
      input.itemId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Return_ByItemId" /* Return_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetItemsPredicateTypes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsPredicateTypes();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsPredicateTypes" /* ItemsPredicateTypes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_UpdateAcquire_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateAcquire_ByItemId(
      input.itemId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Acquire_ByItemId" /* Acquire_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_UpdateDisable_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDisable_ByItemId(
      input.itemId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Disable_ByItemId" /* Disable_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_GetDynamic_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDynamic_ByItemId(
      input2.itemId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.Dynamic_ByItemId" /* Dynamic_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_GetItemsByFeaturesBasic = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByFeaturesBasic(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Platform.ItemAdmin.ItemsByFeaturesBasic" /* ItemsByFeaturesBasic */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemAdminApi_DeleteFeature_ByItemId_ByFeatureMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteFeature_ByItemId_ByFeature(input.itemId, input.feature, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Feature_ByItemId_ByFeature" /* Feature_ByItemId_ByFeature */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_UpdateFeature_ByItemId_ByFeatureMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateFeature_ByItemId_ByFeature(input.itemId, input.feature, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.Feature_ByItemId_ByFeature" /* Feature_ByItemId_ByFeature */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_UpdatePurchaseCondition_ByItemIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePurchaseCondition_ByItemId(input.itemId, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.PurchaseCondition_ByItemId" /* PurchaseCondition_ByItemId */],
    mutationFn,
    ...options
  });
};
var useItemAdminApi_CreateItemPurchaseConditionValidateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createItemPurchaseConditionValidate(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Platform.ItemAdmin.ItemPurchaseConditionValidate" /* ItemPurchaseConditionValidate */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/KeyGroupAdmin.query.ts
import { useMutation as useMutation15, useQuery as useQuery16 } from "@tanstack/react-query";
var Key_KeyGroupAdmin = /* @__PURE__ */ ((Key_KeyGroupAdmin2) => {
  Key_KeyGroupAdmin2["Keygroups"] = "Platform.KeyGroupAdmin.Keygroups";
  Key_KeyGroupAdmin2["Keygroup"] = "Platform.KeyGroupAdmin.Keygroup";
  Key_KeyGroupAdmin2["KeygroupsByBoothName"] = "Platform.KeyGroupAdmin.KeygroupsByBoothName";
  Key_KeyGroupAdmin2["Keygroup_ByKeyGroupId"] = "Platform.KeyGroupAdmin.Keygroup_ByKeyGroupId";
  Key_KeyGroupAdmin2["Keys_ByKeyGroupId"] = "Platform.KeyGroupAdmin.Keys_ByKeyGroupId";
  Key_KeyGroupAdmin2["Key_ByKeyGroupId"] = "Platform.KeyGroupAdmin.Key_ByKeyGroupId";
  Key_KeyGroupAdmin2["Dynamic_ByKeyGroupId"] = "Platform.KeyGroupAdmin.Dynamic_ByKeyGroupId";
  return Key_KeyGroupAdmin2;
})(Key_KeyGroupAdmin || {});
var useKeyGroupAdminApi_GetKeygroups = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await KeyGroupAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getKeygroups(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Platform.KeyGroupAdmin.Keygroups" /* Keygroups */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useKeyGroupAdminApi_CreateKeygroupMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await KeyGroupAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createKeygroup(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Platform.KeyGroupAdmin.Keygroup" /* Keygroup */],
    mutationFn,
    ...options
  });
};
var useKeyGroupAdminApi_GetKeygroupsByBoothName = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await KeyGroupAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getKeygroupsByBoothName(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Platform.KeyGroupAdmin.KeygroupsByBoothName" /* KeygroupsByBoothName */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useKeyGroupAdminApi_GetKeygroup_ByKeyGroupId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await KeyGroupAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getKeygroup_ByKeyGroupId(
      input2.keyGroupId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Platform.KeyGroupAdmin.Keygroup_ByKeyGroupId" /* Keygroup_ByKeyGroupId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useKeyGroupAdminApi_UpdateKeygroup_ByKeyGroupIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await KeyGroupAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateKeygroup_ByKeyGroupId(input.keyGroupId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Platform.KeyGroupAdmin.Keygroup_ByKeyGroupId" /* Keygroup_ByKeyGroupId */],
    mutationFn,
    ...options
  });
};
var useKeyGroupAdminApi_GetKeys_ByKeyGroupId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await KeyGroupAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getKeys_ByKeyGroupId(
      input2.keyGroupId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Platform.KeyGroupAdmin.Keys_ByKeyGroupId" /* Keys_ByKeyGroupId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useKeyGroupAdminApi_CreateKey_ByKeyGroupIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await KeyGroupAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createKey_ByKeyGroupId(
      input.keyGroupId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Platform.KeyGroupAdmin.Key_ByKeyGroupId" /* Key_ByKeyGroupId */],
    mutationFn,
    ...options
  });
};
var useKeyGroupAdminApi_GetDynamic_ByKeyGroupId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await KeyGroupAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDynamic_ByKeyGroupId(
      input2.keyGroupId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Platform.KeyGroupAdmin.Dynamic_ByKeyGroupId" /* Dynamic_ByKeyGroupId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/OrderAdmin.query.ts
import { useMutation as useMutation16, useQuery as useQuery17 } from "@tanstack/react-query";
var Key_OrderAdmin = /* @__PURE__ */ ((Key_OrderAdmin2) => {
  Key_OrderAdmin2["Orders"] = "Platform.OrderAdmin.Orders";
  Key_OrderAdmin2["OrdersStats"] = "Platform.OrderAdmin.OrdersStats";
  Key_OrderAdmin2["Order_ByOrderNo"] = "Platform.OrderAdmin.Order_ByOrderNo";
  Key_OrderAdmin2["Orders_ByUserId"] = "Platform.OrderAdmin.Orders_ByUserId";
  Key_OrderAdmin2["Order_ByUserId"] = "Platform.OrderAdmin.Order_ByUserId";
  Key_OrderAdmin2["Refund_ByOrderNo"] = "Platform.OrderAdmin.Refund_ByOrderNo";
  Key_OrderAdmin2["Order_ByUserId_ByOrderNo"] = "Platform.OrderAdmin.Order_ByUserId_ByOrderNo";
  Key_OrderAdmin2["OrdersCountOfItem_ByUserId"] = "Platform.OrderAdmin.OrdersCountOfItem_ByUserId";
  Key_OrderAdmin2["Grant_ByUserId_ByOrderNo"] = "Platform.OrderAdmin.Grant_ByUserId_ByOrderNo";
  Key_OrderAdmin2["Fulfill_ByUserId_ByOrderNo"] = "Platform.OrderAdmin.Fulfill_ByUserId_ByOrderNo";
  Key_OrderAdmin2["History_ByUserId_ByOrderNo"] = "Platform.OrderAdmin.History_ByUserId_ByOrderNo";
  Key_OrderAdmin2["ReceiptPdf_ByUserId_ByOrderNo"] = "Platform.OrderAdmin.ReceiptPdf_ByUserId_ByOrderNo";
  Key_OrderAdmin2["Notification_ByUserId_ByOrderNo"] = "Platform.OrderAdmin.Notification_ByUserId_ByOrderNo";
  return Key_OrderAdmin2;
})(Key_OrderAdmin || {});
var useOrderAdminApi_GetOrders = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrders(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.Orders" /* Orders */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_GetOrdersStats = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrdersStats();
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.OrdersStats" /* OrdersStats */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_GetOrder_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrder_ByOrderNo(
      input2.orderNo
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.Order_ByOrderNo" /* Order_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_GetOrders_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrders_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.Orders_ByUserId" /* Orders_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_CreateOrder_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createOrder_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Platform.OrderAdmin.Order_ByUserId" /* Order_ByUserId */],
    mutationFn,
    ...options
  });
};
var useOrderAdminApi_UpdateRefund_ByOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRefund_ByOrderNo(
      input.orderNo,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Platform.OrderAdmin.Refund_ByOrderNo" /* Refund_ByOrderNo */],
    mutationFn,
    ...options
  });
};
var useOrderAdminApi_GetOrder_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrder_ByUserId_ByOrderNo(
      input2.userId,
      input2.orderNo
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.Order_ByUserId_ByOrderNo" /* Order_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_UpdateOrder_ByUserId_ByOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateOrder_ByUserId_ByOrderNo(input.userId, input.orderNo, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Platform.OrderAdmin.Order_ByUserId_ByOrderNo" /* Order_ByUserId_ByOrderNo */],
    mutationFn,
    ...options
  });
};
var useOrderAdminApi_GetOrdersCountOfItem_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getOrdersCountOfItem_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.OrdersCountOfItem_ByUserId" /* OrdersCountOfItem_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_GetGrant_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGrant_ByUserId_ByOrderNo(
      input2.userId,
      input2.orderNo
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.Grant_ByUserId_ByOrderNo" /* Grant_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_UpdateFulfill_ByUserId_ByOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateFulfill_ByUserId_ByOrderNo(input.userId, input.orderNo);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Platform.OrderAdmin.Fulfill_ByUserId_ByOrderNo" /* Fulfill_ByUserId_ByOrderNo */],
    mutationFn,
    ...options
  });
};
var useOrderAdminApi_GetHistory_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistory_ByUserId_ByOrderNo(input2.userId, input2.orderNo);
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.History_ByUserId_ByOrderNo" /* History_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_GetReceiptPdf_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getReceiptPdf_ByUserId_ByOrderNo(input2.userId, input2.orderNo);
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Platform.OrderAdmin.ReceiptPdf_ByUserId_ByOrderNo" /* ReceiptPdf_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderAdminApi_CreateNotification_ByUserId_ByOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotification_ByUserId_ByOrderNo(input.userId, input.orderNo, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Platform.OrderAdmin.Notification_ByUserId_ByOrderNo" /* Notification_ByUserId_ByOrderNo */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/OrderDedicatedAdmin.query.ts
import { useQuery as useQuery18 } from "@tanstack/react-query";
var Key_OrderDedicatedAdmin = /* @__PURE__ */ ((Key_OrderDedicatedAdmin2) => {
  Key_OrderDedicatedAdmin2["Orders"] = "Platform.OrderDedicatedAdmin.Orders";
  return Key_OrderDedicatedAdmin2;
})(Key_OrderDedicatedAdmin || {});
var useOrderDedicatedAdminApi_GetOrders = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderDedicatedAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrders(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery18({
    queryKey: ["Platform.OrderDedicatedAdmin.Orders" /* Orders */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PaymentAdmin.query.ts
import { useMutation as useMutation17, useQuery as useQuery19 } from "@tanstack/react-query";
var Key_PaymentAdmin = /* @__PURE__ */ ((Key_PaymentAdmin2) => {
  Key_PaymentAdmin2["PaymentOrders"] = "Platform.PaymentAdmin.PaymentOrders";
  Key_PaymentAdmin2["PaymentNotifications"] = "Platform.PaymentAdmin.PaymentNotifications";
  Key_PaymentAdmin2["PaymentOrdersByExtTxId"] = "Platform.PaymentAdmin.PaymentOrdersByExtTxId";
  Key_PaymentAdmin2["PaymentOrder_ByUserId"] = "Platform.PaymentAdmin.PaymentOrder_ByUserId";
  Key_PaymentAdmin2["PaymentOrder_ByPaymentOrderNo"] = "Platform.PaymentAdmin.PaymentOrder_ByPaymentOrderNo";
  Key_PaymentAdmin2["StatusPayment_ByPaymentOrderNo"] = "Platform.PaymentAdmin.StatusPayment_ByPaymentOrderNo";
  Key_PaymentAdmin2["SimulateNotificationPayment_ByPaymentOrderNo"] = "Platform.PaymentAdmin.SimulateNotificationPayment_ByPaymentOrderNo";
  Key_PaymentAdmin2["RefundPayment_ByUserId_ByPaymentOrderNo"] = "Platform.PaymentAdmin.RefundPayment_ByUserId_ByPaymentOrderNo";
  return Key_PaymentAdmin2;
})(Key_PaymentAdmin || {});
var usePaymentAdminApi_GetPaymentOrders = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentOrders(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery19({
    queryKey: ["Platform.PaymentAdmin.PaymentOrders" /* PaymentOrders */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentAdminApi_GetPaymentNotifications = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentNotifications(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery19({
    queryKey: ["Platform.PaymentAdmin.PaymentNotifications" /* PaymentNotifications */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentAdminApi_GetPaymentOrdersByExtTxId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentOrdersByExtTxId(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery19({
    queryKey: ["Platform.PaymentAdmin.PaymentOrdersByExtTxId" /* PaymentOrdersByExtTxId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentAdminApi_CreatePaymentOrder_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentOrder_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Platform.PaymentAdmin.PaymentOrder_ByUserId" /* PaymentOrder_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePaymentAdminApi_GetPaymentOrder_ByPaymentOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentOrder_ByPaymentOrderNo(input2.paymentOrderNo);
    callback && callback(response);
    return response.data;
  };
  return useQuery19({
    queryKey: ["Platform.PaymentAdmin.PaymentOrder_ByPaymentOrderNo" /* PaymentOrder_ByPaymentOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentAdminApi_UpdatePaymentOrder_ByPaymentOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePaymentOrder_ByPaymentOrderNo(input.paymentOrderNo, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Platform.PaymentAdmin.PaymentOrder_ByPaymentOrderNo" /* PaymentOrder_ByPaymentOrderNo */],
    mutationFn,
    ...options
  });
};
var usePaymentAdminApi_GetStatusPayment_ByPaymentOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getStatusPayment_ByPaymentOrderNo(input2.paymentOrderNo);
    callback && callback(response);
    return response.data;
  };
  return useQuery19({
    queryKey: ["Platform.PaymentAdmin.StatusPayment_ByPaymentOrderNo" /* StatusPayment_ByPaymentOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentAdminApi_UpdateSimulateNotificationPayment_ByPaymentOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSimulateNotificationPayment_ByPaymentOrderNo(input.paymentOrderNo, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Platform.PaymentAdmin.SimulateNotificationPayment_ByPaymentOrderNo" /* SimulateNotificationPayment_ByPaymentOrderNo */],
    mutationFn,
    ...options
  });
};
var usePaymentAdminApi_UpdateRefundPayment_ByUserId_ByPaymentOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRefundPayment_ByUserId_ByPaymentOrderNo(input.userId, input.paymentOrderNo, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Platform.PaymentAdmin.RefundPayment_ByUserId_ByPaymentOrderNo" /* RefundPayment_ByUserId_ByPaymentOrderNo */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PaymentCallbackConfigAdmin.query.ts
import { useMutation as useMutation18, useQuery as useQuery20 } from "@tanstack/react-query";
var Key_PaymentCallbackConfigAdmin = /* @__PURE__ */ ((Key_PaymentCallbackConfigAdmin2) => {
  Key_PaymentCallbackConfigAdmin2["PaymentConfigCallback"] = "Platform.PaymentCallbackConfigAdmin.PaymentConfigCallback";
  return Key_PaymentCallbackConfigAdmin2;
})(Key_PaymentCallbackConfigAdmin || {});
var usePaymentCallbackConfigAdminApi_GetPaymentConfigCallback = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentCallbackConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigCallback();
    callback && callback(response);
    return response.data;
  };
  return useQuery20({
    queryKey: ["Platform.PaymentCallbackConfigAdmin.PaymentConfigCallback" /* PaymentConfigCallback */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentCallbackConfigAdminApi_UpdatePaymentConfigCallbackMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentCallbackConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePaymentConfigCallback(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Platform.PaymentCallbackConfigAdmin.PaymentConfigCallback" /* PaymentConfigCallback */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PaymentConfigAdmin.query.ts
import { useMutation as useMutation19, useQuery as useQuery21 } from "@tanstack/react-query";
var Key_PaymentConfigAdmin = /* @__PURE__ */ ((Key_PaymentConfigAdmin2) => {
  Key_PaymentConfigAdmin2["PaymentConfigTax"] = "Platform.PaymentConfigAdmin.PaymentConfigTax";
  Key_PaymentConfigAdmin2["PaymentConfigProvider"] = "Platform.PaymentConfigAdmin.PaymentConfigProvider";
  Key_PaymentConfigAdmin2["PaymentConfigMerchant_ById"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchant_ById";
  Key_PaymentConfigAdmin2["PaymentConfigProvider_ById"] = "Platform.PaymentConfigAdmin.PaymentConfigProvider_ById";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantMatched"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantMatched";
  Key_PaymentConfigAdmin2["PaymentConfigProviderMatched"] = "Platform.PaymentConfigAdmin.PaymentConfigProviderMatched";
  Key_PaymentConfigAdmin2["PaymentConfigProviderSpecial"] = "Platform.PaymentConfigAdmin.PaymentConfigProviderSpecial";
  Key_PaymentConfigAdmin2["PaymentConfigProviderAggregate"] = "Platform.PaymentConfigAdmin.PaymentConfigProviderAggregate";
  Key_PaymentConfigAdmin2["AdyenconfigPayment_ById"] = "Platform.PaymentConfigAdmin.AdyenconfigPayment_ById";
  Key_PaymentConfigAdmin2["WxpayconfigPayment_ById"] = "Platform.PaymentConfigAdmin.WxpayconfigPayment_ById";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantAdyenconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantAdyenconfigTest";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantWxpayconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantWxpayconfigTest";
  Key_PaymentConfigAdmin2["AlipayconfigPayment_ById"] = "Platform.PaymentConfigAdmin.AlipayconfigPayment_ById";
  Key_PaymentConfigAdmin2["PaypalconfigPayment_ById"] = "Platform.PaymentConfigAdmin.PaypalconfigPayment_ById";
  Key_PaymentConfigAdmin2["StripeconfigPayment_ById"] = "Platform.PaymentConfigAdmin.StripeconfigPayment_ById";
  Key_PaymentConfigAdmin2["XsollaconfigPayment_ById"] = "Platform.PaymentConfigAdmin.XsollaconfigPayment_ById";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantAlipayconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantAlipayconfigTest";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantPaypalconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantPaypalconfigTest";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantStripeconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantStripeconfigTest";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantXsollaconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantXsollaconfigTest";
  Key_PaymentConfigAdmin2["NeonpayconfigPayment_ById"] = "Platform.PaymentConfigAdmin.NeonpayconfigPayment_ById";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantNeonpayconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantNeonpayconfigTest";
  Key_PaymentConfigAdmin2["CheckoutconfigPayment_ById"] = "Platform.PaymentConfigAdmin.CheckoutconfigPayment_ById";
  Key_PaymentConfigAdmin2["XsollauiconfigPayment_ById"] = "Platform.PaymentConfigAdmin.XsollauiconfigPayment_ById";
  Key_PaymentConfigAdmin2["PaymentConfigMerchantCheckoutconfigTest"] = "Platform.PaymentConfigAdmin.PaymentConfigMerchantCheckoutconfigTest";
  Key_PaymentConfigAdmin2["PaymentConfigDomains"] = "Platform.PaymentConfigAdmin.PaymentConfigDomains";
  Key_PaymentConfigAdmin2["PaymentConfigDomain"] = "Platform.PaymentConfigAdmin.PaymentConfigDomain";
  Key_PaymentConfigAdmin2["AdyenconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.AdyenconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["WxpayconfigCertPayment_ById"] = "Platform.PaymentConfigAdmin.WxpayconfigCertPayment_ById";
  Key_PaymentConfigAdmin2["WxpayconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.WxpayconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["AlipayconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.AlipayconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["PaypalconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.PaypalconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["StripeconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.StripeconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["XsollaconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.XsollaconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["NeonpayconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.NeonpayconfigTestPayment_ById";
  Key_PaymentConfigAdmin2["CheckoutconfigTestPayment_ById"] = "Platform.PaymentConfigAdmin.CheckoutconfigTestPayment_ById";
  return Key_PaymentConfigAdmin2;
})(Key_PaymentConfigAdmin || {});
var usePaymentConfigAdminApi_GetPaymentConfigTax = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigTax();
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigTax" /* PaymentConfigTax */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_UpdatePaymentConfigTaxMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePaymentConfigTax(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigTax" /* PaymentConfigTax */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigProvider = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigProvider(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigProvider" /* PaymentConfigProvider */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigProviderMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigProvider(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigProvider" /* PaymentConfigProvider */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigMerchant_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigMerchant_ById(input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchant_ById" /* PaymentConfigMerchant_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_DeletePaymentConfigProvider_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePaymentConfigProvider_ById(input.id);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigProvider_ById" /* PaymentConfigProvider_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdatePaymentConfigProvider_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePaymentConfigProvider_ById(input.id, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigProvider_ById" /* PaymentConfigProvider_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigMerchantMatched = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigMerchantMatched(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantMatched" /* PaymentConfigMerchantMatched */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigProviderMatched = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigProviderMatched(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigProviderMatched" /* PaymentConfigProviderMatched */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigProviderSpecial = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigProviderSpecial();
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigProviderSpecial" /* PaymentConfigProviderSpecial */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigProviderAggregate = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigProviderAggregate();
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigProviderAggregate" /* PaymentConfigProviderAggregate */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateAdyenconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAdyenconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.AdyenconfigPayment_ById" /* AdyenconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateWxpayconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateWxpayconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.WxpayconfigPayment_ById" /* WxpayconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantAdyenconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantAdyenconfigTest(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantAdyenconfigTest" /* PaymentConfigMerchantAdyenconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantWxpayconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantWxpayconfigTest(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantWxpayconfigTest" /* PaymentConfigMerchantWxpayconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateAlipayconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAlipayconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.AlipayconfigPayment_ById" /* AlipayconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdatePaypalconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePaypalconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaypalconfigPayment_ById" /* PaypalconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateStripeconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateStripeconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.StripeconfigPayment_ById" /* StripeconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateXsollaconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateXsollaconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.XsollaconfigPayment_ById" /* XsollaconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantAlipayconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantAlipayconfigTest(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantAlipayconfigTest" /* PaymentConfigMerchantAlipayconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantPaypalconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantPaypalconfigTest(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantPaypalconfigTest" /* PaymentConfigMerchantPaypalconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantStripeconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantStripeconfigTest(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantStripeconfigTest" /* PaymentConfigMerchantStripeconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantXsollaconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantXsollaconfigTest(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantXsollaconfigTest" /* PaymentConfigMerchantXsollaconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateNeonpayconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateNeonpayconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.NeonpayconfigPayment_ById" /* NeonpayconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantNeonpayconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantNeonpayconfigTest(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantNeonpayconfigTest" /* PaymentConfigMerchantNeonpayconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateCheckoutconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCheckoutconfigPayment_ById(input.id, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.CheckoutconfigPayment_ById" /* CheckoutconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateXsollauiconfigPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateXsollauiconfigPayment_ById(input.id, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.XsollauiconfigPayment_ById" /* XsollauiconfigPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_CreatePaymentConfigMerchantCheckoutconfigTestMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentConfigMerchantCheckoutconfigTest(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigMerchantCheckoutconfigTest" /* PaymentConfigMerchantCheckoutconfigTest */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaymentConfigDomains = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentConfigDomains();
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaymentConfigDomains" /* PaymentConfigDomains */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_UpdatePaymentConfigDomainMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePaymentConfigDomain(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.PaymentConfigDomain" /* PaymentConfigDomain */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_GetAdyenconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAdyenconfigTestPayment_ById(input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.AdyenconfigTestPayment_ById" /* AdyenconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_UpdateWxpayconfigCertPayment_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateWxpayconfigCertPayment_ById(input.id, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Platform.PaymentConfigAdmin.WxpayconfigCertPayment_ById" /* WxpayconfigCertPayment_ById */],
    mutationFn,
    ...options
  });
};
var usePaymentConfigAdminApi_GetWxpayconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getWxpayconfigTestPayment_ById(input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.WxpayconfigTestPayment_ById" /* WxpayconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetAlipayconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAlipayconfigTestPayment_ById(input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.AlipayconfigTestPayment_ById" /* AlipayconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetPaypalconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaypalconfigTestPayment_ById(input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.PaypalconfigTestPayment_ById" /* PaypalconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetStripeconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getStripeconfigTestPayment_ById(input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.StripeconfigTestPayment_ById" /* StripeconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetXsollaconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXsollaconfigTestPayment_ById(input2.id);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.XsollaconfigTestPayment_ById" /* XsollaconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetNeonpayconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNeonpayconfigTestPayment_ById(input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.NeonpayconfigTestPayment_ById" /* NeonpayconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentConfigAdminApi_GetCheckoutconfigTestPayment_ById = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCheckoutconfigTestPayment_ById(input2.id, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Platform.PaymentConfigAdmin.CheckoutconfigTestPayment_ById" /* CheckoutconfigTestPayment_ById */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PaymentDedicatedAdmin.query.ts
import { useMutation as useMutation20, useQuery as useQuery22 } from "@tanstack/react-query";
var Key_PaymentDedicatedAdmin = /* @__PURE__ */ ((Key_PaymentDedicatedAdmin2) => {
  Key_PaymentDedicatedAdmin2["PaymentOrders"] = "Platform.PaymentDedicatedAdmin.PaymentOrders";
  Key_PaymentDedicatedAdmin2["PaymentOrder"] = "Platform.PaymentDedicatedAdmin.PaymentOrder";
  Key_PaymentDedicatedAdmin2["RefundPayment_ByPaymentOrderNo"] = "Platform.PaymentDedicatedAdmin.RefundPayment_ByPaymentOrderNo";
  return Key_PaymentDedicatedAdmin2;
})(Key_PaymentDedicatedAdmin || {});
var usePaymentDedicatedAdminApi_GetPaymentOrders = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentDedicatedAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentOrders(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery22({
    queryKey: ["Platform.PaymentDedicatedAdmin.PaymentOrders" /* PaymentOrders */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentDedicatedAdminApi_CreatePaymentOrderMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentDedicatedAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPaymentOrder(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Platform.PaymentDedicatedAdmin.PaymentOrder" /* PaymentOrder */],
    mutationFn,
    ...options
  });
};
var usePaymentDedicatedAdminApi_UpdateRefundPayment_ByPaymentOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentDedicatedAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRefundPayment_ByPaymentOrderNo(input.paymentOrderNo, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Platform.PaymentDedicatedAdmin.RefundPayment_ByPaymentOrderNo" /* RefundPayment_ByPaymentOrderNo */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PlatformAccountClosureAdmin.query.ts
import { useQuery as useQuery23 } from "@tanstack/react-query";
var Key_PlatformAccountClosureAdmin = /* @__PURE__ */ ((Key_PlatformAccountClosureAdmin2) => {
  Key_PlatformAccountClosureAdmin2["PlatformClosureHistory_ByUserId"] = "Platform.PlatformAccountClosureAdmin.PlatformClosureHistory_ByUserId";
  return Key_PlatformAccountClosureAdmin2;
})(Key_PlatformAccountClosureAdmin || {});
var usePlatformAccountClosureAdminApi_GetPlatformClosureHistory_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlatformAccountClosureAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformClosureHistory_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery23({
    queryKey: ["Platform.PlatformAccountClosureAdmin.PlatformClosureHistory_ByUserId" /* PlatformClosureHistory_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PlatformAdmin.query.ts
import { useMutation as useMutation21 } from "@tanstack/react-query";
var Key_PlatformAdmin = /* @__PURE__ */ ((Key_PlatformAdmin2) => {
  Key_PlatformAdmin2["OwnershipXblPlatform_ByProductSku"] = "Platform.PlatformAdmin.OwnershipXblPlatform_ByProductSku";
  Key_PlatformAdmin2["OwnershipPsnPlatform_ByEntitlementLabel"] = "Platform.PlatformAdmin.OwnershipPsnPlatform_ByEntitlementLabel";
  return Key_PlatformAdmin2;
})(Key_PlatformAdmin || {});
var usePlatformAdminApi_CreateOwnershipXblPlatform_ByProductSkuMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlatformAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createOwnershipXblPlatform_ByProductSku(input.productSku, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Platform.PlatformAdmin.OwnershipXblPlatform_ByProductSku" /* OwnershipXblPlatform_ByProductSku */],
    mutationFn,
    ...options
  });
};
var usePlatformAdminApi_CreateOwnershipPsnPlatform_ByEntitlementLabelMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlatformAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createOwnershipPsnPlatform_ByEntitlementLabel(input.entitlementLabel, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Platform.PlatformAdmin.OwnershipPsnPlatform_ByEntitlementLabel" /* OwnershipPsnPlatform_ByEntitlementLabel */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/RevocationAdmin.query.ts
import { useMutation as useMutation22, useQuery as useQuery24 } from "@tanstack/react-query";
var Key_RevocationAdmin = /* @__PURE__ */ ((Key_RevocationAdmin2) => {
  Key_RevocationAdmin2["RevocationConfig"] = "Platform.RevocationAdmin.RevocationConfig";
  Key_RevocationAdmin2["RevocationHistory"] = "Platform.RevocationAdmin.RevocationHistory";
  Key_RevocationAdmin2["Revocation_ByUserId"] = "Platform.RevocationAdmin.Revocation_ByUserId";
  return Key_RevocationAdmin2;
})(Key_RevocationAdmin || {});
var useRevocationAdminApi_DeleteRevocationConfigMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RevocationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteRevocationConfig();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation22({
    mutationKey: ["Platform.RevocationAdmin.RevocationConfig" /* RevocationConfig */],
    mutationFn,
    ...options
  });
};
var useRevocationAdminApi_GetRevocationConfig = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RevocationAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRevocationConfig();
    callback && callback(response);
    return response.data;
  };
  return useQuery24({
    queryKey: ["Platform.RevocationAdmin.RevocationConfig" /* RevocationConfig */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRevocationAdminApi_UpdateRevocationConfigMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RevocationAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRevocationConfig(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation22({
    mutationKey: ["Platform.RevocationAdmin.RevocationConfig" /* RevocationConfig */],
    mutationFn,
    ...options
  });
};
var useRevocationAdminApi_GetRevocationHistory = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RevocationAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRevocationHistory(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery24({
    queryKey: ["Platform.RevocationAdmin.RevocationHistory" /* RevocationHistory */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRevocationAdminApi_UpdateRevocation_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RevocationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevocation_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation22({
    mutationKey: ["Platform.RevocationAdmin.Revocation_ByUserId" /* Revocation_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/RewardAdmin.query.ts
import { useMutation as useMutation23, useQuery as useQuery25 } from "@tanstack/react-query";
var Key_RewardAdmin = /* @__PURE__ */ ((Key_RewardAdmin2) => {
  Key_RewardAdmin2["Reward"] = "Platform.RewardAdmin.Reward";
  Key_RewardAdmin2["RewardsExport"] = "Platform.RewardAdmin.RewardsExport";
  Key_RewardAdmin2["RewardImport"] = "Platform.RewardAdmin.RewardImport";
  Key_RewardAdmin2["Reward_ByRewardId"] = "Platform.RewardAdmin.Reward_ByRewardId";
  Key_RewardAdmin2["RewardsByCriteria"] = "Platform.RewardAdmin.RewardsByCriteria";
  Key_RewardAdmin2["Match_ByRewardId"] = "Platform.RewardAdmin.Match_ByRewardId";
  Key_RewardAdmin2["Record_ByRewardId"] = "Platform.RewardAdmin.Record_ByRewardId";
  return Key_RewardAdmin2;
})(Key_RewardAdmin || {});
var useRewardAdminApi_CreateRewardMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RewardAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createReward(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Platform.RewardAdmin.Reward" /* Reward */],
    mutationFn,
    ...options
  });
};
var useRewardAdminApi_GetRewardsExport = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RewardAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRewardsExport();
    callback && callback(response);
    return response.data;
  };
  return useQuery25({
    queryKey: ["Platform.RewardAdmin.RewardsExport" /* RewardsExport */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRewardAdminApi_CreateRewardImportMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RewardAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRewardImport(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Platform.RewardAdmin.RewardImport" /* RewardImport */],
    mutationFn,
    ...options
  });
};
var useRewardAdminApi_DeleteReward_ByRewardIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RewardAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteReward_ByRewardId(
      input.rewardId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Platform.RewardAdmin.Reward_ByRewardId" /* Reward_ByRewardId */],
    mutationFn,
    ...options
  });
};
var useRewardAdminApi_GetReward_ByRewardId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RewardAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getReward_ByRewardId(
      input2.rewardId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery25({
    queryKey: ["Platform.RewardAdmin.Reward_ByRewardId" /* Reward_ByRewardId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRewardAdminApi_UpdateReward_ByRewardIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RewardAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateReward_ByRewardId(
      input.rewardId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Platform.RewardAdmin.Reward_ByRewardId" /* Reward_ByRewardId */],
    mutationFn,
    ...options
  });
};
var useRewardAdminApi_GetRewardsByCriteria = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RewardAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRewardsByCriteria(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery25({
    queryKey: ["Platform.RewardAdmin.RewardsByCriteria" /* RewardsByCriteria */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRewardAdminApi_UpdateMatch_ByRewardIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RewardAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateMatch_ByRewardId(
      input.rewardId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Platform.RewardAdmin.Match_ByRewardId" /* Match_ByRewardId */],
    mutationFn,
    ...options
  });
};
var useRewardAdminApi_DeleteRecord_ByRewardIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RewardAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRecord_ByRewardId(
      input.rewardId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Platform.RewardAdmin.Record_ByRewardId" /* Record_ByRewardId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/SectionAdmin.query.ts
import { useMutation as useMutation24, useQuery as useQuery26 } from "@tanstack/react-query";
var Key_SectionAdmin = /* @__PURE__ */ ((Key_SectionAdmin2) => {
  Key_SectionAdmin2["Sections"] = "Platform.SectionAdmin.Sections";
  Key_SectionAdmin2["Section"] = "Platform.SectionAdmin.Section";
  Key_SectionAdmin2["Section_BySectionId"] = "Platform.SectionAdmin.Section_BySectionId";
  Key_SectionAdmin2["SectionPurgeExpired"] = "Platform.SectionAdmin.SectionPurgeExpired";
  return Key_SectionAdmin2;
})(Key_SectionAdmin || {});
var useSectionAdminApi_GetSections = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SectionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSections(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Platform.SectionAdmin.Sections" /* Sections */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSectionAdminApi_CreateSectionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SectionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createSection(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Platform.SectionAdmin.Section" /* Section */],
    mutationFn,
    ...options
  });
};
var useSectionAdminApi_DeleteSection_BySectionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SectionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteSection_BySectionId(
      input.sectionId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Platform.SectionAdmin.Section_BySectionId" /* Section_BySectionId */],
    mutationFn,
    ...options
  });
};
var useSectionAdminApi_GetSection_BySectionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SectionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSection_BySectionId(
      input2.sectionId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Platform.SectionAdmin.Section_BySectionId" /* Section_BySectionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSectionAdminApi_UpdateSection_BySectionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SectionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateSection_BySectionId(
      input.sectionId,
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Platform.SectionAdmin.Section_BySectionId" /* Section_BySectionId */],
    mutationFn,
    ...options
  });
};
var useSectionAdminApi_DeleteSectionPurgeExpiredMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SectionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteSectionPurgeExpired(
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Platform.SectionAdmin.SectionPurgeExpired" /* SectionPurgeExpired */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ServicePluginConfigAdmin.query.ts
import { useMutation as useMutation25, useQuery as useQuery27 } from "@tanstack/react-query";
var Key_ServicePluginConfigAdmin = /* @__PURE__ */ ((Key_ServicePluginConfigAdmin2) => {
  Key_ServicePluginConfigAdmin2["ConfigServicePlugin"] = "Platform.ServicePluginConfigAdmin.ConfigServicePlugin";
  Key_ServicePluginConfigAdmin2["ConfigsServicePlugin"] = "Platform.ServicePluginConfigAdmin.ConfigsServicePlugin";
  Key_ServicePluginConfigAdmin2["CatalogPluginLootbox"] = "Platform.ServicePluginConfigAdmin.CatalogPluginLootbox";
  Key_ServicePluginConfigAdmin2["CatalogPluginsLootbox"] = "Platform.ServicePluginConfigAdmin.CatalogPluginsLootbox";
  Key_ServicePluginConfigAdmin2["CatalogPluginSection"] = "Platform.ServicePluginConfigAdmin.CatalogPluginSection";
  Key_ServicePluginConfigAdmin2["CatalogPluginsSection"] = "Platform.ServicePluginConfigAdmin.CatalogPluginsSection";
  Key_ServicePluginConfigAdmin2["RevocationPluginRevocation"] = "Platform.ServicePluginConfigAdmin.RevocationPluginRevocation";
  Key_ServicePluginConfigAdmin2["RevocationPluginsRevocation"] = "Platform.ServicePluginConfigAdmin.RevocationPluginsRevocation";
  Key_ServicePluginConfigAdmin2["CatalogPluginsLootboxGrpcInfo"] = "Platform.ServicePluginConfigAdmin.CatalogPluginsLootboxGrpcInfo";
  Key_ServicePluginConfigAdmin2["CatalogPluginLootboxCustomConfigCert"] = "Platform.ServicePluginConfigAdmin.CatalogPluginLootboxCustomConfigCert";
  Key_ServicePluginConfigAdmin2["CatalogPluginSectionCustomConfigCert"] = "Platform.ServicePluginConfigAdmin.CatalogPluginSectionCustomConfigCert";
  Key_ServicePluginConfigAdmin2["RevocationPluginRevocationRevocationCustomConfigCert"] = "Platform.ServicePluginConfigAdmin.RevocationPluginRevocationRevocationCustomConfigCert";
  return Key_ServicePluginConfigAdmin2;
})(Key_ServicePluginConfigAdmin || {});
var useServicePluginConfigAdminApi_DeleteConfigServicePluginMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteConfigServicePlugin();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.ConfigServicePlugin" /* ConfigServicePlugin */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_GetConfigsServicePlugin = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ServicePluginConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getConfigsServicePlugin();
    callback && callback(response);
    return response.data;
  };
  return useQuery27({
    queryKey: ["Platform.ServicePluginConfigAdmin.ConfigsServicePlugin" /* ConfigsServicePlugin */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateConfigServicePluginMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConfigServicePlugin(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.ConfigServicePlugin" /* ConfigServicePlugin */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_DeleteCatalogPluginLootboxMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteCatalogPluginLootbox();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginLootbox" /* CatalogPluginLootbox */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_GetCatalogPluginsLootbox = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ServicePluginConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCatalogPluginsLootbox();
    callback && callback(response);
    return response.data;
  };
  return useQuery27({
    queryKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginsLootbox" /* CatalogPluginsLootbox */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogPluginLootbox(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginLootbox" /* CatalogPluginLootbox */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_DeleteCatalogPluginSectionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteCatalogPluginSection();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginSection" /* CatalogPluginSection */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_GetCatalogPluginsSection = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ServicePluginConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCatalogPluginsSection();
    callback && callback(response);
    return response.data;
  };
  return useQuery27({
    queryKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginsSection" /* CatalogPluginsSection */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateCatalogPluginSectionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogPluginSection(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginSection" /* CatalogPluginSection */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_DeleteRevocationPluginRevocationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteRevocationPluginRevocation();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.RevocationPluginRevocation" /* RevocationPluginRevocation */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_GetRevocationPluginsRevocation = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ServicePluginConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRevocationPluginsRevocation();
    callback && callback(response);
    return response.data;
  };
  return useQuery27({
    queryKey: ["Platform.ServicePluginConfigAdmin.RevocationPluginsRevocation" /* RevocationPluginsRevocation */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevocationPluginRevocation(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.RevocationPluginRevocation" /* RevocationPluginRevocation */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_GetCatalogPluginsLootboxGrpcInfo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ServicePluginConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCatalogPluginsLootboxGrpcInfo(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery27({
    queryKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginsLootboxGrpcInfo" /* CatalogPluginsLootboxGrpcInfo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxCustomConfigCertMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogPluginLootboxCustomConfigCert(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginLootboxCustomConfigCert" /* CatalogPluginLootboxCustomConfigCert */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateCatalogPluginSectionCustomConfigCertMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCatalogPluginSectionCustomConfigCert(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.CatalogPluginSectionCustomConfigCert" /* CatalogPluginSectionCustomConfigCert */],
    mutationFn,
    ...options
  });
};
var useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationRevocationCustomConfigCertMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ServicePluginConfigAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevocationPluginRevocationRevocationCustomConfigCert(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Platform.ServicePluginConfigAdmin.RevocationPluginRevocationRevocationCustomConfigCert" /* RevocationPluginRevocationRevocationCustomConfigCert */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/SessionPlatformAdmin.query.ts
import { useMutation as useMutation26 } from "@tanstack/react-query";
var Key_SessionPlatformAdmin = /* @__PURE__ */ ((Key_SessionPlatformAdmin2) => {
  Key_SessionPlatformAdmin2["SessionXbl_ByUserId"] = "Platform.SessionPlatformAdmin.SessionXbl_ByUserId";
  return Key_SessionPlatformAdmin2;
})(Key_SessionPlatformAdmin || {});
var useSessionPlatformAdminApi_UpdateSessionXbl_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionPlatformAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSessionXbl_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation26({
    mutationKey: ["Platform.SessionPlatformAdmin.SessionXbl_ByUserId" /* SessionXbl_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/StoreAdmin.query.ts
import { useMutation as useMutation27, useQuery as useQuery28 } from "@tanstack/react-query";
var Key_StoreAdmin = /* @__PURE__ */ ((Key_StoreAdmin2) => {
  Key_StoreAdmin2["Stores"] = "Platform.StoreAdmin.Stores";
  Key_StoreAdmin2["Store"] = "Platform.StoreAdmin.Store";
  Key_StoreAdmin2["StoreImport"] = "Platform.StoreAdmin.StoreImport";
  Key_StoreAdmin2["CatalogConfigs"] = "Platform.StoreAdmin.CatalogConfigs";
  Key_StoreAdmin2["CatalogConfig"] = "Platform.StoreAdmin.CatalogConfig";
  Key_StoreAdmin2["Store_ByStoreId"] = "Platform.StoreAdmin.Store_ByStoreId";
  Key_StoreAdmin2["StorePublished"] = "Platform.StoreAdmin.StorePublished";
  Key_StoreAdmin2["StoresPublished"] = "Platform.StoreAdmin.StoresPublished";
  Key_StoreAdmin2["StoreImport_v2"] = "Platform.StoreAdmin.StoreImport_v2";
  Key_StoreAdmin2["StoreExportByCsv"] = "Platform.StoreAdmin.StoreExportByCsv";
  Key_StoreAdmin2["Clone_ByStoreId"] = "Platform.StoreAdmin.Clone_ByStoreId";
  Key_StoreAdmin2["Export_ByStoreId"] = "Platform.StoreAdmin.Export_ByStoreId";
  Key_StoreAdmin2["StoresPublishedBackup"] = "Platform.StoreAdmin.StoresPublishedBackup";
  Key_StoreAdmin2["StoresCatalogDefinition"] = "Platform.StoreAdmin.StoresCatalogDefinition";
  Key_StoreAdmin2["StorePublishedRollback"] = "Platform.StoreAdmin.StorePublishedRollback";
  Key_StoreAdmin2["Export_ByStoreId_v2"] = "Platform.StoreAdmin.Export_ByStoreId_v2";
  Key_StoreAdmin2["StoresDownloadCsvTemplates"] = "Platform.StoreAdmin.StoresDownloadCsvTemplates";
  Key_StoreAdmin2["ImportByCsv_ByStoreId"] = "Platform.StoreAdmin.ImportByCsv_ByStoreId";
  Key_StoreAdmin2["ImportHistory_ByStoreId"] = "Platform.StoreAdmin.ImportHistory_ByStoreId";
  return Key_StoreAdmin2;
})(Key_StoreAdmin || {});
var useStoreAdminApi_GetStores = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getStores();
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.Stores" /* Stores */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_CreateStoreMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createStore(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.Store" /* Store */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_UpdateStoreImportMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateStoreImport(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.StoreImport" /* StoreImport */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_GetCatalogConfigs = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCatalogConfigs();
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.CatalogConfigs" /* CatalogConfigs */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_UpdateCatalogConfigMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateCatalogConfig(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.CatalogConfig" /* CatalogConfig */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_DeleteStore_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteStore_ByStoreId(
      input.storeId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.Store_ByStoreId" /* Store_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_GetStore_ByStoreId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getStore_ByStoreId(
      input2.storeId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.Store_ByStoreId" /* Store_ByStoreId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_UpdateStore_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateStore_ByStoreId(
      input.storeId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.Store_ByStoreId" /* Store_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_DeleteStorePublishedMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteStorePublished();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.StorePublished" /* StorePublished */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_GetStoresPublished = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getStoresPublished();
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.StoresPublished" /* StoresPublished */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_UpdateStoreImportMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateStoreImport_v2(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.StoreImport_v2" /* StoreImport_v2 */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_CreateStoreExportByCsvMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createStoreExportByCsv(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.StoreExportByCsv" /* StoreExportByCsv */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_UpdateClone_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateClone_ByStoreId(
      input.storeId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.Clone_ByStoreId" /* Clone_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_GetExport_ByStoreId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getExport_ByStoreId(
      input2.storeId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.Export_ByStoreId" /* Export_ByStoreId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_GetStoresPublishedBackup = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getStoresPublishedBackup();
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.StoresPublishedBackup" /* StoresPublishedBackup */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_GetStoresCatalogDefinition = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getStoresCatalogDefinition(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.StoresCatalogDefinition" /* StoresCatalogDefinition */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_UpdateStorePublishedRollbackMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateStorePublishedRollback();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.StorePublishedRollback" /* StorePublishedRollback */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_CreateExport_ByStoreIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createExport_ByStoreId_v2(
      input.storeId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.Export_ByStoreId_v2" /* Export_ByStoreId_v2 */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_GetStoresDownloadCsvTemplates = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getStoresDownloadCsvTemplates();
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.StoresDownloadCsvTemplates" /* StoresDownloadCsvTemplates */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useStoreAdminApi_CreateImportByCsv_ByStoreIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await StoreAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createImportByCsv_ByStoreId(
      input.storeId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation27({
    mutationKey: ["Platform.StoreAdmin.ImportByCsv_ByStoreId" /* ImportByCsv_ByStoreId */],
    mutationFn,
    ...options
  });
};
var useStoreAdminApi_GetImportHistory_ByStoreId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getImportHistory_ByStoreId(
      input2.storeId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Platform.StoreAdmin.ImportHistory_ByStoreId" /* ImportHistory_ByStoreId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/SubscriptionAdmin.query.ts
import { useMutation as useMutation28, useQuery as useQuery29 } from "@tanstack/react-query";
var Key_SubscriptionAdmin = /* @__PURE__ */ ((Key_SubscriptionAdmin2) => {
  Key_SubscriptionAdmin2["Subscriptions"] = "Platform.SubscriptionAdmin.Subscriptions";
  Key_SubscriptionAdmin2["Subscriptions_ByUserId"] = "Platform.SubscriptionAdmin.Subscriptions_ByUserId";
  Key_SubscriptionAdmin2["SubscriptionsActivities_ByUserId"] = "Platform.SubscriptionAdmin.SubscriptionsActivities_ByUserId";
  Key_SubscriptionAdmin2["Recurring_BySubscriptionId"] = "Platform.SubscriptionAdmin.Recurring_BySubscriptionId";
  Key_SubscriptionAdmin2["Subscription_ByUserId_BySubscriptionId"] = "Platform.SubscriptionAdmin.Subscription_ByUserId_BySubscriptionId";
  Key_SubscriptionAdmin2["SubscriptionPlatformSubscribe_ByUserId"] = "Platform.SubscriptionAdmin.SubscriptionPlatformSubscribe_ByUserId";
  Key_SubscriptionAdmin2["SubscriptionsSubscribableByItemId_ByUserId"] = "Platform.SubscriptionAdmin.SubscriptionsSubscribableByItemId_ByUserId";
  Key_SubscriptionAdmin2["Grant_ByUserId_BySubscriptionId"] = "Platform.SubscriptionAdmin.Grant_ByUserId_BySubscriptionId";
  Key_SubscriptionAdmin2["Cancel_ByUserId_BySubscriptionId"] = "Platform.SubscriptionAdmin.Cancel_ByUserId_BySubscriptionId";
  Key_SubscriptionAdmin2["History_ByUserId_BySubscriptionId"] = "Platform.SubscriptionAdmin.History_ByUserId_BySubscriptionId";
  Key_SubscriptionAdmin2["Notification_ByUserId_BySubscriptionId"] = "Platform.SubscriptionAdmin.Notification_ByUserId_BySubscriptionId";
  return Key_SubscriptionAdmin2;
})(Key_SubscriptionAdmin || {});
var useSubscriptionAdminApi_GetSubscriptions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSubscriptions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Platform.SubscriptionAdmin.Subscriptions" /* Subscriptions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionAdminApi_GetSubscriptions_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSubscriptions_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Platform.SubscriptionAdmin.Subscriptions_ByUserId" /* Subscriptions_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionAdminApi_GetSubscriptionsActivities_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSubscriptionsActivities_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Platform.SubscriptionAdmin.SubscriptionsActivities_ByUserId" /* SubscriptionsActivities_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionAdminApi_UpdateRecurring_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRecurring_BySubscriptionId(input.subscriptionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation28({
    mutationKey: ["Platform.SubscriptionAdmin.Recurring_BySubscriptionId" /* Recurring_BySubscriptionId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionAdminApi_DeleteSubscription_ByUserId_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteSubscription_ByUserId_BySubscriptionId(input.userId, input.subscriptionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation28({
    mutationKey: ["Platform.SubscriptionAdmin.Subscription_ByUserId_BySubscriptionId" /* Subscription_ByUserId_BySubscriptionId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionAdminApi_GetSubscription_ByUserId_BySubscriptionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSubscription_ByUserId_BySubscriptionId(input2.userId, input2.subscriptionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Platform.SubscriptionAdmin.Subscription_ByUserId_BySubscriptionId" /* Subscription_ByUserId_BySubscriptionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionAdminApi_CreateSubscriptionPlatformSubscribe_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createSubscriptionPlatformSubscribe_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation28({
    mutationKey: ["Platform.SubscriptionAdmin.SubscriptionPlatformSubscribe_ByUserId" /* SubscriptionPlatformSubscribe_ByUserId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionAdminApi_GetSubscriptionsSubscribableByItemId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSubscriptionsSubscribableByItemId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Platform.SubscriptionAdmin.SubscriptionsSubscribableByItemId_ByUserId" /* SubscriptionsSubscribableByItemId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionAdminApi_UpdateGrant_ByUserId_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateGrant_ByUserId_BySubscriptionId(input.userId, input.subscriptionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation28({
    mutationKey: ["Platform.SubscriptionAdmin.Grant_ByUserId_BySubscriptionId" /* Grant_ByUserId_BySubscriptionId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionAdminApi_UpdateCancel_ByUserId_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCancel_ByUserId_BySubscriptionId(input.userId, input.subscriptionId, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation28({
    mutationKey: ["Platform.SubscriptionAdmin.Cancel_ByUserId_BySubscriptionId" /* Cancel_ByUserId_BySubscriptionId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionAdminApi_GetHistory_ByUserId_BySubscriptionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistory_ByUserId_BySubscriptionId(input2.userId, input2.subscriptionId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Platform.SubscriptionAdmin.History_ByUserId_BySubscriptionId" /* History_ByUserId_BySubscriptionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionAdminApi_CreateNotification_ByUserId_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createNotification_ByUserId_BySubscriptionId(input.userId, input.subscriptionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation28({
    mutationKey: ["Platform.SubscriptionAdmin.Notification_ByUserId_BySubscriptionId" /* Notification_ByUserId_BySubscriptionId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/TicketAdmin.query.ts
import { useMutation as useMutation29, useQuery as useQuery30 } from "@tanstack/react-query";
var Key_TicketAdmin = /* @__PURE__ */ ((Key_TicketAdmin2) => {
  Key_TicketAdmin2["Ticket_ByBoothName"] = "Platform.TicketAdmin.Ticket_ByBoothName";
  Key_TicketAdmin2["Id_ByBoothName"] = "Platform.TicketAdmin.Id_ByBoothName";
  Key_TicketAdmin2["Decrement_ByBoothName"] = "Platform.TicketAdmin.Decrement_ByBoothName";
  Key_TicketAdmin2["Increment_ByBoothName"] = "Platform.TicketAdmin.Increment_ByBoothName";
  Key_TicketAdmin2["Ticket_ByUserId_ByBoothName"] = "Platform.TicketAdmin.Ticket_ByUserId_ByBoothName";
  return Key_TicketAdmin2;
})(Key_TicketAdmin || {});
var useTicketAdminApi_GetTicket_ByBoothName = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await TicketAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTicket_ByBoothName(
      input2.boothName
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Platform.TicketAdmin.Ticket_ByBoothName" /* Ticket_ByBoothName */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useTicketAdminApi_GetId_ByBoothName = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await TicketAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getId_ByBoothName(
      input2.boothName
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Platform.TicketAdmin.Id_ByBoothName" /* Id_ByBoothName */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useTicketAdminApi_UpdateDecrement_ByBoothNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TicketAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDecrement_ByBoothName(input.boothName, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation29({
    mutationKey: ["Platform.TicketAdmin.Decrement_ByBoothName" /* Decrement_ByBoothName */],
    mutationFn,
    ...options
  });
};
var useTicketAdminApi_UpdateIncrement_ByBoothNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TicketAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateIncrement_ByBoothName(input.boothName, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation29({
    mutationKey: ["Platform.TicketAdmin.Increment_ByBoothName" /* Increment_ByBoothName */],
    mutationFn,
    ...options
  });
};
var useTicketAdminApi_CreateTicket_ByUserId_ByBoothNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TicketAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createTicket_ByUserId_ByBoothName(input.userId, input.boothName, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation29({
    mutationKey: ["Platform.TicketAdmin.Ticket_ByUserId_ByBoothName" /* Ticket_ByUserId_ByBoothName */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/TradeActionAdmin.query.ts
import { useMutation as useMutation30, useQuery as useQuery31 } from "@tanstack/react-query";
var Key_TradeActionAdmin = /* @__PURE__ */ ((Key_TradeActionAdmin2) => {
  Key_TradeActionAdmin2["TradeCommit"] = "Platform.TradeActionAdmin.TradeCommit";
  Key_TradeActionAdmin2["Trade_ByTransactionId"] = "Platform.TradeActionAdmin.Trade_ByTransactionId";
  Key_TradeActionAdmin2["TradeHistoryByCriteria"] = "Platform.TradeActionAdmin.TradeHistoryByCriteria";
  return Key_TradeActionAdmin2;
})(Key_TradeActionAdmin || {});
var useTradeActionAdminApi_CreateTradeCommitMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await TradeActionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createTradeCommit(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation30({
    mutationKey: ["Platform.TradeActionAdmin.TradeCommit" /* TradeCommit */],
    mutationFn,
    ...options
  });
};
var useTradeActionAdminApi_GetTrade_ByTransactionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await TradeActionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTrade_ByTransactionId(input2.transactionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery31({
    queryKey: ["Platform.TradeActionAdmin.Trade_ByTransactionId" /* Trade_ByTransactionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useTradeActionAdminApi_GetTradeHistoryByCriteria = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await TradeActionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTradeHistoryByCriteria(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery31({
    queryKey: ["Platform.TradeActionAdmin.TradeHistoryByCriteria" /* TradeHistoryByCriteria */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/ViewAdmin.query.ts
import { useMutation as useMutation31, useQuery as useQuery32 } from "@tanstack/react-query";
var Key_ViewAdmin = /* @__PURE__ */ ((Key_ViewAdmin2) => {
  Key_ViewAdmin2["Views"] = "Platform.ViewAdmin.Views";
  Key_ViewAdmin2["View"] = "Platform.ViewAdmin.View";
  Key_ViewAdmin2["View_ByViewId"] = "Platform.ViewAdmin.View_ByViewId";
  return Key_ViewAdmin2;
})(Key_ViewAdmin || {});
var useViewAdminApi_GetViews = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ViewAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getViews(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery32({
    queryKey: ["Platform.ViewAdmin.Views" /* Views */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useViewAdminApi_CreateViewMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ViewAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createView(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation31({
    mutationKey: ["Platform.ViewAdmin.View" /* View */],
    mutationFn,
    ...options
  });
};
var useViewAdminApi_DeleteView_ByViewIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ViewAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteView_ByViewId(
      input.viewId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation31({
    mutationKey: ["Platform.ViewAdmin.View_ByViewId" /* View_ByViewId */],
    mutationFn,
    ...options
  });
};
var useViewAdminApi_GetView_ByViewId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ViewAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getView_ByViewId(
      input2.viewId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery32({
    queryKey: ["Platform.ViewAdmin.View_ByViewId" /* View_ByViewId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useViewAdminApi_UpdateView_ByViewIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ViewAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateView_ByViewId(
      input.viewId,
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation31({
    mutationKey: ["Platform.ViewAdmin.View_ByViewId" /* View_ByViewId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/WalletAdmin.query.ts
import { useMutation as useMutation32, useQuery as useQuery33 } from "@tanstack/react-query";
var Key_WalletAdmin = /* @__PURE__ */ ((Key_WalletAdmin2) => {
  Key_WalletAdmin2["Wallets"] = "Platform.WalletAdmin.Wallets";
  Key_WalletAdmin2["WalletDebit"] = "Platform.WalletAdmin.WalletDebit";
  Key_WalletAdmin2["WalletCredit"] = "Platform.WalletAdmin.WalletCredit";
  Key_WalletAdmin2["Wallet_ByWalletId"] = "Platform.WalletAdmin.Wallet_ByWalletId";
  Key_WalletAdmin2["Wallet_ByUserId_ByWalletId"] = "Platform.WalletAdmin.Wallet_ByUserId_ByWalletId";
  Key_WalletAdmin2["WalletConfig_ByPlatform"] = "Platform.WalletAdmin.WalletConfig_ByPlatform";
  Key_WalletAdmin2["Debit_ByUserId_ByWalletId"] = "Platform.WalletAdmin.Debit_ByUserId_ByWalletId";
  Key_WalletAdmin2["WalletConfigReset_ByPlatform"] = "Platform.WalletAdmin.WalletConfigReset_ByPlatform";
  Key_WalletAdmin2["Enable_ByUserId_ByWalletId"] = "Platform.WalletAdmin.Enable_ByUserId_ByWalletId";
  Key_WalletAdmin2["Disable_ByUserId_ByWalletId"] = "Platform.WalletAdmin.Disable_ByUserId_ByWalletId";
  Key_WalletAdmin2["WalletsCurrenciesSummary_ByUserId"] = "Platform.WalletAdmin.WalletsCurrenciesSummary_ByUserId";
  Key_WalletAdmin2["Check_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.Check_ByUserId_ByCurrencyCode";
  Key_WalletAdmin2["Credit_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.Credit_ByUserId_ByCurrencyCode";
  Key_WalletAdmin2["Payment_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.Payment_ByUserId_ByCurrencyCode";
  Key_WalletAdmin2["Transactions_ByUserId_ByWalletId"] = "Platform.WalletAdmin.Transactions_ByUserId_ByWalletId";
  Key_WalletAdmin2["BalanceCheck_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.BalanceCheck_ByUserId_ByCurrencyCode";
  Key_WalletAdmin2["DebitWallet_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.DebitWallet_ByUserId_ByCurrencyCode";
  Key_WalletAdmin2["DebitByWalletPlatform_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.DebitByWalletPlatform_ByUserId_ByCurrencyCode";
  Key_WalletAdmin2["TransactionsWallets_ByUserId_ByCurrencyCode"] = "Platform.WalletAdmin.TransactionsWallets_ByUserId_ByCurrencyCode";
  return Key_WalletAdmin2;
})(Key_WalletAdmin || {});
var useWalletAdminApi_GetWallets = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getWallets(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.Wallets" /* Wallets */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_CreateWalletDebitMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createWalletDebit(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.WalletDebit" /* WalletDebit */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_CreateWalletCreditMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createWalletCredit(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.WalletCredit" /* WalletCredit */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_GetWallet_ByWalletId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getWallet_ByWalletId(
      input2.walletId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.Wallet_ByWalletId" /* Wallet_ByWalletId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_GetWallet_ByUserId_ByWalletId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getWallet_ByUserId_ByWalletId(input2.userId, input2.walletId);
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.Wallet_ByUserId_ByWalletId" /* Wallet_ByUserId_ByWalletId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_GetWalletConfig_ByPlatform = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getWalletConfig_ByPlatform(
      input2.platform
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.WalletConfig_ByPlatform" /* WalletConfig_ByPlatform */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_UpdateWalletConfig_ByPlatformMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateWalletConfig_ByPlatform(input.platform, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.WalletConfig_ByPlatform" /* WalletConfig_ByPlatform */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdateDebit_ByUserId_ByWalletIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDebit_ByUserId_ByWalletId(input.userId, input.walletId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.Debit_ByUserId_ByWalletId" /* Debit_ByUserId_ByWalletId */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdateWalletConfigReset_ByPlatformMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateWalletConfigReset_ByPlatform(input.platform);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.WalletConfigReset_ByPlatform" /* WalletConfigReset_ByPlatform */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdateEnable_ByUserId_ByWalletIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateEnable_ByUserId_ByWalletId(input.userId, input.walletId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.Enable_ByUserId_ByWalletId" /* Enable_ByUserId_ByWalletId */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdateDisable_ByUserId_ByWalletIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDisable_ByUserId_ByWalletId(input.userId, input.walletId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.Disable_ByUserId_ByWalletId" /* Disable_ByUserId_ByWalletId */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_GetWalletsCurrenciesSummary_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getWalletsCurrenciesSummary_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.WalletsCurrenciesSummary_ByUserId" /* WalletsCurrenciesSummary_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_GetCheck_ByUserId_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCheck_ByUserId_ByCurrencyCode(input2.userId, input2.currencyCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.Check_ByUserId_ByCurrencyCode" /* Check_ByUserId_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_UpdateCredit_ByUserId_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCredit_ByUserId_ByCurrencyCode(input.userId, input.currencyCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.Credit_ByUserId_ByCurrencyCode" /* Credit_ByUserId_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdatePayment_ByUserId_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePayment_ByUserId_ByCurrencyCode(input.userId, input.currencyCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.Payment_ByUserId_ByCurrencyCode" /* Payment_ByUserId_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_GetTransactions_ByUserId_ByWalletId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTransactions_ByUserId_ByWalletId(input2.userId, input2.walletId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.Transactions_ByUserId_ByWalletId" /* Transactions_ByUserId_ByWalletId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletAdminApi_CreateBalanceCheck_ByUserId_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createBalanceCheck_ByUserId_ByCurrencyCode(input.userId, input.currencyCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.BalanceCheck_ByUserId_ByCurrencyCode" /* BalanceCheck_ByUserId_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdateDebitWallet_ByUserId_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDebitWallet_ByUserId_ByCurrencyCode(input.userId, input.currencyCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.DebitWallet_ByUserId_ByCurrencyCode" /* DebitWallet_ByUserId_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_UpdateDebitByWalletPlatform_ByUserId_ByCurrencyCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await WalletAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDebitByWalletPlatform_ByUserId_ByCurrencyCode(input.userId, input.currencyCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation32({
    mutationKey: ["Platform.WalletAdmin.DebitByWalletPlatform_ByUserId_ByCurrencyCode" /* DebitByWalletPlatform_ByUserId_ByCurrencyCode */],
    mutationFn,
    ...options
  });
};
var useWalletAdminApi_GetTransactionsWallets_ByUserId_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTransactionsWallets_ByUserId_ByCurrencyCode(input2.userId, input2.currencyCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery33({
    queryKey: ["Platform.WalletAdmin.TransactionsWallets_ByUserId_ByCurrencyCode" /* TransactionsWallets_ByUserId_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Category.query.ts
import { useQuery as useQuery34 } from "@tanstack/react-query";
var Key_Category = /* @__PURE__ */ ((Key_Category2) => {
  Key_Category2["Categories"] = "Platform.Category.Categories";
  Key_Category2["CategoriesDownload"] = "Platform.Category.CategoriesDownload";
  Key_Category2["Category_ByCategoryPath"] = "Platform.Category.Category_ByCategoryPath";
  Key_Category2["Children_ByCategoryPath"] = "Platform.Category.Children_ByCategoryPath";
  Key_Category2["Descendants_ByCategoryPath"] = "Platform.Category.Descendants_ByCategoryPath";
  return Key_Category2;
})(Key_Category || {});
var useCategoryApi_GetCategories = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCategories(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery34({
    queryKey: ["Platform.Category.Categories" /* Categories */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryApi_GetCategoriesDownload = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCategoriesDownload(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery34({
    queryKey: ["Platform.Category.CategoriesDownload" /* CategoriesDownload */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryApi_GetCategory_ByCategoryPath = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCategory_ByCategoryPath(
      input2.categoryPath,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery34({
    queryKey: ["Platform.Category.Category_ByCategoryPath" /* Category_ByCategoryPath */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryApi_GetChildren_ByCategoryPath = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getChildren_ByCategoryPath(
      input2.categoryPath,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery34({
    queryKey: ["Platform.Category.Children_ByCategoryPath" /* Children_ByCategoryPath */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCategoryApi_GetDescendants_ByCategoryPath = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CategoryApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDescendants_ByCategoryPath(
      input2.categoryPath,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery34({
    queryKey: ["Platform.Category.Descendants_ByCategoryPath" /* Descendants_ByCategoryPath */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Currency.query.ts
import { useQuery as useQuery35 } from "@tanstack/react-query";
var Key_Currency = /* @__PURE__ */ ((Key_Currency2) => {
  Key_Currency2["Currencies"] = "Platform.Currency.Currencies";
  return Key_Currency2;
})(Key_Currency || {});
var useCurrencyApi_GetCurrencies = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CurrencyApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCurrencies(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery35({
    queryKey: ["Platform.Currency.Currencies" /* Currencies */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Dlc.query.ts
import { useMutation as useMutation33, useQuery as useQuery36 } from "@tanstack/react-query";
var Key_Dlc = /* @__PURE__ */ ((Key_Dlc2) => {
  Key_Dlc2["UsersMeDlcContent"] = "Platform.Dlc.UsersMeDlcContent";
  Key_Dlc2["DlcRewardsDurableMap"] = "Platform.Dlc.DlcRewardsDurableMap";
  Key_Dlc2["DlcPsnSync_ByUserId"] = "Platform.Dlc.DlcPsnSync_ByUserId";
  Key_Dlc2["DlcXblSync_ByUserId"] = "Platform.Dlc.DlcXblSync_ByUserId";
  Key_Dlc2["DlcSteamSync_ByUserId"] = "Platform.Dlc.DlcSteamSync_ByUserId";
  Key_Dlc2["DlcOculuSync_ByUserId"] = "Platform.Dlc.DlcOculuSync_ByUserId";
  Key_Dlc2["DlcEpicgameSync_ByUserId"] = "Platform.Dlc.DlcEpicgameSync_ByUserId";
  Key_Dlc2["DlcPsnSyncMultiServiceLabel_ByUserId"] = "Platform.Dlc.DlcPsnSyncMultiServiceLabel_ByUserId";
  return Key_Dlc2;
})(Key_Dlc || {});
var useDlcApi_GetUsersMeDlcContent = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DlcApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeDlcContent(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery36({
    queryKey: ["Platform.Dlc.UsersMeDlcContent" /* UsersMeDlcContent */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDlcApi_GetDlcRewardsDurableMap = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DlcApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDlcRewardsDurableMap(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery36({
    queryKey: ["Platform.Dlc.DlcRewardsDurableMap" /* DlcRewardsDurableMap */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDlcApi_UpdateDlcPsnSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcPsnSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation33({
    mutationKey: ["Platform.Dlc.DlcPsnSync_ByUserId" /* DlcPsnSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useDlcApi_UpdateDlcXblSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcXblSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation33({
    mutationKey: ["Platform.Dlc.DlcXblSync_ByUserId" /* DlcXblSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useDlcApi_UpdateDlcSteamSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcSteamSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation33({
    mutationKey: ["Platform.Dlc.DlcSteamSync_ByUserId" /* DlcSteamSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useDlcApi_UpdateDlcOculuSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcOculuSync_ByUserId(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation33({
    mutationKey: ["Platform.Dlc.DlcOculuSync_ByUserId" /* DlcOculuSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useDlcApi_UpdateDlcEpicgameSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDlcEpicgameSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation33({
    mutationKey: ["Platform.Dlc.DlcEpicgameSync_ByUserId" /* DlcEpicgameSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useDlcApi_UpdateDlcPsnSyncMultiServiceLabel_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DlcApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDlcPsnSyncMultiServiceLabel_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation33({
    mutationKey: ["Platform.Dlc.DlcPsnSyncMultiServiceLabel_ByUserId" /* DlcPsnSyncMultiServiceLabel_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Entitlement.query.ts
import { useMutation as useMutation34, useQuery as useQuery37 } from "@tanstack/react-query";
var Key_Entitlement = /* @__PURE__ */ ((Key_Entitlement2) => {
  Key_Entitlement2["Entitlements_ByUserId"] = "Platform.Entitlement.Entitlements_ByUserId";
  Key_Entitlement2["EntitlementsByIds_ByUserId"] = "Platform.Entitlement.EntitlementsByIds_ByUserId";
  Key_Entitlement2["EntitlementsBySku_ByUserId"] = "Platform.Entitlement.EntitlementsBySku_ByUserId";
  Key_Entitlement2["EntitlementsByAppId_ByUserId"] = "Platform.Entitlement.EntitlementsByAppId_ByUserId";
  Key_Entitlement2["EntitlementsHistory_ByUserId"] = "Platform.Entitlement.EntitlementsHistory_ByUserId";
  Key_Entitlement2["UsersMeEntitlementsOwnershipAny"] = "Platform.Entitlement.UsersMeEntitlementsOwnershipAny";
  Key_Entitlement2["EntitlementsByItemId_ByUserId"] = "Platform.Entitlement.EntitlementsByItemId_ByUserId";
  Key_Entitlement2["UsersMeEntitlementsOwnershipToken"] = "Platform.Entitlement.UsersMeEntitlementsOwnershipToken";
  Key_Entitlement2["EntitlementsByAppType_ByUserId"] = "Platform.Entitlement.EntitlementsByAppType_ByUserId";
  Key_Entitlement2["UsersMeEntitlementsOwnershipBySku"] = "Platform.Entitlement.UsersMeEntitlementsOwnershipBySku";
  Key_Entitlement2["UsersMeEntitlementsOwnershipByAppId"] = "Platform.Entitlement.UsersMeEntitlementsOwnershipByAppId";
  Key_Entitlement2["UsersMeEntitlementsOwnershipByItemId"] = "Platform.Entitlement.UsersMeEntitlementsOwnershipByItemId";
  Key_Entitlement2["EntitlementsOwnershipAny_ByUserId"] = "Platform.Entitlement.EntitlementsOwnershipAny_ByUserId";
  Key_Entitlement2["Entitlement_ByUserId_ByEntitlementId"] = "Platform.Entitlement.Entitlement_ByUserId_ByEntitlementId";
  Key_Entitlement2["EntitlementsOwnershipBySku_ByUserId"] = "Platform.Entitlement.EntitlementsOwnershipBySku_ByUserId";
  Key_Entitlement2["EntitlementsOwnershipByAppId_ByUserId"] = "Platform.Entitlement.EntitlementsOwnershipByAppId_ByUserId";
  Key_Entitlement2["EntitlementsOwnershipByItemId_ByUserId"] = "Platform.Entitlement.EntitlementsOwnershipByItemId_ByUserId";
  Key_Entitlement2["EntitlementsOwnershipByItemIds_ByUserId"] = "Platform.Entitlement.EntitlementsOwnershipByItemIds_ByUserId";
  Key_Entitlement2["Sell_ByUserId_ByEntitlementId"] = "Platform.Entitlement.Sell_ByUserId_ByEntitlementId";
  Key_Entitlement2["Split_ByUserId_ByEntitlementId"] = "Platform.Entitlement.Split_ByUserId_ByEntitlementId";
  Key_Entitlement2["Transfer_ByUserId_ByEntitlementId"] = "Platform.Entitlement.Transfer_ByUserId_ByEntitlementId";
  Key_Entitlement2["Decrement_ByUserId_ByEntitlementId"] = "Platform.Entitlement.Decrement_ByUserId_ByEntitlementId";
  return Key_Entitlement2;
})(Key_Entitlement || {});
var useEntitlementApi_GetEntitlements_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getEntitlements_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.Entitlements_ByUserId" /* Entitlements_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsByIds_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByIds_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsByIds_ByUserId" /* EntitlementsByIds_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsBySku_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsBySku_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsBySku_ByUserId" /* EntitlementsBySku_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsByAppId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByAppId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsByAppId_ByUserId" /* EntitlementsByAppId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsHistory_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsHistory_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsHistory_ByUserId" /* EntitlementsHistory_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetUsersMeEntitlementsOwnershipAny = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeEntitlementsOwnershipAny(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.UsersMeEntitlementsOwnershipAny" /* UsersMeEntitlementsOwnershipAny */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsByItemId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByItemId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsByItemId_ByUserId" /* EntitlementsByItemId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetUsersMeEntitlementsOwnershipToken = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeEntitlementsOwnershipToken(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.UsersMeEntitlementsOwnershipToken" /* UsersMeEntitlementsOwnershipToken */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsByAppType_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsByAppType_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsByAppType_ByUserId" /* EntitlementsByAppType_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetUsersMeEntitlementsOwnershipBySku = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeEntitlementsOwnershipBySku(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.UsersMeEntitlementsOwnershipBySku" /* UsersMeEntitlementsOwnershipBySku */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetUsersMeEntitlementsOwnershipByAppId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeEntitlementsOwnershipByAppId(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.UsersMeEntitlementsOwnershipByAppId" /* UsersMeEntitlementsOwnershipByAppId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetUsersMeEntitlementsOwnershipByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeEntitlementsOwnershipByItemId(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.UsersMeEntitlementsOwnershipByItemId" /* UsersMeEntitlementsOwnershipByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsOwnershipAny_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipAny_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsOwnershipAny_ByUserId" /* EntitlementsOwnershipAny_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlement_ByUserId_ByEntitlementId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlement_ByUserId_ByEntitlementId(input2.userId, input2.entitlementId);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.Entitlement_ByUserId_ByEntitlementId" /* Entitlement_ByUserId_ByEntitlementId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsOwnershipBySku_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipBySku_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsOwnershipBySku_ByUserId" /* EntitlementsOwnershipBySku_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsOwnershipByAppId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipByAppId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsOwnershipByAppId_ByUserId" /* EntitlementsOwnershipByAppId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsOwnershipByItemId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipByItemId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsOwnershipByItemId_ByUserId" /* EntitlementsOwnershipByItemId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_GetEntitlementsOwnershipByItemIds_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EntitlementApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEntitlementsOwnershipByItemIds_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery37({
    queryKey: ["Platform.Entitlement.EntitlementsOwnershipByItemIds_ByUserId" /* EntitlementsOwnershipByItemIds_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useEntitlementApi_UpdateSell_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSell_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation34({
    mutationKey: ["Platform.Entitlement.Sell_ByUserId_ByEntitlementId" /* Sell_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementApi_UpdateSplit_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSplit_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation34({
    mutationKey: ["Platform.Entitlement.Split_ByUserId_ByEntitlementId" /* Split_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementApi_UpdateTransfer_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateTransfer_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation34({
    mutationKey: ["Platform.Entitlement.Transfer_ByUserId_ByEntitlementId" /* Transfer_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};
var useEntitlementApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await EntitlementApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDecrement_ByUserId_ByEntitlementId(input.userId, input.entitlementId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation34({
    mutationKey: ["Platform.Entitlement.Decrement_ByUserId_ByEntitlementId" /* Decrement_ByUserId_ByEntitlementId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Fulfillment.query.ts
import { useMutation as useMutation35 } from "@tanstack/react-query";
var Key_Fulfillment = /* @__PURE__ */ ((Key_Fulfillment2) => {
  Key_Fulfillment2["FulfillmentCode_ByUserId"] = "Platform.Fulfillment.FulfillmentCode_ByUserId";
  return Key_Fulfillment2;
})(Key_Fulfillment || {});
var useFulfillmentApi_CreateFulfillmentCode_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FulfillmentApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createFulfillmentCode_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation35({
    mutationKey: ["Platform.Fulfillment.FulfillmentCode_ByUserId" /* FulfillmentCode_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Iap.query.ts
import { useMutation as useMutation36, useQuery as useQuery38 } from "@tanstack/react-query";
var Key_Iap = /* @__PURE__ */ ((Key_Iap2) => {
  Key_Iap2["IapItemMapping"] = "Platform.Iap.IapItemMapping";
  Key_Iap2["IapAppleConfigVersion"] = "Platform.Iap.IapAppleConfigVersion";
  Key_Iap2["UserMeIapTwitchSync"] = "Platform.Iap.UserMeIapTwitchSync";
  Key_Iap2["IapPsnSync_ByUserId"] = "Platform.Iap.IapPsnSync_ByUserId";
  Key_Iap2["IapXblSync_ByUserId"] = "Platform.Iap.IapXblSync_ByUserId";
  Key_Iap2["IapSteamSync_ByUserId"] = "Platform.Iap.IapSteamSync_ByUserId";
  Key_Iap2["IapOculuSync_ByUserId"] = "Platform.Iap.IapOculuSync_ByUserId";
  Key_Iap2["IapTwitchSync_ByUserId"] = "Platform.Iap.IapTwitchSync_ByUserId";
  Key_Iap2["IapAppleReceipt_ByUserId"] = "Platform.Iap.IapAppleReceipt_ByUserId";
  Key_Iap2["IapEpicgameSync_ByUserId"] = "Platform.Iap.IapEpicgameSync_ByUserId";
  Key_Iap2["IapGoogleReceipt_ByUserId"] = "Platform.Iap.IapGoogleReceipt_ByUserId";
  Key_Iap2["IapAppleReceipt_ByUserId_v2"] = "Platform.Iap.IapAppleReceipt_ByUserId_v2";
  Key_Iap2["IapPsnSyncMultiServiceLabel_ByUserId"] = "Platform.Iap.IapPsnSyncMultiServiceLabel_ByUserId";
  return Key_Iap2;
})(Key_Iap || {});
var useIapApi_GetIapItemMapping = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapItemMapping(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery38({
    queryKey: ["Platform.Iap.IapItemMapping" /* IapItemMapping */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapApi_GetIapAppleConfigVersion = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getIapAppleConfigVersion();
    callback && callback(response);
    return response.data;
  };
  return useQuery38({
    queryKey: ["Platform.Iap.IapAppleConfigVersion" /* IapAppleConfigVersion */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useIapApi_UpdateUserMeIapTwitchSyncMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserMeIapTwitchSync(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.UserMeIapTwitchSync" /* UserMeIapTwitchSync */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapPsnSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapPsnSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapPsnSync_ByUserId" /* IapPsnSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapXblSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapXblSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapXblSync_ByUserId" /* IapXblSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapSteamSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapSteamSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapSteamSync_ByUserId" /* IapSteamSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapOculuSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapOculuSync_ByUserId(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapOculuSync_ByUserId" /* IapOculuSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapTwitchSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapTwitchSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapTwitchSync_ByUserId" /* IapTwitchSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapAppleReceipt_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapAppleReceipt_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapAppleReceipt_ByUserId" /* IapAppleReceipt_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapEpicgameSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapEpicgameSync_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapEpicgameSync_ByUserId" /* IapEpicgameSync_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapGoogleReceipt_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapGoogleReceipt_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapGoogleReceipt_ByUserId" /* IapGoogleReceipt_ByUserId */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapAppleReceipt_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateIapAppleReceipt_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapAppleReceipt_ByUserId_v2" /* IapAppleReceipt_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useIapApi_UpdateIapPsnSyncMultiServiceLabel_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await IapApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateIapPsnSyncMultiServiceLabel_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation36({
    mutationKey: ["Platform.Iap.IapPsnSyncMultiServiceLabel_ByUserId" /* IapPsnSyncMultiServiceLabel_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/IapSubscription.query.ts
import { useQuery as useQuery39 } from "@tanstack/react-query";
var Key_IapSubscription = /* @__PURE__ */ ((Key_IapSubscription2) => {
  Key_IapSubscription2["IapSubscriptionPlatform_ByUserId_ByPlatform"] = "Platform.IapSubscription.IapSubscriptionPlatform_ByUserId_ByPlatform";
  return Key_IapSubscription2;
})(Key_IapSubscription || {});
var useIapSubscriptionApi_GetIapSubscriptionPlatform_ByUserId_ByPlatform = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await IapSubscriptionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getIapSubscriptionPlatform_ByUserId_ByPlatform(input2.userId, input2.platform, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery39({
    queryKey: ["Platform.IapSubscription.IapSubscriptionPlatform_ByUserId_ByPlatform" /* IapSubscriptionPlatform_ByUserId_ByPlatform */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Item.query.ts
import { useMutation as useMutation37, useQuery as useQuery40 } from "@tanstack/react-query";
var Key_Item = /* @__PURE__ */ ((Key_Item2) => {
  Key_Item2["ItemsBySku"] = "Platform.Item.ItemsBySku";
  Key_Item2["ItemsSearch"] = "Platform.Item.ItemsSearch";
  Key_Item2["ItemsByAppId"] = "Platform.Item.ItemsByAppId";
  Key_Item2["ItemsByCriteria"] = "Platform.Item.ItemsByCriteria";
  Key_Item2["ItemsLocaleByIds"] = "Platform.Item.ItemsLocaleByIds";
  Key_Item2["ItemsEstimatedPrice"] = "Platform.Item.ItemsEstimatedPrice";
  Key_Item2["Locale_ByItemId"] = "Platform.Item.Locale_ByItemId";
  Key_Item2["Dynamic_ByItemId"] = "Platform.Item.Dynamic_ByItemId";
  Key_Item2["AppLocale_ByItemId"] = "Platform.Item.AppLocale_ByItemId";
  Key_Item2["ItemPurchaseConditionValidate"] = "Platform.Item.ItemPurchaseConditionValidate";
  return Key_Item2;
})(Key_Item || {});
var useItemApi_GetItemsBySku = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsBySku(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.ItemsBySku" /* ItemsBySku */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetItemsSearch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsSearch(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.ItemsSearch" /* ItemsSearch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetItemsByAppId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByAppId(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.ItemsByAppId" /* ItemsByAppId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetItemsByCriteria = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsByCriteria(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.ItemsByCriteria" /* ItemsByCriteria */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetItemsLocaleByIds = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsLocaleByIds(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.ItemsLocaleByIds" /* ItemsLocaleByIds */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetItemsEstimatedPrice = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getItemsEstimatedPrice(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.ItemsEstimatedPrice" /* ItemsEstimatedPrice */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetLocale_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getLocale_ByItemId(
      input2.itemId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.Locale_ByItemId" /* Locale_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetDynamic_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDynamic_ByItemId(input2.itemId);
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.Dynamic_ByItemId" /* Dynamic_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_GetAppLocale_ByItemId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ItemApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAppLocale_ByItemId(
      input2.itemId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery40({
    queryKey: ["Platform.Item.AppLocale_ByItemId" /* AppLocale_ByItemId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useItemApi_CreateItemPurchaseConditionValidateMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ItemApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createItemPurchaseConditionValidate(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation37({
    mutationKey: ["Platform.Item.ItemPurchaseConditionValidate" /* ItemPurchaseConditionValidate */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Order.query.ts
import { useMutation as useMutation38, useQuery as useQuery41 } from "@tanstack/react-query";
var Key_Order = /* @__PURE__ */ ((Key_Order2) => {
  Key_Order2["Orders_ByUserId"] = "Platform.Order.Orders_ByUserId";
  Key_Order2["Order_ByUserId"] = "Platform.Order.Order_ByUserId";
  Key_Order2["Order_ByUserId_ByOrderNo"] = "Platform.Order.Order_ByUserId_ByOrderNo";
  Key_Order2["Cancel_ByUserId_ByOrderNo"] = "Platform.Order.Cancel_ByUserId_ByOrderNo";
  Key_Order2["OrderDiscountPreview_ByUserId"] = "Platform.Order.OrderDiscountPreview_ByUserId";
  Key_Order2["History_ByUserId_ByOrderNo"] = "Platform.Order.History_ByUserId_ByOrderNo";
  Key_Order2["ReceiptPdf_ByUserId_ByOrderNo"] = "Platform.Order.ReceiptPdf_ByUserId_ByOrderNo";
  return Key_Order2;
})(Key_Order || {});
var useOrderApi_GetOrders_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrders_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery41({
    queryKey: ["Platform.Order.Orders_ByUserId" /* Orders_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderApi_CreateOrder_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createOrder_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation38({
    mutationKey: ["Platform.Order.Order_ByUserId" /* Order_ByUserId */],
    mutationFn,
    ...options
  });
};
var useOrderApi_GetOrder_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOrder_ByUserId_ByOrderNo(
      input2.userId,
      input2.orderNo
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery41({
    queryKey: ["Platform.Order.Order_ByUserId_ByOrderNo" /* Order_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderApi_UpdateCancel_ByUserId_ByOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateCancel_ByUserId_ByOrderNo(
      input.userId,
      input.orderNo
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation38({
    mutationKey: ["Platform.Order.Cancel_ByUserId_ByOrderNo" /* Cancel_ByUserId_ByOrderNo */],
    mutationFn,
    ...options
  });
};
var useOrderApi_CreateOrderDiscountPreview_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OrderApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createOrderDiscountPreview_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation38({
    mutationKey: ["Platform.Order.OrderDiscountPreview_ByUserId" /* OrderDiscountPreview_ByUserId */],
    mutationFn,
    ...options
  });
};
var useOrderApi_GetHistory_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getHistory_ByUserId_ByOrderNo(
      input2.userId,
      input2.orderNo
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery41({
    queryKey: ["Platform.Order.History_ByUserId_ByOrderNo" /* History_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOrderApi_GetReceiptPdf_ByUserId_ByOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OrderApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getReceiptPdf_ByUserId_ByOrderNo(
      input2.userId,
      input2.orderNo
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery41({
    queryKey: ["Platform.Order.ReceiptPdf_ByUserId_ByOrderNo" /* ReceiptPdf_ByUserId_ByOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/PaymentAccount.query.ts
import { useMutation as useMutation39, useQuery as useQuery42 } from "@tanstack/react-query";
var Key_PaymentAccount = /* @__PURE__ */ ((Key_PaymentAccount2) => {
  Key_PaymentAccount2["PaymentAccounts_ByUserId"] = "Platform.PaymentAccount.PaymentAccounts_ByUserId";
  Key_PaymentAccount2["PaymentAccount_ByUserId_ByType_ById"] = "Platform.PaymentAccount.PaymentAccount_ByUserId_ByType_ById";
  return Key_PaymentAccount2;
})(Key_PaymentAccount || {});
var usePaymentAccountApi_GetPaymentAccounts_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentAccountApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPaymentAccounts_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery42({
    queryKey: ["Platform.PaymentAccount.PaymentAccounts_ByUserId" /* PaymentAccounts_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentAccountApi_DeletePaymentAccount_ByUserId_ByType_ByIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentAccountApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePaymentAccount_ByUserId_ByType_ById(input.userId, input.type, input.id);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation39({
    mutationKey: ["Platform.PaymentAccount.PaymentAccount_ByUserId_ByType_ById" /* PaymentAccount_ByUserId_ByType_ById */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/PaymentStation.query.ts
import { useMutation as useMutation40, useQuery as useQuery43 } from "@tanstack/react-query";
var Key_PaymentStation = /* @__PURE__ */ ((Key_PaymentStation2) => {
  Key_PaymentStation2["PaymentTax"] = "Platform.PaymentStation.PaymentTax";
  Key_PaymentStation2["PaymentLink"] = "Platform.PaymentStation.PaymentLink";
  Key_PaymentStation2["PaymentQrcode"] = "Platform.PaymentStation.PaymentQrcode";
  Key_PaymentStation2["PaymentMethods"] = "Platform.PaymentStation.PaymentMethods";
  Key_PaymentStation2["PaymentReturnurl"] = "Platform.PaymentStation.PaymentReturnurl";
  Key_PaymentStation2["PaymentPublicconfig"] = "Platform.PaymentStation.PaymentPublicconfig";
  Key_PaymentStation2["PaymentCustomization"] = "Platform.PaymentStation.PaymentCustomization";
  Key_PaymentStation2["PayPayment_ByPaymentOrderNo"] = "Platform.PaymentStation.PayPayment_ByPaymentOrderNo";
  Key_PaymentStation2["InfoPayment_ByPaymentOrderNo"] = "Platform.PaymentStation.InfoPayment_ByPaymentOrderNo";
  Key_PaymentStation2["StatusPayment_ByPaymentOrderNo"] = "Platform.PaymentStation.StatusPayment_ByPaymentOrderNo";
  return Key_PaymentStation2;
})(Key_PaymentStation || {});
var usePaymentStationApi_GetPaymentTax = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentTax(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.PaymentTax" /* PaymentTax */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_CreatePaymentLinkMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentStationApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPaymentLink(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation40({
    mutationKey: ["Platform.PaymentStation.PaymentLink" /* PaymentLink */],
    mutationFn,
    ...options
  });
};
var usePaymentStationApi_GetPaymentQrcode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentQrcode(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.PaymentQrcode" /* PaymentQrcode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_GetPaymentMethods = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentMethods(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.PaymentMethods" /* PaymentMethods */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_GetPaymentReturnurl = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentReturnurl(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.PaymentReturnurl" /* PaymentReturnurl */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_GetPaymentPublicconfig = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentPublicconfig(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.PaymentPublicconfig" /* PaymentPublicconfig */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_GetPaymentCustomization = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPaymentCustomization(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.PaymentCustomization" /* PaymentCustomization */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_CreatePayPayment_ByPaymentOrderNoMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PaymentStationApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPayPayment_ByPaymentOrderNo(input.paymentOrderNo, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation40({
    mutationKey: ["Platform.PaymentStation.PayPayment_ByPaymentOrderNo" /* PayPayment_ByPaymentOrderNo */],
    mutationFn,
    ...options
  });
};
var usePaymentStationApi_GetInfoPayment_ByPaymentOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getInfoPayment_ByPaymentOrderNo(input2.paymentOrderNo);
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.InfoPayment_ByPaymentOrderNo" /* InfoPayment_ByPaymentOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePaymentStationApi_GetStatusPayment_ByPaymentOrderNo = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PaymentStationApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getStatusPayment_ByPaymentOrderNo(input2.paymentOrderNo);
    callback && callback(response);
    return response.data;
  };
  return useQuery43({
    queryKey: ["Platform.PaymentStation.StatusPayment_ByPaymentOrderNo" /* StatusPayment_ByPaymentOrderNo */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Reward.query.ts
import { useQuery as useQuery44 } from "@tanstack/react-query";
var Key_Reward = /* @__PURE__ */ ((Key_Reward2) => {
  Key_Reward2["RewardsByCode"] = "Platform.Reward.RewardsByCode";
  Key_Reward2["Reward_ByRewardId"] = "Platform.Reward.Reward_ByRewardId";
  Key_Reward2["RewardsByCriteria"] = "Platform.Reward.RewardsByCriteria";
  return Key_Reward2;
})(Key_Reward || {});
var useRewardApi_GetRewardsByCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RewardApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRewardsByCode(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery44({
    queryKey: ["Platform.Reward.RewardsByCode" /* RewardsByCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRewardApi_GetReward_ByRewardId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RewardApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getReward_ByRewardId(
      input2.rewardId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery44({
    queryKey: ["Platform.Reward.Reward_ByRewardId" /* Reward_ByRewardId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRewardApi_GetRewardsByCriteria = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RewardApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRewardsByCriteria(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery44({
    queryKey: ["Platform.Reward.RewardsByCriteria" /* RewardsByCriteria */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Section.query.ts
import { useQuery as useQuery45 } from "@tanstack/react-query";
var Key_Section = /* @__PURE__ */ ((Key_Section2) => {
  Key_Section2["Sections_ByUserId"] = "Platform.Section.Sections_ByUserId";
  return Key_Section2;
})(Key_Section || {});
var useSectionApi_GetSections_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SectionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSections_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery45({
    queryKey: ["Platform.Section.Sections_ByUserId" /* Sections_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Store.query.ts
import { useQuery as useQuery46 } from "@tanstack/react-query";
var Key_Store = /* @__PURE__ */ ((Key_Store2) => {
  Key_Store2["Stores"] = "Platform.Store.Stores";
  return Key_Store2;
})(Key_Store || {});
var useStoreApi_GetStores = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await StoreApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getStores();
    callback && callback(response);
    return response.data;
  };
  return useQuery46({
    queryKey: ["Platform.Store.Stores" /* Stores */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Subscription.query.ts
import { useMutation as useMutation41, useQuery as useQuery47 } from "@tanstack/react-query";
var Key_Subscription = /* @__PURE__ */ ((Key_Subscription2) => {
  Key_Subscription2["Subscriptions_ByUserId"] = "Platform.Subscription.Subscriptions_ByUserId";
  Key_Subscription2["Subscription_ByUserId"] = "Platform.Subscription.Subscription_ByUserId";
  Key_Subscription2["Subscription_ByUserId_BySubscriptionId"] = "Platform.Subscription.Subscription_ByUserId_BySubscriptionId";
  Key_Subscription2["SubscriptionsSubscribableByItemId_ByUserId"] = "Platform.Subscription.SubscriptionsSubscribableByItemId_ByUserId";
  Key_Subscription2["Cancel_ByUserId_BySubscriptionId"] = "Platform.Subscription.Cancel_ByUserId_BySubscriptionId";
  Key_Subscription2["History_ByUserId_BySubscriptionId"] = "Platform.Subscription.History_ByUserId_BySubscriptionId";
  Key_Subscription2["BillingAccount_ByUserId_BySubscriptionId"] = "Platform.Subscription.BillingAccount_ByUserId_BySubscriptionId";
  return Key_Subscription2;
})(Key_Subscription || {});
var useSubscriptionApi_GetSubscriptions_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSubscriptions_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery47({
    queryKey: ["Platform.Subscription.Subscriptions_ByUserId" /* Subscriptions_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionApi_CreateSubscription_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createSubscription_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation41({
    mutationKey: ["Platform.Subscription.Subscription_ByUserId" /* Subscription_ByUserId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionApi_GetSubscription_ByUserId_BySubscriptionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSubscription_ByUserId_BySubscriptionId(input2.userId, input2.subscriptionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery47({
    queryKey: ["Platform.Subscription.Subscription_ByUserId_BySubscriptionId" /* Subscription_ByUserId_BySubscriptionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionApi_GetSubscriptionsSubscribableByItemId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSubscriptionsSubscribableByItemId_ByUserId(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery47({
    queryKey: ["Platform.Subscription.SubscriptionsSubscribableByItemId_ByUserId" /* SubscriptionsSubscribableByItemId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionApi_UpdateCancel_ByUserId_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCancel_ByUserId_BySubscriptionId(input.userId, input.subscriptionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation41({
    mutationKey: ["Platform.Subscription.Cancel_ByUserId_BySubscriptionId" /* Cancel_ByUserId_BySubscriptionId */],
    mutationFn,
    ...options
  });
};
var useSubscriptionApi_GetHistory_ByUserId_BySubscriptionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SubscriptionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistory_ByUserId_BySubscriptionId(input2.userId, input2.subscriptionId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery47({
    queryKey: ["Platform.Subscription.History_ByUserId_BySubscriptionId" /* History_ByUserId_BySubscriptionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSubscriptionApi_UpdateBillingAccount_ByUserId_BySubscriptionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SubscriptionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateBillingAccount_ByUserId_BySubscriptionId(input.userId, input.subscriptionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation41({
    mutationKey: ["Platform.Subscription.BillingAccount_ByUserId_BySubscriptionId" /* BillingAccount_ByUserId_BySubscriptionId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/View.query.ts
import { useQuery as useQuery48 } from "@tanstack/react-query";
var Key_View = /* @__PURE__ */ ((Key_View2) => {
  Key_View2["Views_ByUserId"] = "Platform.View.Views_ByUserId";
  return Key_View2;
})(Key_View || {});
var useViewApi_GetViews_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ViewApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getViews_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery48({
    queryKey: ["Platform.View.Views_ByUserId" /* Views_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Wallet.query.ts
import { useQuery as useQuery49 } from "@tanstack/react-query";
var Key_Wallet = /* @__PURE__ */ ((Key_Wallet2) => {
  Key_Wallet2["UserMeWallet_ByCurrencyCode"] = "Platform.Wallet.UserMeWallet_ByCurrencyCode";
  Key_Wallet2["Wallet_ByUserId_ByCurrencyCode"] = "Platform.Wallet.Wallet_ByUserId_ByCurrencyCode";
  Key_Wallet2["Transactions_ByUserId_ByCurrencyCode"] = "Platform.Wallet.Transactions_ByUserId_ByCurrencyCode";
  return Key_Wallet2;
})(Key_Wallet || {});
var useWalletApi_GetUserMeWallet_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUserMeWallet_ByCurrencyCode(
      input2.currencyCode
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery49({
    queryKey: ["Platform.Wallet.UserMeWallet_ByCurrencyCode" /* UserMeWallet_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletApi_GetWallet_ByUserId_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getWallet_ByUserId_ByCurrencyCode(input2.userId, input2.currencyCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery49({
    queryKey: ["Platform.Wallet.Wallet_ByUserId_ByCurrencyCode" /* Wallet_ByUserId_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useWalletApi_GetTransactions_ByUserId_ByCurrencyCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await WalletApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTransactions_ByUserId_ByCurrencyCode(input2.userId, input2.currencyCode, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery49({
    queryKey: ["Platform.Wallet.Transactions_ByUserId_ByCurrencyCode" /* Transactions_ByUserId_ByCurrencyCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
export {
  Key_AchievementPlatformAdmin,
  Key_AnonymizationAdmin,
  Key_CampaignAdmin,
  Key_CatalogChangesAdmin,
  Key_Category,
  Key_CategoryAdmin,
  Key_ClawbackAdmin,
  Key_Currency,
  Key_CurrencyAdmin,
  Key_Dlc,
  Key_DlcAdmin,
  Key_Entitlement,
  Key_EntitlementAdmin,
  Key_Fulfillment,
  Key_FulfillmentAdmin,
  Key_FulfillmentScriptAdmin,
  Key_Iap,
  Key_IapAdmin,
  Key_IapNotificationAdmin,
  Key_IapSubscription,
  Key_IapSubscriptionAdmin,
  Key_InvoiceAdmin,
  Key_Item,
  Key_ItemAdmin,
  Key_KeyGroupAdmin,
  Key_Order,
  Key_OrderAdmin,
  Key_OrderDedicatedAdmin,
  Key_PaymentAccount,
  Key_PaymentAdmin,
  Key_PaymentCallbackConfigAdmin,
  Key_PaymentConfigAdmin,
  Key_PaymentDedicatedAdmin,
  Key_PaymentStation,
  Key_PlatformAccountClosureAdmin,
  Key_PlatformAdmin,
  Key_RevocationAdmin,
  Key_Reward,
  Key_RewardAdmin,
  Key_Section,
  Key_SectionAdmin,
  Key_ServicePluginConfigAdmin,
  Key_SessionPlatformAdmin,
  Key_Store,
  Key_StoreAdmin,
  Key_Subscription,
  Key_SubscriptionAdmin,
  Key_TicketAdmin,
  Key_TradeActionAdmin,
  Key_View,
  Key_ViewAdmin,
  Key_Wallet,
  Key_WalletAdmin,
  useAchievementPlatformAdminApi_GetAchievementXbl_ByUserId,
  useAchievementPlatformAdminApi_UpdateAchievementSteam_ByUserIdMutation,
  useAchievementPlatformAdminApi_UpdateAchievementXbl_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationCampaign_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationEntitlement_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationFulfillment_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationIntegration_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationOrder_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationPayment_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationRevocation_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationSubscription_ByUserIdMutation,
  useAnonymizationAdminApi_DeleteAnonymizationWallet_ByUserIdMutation,
  useCampaignAdminApi_CreateCampaignMutation,
  useCampaignAdminApi_CreateCodeCampaign_ByCampaignIdMutation,
  useCampaignAdminApi_CreateRedemption_ByUserIdMutation,
  useCampaignAdminApi_GetBatchNames_ByCampaignId,
  useCampaignAdminApi_GetCampaign_ByCampaignId,
  useCampaignAdminApi_GetCampaigns,
  useCampaignAdminApi_GetCodeCampaign_ByCampaignId,
  useCampaignAdminApi_GetCode_ByCode,
  useCampaignAdminApi_GetCodesCsv_ByCampaignId,
  useCampaignAdminApi_GetDynamic_ByCampaignId,
  useCampaignAdminApi_GetHistoryCodes_ByCampaignId,
  useCampaignAdminApi_UpdateBatchName_ByCampaignIdMutation,
  useCampaignAdminApi_UpdateCampaign_ByCampaignIdMutation,
  useCampaignAdminApi_UpdateDisableBulkCode_ByCampaignIdMutation,
  useCampaignAdminApi_UpdateDisable_ByCodeMutation,
  useCampaignAdminApi_UpdateEnableBulkCode_ByCampaignIdMutation,
  useCampaignAdminApi_UpdateEnable_ByCodeMutation,
  useCatalogChangesAdminApi_GetCatalogChangesByCriteria_ByStoreId,
  useCatalogChangesAdminApi_GetCatalogChangesStatistics_ByStoreId,
  useCatalogChangesAdminApi_UpdateCatalogChangePublishAll_ByStoreIdMutation,
  useCatalogChangesAdminApi_UpdateCatalogChangePublishSelected_ByStoreIdMutation,
  useCatalogChangesAdminApi_UpdateCatalogChangeSelectAllByCriteria_ByStoreIdMutation,
  useCatalogChangesAdminApi_UpdateCatalogChangeSelectAll_ByStoreIdMutation,
  useCatalogChangesAdminApi_UpdateCatalogChangeUnselectAll_ByStoreIdMutation,
  useCatalogChangesAdminApi_UpdateSelect_ByStoreId_ByChangeIdMutation,
  useCatalogChangesAdminApi_UpdateUnselect_ByStoreId_ByChangeIdMutation,
  useCategoryAdminApi_CreateCategoryMutation,
  useCategoryAdminApi_DeleteCategory_ByCategoryPathMutation,
  useCategoryAdminApi_GetCategories,
  useCategoryAdminApi_GetCategoriesBasic,
  useCategoryAdminApi_GetCategory_ByCategoryPath,
  useCategoryAdminApi_GetChildren_ByCategoryPath,
  useCategoryAdminApi_GetDescendants_ByCategoryPath,
  useCategoryAdminApi_UpdateCategory_ByCategoryPathMutation,
  useCategoryApi_GetCategories,
  useCategoryApi_GetCategoriesDownload,
  useCategoryApi_GetCategory_ByCategoryPath,
  useCategoryApi_GetChildren_ByCategoryPath,
  useCategoryApi_GetDescendants_ByCategoryPath,
  useClawbackAdminApi_CreateIapClawbackPlaystationMockMutation,
  useClawbackAdminApi_GetIapClawbackHistories,
  useCurrencyAdminApi_CreateCurrencyMutation,
  useCurrencyAdminApi_DeleteCurrency_ByCurrencyCodeMutation,
  useCurrencyAdminApi_GetConfig_ByCurrencyCode,
  useCurrencyAdminApi_GetCurrencies,
  useCurrencyAdminApi_GetSummary_ByCurrencyCode,
  useCurrencyAdminApi_UpdateCurrency_ByCurrencyCodeMutation,
  useCurrencyApi_GetCurrencies,
  useDlcAdminApi_DeleteDlcConfigItemMutation,
  useDlcAdminApi_DeleteDlcConfigPlatformMapMutation,
  useDlcAdminApi_GetDlcConfigItem,
  useDlcAdminApi_GetDlcConfigPlatformMap,
  useDlcAdminApi_GetDlcRecords_ByUserId,
  useDlcAdminApi_GetDlc_ByUserId,
  useDlcAdminApi_UpdateDlcConfigItemMutation,
  useDlcAdminApi_UpdateDlcConfigPlatformMapMutation,
  useDlcApi_GetDlcRewardsDurableMap,
  useDlcApi_GetUsersMeDlcContent,
  useDlcApi_UpdateDlcEpicgameSync_ByUserIdMutation,
  useDlcApi_UpdateDlcOculuSync_ByUserIdMutation,
  useDlcApi_UpdateDlcPsnSyncMultiServiceLabel_ByUserIdMutation,
  useDlcApi_UpdateDlcPsnSync_ByUserIdMutation,
  useDlcApi_UpdateDlcSteamSync_ByUserIdMutation,
  useDlcApi_UpdateDlcXblSync_ByUserIdMutation,
  useEntitlementAdminApi_CreateEntitlementGrantMutation,
  useEntitlementAdminApi_CreateEntitlementRevokeMutation,
  useEntitlementAdminApi_CreateEntitlement_ByUserIdMutation,
  useEntitlementAdminApi_CreateRevokeByUseCount_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_GetEntitlementConfig_ByPlatform,
  useEntitlementAdminApi_GetEntitlement_ByEntitlementId,
  useEntitlementAdminApi_GetEntitlement_ByUserId_ByEntitlementId,
  useEntitlementAdminApi_GetEntitlements,
  useEntitlementAdminApi_GetEntitlementsByAppId_ByUserId,
  useEntitlementAdminApi_GetEntitlementsByAppType_ByUserId,
  useEntitlementAdminApi_GetEntitlementsByItemId_ByUserId,
  useEntitlementAdminApi_GetEntitlementsByItemIds,
  useEntitlementAdminApi_GetEntitlementsByItemIds_ByUserId,
  useEntitlementAdminApi_GetEntitlementsBySku_ByUserId,
  useEntitlementAdminApi_GetEntitlementsConfigInfo,
  useEntitlementAdminApi_GetEntitlementsOwnershipAnyOf_ByUserId,
  useEntitlementAdminApi_GetEntitlementsOwnershipAny_ByUserId,
  useEntitlementAdminApi_GetEntitlementsOwnershipByAppId_ByUserId,
  useEntitlementAdminApi_GetEntitlementsOwnershipByItemId_ByUserId,
  useEntitlementAdminApi_GetEntitlementsOwnershipByItemIds_ByUserId,
  useEntitlementAdminApi_GetEntitlementsOwnershipBySku_ByUserId,
  useEntitlementAdminApi_GetEntitlements_ByUserId,
  useEntitlementAdminApi_GetHistory_ByUserId_ByEntitlementId,
  useEntitlementAdminApi_GetRevokeByUseCountPreCheck_ByUserId_ByEntitlementId,
  useEntitlementAdminApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_UpdateDisable_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_UpdateEnable_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_UpdateEntitlementConfigEntitlementOriginEnableMutation,
  useEntitlementAdminApi_UpdateEntitlementConfig_ByPlatformMutation,
  useEntitlementAdminApi_UpdateEntitlementRevokeById_ByUserIdMutation,
  useEntitlementAdminApi_UpdateEntitlementRevoke_ByUserIdMutation,
  useEntitlementAdminApi_UpdateEntitlement_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_UpdateRevokeByUseCount_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_UpdateRevoke_ByUserId_ByEntitlementIdMutation,
  useEntitlementAdminApi_UpdateSell_ByUserId_ByEntitlementIdMutation,
  useEntitlementApi_GetEntitlement_ByUserId_ByEntitlementId,
  useEntitlementApi_GetEntitlementsByAppId_ByUserId,
  useEntitlementApi_GetEntitlementsByAppType_ByUserId,
  useEntitlementApi_GetEntitlementsByIds_ByUserId,
  useEntitlementApi_GetEntitlementsByItemId_ByUserId,
  useEntitlementApi_GetEntitlementsBySku_ByUserId,
  useEntitlementApi_GetEntitlementsHistory_ByUserId,
  useEntitlementApi_GetEntitlementsOwnershipAny_ByUserId,
  useEntitlementApi_GetEntitlementsOwnershipByAppId_ByUserId,
  useEntitlementApi_GetEntitlementsOwnershipByItemId_ByUserId,
  useEntitlementApi_GetEntitlementsOwnershipByItemIds_ByUserId,
  useEntitlementApi_GetEntitlementsOwnershipBySku_ByUserId,
  useEntitlementApi_GetEntitlements_ByUserId,
  useEntitlementApi_GetUsersMeEntitlementsOwnershipAny,
  useEntitlementApi_GetUsersMeEntitlementsOwnershipByAppId,
  useEntitlementApi_GetUsersMeEntitlementsOwnershipByItemId,
  useEntitlementApi_GetUsersMeEntitlementsOwnershipBySku,
  useEntitlementApi_GetUsersMeEntitlementsOwnershipToken,
  useEntitlementApi_UpdateDecrement_ByUserId_ByEntitlementIdMutation,
  useEntitlementApi_UpdateSell_ByUserId_ByEntitlementIdMutation,
  useEntitlementApi_UpdateSplit_ByUserId_ByEntitlementIdMutation,
  useEntitlementApi_UpdateTransfer_ByUserId_ByEntitlementIdMutation,
  useFulfillmentAdminApi_CreateFulfillmentCode_ByUserIdMutation,
  useFulfillmentAdminApi_CreateFulfillmentPreCheck_ByUserIdMutation,
  useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation,
  useFulfillmentAdminApi_CreateFulfillmentReward_ByUserIdMutation_v2,
  useFulfillmentAdminApi_CreateFulfillment_ByUserIdMutation,
  useFulfillmentAdminApi_GetFulfillmentHistory,
  useFulfillmentAdminApi_GetFulfillments_v2,
  useFulfillmentAdminApi_UpdateFulfillment_ByUserId_ByTransactionIdMutation_v2,
  useFulfillmentAdminApi_UpdateRetry_ByUserId_ByTransactionIdMutation_v2,
  useFulfillmentAdminApi_UpdateRevoke_ByUserId_ByTransactionIdMutation_v2,
  useFulfillmentApi_CreateFulfillmentCode_ByUserIdMutation,
  useFulfillmentScriptAdminApi_CreateFulfillmentScript_ByIdMutation,
  useFulfillmentScriptAdminApi_DeleteFulfillmentScript_ByIdMutation,
  useFulfillmentScriptAdminApi_GetFulfillmentScript_ById,
  useFulfillmentScriptAdminApi_GetFulfillmentScripts,
  useFulfillmentScriptAdminApi_PatchFulfillmentScript_ByIdMutation,
  useIapAdminApi_DeleteIapConfigAppleMutation,
  useIapAdminApi_DeleteIapConfigEpicgameMutation,
  useIapAdminApi_DeleteIapConfigGoogleMutation,
  useIapAdminApi_DeleteIapConfigItemMutation,
  useIapAdminApi_DeleteIapConfigOculuMutation,
  useIapAdminApi_DeleteIapConfigPlaystationMutation,
  useIapAdminApi_DeleteIapConfigSteamMutation,
  useIapAdminApi_DeleteIapConfigTwitchMutation,
  useIapAdminApi_DeleteIapConfigXblMutation,
  useIapAdminApi_GetIapAll_ByUserId,
  useIapAdminApi_GetIapConfigApple,
  useIapAdminApi_GetIapConfigEpicgames,
  useIapAdminApi_GetIapConfigGoogle,
  useIapAdminApi_GetIapConfigItem,
  useIapAdminApi_GetIapConfigOculus,
  useIapAdminApi_GetIapConfigPlaystation,
  useIapAdminApi_GetIapConfigPlaystationValidate,
  useIapAdminApi_GetIapConfigSteam,
  useIapAdminApi_GetIapConfigTwitch,
  useIapAdminApi_GetIapConfigXbl,
  useIapAdminApi_GetIapConsumeHistory_ByUserId,
  useIapAdminApi_GetIap_ByUserId,
  useIapAdminApi_UpdateIapConfigAppleCertMutation,
  useIapAdminApi_UpdateIapConfigAppleMutation,
  useIapAdminApi_UpdateIapConfigEpicgameMutation,
  useIapAdminApi_UpdateIapConfigGoogleCertMutation,
  useIapAdminApi_UpdateIapConfigGoogleMutation,
  useIapAdminApi_UpdateIapConfigItemMutation,
  useIapAdminApi_UpdateIapConfigOculuMutation,
  useIapAdminApi_UpdateIapConfigPlaystationMutation,
  useIapAdminApi_UpdateIapConfigPlaystationValidateMutation,
  useIapAdminApi_UpdateIapConfigSteamMutation,
  useIapAdminApi_UpdateIapConfigTwitchMutation,
  useIapAdminApi_UpdateIapConfigXblCertMutation,
  useIapAdminApi_UpdateIapConfigXblMutation,
  useIapAdminApi_UpdateIapMockReceipt_ByUserIdMutation,
  useIapApi_GetIapAppleConfigVersion,
  useIapApi_GetIapItemMapping,
  useIapApi_UpdateIapAppleReceipt_ByUserIdMutation,
  useIapApi_UpdateIapAppleReceipt_ByUserIdMutation_v2,
  useIapApi_UpdateIapEpicgameSync_ByUserIdMutation,
  useIapApi_UpdateIapGoogleReceipt_ByUserIdMutation,
  useIapApi_UpdateIapOculuSync_ByUserIdMutation,
  useIapApi_UpdateIapPsnSyncMultiServiceLabel_ByUserIdMutation,
  useIapApi_UpdateIapPsnSync_ByUserIdMutation,
  useIapApi_UpdateIapSteamSync_ByUserIdMutation,
  useIapApi_UpdateIapTwitchSync_ByUserIdMutation,
  useIapApi_UpdateIapXblSync_ByUserIdMutation,
  useIapApi_UpdateUserMeIapTwitchSyncMutation,
  useIapNotificationAdminApi_GetIapNotifications,
  useIapSubscriptionAdminApi_GetHistoriesSubscriptionsIap_ByUserId_ById,
  useIapSubscriptionAdminApi_GetIapSubscriptionTransaction_ByUserId_ById,
  useIapSubscriptionAdminApi_GetIapSubscription_ByUserId_ById,
  useIapSubscriptionAdminApi_GetIapSubscriptions,
  useIapSubscriptionAdminApi_GetIapSubscriptionsTransactions_ByUserId,
  useIapSubscriptionAdminApi_GetIapSubscriptions_ByUserId,
  useIapSubscriptionAdminApi_GetOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform,
  useIapSubscriptionAdminApi_GetOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform,
  useIapSubscriptionAdminApi_UpdateSyncIap_ByUserId_ByIdMutation,
  useIapSubscriptionAdminApi_UpdateSyncSubscriptionIap_ByUserId_ByIdMutation,
  useIapSubscriptionApi_GetIapSubscriptionPlatform_ByUserId_ByPlatform,
  useInvoiceAdminApi_GetInvoiceDetailsCsv,
  useInvoiceAdminApi_GetInvoiceSummary,
  useItemAdminApi_CreateItemConfigMutation,
  useItemAdminApi_CreateItemMutation,
  useItemAdminApi_CreateItemPurchaseConditionValidateMutation,
  useItemAdminApi_DeleteFeature_ByItemId_ByFeatureMutation,
  useItemAdminApi_DeleteItemConfig_ByIdMutation,
  useItemAdminApi_DeleteItem_ByItemIdMutation,
  useItemAdminApi_GetApp_ByItemId,
  useItemAdminApi_GetDynamic_ByItemId,
  useItemAdminApi_GetItemConfig_ById,
  useItemAdminApi_GetItem_ByItemId,
  useItemAdminApi_GetItemsByAppId,
  useItemAdminApi_GetItemsByCriteria,
  useItemAdminApi_GetItemsByCriteria_v2,
  useItemAdminApi_GetItemsByFeaturesBasic,
  useItemAdminApi_GetItemsByIds,
  useItemAdminApi_GetItemsBySku,
  useItemAdminApi_GetItemsBySkuLocale,
  useItemAdminApi_GetItemsConfigs,
  useItemAdminApi_GetItemsConfigsSearch,
  useItemAdminApi_GetItemsEstimatedPrice,
  useItemAdminApi_GetItemsItemIdBySku,
  useItemAdminApi_GetItemsItemIdBySkus,
  useItemAdminApi_GetItemsLocaleByIds,
  useItemAdminApi_GetItemsPredicateTypes,
  useItemAdminApi_GetItemsSearch,
  useItemAdminApi_GetItemsUncategorized,
  useItemAdminApi_GetLocale_ByItemId,
  useItemAdminApi_UpdateAcquire_ByItemIdMutation,
  useItemAdminApi_UpdateApp_ByItemIdMutation,
  useItemAdminApi_UpdateDisable_ByItemIdMutation,
  useItemAdminApi_UpdateEnable_ByItemIdMutation,
  useItemAdminApi_UpdateFeature_ByItemId_ByFeatureMutation,
  useItemAdminApi_UpdateItemConfig_ByIdMutation,
  useItemAdminApi_UpdateItemMutation,
  useItemAdminApi_UpdateItemRegiondataMutation,
  useItemAdminApi_UpdateItem_ByItemIdMutation,
  useItemAdminApi_UpdatePurchaseCondition_ByItemIdMutation,
  useItemAdminApi_UpdateReturn_ByItemIdMutation,
  useItemApi_CreateItemPurchaseConditionValidateMutation,
  useItemApi_GetAppLocale_ByItemId,
  useItemApi_GetDynamic_ByItemId,
  useItemApi_GetItemsByAppId,
  useItemApi_GetItemsByCriteria,
  useItemApi_GetItemsBySku,
  useItemApi_GetItemsEstimatedPrice,
  useItemApi_GetItemsLocaleByIds,
  useItemApi_GetItemsSearch,
  useItemApi_GetLocale_ByItemId,
  useKeyGroupAdminApi_CreateKey_ByKeyGroupIdMutation,
  useKeyGroupAdminApi_CreateKeygroupMutation,
  useKeyGroupAdminApi_GetDynamic_ByKeyGroupId,
  useKeyGroupAdminApi_GetKeygroup_ByKeyGroupId,
  useKeyGroupAdminApi_GetKeygroups,
  useKeyGroupAdminApi_GetKeygroupsByBoothName,
  useKeyGroupAdminApi_GetKeys_ByKeyGroupId,
  useKeyGroupAdminApi_UpdateKeygroup_ByKeyGroupIdMutation,
  useOrderAdminApi_CreateNotification_ByUserId_ByOrderNoMutation,
  useOrderAdminApi_CreateOrder_ByUserIdMutation,
  useOrderAdminApi_GetGrant_ByUserId_ByOrderNo,
  useOrderAdminApi_GetHistory_ByUserId_ByOrderNo,
  useOrderAdminApi_GetOrder_ByOrderNo,
  useOrderAdminApi_GetOrder_ByUserId_ByOrderNo,
  useOrderAdminApi_GetOrders,
  useOrderAdminApi_GetOrdersCountOfItem_ByUserId,
  useOrderAdminApi_GetOrdersStats,
  useOrderAdminApi_GetOrders_ByUserId,
  useOrderAdminApi_GetReceiptPdf_ByUserId_ByOrderNo,
  useOrderAdminApi_UpdateFulfill_ByUserId_ByOrderNoMutation,
  useOrderAdminApi_UpdateOrder_ByUserId_ByOrderNoMutation,
  useOrderAdminApi_UpdateRefund_ByOrderNoMutation,
  useOrderApi_CreateOrderDiscountPreview_ByUserIdMutation,
  useOrderApi_CreateOrder_ByUserIdMutation,
  useOrderApi_GetHistory_ByUserId_ByOrderNo,
  useOrderApi_GetOrder_ByUserId_ByOrderNo,
  useOrderApi_GetOrders_ByUserId,
  useOrderApi_GetReceiptPdf_ByUserId_ByOrderNo,
  useOrderApi_UpdateCancel_ByUserId_ByOrderNoMutation,
  useOrderDedicatedAdminApi_GetOrders,
  usePaymentAccountApi_DeletePaymentAccount_ByUserId_ByType_ByIdMutation,
  usePaymentAccountApi_GetPaymentAccounts_ByUserId,
  usePaymentAdminApi_CreatePaymentOrder_ByUserIdMutation,
  usePaymentAdminApi_GetPaymentNotifications,
  usePaymentAdminApi_GetPaymentOrder_ByPaymentOrderNo,
  usePaymentAdminApi_GetPaymentOrders,
  usePaymentAdminApi_GetPaymentOrdersByExtTxId,
  usePaymentAdminApi_GetStatusPayment_ByPaymentOrderNo,
  usePaymentAdminApi_UpdatePaymentOrder_ByPaymentOrderNoMutation,
  usePaymentAdminApi_UpdateRefundPayment_ByUserId_ByPaymentOrderNoMutation,
  usePaymentAdminApi_UpdateSimulateNotificationPayment_ByPaymentOrderNoMutation,
  usePaymentCallbackConfigAdminApi_GetPaymentConfigCallback,
  usePaymentCallbackConfigAdminApi_UpdatePaymentConfigCallbackMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantAdyenconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantAlipayconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantCheckoutconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantNeonpayconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantPaypalconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantStripeconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantWxpayconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigMerchantXsollaconfigTestMutation,
  usePaymentConfigAdminApi_CreatePaymentConfigProviderMutation,
  usePaymentConfigAdminApi_DeletePaymentConfigProvider_ByIdMutation,
  usePaymentConfigAdminApi_GetAdyenconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetAlipayconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetCheckoutconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetNeonpayconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetPaymentConfigDomains,
  usePaymentConfigAdminApi_GetPaymentConfigMerchantMatched,
  usePaymentConfigAdminApi_GetPaymentConfigMerchant_ById,
  usePaymentConfigAdminApi_GetPaymentConfigProvider,
  usePaymentConfigAdminApi_GetPaymentConfigProviderAggregate,
  usePaymentConfigAdminApi_GetPaymentConfigProviderMatched,
  usePaymentConfigAdminApi_GetPaymentConfigProviderSpecial,
  usePaymentConfigAdminApi_GetPaymentConfigTax,
  usePaymentConfigAdminApi_GetPaypalconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetStripeconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetWxpayconfigTestPayment_ById,
  usePaymentConfigAdminApi_GetXsollaconfigTestPayment_ById,
  usePaymentConfigAdminApi_UpdateAdyenconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateAlipayconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateCheckoutconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateNeonpayconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdatePaymentConfigDomainMutation,
  usePaymentConfigAdminApi_UpdatePaymentConfigProvider_ByIdMutation,
  usePaymentConfigAdminApi_UpdatePaymentConfigTaxMutation,
  usePaymentConfigAdminApi_UpdatePaypalconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateStripeconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateWxpayconfigCertPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateWxpayconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateXsollaconfigPayment_ByIdMutation,
  usePaymentConfigAdminApi_UpdateXsollauiconfigPayment_ByIdMutation,
  usePaymentDedicatedAdminApi_CreatePaymentOrderMutation,
  usePaymentDedicatedAdminApi_GetPaymentOrders,
  usePaymentDedicatedAdminApi_UpdateRefundPayment_ByPaymentOrderNoMutation,
  usePaymentStationApi_CreatePayPayment_ByPaymentOrderNoMutation,
  usePaymentStationApi_CreatePaymentLinkMutation,
  usePaymentStationApi_GetInfoPayment_ByPaymentOrderNo,
  usePaymentStationApi_GetPaymentCustomization,
  usePaymentStationApi_GetPaymentMethods,
  usePaymentStationApi_GetPaymentPublicconfig,
  usePaymentStationApi_GetPaymentQrcode,
  usePaymentStationApi_GetPaymentReturnurl,
  usePaymentStationApi_GetPaymentTax,
  usePaymentStationApi_GetStatusPayment_ByPaymentOrderNo,
  usePlatformAccountClosureAdminApi_GetPlatformClosureHistory_ByUserId,
  usePlatformAdminApi_CreateOwnershipPsnPlatform_ByEntitlementLabelMutation,
  usePlatformAdminApi_CreateOwnershipXblPlatform_ByProductSkuMutation,
  useRevocationAdminApi_DeleteRevocationConfigMutation,
  useRevocationAdminApi_GetRevocationConfig,
  useRevocationAdminApi_GetRevocationHistory,
  useRevocationAdminApi_UpdateRevocationConfigMutation,
  useRevocationAdminApi_UpdateRevocation_ByUserIdMutation,
  useRewardAdminApi_CreateRewardImportMutation,
  useRewardAdminApi_CreateRewardMutation,
  useRewardAdminApi_DeleteRecord_ByRewardIdMutation,
  useRewardAdminApi_DeleteReward_ByRewardIdMutation,
  useRewardAdminApi_GetReward_ByRewardId,
  useRewardAdminApi_GetRewardsByCriteria,
  useRewardAdminApi_GetRewardsExport,
  useRewardAdminApi_UpdateMatch_ByRewardIdMutation,
  useRewardAdminApi_UpdateReward_ByRewardIdMutation,
  useRewardApi_GetReward_ByRewardId,
  useRewardApi_GetRewardsByCode,
  useRewardApi_GetRewardsByCriteria,
  useSectionAdminApi_CreateSectionMutation,
  useSectionAdminApi_DeleteSectionPurgeExpiredMutation,
  useSectionAdminApi_DeleteSection_BySectionIdMutation,
  useSectionAdminApi_GetSection_BySectionId,
  useSectionAdminApi_GetSections,
  useSectionAdminApi_UpdateSection_BySectionIdMutation,
  useSectionApi_GetSections_ByUserId,
  useServicePluginConfigAdminApi_DeleteCatalogPluginLootboxMutation,
  useServicePluginConfigAdminApi_DeleteCatalogPluginSectionMutation,
  useServicePluginConfigAdminApi_DeleteConfigServicePluginMutation,
  useServicePluginConfigAdminApi_DeleteRevocationPluginRevocationMutation,
  useServicePluginConfigAdminApi_GetCatalogPluginsLootbox,
  useServicePluginConfigAdminApi_GetCatalogPluginsLootboxGrpcInfo,
  useServicePluginConfigAdminApi_GetCatalogPluginsSection,
  useServicePluginConfigAdminApi_GetConfigsServicePlugin,
  useServicePluginConfigAdminApi_GetRevocationPluginsRevocation,
  useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxCustomConfigCertMutation,
  useServicePluginConfigAdminApi_UpdateCatalogPluginLootboxMutation,
  useServicePluginConfigAdminApi_UpdateCatalogPluginSectionCustomConfigCertMutation,
  useServicePluginConfigAdminApi_UpdateCatalogPluginSectionMutation,
  useServicePluginConfigAdminApi_UpdateConfigServicePluginMutation,
  useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationMutation,
  useServicePluginConfigAdminApi_UpdateRevocationPluginRevocationRevocationCustomConfigCertMutation,
  useSessionPlatformAdminApi_UpdateSessionXbl_ByUserIdMutation,
  useStoreAdminApi_CreateExport_ByStoreIdMutation_v2,
  useStoreAdminApi_CreateImportByCsv_ByStoreIdMutation,
  useStoreAdminApi_CreateStoreExportByCsvMutation,
  useStoreAdminApi_CreateStoreMutation,
  useStoreAdminApi_DeleteStorePublishedMutation,
  useStoreAdminApi_DeleteStore_ByStoreIdMutation,
  useStoreAdminApi_GetCatalogConfigs,
  useStoreAdminApi_GetExport_ByStoreId,
  useStoreAdminApi_GetImportHistory_ByStoreId,
  useStoreAdminApi_GetStore_ByStoreId,
  useStoreAdminApi_GetStores,
  useStoreAdminApi_GetStoresCatalogDefinition,
  useStoreAdminApi_GetStoresDownloadCsvTemplates,
  useStoreAdminApi_GetStoresPublished,
  useStoreAdminApi_GetStoresPublishedBackup,
  useStoreAdminApi_UpdateCatalogConfigMutation,
  useStoreAdminApi_UpdateClone_ByStoreIdMutation,
  useStoreAdminApi_UpdateStoreImportMutation,
  useStoreAdminApi_UpdateStoreImportMutation_v2,
  useStoreAdminApi_UpdateStorePublishedRollbackMutation,
  useStoreAdminApi_UpdateStore_ByStoreIdMutation,
  useStoreApi_GetStores,
  useSubscriptionAdminApi_CreateNotification_ByUserId_BySubscriptionIdMutation,
  useSubscriptionAdminApi_CreateSubscriptionPlatformSubscribe_ByUserIdMutation,
  useSubscriptionAdminApi_DeleteSubscription_ByUserId_BySubscriptionIdMutation,
  useSubscriptionAdminApi_GetHistory_ByUserId_BySubscriptionId,
  useSubscriptionAdminApi_GetSubscription_ByUserId_BySubscriptionId,
  useSubscriptionAdminApi_GetSubscriptions,
  useSubscriptionAdminApi_GetSubscriptionsActivities_ByUserId,
  useSubscriptionAdminApi_GetSubscriptionsSubscribableByItemId_ByUserId,
  useSubscriptionAdminApi_GetSubscriptions_ByUserId,
  useSubscriptionAdminApi_UpdateCancel_ByUserId_BySubscriptionIdMutation,
  useSubscriptionAdminApi_UpdateGrant_ByUserId_BySubscriptionIdMutation,
  useSubscriptionAdminApi_UpdateRecurring_BySubscriptionIdMutation,
  useSubscriptionApi_CreateSubscription_ByUserIdMutation,
  useSubscriptionApi_GetHistory_ByUserId_BySubscriptionId,
  useSubscriptionApi_GetSubscription_ByUserId_BySubscriptionId,
  useSubscriptionApi_GetSubscriptionsSubscribableByItemId_ByUserId,
  useSubscriptionApi_GetSubscriptions_ByUserId,
  useSubscriptionApi_UpdateBillingAccount_ByUserId_BySubscriptionIdMutation,
  useSubscriptionApi_UpdateCancel_ByUserId_BySubscriptionIdMutation,
  useTicketAdminApi_CreateTicket_ByUserId_ByBoothNameMutation,
  useTicketAdminApi_GetId_ByBoothName,
  useTicketAdminApi_GetTicket_ByBoothName,
  useTicketAdminApi_UpdateDecrement_ByBoothNameMutation,
  useTicketAdminApi_UpdateIncrement_ByBoothNameMutation,
  useTradeActionAdminApi_CreateTradeCommitMutation,
  useTradeActionAdminApi_GetTradeHistoryByCriteria,
  useTradeActionAdminApi_GetTrade_ByTransactionId,
  useViewAdminApi_CreateViewMutation,
  useViewAdminApi_DeleteView_ByViewIdMutation,
  useViewAdminApi_GetView_ByViewId,
  useViewAdminApi_GetViews,
  useViewAdminApi_UpdateView_ByViewIdMutation,
  useViewApi_GetViews_ByUserId,
  useWalletAdminApi_CreateBalanceCheck_ByUserId_ByCurrencyCodeMutation,
  useWalletAdminApi_CreateWalletCreditMutation,
  useWalletAdminApi_CreateWalletDebitMutation,
  useWalletAdminApi_GetCheck_ByUserId_ByCurrencyCode,
  useWalletAdminApi_GetTransactionsWallets_ByUserId_ByCurrencyCode,
  useWalletAdminApi_GetTransactions_ByUserId_ByWalletId,
  useWalletAdminApi_GetWalletConfig_ByPlatform,
  useWalletAdminApi_GetWallet_ByUserId_ByWalletId,
  useWalletAdminApi_GetWallet_ByWalletId,
  useWalletAdminApi_GetWallets,
  useWalletAdminApi_GetWalletsCurrenciesSummary_ByUserId,
  useWalletAdminApi_UpdateCredit_ByUserId_ByCurrencyCodeMutation,
  useWalletAdminApi_UpdateDebitByWalletPlatform_ByUserId_ByCurrencyCodeMutation,
  useWalletAdminApi_UpdateDebitWallet_ByUserId_ByCurrencyCodeMutation,
  useWalletAdminApi_UpdateDebit_ByUserId_ByWalletIdMutation,
  useWalletAdminApi_UpdateDisable_ByUserId_ByWalletIdMutation,
  useWalletAdminApi_UpdateEnable_ByUserId_ByWalletIdMutation,
  useWalletAdminApi_UpdatePayment_ByUserId_ByCurrencyCodeMutation,
  useWalletAdminApi_UpdateWalletConfigReset_ByPlatformMutation,
  useWalletAdminApi_UpdateWalletConfig_ByPlatformMutation,
  useWalletApi_GetTransactions_ByUserId_ByCurrencyCode,
  useWalletApi_GetUserMeWallet_ByCurrencyCode,
  useWalletApi_GetWallet_ByUserId_ByCurrencyCode
};
