import { AccelByteSDK, SdkSetConfigParam, Response } from '@accelbyte/sdk';
import * as axios from 'axios';
import { AxiosResponse, AxiosInstance } from 'axios';
import { X as XblUserAchievements, a as XblAchievementUpdateRequest, S as SteamAchievementUpdateRequest, C as CampaignPagingSlicedResult, b as CampaignCreate, c as CampaignInfo, d as CodeInfo, e as CampaignUpdate, R as RedeemRequest, f as RedeemResult, g as CodeInfoPagingSlicedResult, h as CodeCreate, i as CodeCreateResult, j as CampaignDynamicInfo, k as CampaignBatchNameChange, l as CampaignBatchNameInfoArray, m as RedeemHistoryPagingSlicedResult, B as BulkOperationResult, n as CatalogChangePagingResult, o as StoreInfo, p as CatalogChangeStatistics, F as FullCategoryInfoArray, q as CategoryCreate, r as FullCategoryInfo, s as BasicCategoryInfoArray, t as CategoryUpdate, I as IapClawbackPagingSlicedResult, u as StreamEvent, v as ClawbackInfo, w as CurrencyInfoArray, x as CurrencyCreate, y as CurrencyInfo, z as CurrencyUpdate, A as CurrencyConfig, D as CurrencySummary, E as DlcItemConfigInfo, G as DlcItemConfigUpdate, U as UserDlc, P as PlatformDlcConfigInfo, H as PlatformDlcConfigUpdate, J as UserDlcRecordArray, K as EntitlementPagingSlicedResult, L as BulkEntitlementGrantRequest, M as BulkEntitlementGrantResult, N as BulkEntitlementRevokeResult, O as EntitlementConfigInfo, Q as EntitlementGrant, T as StackableEntitlementInfoArray, V as EntitlementInfo, W as AppEntitlementInfo, Y as AppEntitlementPagingSlicedResult, Z as EntitlementInfoArray, _ as EntitlementPlatformConfigInfo, $ as EntitlementPlatformConfigUpdate, a0 as Ownership, a1 as EntitlementUpdate, a2 as TimedOwnership, a3 as EntitlementOwnershipArray, a4 as AdminEntitlementSoldRequest, a5 as EntitlementSoldResult, a6 as EntitlementRevokeRequest, a7 as EntitlementHistoryInfoArray, a8 as AdminEntitlementDecrement, a9 as EntitlementDecrementResult, aa as RevokeUseCountRequest, ab as EntitlementIfc, ac as EntitlementPrechekResult, ad as FulfillmentPagingSlicedResult, ae as FulfillmentHistoryPagingSlicedResult, af as FulfillmentRequest, ag as FulfillmentResult, ah as FulfillCodeRequest, ai as RewardsRequest, aj as PreCheckFulfillmentRequest, ak as FulfillmentItemArray, al as FulfillmentV2Request, am as FulfillmentV2Result, an as RevokeFulfillmentV2Result, ao as FulfillmentScriptInfoArray, ap as FulfillmentScriptInfo, aq as FulfillmentScriptUpdate, ar as FulfillmentScriptCreate, as as XblIapConfigInfo, at as XblIapConfigRequest, au as IapItemConfigInfo, av as IapItemConfigUpdate, aw as AppleIapConfigInfo, ax as AppleIapConfigRequest, ay as SteamIapConfig, az as SteamIapConfigRequest, aA as SteamIapConfigInfo, aB as GoogleIapConfigInfo, aC as GoogleIapConfigRequest, aD as OculusIapConfigInfo, aE as OculusIapConfigRequest, aF as TwitchIapConfigInfo, aG as TwitchIapConfigRequest, aH as IapOrderPagingSlicedResult, aI as EpicGamesIapConfigInfo, aJ as EpicGamesIapConfigRequest, aK as PlayStationIapConfigInfo, aL as PlaystationIapConfigRequest, aM as TestResult, aN as MockIapReceipt, aO as IapConsumeHistoryPagingSlicedResult, aP as NotificationPagingSlicedResult, aQ as ThirdPartyUserSubscriptionPagingSlicedResult, aR as ThirdPartyUserSubscriptionInfo, aS as ThirdPartySubscriptionTransactionPagingSlicedResult, aT as ThirdPartySubscriptionTransactionInfo, aU as ThirdPartySubscriptionTransactionHistoryPagingSlicedResult, aV as ThirdPartySubscriptionOwnership, aW as InvoiceSummary, aX as ItemTypeConfigInfoArray, aY as ItemTypeConfigCreate, aZ as ItemTypeConfigInfo, a_ as ItemTypeConfigUpdate, a$ as ItemCreate, b0 as FullItemInfo, b1 as InGameItemSync, b2 as FullItemInfoArray, b3 as FullItemPagingSlicedResult, b4 as ItemUpdate, b5 as BulkRegionDataChangeRequest, b6 as FullAppInfo, b7 as AppUpdate, b8 as PopulatedItemInfo, b9 as ItemId, ba as ItemInfoArray, bb as ItemIdArray, bc as FullItemPagingResult, bd as EstimatedPriceInfo, be as ItemReturnRequest, bf as AvailablePredicateArray, bg as ItemAcquireRequest, bh as ItemAcquireResult, bi as ItemDynamicDataInfo, bj as BasicItemArray, bk as PurchaseConditionUpdate, bl as ItemPurchaseConditionValidateRequest, bm as ItemPurchaseConditionValidateResultArray, bn as KeyGroupPagingSlicedResult, bo as KeyGroupCreate, bp as KeyGroupInfo, bq as KeyGroupUpdate, br as KeyPagingSliceResult, bs as KeyGroupDynamicInfo, bt as OrderPagingResult, bu as OrderStatistics, bv as OrderInfo, bw as OrderPagingSlicedResult, bx as AdminOrderCreate, by as OrderRefundCreate, bz as OrderUpdate, bA as PurchasedItemCount, bB as OrderGrantInfo, bC as OrderHistoryInfoArray, bD as TradeNotification, bE as OrderSyncResult, bF as PaymentOrderPagingSlicedResult, bG as PaymentNotificationPagingSlicedResult, bH as PaymentOrderCreate, bI as PaymentOrderInfo, bJ as PaymentOrderChargeRequest, bK as PaymentOrderChargeStatus, bL as PaymentOrderNotifySimulation, bM as NotificationProcessResult, bN as PaymentOrderRefund, bO as PaymentCallbackConfigInfo, bP as PaymentCallbackConfigUpdate, bQ as PaymentTaxConfigInfo, bR as PaymentTaxConfigEdit, bS as PaymentProviderConfigPagingSlicedResult, bT as PaymentProviderConfigEdit, bU as PaymentProviderConfigInfo, bV as PaymentMerchantConfigInfo, bW as AdyenConfig, bX as WxPayConfigRequest, bY as AliPayConfig, bZ as PayPalConfig, b_ as StripeConfig, b$ as XsollaConfig, c0 as NeonPayConfig, c1 as CheckoutConfig, c2 as XsollaPaywallConfigRequest, c3 as PaymentDomainWhitelistConfigInfo, c4 as PaymentDomainWhitelistConfigEdit, c5 as PaymentOrderSyncResult, c6 as ExternalPaymentOrderCreate, c7 as PaymentOrderCreateResult, c8 as PaymentOrderRefundResult, c9 as PlatformAccountClosureHistoryInfoArray, ca as XblEntitlementOwnershipRequest, cb as PlatformOwnership, cc as PsnEntitlementOwnershipRequest, cd as RevocationConfigInfo, ce as RevocationConfigUpdate, cf as RevocationHistoryPagingSlicedResult, cg as RevocationRequest, ch as RevocationResult, ci as RewardCreate, cj as RewardInfo, ck as RewardUpdate, cl as RewardPagingSlicedResult, cm as EventPayload, cn as ConditionMatchResult, co as DeleteRewardConditionRequest, cp as SectionPagingSlicedResult, cq as SectionCreate, cr as FullSectionInfo, cs as SectionUpdate, ct as ServicePluginConfigInfo, cu as ServicePluginConfigUpdate, cv as LootBoxPluginConfigInfo, cw as LootBoxPluginConfigUpdate, cx as SectionPluginConfigInfo, cy as SectionPluginConfigUpdate, cz as RevocationPluginConfigInfo, cA as RevocationPluginConfigUpdate, cB as GrpcServerInfo, cC as XblUserSessionRequest, cD as StoreInfoArray, cE as StoreCreate, cF as CatalogConfigInfo, cG as CatalogConfigUpdate, cH as StoreUpdate, cI as ImportStoreResult, cJ as ExportStoreToCsvRequest, cK as StoreBackupInfo, cL as CatalogDefinitionInfoArray, cM as ExportStoreRequest, cN as ImportStoreHistoryPagingResult, cO as SubscriptionPagingSlicedResult, cP as SubscriptionActivityPagingSlicedResult, cQ as RecurringChargeResult, cR as SubscriptionInfo, cS as PlatformSubscribeRequest, cT as Subscribable, cU as GrantSubscriptionDaysRequest, cV as CancelRequest, cW as BillingHistoryPagingSlicedResult, cX as TicketDynamicInfo, cY as TicketBoothId, cZ as TicketSaleDecrementRequest, c_ as TicketSaleIncrementRequest, c$ as TicketSaleIncrementResult, d0 as TicketAcquireRequest, d1 as TicketAcquireResult, d2 as TradeChainedActionCommitRequest, d3 as TradeChainActionHistoryInfo, d4 as TradeActionPagingSlicedResult, d5 as ListViewInfoArray, d6 as ViewCreate, d7 as FullViewInfo, d8 as ViewUpdate, d9 as WalletPagingSlicedResult, da as BulkDebitRequest, db as BulkDebitResult, dc as BulkCreditRequest, dd as BulkCreditResult, de as WalletInfo, df as PlatformWalletConfigInfo, dg as PlatformWalletConfigUpdate, dh as DebitRequest, di as CurrencyWalletArray, dj as CreditRequest, dk as PaymentRequest, dl as PlatformWallet, dm as DetailedWalletTransactionPagingSlicedResult, dn as DebitByWalletPlatformRequest, dp as DebitByCurrencyCodeRequest, dq as WalletTransactionPagingSlicedResult, dr as ItemRevocation, ds as CategoryInfoArray, dt as HierarchicalCategoryInfoArray, du as CategoryInfo, dv as SimpleUserDlcRewardContentsResponse, dw as DlcConfigRewardShortInfo, dx as PlayStationDlcSyncRequest, dy as XblDlcSyncRequest, dz as SteamDlcSyncRequest, dA as EpicGamesDlcSyncRequest, dB as PlayStationDlcSyncMultiServiceLabelsRequest, dC as UserEntitlementHistoryPagingSlicedResultArray, dD as OwnershipToken, dE as EntitlementSoldRequest, dF as EntitlementSplitRequest, dG as EntitlementSplitResult, dH as EntitlementTransferRequest, dI as EntitlementTransferResult, dJ as PublicEntitlementDecrement, dK as IapItemMappingInfo, dL as AppleIapConfigVersionInfo, dM as TwitchSyncRequest, dN as TwitchSyncResultArray, dO as PlayStationReconcileRequest, dP as PlayStationReconcileResultArray, dQ as XblReconcileRequest, dR as XblReconcileResultArray, dS as SteamSyncRequest, dT as OculusReconcileResultArray, dU as AppleIapReceipt, dV as EpicGamesReconcileRequest, dW as EpicGamesReconcileResultArray, dX as GoogleIapReceipt, dY as GoogleReceiptResolveResult, dZ as AppleIapRequest, d_ as PlayStationMultiServiceLabelsReconcileRequest, d$ as ItemInfo, e0 as ItemPagingSlicedResult, e1 as EstimatedPriceInfoArray, e2 as AppInfo, e3 as OrderCreate, e4 as OrderDiscountPreviewRequest, e5 as OrderDiscountPreviewResponse, e6 as PaymentAccountArray, e7 as TaxResult, e8 as PaymentUrlCreate, e9 as PaymentUrl, ea as BinarySchema, eb as PaymentMethodArray, ec as Customization, ed as PaymentToken, ee as PaymentProcessResult, ef as PaymentOrderDetails, eg as PaymentOrderPaidResult, eh as SectionInfoArray, ei as SubscribeRequest, ej as ViewInfoArray } from './XblReconcileResultArray-DFVv4dm6.js';
export { ek as CreditRevocation, el as EntitlementRevocation, em as HierarchicalCategoryInfo } from './XblReconcileResultArray-DFVv4dm6.js';
import * as zod from 'zod';
import { z } from 'zod';

/**
 * AUTO GENERATED
 */

declare function AchievementPlatformAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to get xbox live user achievements(Only for test).
     */
    getAchievementXbl_ByUserId: (userId: string, queryParams: {
        xboxUserId: string | null;
    }) => Promise<AxiosResponse<XblUserAchievements>>;
    /**
     * This API is used to update xbox live achievements.
     */
    updateAchievementXbl_ByUserId: (userId: string, data: XblAchievementUpdateRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to unlock steam achievement.
     */
    updateAchievementSteam_ByUserId: (userId: string, data: SteamAchievementUpdateRequest) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function AnonymizationAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Anonymize order. At current it will only anonymize order, order history.
     */
    deleteAnonymizationOrder_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize payment. At current it will only anonymize payment order, payment order history.
     */
    deleteAnonymizationPayment_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize wallet. At current it will only anonymize wallet, wallet transaction.
     */
    deleteAnonymizationWallet_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize campaign. At current it will only anonymize redeem history.
     */
    deleteAnonymizationCampaign_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize revocation. At current it will only anonymize revocation history.
     */
    deleteAnonymizationRevocation_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize fulfillment. At current it will only anonymize fulfillment history.
     */
    deleteAnonymizationFulfillment_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize entitlement. At current it will only anonymize entitlement, entitlement history.
     */
    deleteAnonymizationEntitlement_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize integrations. At current it will only anonymize iap histories.
     */
    deleteAnonymizationIntegration_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Anonymize subscription. At current it will anonymize subscription, billing history and subscription activity.
     */
    deleteAnonymizationSubscription_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function CampaignAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query campaigns, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of campaigns&lt;/li&gt;&lt;/ul&gt;
     */
    getCampaigns: (queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        tag?: string | null;
    }) => Promise<AxiosResponse<CampaignPagingSlicedResult>>;
    /**
     * Create campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created campaign&lt;/li&gt;&lt;/ul&gt;
     */
    createCampaign: (data: CampaignCreate) => Promise<AxiosResponse<CampaignInfo>>;
    /**
     * Get campaign code, it will check code whether available to redeem if redeemable true.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: code info&lt;/li&gt;&lt;/ul&gt;
     */
    getCode_ByCode: (code: string, queryParams?: {
        redeemable?: boolean | null;
        withBatchName?: boolean | null;
    }) => Promise<AxiosResponse<CodeInfo>>;
    /**
     * Enable code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enabled code&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnable_ByCode: (code: string) => Promise<AxiosResponse<CodeInfo>>;
    /**
     * Disable code.&lt;p&gt;Disable an active code, the code can&#39;t be disabled if it has already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disabled code&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisable_ByCode: (code: string) => Promise<AxiosResponse<CodeInfo>>;
    /**
     * Get campaign info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign info&lt;/li&gt;&lt;/ul&gt;
     */
    getCampaign_ByCampaignId: (campaignId: string) => Promise<AxiosResponse<CampaignInfo>>;
    /**
     * Update campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated campaign&lt;/li&gt;&lt;/ul&gt;
     */
    updateCampaign_ByCampaignId: (campaignId: string, data: CampaignUpdate) => Promise<AxiosResponse<CampaignInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Redeem code. If the campaign which the code belongs to is INACTIVE, the code couldn&#39;t be redeemed even if its status is ACTIVE.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Redeem result&lt;/li&gt;&lt;/ul&gt;
     */
    createRedemption_ByUserId: (userId: string, data: RedeemRequest) => Promise<AxiosResponse<RedeemResult>>;
    /**
     * Query campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of codes&lt;/li&gt;&lt;li&gt;The &lt;i&gt;batchName&lt;/i&gt; field in the codes response will be present only when the &lt;i&gt;withBatchName&lt;/i&gt; parameter is &lt;i&gt;true&lt;/i&gt;, or when the &lt;i&gt;batchName&lt;/i&gt; filter is not blank.&lt;/li&gt;&lt;/ul&gt;
     */
    getCodeCampaign_ByCampaignId: (campaignId: string, queryParams?: {
        activeOnly?: boolean | null;
        batchName?: string | null;
        batchNo?: number[];
        code?: string | null;
        limit?: number;
        offset?: number;
        withBatchName?: boolean | null;
    }) => Promise<AxiosResponse<CodeInfoPagingSlicedResult>>;
    /**
     * This API is used to create campaign codes, it will increase the batch No. based on last creation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: number of codes created&lt;/li&gt;&lt;/ul&gt;
     */
    createCodeCampaign_ByCampaignId: (campaignId: string, data: CodeCreate) => Promise<AxiosResponse<CodeCreateResult>>;
    /**
     * Get campaign dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign dynamic&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByCampaignId: (campaignId: string) => Promise<AxiosResponse<CampaignDynamicInfo>>;
    /**
     * Change campaign batch name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    updateBatchName_ByCampaignId: (campaignId: string, data: CampaignBatchNameChange) => Promise<AxiosResponse<unknown>>;
    /**
     * Query campaign batch name by fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of campaign batch names&lt;/li&gt;&lt;/ul&gt;
     */
    getBatchNames_ByCampaignId: (campaignId: string, queryParams?: {
        batchName?: string | null;
        limit?: number;
    }) => Promise<AxiosResponse<CampaignBatchNameInfoArray>>;
    /**
     * Query redeem history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of redeem history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistoryCodes_ByCampaignId: (campaignId: string, queryParams?: {
        code?: string | null;
        limit?: number;
        offset?: number;
        userId?: string | null;
    }) => Promise<AxiosResponse<RedeemHistoryPagingSlicedResult>>;
    /**
     * Download all or a batch of campaign&#39;s codes as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: codes csv file&lt;/li&gt;&lt;li&gt;The csv file will always have &lt;i&gt;Batch Name&lt;/i&gt; column, but this column will be filled only when the &lt;i&gt;withBatchName&lt;/i&gt; parameter is &lt;i&gt;true&lt;/i&gt;, or when the &lt;i&gt;batchName&lt;/i&gt; filter is not blank.&lt;/li&gt;&lt;/ul&gt;
     */
    getCodesCsv_ByCampaignId: (campaignId: string, queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
        withBatchName?: boolean | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * Bulk enable campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually enabled&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnableBulkCode_ByCampaignId: (campaignId: string, queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    }) => Promise<AxiosResponse<BulkOperationResult>>;
    /**
     * Bulk disable codes.&lt;p&gt;Bulk disable campaign codes, all matched codes will be disabled except those have already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually disabled&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisableBulkCode_ByCampaignId: (campaignId: string, queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    }) => Promise<AxiosResponse<BulkOperationResult>>;
};

/**
 * AUTO GENERATED
 */

declare function CatalogChangesAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Select all changes.
     */
    updateCatalogChangeSelectAll_ByStoreId: (storeId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to query changes .&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the pagination of changes&lt;/li&gt;&lt;/ul&gt;
     */
    getCatalogChangesByCriteria_ByStoreId: (storeId: string, queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        selected?: boolean | null;
        sortBy?: string[];
        status?: "PUBLISHED" | "UNPUBLISHED";
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
        withTotal?: boolean | null;
    }) => Promise<AxiosResponse<CatalogChangePagingResult>>;
    /**
     * This API is used to publish all unpublished changes.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: no content&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogChangePublishAll_ByStoreId: (storeId: string) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to query catalog changes statistics .&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: catalog changes statistics changes&lt;/li&gt;&lt;/ul&gt;
     */
    getCatalogChangesStatistics_ByStoreId: (storeId: string, queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    }) => Promise<AxiosResponse<CatalogChangeStatistics>>;
    /**
     * Unselect all change.
     */
    updateCatalogChangeUnselectAll_ByStoreId: (storeId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to publish selected unpublished changes.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: no content&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogChangePublishSelected_ByStoreId: (storeId: string) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * Select a change, it will be included when partial publish.
     */
    updateSelect_ByStoreId_ByChangeId: (storeId: string, changeId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Unselect a change, it will not be included when partial publish.
     */
    updateUnselect_ByStoreId_ByChangeId: (storeId: string, changeId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Select all changes by criteria
     */
    updateCatalogChangeSelectAllByCriteria_ByStoreId: (storeId: string, queryParams?: {
        action?: "CREATE" | "DELETE" | "UPDATE";
        itemSku?: string | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        selected?: boolean | null;
        type?: "CATEGORY" | "ITEM" | "SECTION" | "STORE" | "VIEW";
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    }) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function CategoryAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategories: (queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfoArray>>;
    /**
     * This API is used to create category.&lt;p&gt;A category is a path separated by &#34;/&#34;. A category also has localized display names. Example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizationDisplayNames&#34;: \{&#34;en&#34; : &#34;Games&#34;} }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created category data&lt;/li&gt;&lt;/ul&gt;
     */
    createCategory: (data: CategoryCreate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfo>>;
    /**
     * This API is used to list all categories&#39; basic info of a store ordered by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of categories&#39; paths&lt;/li&gt;&lt;/ul&gt;
     */
    getCategoriesBasic: (queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<BasicCategoryInfoArray>>;
    /**
     * This API is used to delete category by category path. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted category data&lt;/li&gt;&lt;/ul&gt;
     */
    deleteCategory_ByCategoryPath: (categoryPath: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfo>>;
    /**
     * This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategory_ByCategoryPath: (categoryPath: string, queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfo>>;
    /**
     * This API is used to update category. &lt;p&gt; The category update data is a category object, example as:&lt;pre&gt;&lt;code&gt;{ &#34;storeId&#34;: &#34;store-id&#34;, &#34;localizationDisplayNames&#34;: {&#34;en&#34; : &#34;Games&#34;} }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the updated category data&lt;/li&gt;&lt;/ul&gt;
     */
    updateCategory_ByCategoryPath: (categoryPath: string, data: CategoryUpdate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfo>>;
    /**
     * This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getChildren_ByCategoryPath: (categoryPath: string, queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfoArray>>;
    /**
     * This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getDescendants_ByCategoryPath: (categoryPath: string, queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullCategoryInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function ClawbackAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query clawback history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated clawback history&lt;/li&gt;&lt;/ul&gt;
     */
    getIapClawbackHistories: (queryParams?: {
        endTime?: string | null;
        eventType?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "OTHER" | "REFUND";
        externalOrderId?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        status?: "FAIL" | "IGNORED" | "INIT" | "SUCCESS";
        userId?: string | null;
    }) => Promise<AxiosResponse<IapClawbackPagingSlicedResult>>;
    /**
     * Mock Sync PlayStation Clawback event..
     */
    createIapClawbackPlaystationMock: (data: StreamEvent) => Promise<AxiosResponse<ClawbackInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function CurrencyAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;
     */
    getCurrencies: (queryParams?: {
        currencyType?: "REAL" | "VIRTUAL";
    }) => Promise<AxiosResponse<CurrencyInfoArray>>;
    /**
     * Create a currency.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created currency&lt;/li&gt;&lt;/ul&gt;
     */
    createCurrency: (data: CurrencyCreate) => Promise<AxiosResponse<CurrencyInfo>>;
    /**
     * Delete a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    deleteCurrency_ByCurrencyCode: (currencyCode: string) => Promise<AxiosResponse<CurrencyInfo>>;
    /**
     * Update a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated currency&lt;/li&gt;&lt;/ul&gt;
     */
    updateCurrency_ByCurrencyCode: (currencyCode: string, data: CurrencyUpdate) => Promise<AxiosResponse<CurrencyInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get currency config by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;
     */
    getConfig_ByCurrencyCode: (currencyCode: string) => Promise<AxiosResponse<CurrencyConfig>>;
    /**
     * Get currency summary by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;
     */
    getSummary_ByCurrencyCode: (currencyCode: string) => Promise<AxiosResponse<CurrencySummary>>;
};

/**
 * AUTO GENERATED
 */

declare function DlcAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * delete a DLC item config.
     */
    deleteDlcConfigItem: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get DLC item config.
     */
    getDlcConfigItem: () => Promise<AxiosResponse<DlcItemConfigInfo>>;
    /**
     * Update DLC item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated DLC item config&lt;/li&gt;&lt;/ul&gt;
     */
    updateDlcConfigItem: (data: DlcItemConfigUpdate) => Promise<AxiosResponse<DlcItemConfigInfo>>;
    /**
     * Get user dlc by platform.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
     */
    getDlc_ByUserId: (userId: string, queryParams: {
        type: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
    }) => Promise<AxiosResponse<UserDlc>>;
    /**
     * delete a Platform DLC config.
     */
    deleteDlcConfigPlatformMap: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get Platform DLC config.
     */
    getDlcConfigPlatformMap: () => Promise<AxiosResponse<PlatformDlcConfigInfo>>;
    /**
     * Update Platform DLC config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated Platform DLC config&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for platform dlc map&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateDlcConfigPlatformMap: (data: PlatformDlcConfigUpdate) => Promise<AxiosResponse<PlatformDlcConfigInfo>>;
    /**
     * Get user dlc records.&lt;br&gt;Note: includeAllNamespaces means this endpoint will return user dlcs from all namespace, example scenario isadmin may need to check the user dlcs before unlink a 3rd party account, so the user dlcs should be from all namespaces because unlinking is a platform level action &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
     */
    getDlcRecords_ByUserId: (userId: string, queryParams?: {
        includeAllNamespaces?: boolean | null;
        status?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED";
        type?: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
    }) => Promise<AxiosResponse<UserDlcRecordArray>>;
};

/**
 * AUTO GENERATED
 */

declare class AchievementPlatformAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to get xbox live user achievements(Only for test).
     */
    getAchievementXbl_ByUserId(userId: string, queryParams: {
        xboxUserId: string | null;
    }): Promise<Response<XblUserAchievements>>;
    /**
     * This API is used to update xbox live achievements.
     */
    updateAchievementXbl_ByUserId(userId: string, data: XblAchievementUpdateRequest): Promise<Response<unknown>>;
    /**
     * This API is used to unlock steam achievement.
     */
    updateAchievementSteam_ByUserId(userId: string, data: SteamAchievementUpdateRequest): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class AnonymizationAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Anonymize order. At current it will only anonymize order, order history.
     */
    deleteAnonymizationOrder_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize payment. At current it will only anonymize payment order, payment order history.
     */
    deleteAnonymizationPayment_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize wallet. At current it will only anonymize wallet, wallet transaction.
     */
    deleteAnonymizationWallet_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize campaign. At current it will only anonymize redeem history.
     */
    deleteAnonymizationCampaign_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize revocation. At current it will only anonymize revocation history.
     */
    deleteAnonymizationRevocation_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize fulfillment. At current it will only anonymize fulfillment history.
     */
    deleteAnonymizationFulfillment_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize entitlement. At current it will only anonymize entitlement, entitlement history.
     */
    deleteAnonymizationEntitlement_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize integrations. At current it will only anonymize iap histories.
     */
    deleteAnonymizationIntegration_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Anonymize subscription. At current it will anonymize subscription, billing history and subscription activity.
     */
    deleteAnonymizationSubscription_ByUserId(userId: string): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class CampaignAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query campaigns, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of campaigns&lt;/li&gt;&lt;/ul&gt;
     */
    getCampaigns(queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        tag?: string | null;
    }): Promise<Response<CampaignPagingSlicedResult>>;
    /**
     * Create campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created campaign&lt;/li&gt;&lt;/ul&gt;
     */
    createCampaign(data: CampaignCreate): Promise<Response<CampaignInfo>>;
    /**
     * Get campaign code, it will check code whether available to redeem if redeemable true.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: code info&lt;/li&gt;&lt;/ul&gt;
     */
    getCode_ByCode(code: string, queryParams?: {
        redeemable?: boolean | null;
        withBatchName?: boolean | null;
    }): Promise<Response<CodeInfo>>;
    /**
     * Enable code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enabled code&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnable_ByCode(code: string): Promise<Response<CodeInfo>>;
    /**
     * Disable code.&lt;p&gt;Disable an active code, the code can&#39;t be disabled if it has already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disabled code&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisable_ByCode(code: string): Promise<Response<CodeInfo>>;
    /**
     * Get campaign info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign info&lt;/li&gt;&lt;/ul&gt;
     */
    getCampaign_ByCampaignId(campaignId: string): Promise<Response<CampaignInfo>>;
    /**
     * Update campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated campaign&lt;/li&gt;&lt;/ul&gt;
     */
    updateCampaign_ByCampaignId(campaignId: string, data: CampaignUpdate): Promise<Response<CampaignInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Redeem code. If the campaign which the code belongs to is INACTIVE, the code couldn&#39;t be redeemed even if its status is ACTIVE.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Redeem result&lt;/li&gt;&lt;/ul&gt;
     */
    createRedemption_ByUserId(userId: string, data: RedeemRequest): Promise<Response<RedeemResult>>;
    /**
     * Query campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of codes&lt;/li&gt;&lt;li&gt;The &lt;i&gt;batchName&lt;/i&gt; field in the codes response will be present only when the &lt;i&gt;withBatchName&lt;/i&gt; parameter is &lt;i&gt;true&lt;/i&gt;, or when the &lt;i&gt;batchName&lt;/i&gt; filter is not blank.&lt;/li&gt;&lt;/ul&gt;
     */
    getCodeCampaign_ByCampaignId(campaignId: string, queryParams?: {
        activeOnly?: boolean | null;
        batchName?: string | null;
        batchNo?: number[];
        code?: string | null;
        limit?: number;
        offset?: number;
        withBatchName?: boolean | null;
    }): Promise<Response<CodeInfoPagingSlicedResult>>;
    /**
     * This API is used to create campaign codes, it will increase the batch No. based on last creation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: number of codes created&lt;/li&gt;&lt;/ul&gt;
     */
    createCodeCampaign_ByCampaignId(campaignId: string, data: CodeCreate): Promise<Response<CodeCreateResult>>;
    /**
     * Get campaign dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign dynamic&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByCampaignId(campaignId: string): Promise<Response<CampaignDynamicInfo>>;
    /**
     * Change campaign batch name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;
     */
    updateBatchName_ByCampaignId(campaignId: string, data: CampaignBatchNameChange): Promise<Response<unknown>>;
    /**
     * Query campaign batch name by fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of campaign batch names&lt;/li&gt;&lt;/ul&gt;
     */
    getBatchNames_ByCampaignId(campaignId: string, queryParams?: {
        batchName?: string | null;
        limit?: number;
    }): Promise<Response<CampaignBatchNameInfoArray>>;
    /**
     * Query redeem history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of redeem history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistoryCodes_ByCampaignId(campaignId: string, queryParams?: {
        code?: string | null;
        limit?: number;
        offset?: number;
        userId?: string | null;
    }): Promise<Response<RedeemHistoryPagingSlicedResult>>;
    /**
     * Download all or a batch of campaign&#39;s codes as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: codes csv file&lt;/li&gt;&lt;li&gt;The csv file will always have &lt;i&gt;Batch Name&lt;/i&gt; column, but this column will be filled only when the &lt;i&gt;withBatchName&lt;/i&gt; parameter is &lt;i&gt;true&lt;/i&gt;, or when the &lt;i&gt;batchName&lt;/i&gt; filter is not blank.&lt;/li&gt;&lt;/ul&gt;
     */
    getCodesCsv_ByCampaignId(campaignId: string, queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
        withBatchName?: boolean | null;
    }): Promise<Response<unknown>>;
    /**
     * Bulk enable campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually enabled&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnableBulkCode_ByCampaignId(campaignId: string, queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    }): Promise<Response<BulkOperationResult>>;
    /**
     * Bulk disable codes.&lt;p&gt;Bulk disable campaign codes, all matched codes will be disabled except those have already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually disabled&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisableBulkCode_ByCampaignId(campaignId: string, queryParams?: {
        batchName?: string | null;
        batchNo?: number[];
    }): Promise<Response<BulkOperationResult>>;
}

/**
 * AUTO GENERATED
 */

declare class CatalogChangesAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Select all changes.
     */
    updateCatalogChangeSelectAll_ByStoreId(storeId: string): Promise<Response<unknown>>;
    /**
     * This API is used to query changes .&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the pagination of changes&lt;/li&gt;&lt;/ul&gt;
     */
    getCatalogChangesByCriteria_ByStoreId(storeId: string, queryParams?: {
        action?: 'CREATE' | 'DELETE' | 'UPDATE';
        itemSku?: string | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        limit?: number;
        offset?: number;
        selected?: boolean | null;
        sortBy?: string[];
        status?: 'PUBLISHED' | 'UNPUBLISHED';
        type?: 'CATEGORY' | 'ITEM' | 'SECTION' | 'STORE' | 'VIEW';
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
        withTotal?: boolean | null;
    }): Promise<Response<CatalogChangePagingResult>>;
    /**
     * This API is used to publish all unpublished changes.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: no content&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogChangePublishAll_ByStoreId(storeId: string): Promise<Response<StoreInfo>>;
    /**
     * This API is used to query catalog changes statistics .&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: catalog changes statistics changes&lt;/li&gt;&lt;/ul&gt;
     */
    getCatalogChangesStatistics_ByStoreId(storeId: string, queryParams?: {
        action?: 'CREATE' | 'DELETE' | 'UPDATE';
        itemSku?: string | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        type?: 'CATEGORY' | 'ITEM' | 'SECTION' | 'STORE' | 'VIEW';
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    }): Promise<Response<CatalogChangeStatistics>>;
    /**
     * Unselect all change.
     */
    updateCatalogChangeUnselectAll_ByStoreId(storeId: string): Promise<Response<unknown>>;
    /**
     * This API is used to publish selected unpublished changes.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: no content&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogChangePublishSelected_ByStoreId(storeId: string): Promise<Response<StoreInfo>>;
    /**
     * Select a change, it will be included when partial publish.
     */
    updateSelect_ByStoreId_ByChangeId(storeId: string, changeId: string): Promise<Response<unknown>>;
    /**
     * Unselect a change, it will not be included when partial publish.
     */
    updateUnselect_ByStoreId_ByChangeId(storeId: string, changeId: string): Promise<Response<unknown>>;
    /**
     * Select all changes by criteria
     */
    updateCatalogChangeSelectAllByCriteria_ByStoreId(storeId: string, queryParams?: {
        action?: 'CREATE' | 'DELETE' | 'UPDATE';
        itemSku?: string | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        selected?: boolean | null;
        type?: 'CATEGORY' | 'ITEM' | 'SECTION' | 'STORE' | 'VIEW';
        updatedAtEnd?: string | null;
        updatedAtStart?: string | null;
    }): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class CategoryAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategories(queryParams?: {
        storeId?: string | null;
    }): Promise<Response<FullCategoryInfoArray>>;
    /**
     * This API is used to create category.&lt;p&gt;A category is a path separated by &#34;/&#34;. A category also has localized display names. Example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizationDisplayNames&#34;: \{&#34;en&#34; : &#34;Games&#34;} }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created category data&lt;/li&gt;&lt;/ul&gt;
     */
    createCategory(data: CategoryCreate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullCategoryInfo>>;
    /**
     * This API is used to list all categories&#39; basic info of a store ordered by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of categories&#39; paths&lt;/li&gt;&lt;/ul&gt;
     */
    getCategoriesBasic(queryParams?: {
        storeId?: string | null;
    }): Promise<Response<BasicCategoryInfoArray>>;
    /**
     * This API is used to delete category by category path. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted category data&lt;/li&gt;&lt;/ul&gt;
     */
    deleteCategory_ByCategoryPath(categoryPath: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullCategoryInfo>>;
    /**
     * This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategory_ByCategoryPath(categoryPath: string, queryParams?: {
        storeId?: string | null;
    }): Promise<Response<FullCategoryInfo>>;
    /**
     * This API is used to update category. &lt;p&gt; The category update data is a category object, example as:&lt;pre&gt;&lt;code&gt;{ &#34;storeId&#34;: &#34;store-id&#34;, &#34;localizationDisplayNames&#34;: {&#34;en&#34; : &#34;Games&#34;} }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the updated category data&lt;/li&gt;&lt;/ul&gt;
     */
    updateCategory_ByCategoryPath(categoryPath: string, data: CategoryUpdate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullCategoryInfo>>;
    /**
     * This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getChildren_ByCategoryPath(categoryPath: string, queryParams?: {
        storeId?: string | null;
    }): Promise<Response<FullCategoryInfoArray>>;
    /**
     * This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getDescendants_ByCategoryPath(categoryPath: string, queryParams?: {
        storeId?: string | null;
    }): Promise<Response<FullCategoryInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class ClawbackAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query clawback history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated clawback history&lt;/li&gt;&lt;/ul&gt;
     */
    getIapClawbackHistories(queryParams?: {
        endTime?: string | null;
        eventType?: 'CHARGEBACK' | 'CHARGEBACK_REVERSED' | 'OTHER' | 'REFUND';
        externalOrderId?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        status?: 'FAIL' | 'IGNORED' | 'INIT' | 'SUCCESS';
        userId?: string | null;
    }): Promise<Response<IapClawbackPagingSlicedResult>>;
    /**
     * Mock Sync PlayStation Clawback event..
     */
    createIapClawbackPlaystationMock(data: StreamEvent): Promise<Response<ClawbackInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class CurrencyAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;
     */
    getCurrencies(queryParams?: {
        currencyType?: 'REAL' | 'VIRTUAL';
    }): Promise<Response<CurrencyInfoArray>>;
    /**
     * Create a currency.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created currency&lt;/li&gt;&lt;/ul&gt;
     */
    createCurrency(data: CurrencyCreate): Promise<Response<CurrencyInfo>>;
    /**
     * Delete a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    deleteCurrency_ByCurrencyCode(currencyCode: string): Promise<Response<CurrencyInfo>>;
    /**
     * Update a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated currency&lt;/li&gt;&lt;/ul&gt;
     */
    updateCurrency_ByCurrencyCode(currencyCode: string, data: CurrencyUpdate): Promise<Response<CurrencyInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get currency config by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;
     */
    getConfig_ByCurrencyCode(currencyCode: string): Promise<Response<CurrencyConfig>>;
    /**
     * Get currency summary by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;
     */
    getSummary_ByCurrencyCode(currencyCode: string): Promise<Response<CurrencySummary>>;
}

/**
 * AUTO GENERATED
 */

declare class DlcAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * delete a DLC item config.
     */
    deleteDlcConfigItem(): Promise<Response<unknown>>;
    /**
     * Get DLC item config.
     */
    getDlcConfigItem(): Promise<Response<DlcItemConfigInfo>>;
    /**
     * Update DLC item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated DLC item config&lt;/li&gt;&lt;/ul&gt;
     */
    updateDlcConfigItem(data: DlcItemConfigUpdate): Promise<Response<DlcItemConfigInfo>>;
    /**
     * Get user dlc by platform.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
     */
    getDlc_ByUserId(userId: string, queryParams: {
        type: 'EPICGAMES' | 'OCULUS' | 'PSN' | 'STEAM' | 'XBOX';
    }): Promise<Response<UserDlc>>;
    /**
     * delete a Platform DLC config.
     */
    deleteDlcConfigPlatformMap(): Promise<Response<unknown>>;
    /**
     * Get Platform DLC config.
     */
    getDlcConfigPlatformMap(): Promise<Response<PlatformDlcConfigInfo>>;
    /**
     * Update Platform DLC config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated Platform DLC config&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for platform dlc map&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateDlcConfigPlatformMap(data: PlatformDlcConfigUpdate): Promise<Response<PlatformDlcConfigInfo>>;
    /**
     * Get user dlc records.&lt;br&gt;Note: includeAllNamespaces means this endpoint will return user dlcs from all namespace, example scenario isadmin may need to check the user dlcs before unlink a 3rd party account, so the user dlcs should be from all namespaces because unlinking is a platform level action &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
     */
    getDlcRecords_ByUserId(userId: string, queryParams?: {
        includeAllNamespaces?: boolean | null;
        status?: 'FULFILLED' | 'REVOKED' | 'REVOKE_FAILED';
        type?: 'EPICGAMES' | 'OCULUS' | 'PSN' | 'STEAM' | 'XBOX';
    }): Promise<Response<UserDlcRecordArray>>;
}

/**
 * AUTO GENERATED
 */

declare class EntitlementAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query entitlements.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlements(queryParams?: {
        activeOnly?: boolean | null;
        appType?: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        entitlementName?: string | null;
        itemId?: string[];
        limit?: number;
        offset?: number;
        origin?: 'Epic' | 'GooglePlay' | 'IOS' | 'Nintendo' | 'Oculus' | 'Other' | 'Playstation' | 'Steam' | 'System' | 'Twitch' | 'Xbox';
        userId?: string | null;
    }): Promise<Response<EntitlementPagingSlicedResult>>;
    /**
     * Grant entitlements to multiple users, skipped granting will be treated as fail.&lt;br&gt;&lt;br&gt;Notes: &lt;br&gt;&lt;br&gt;Support Item Types:&lt;ul&gt;&lt;li&gt;&lt;i&gt;APP&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;INGAMEITEM&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;CODE&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUBSCRIPTION&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MEDIA&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;OPTIONBOX&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;LOOTBOX&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk grant entitlements result&lt;/li&gt;&lt;/ul&gt;
     */
    createEntitlementGrant(data: BulkEntitlementGrantRequest): Promise<Response<BulkEntitlementGrantResult>>;
    /**
     * Revoke entitlements, skipped revocation will be treated as fail.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk revoke entitlements result&lt;/li&gt;&lt;/ul&gt;
     */
    createEntitlementRevoke(data: string[]): Promise<Response<BulkEntitlementRevokeResult>>;
    /**
     * Query entitlements by Item Ids.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByItemIds(queryParams?: {
        activeOnly?: boolean | null;
        itemIds?: string[];
        limit?: number;
        offset?: number;
    }): Promise<Response<EntitlementPagingSlicedResult>>;
    /**
     * Get entitlement config info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsConfigInfo(queryParams?: {
        withoutCache?: boolean | null;
    }): Promise<Response<EntitlementConfigInfo>>;
    /**
     * Query entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlements_ByUserId(userId: string, queryParams?: {
        activeOnly?: boolean | null;
        appType?: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        collectionId?: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        entitlementName?: string | null;
        features?: string[];
        fuzzyMatchName?: boolean | null;
        itemId?: string[];
        limit?: number;
        offset?: number;
        origin?: 'Epic' | 'GooglePlay' | 'IOS' | 'Nintendo' | 'Oculus' | 'Other' | 'Playstation' | 'Steam' | 'System' | 'Twitch' | 'Xbox';
    }): Promise<Response<EntitlementPagingSlicedResult>>;
    /**
     * Grant user entitlement.&lt;br&gt;&lt;br&gt;Notes: &lt;br&gt;&lt;br&gt;will skip un-supported item if input un-supported item types, please use /admin/namespaces/{namespace}/users/{userId}/fulfillment endpoint if want to fulfill other item type, like coin item&lt;br&gt;&lt;br&gt;Support Item Types:&lt;ul&gt;&lt;li&gt;&lt;i&gt;APP&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;INGAMEITEM&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;CODE&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUBSCRIPTION&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MEDIA&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;OPTIONBOX&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;LOOTBOX&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: granted entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    createEntitlement_ByUserId(userId: string, data: EntitlementGrant[]): Promise<Response<StackableEntitlementInfoArray>>;
    /**
     * Get entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlement_ByEntitlementId(entitlementId: string): Promise<Response<EntitlementInfo>>;
    /**
     * Get user entitlement by sku.
     */
    getEntitlementsBySku_ByUserId(userId: string, queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        platform?: string | null;
    }): Promise<Response<EntitlementInfo>>;
    /**
     * Revoke all entitlements of a user (This API is for testing purpose only)&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoked entitlements count&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementRevoke_ByUserId(userId: string): Promise<Response<BulkOperationResult>>;
    /**
     * Get user app entitlement by appId.
     */
    getEntitlementsByAppId_ByUserId(userId: string, queryParams: {
        appId: string | null;
        activeOnly?: boolean | null;
    }): Promise<Response<AppEntitlementInfo>>;
    /**
     * Get user entitlement by itemId.
     */
    getEntitlementsByItemId_ByUserId(userId: string, queryParams: {
        itemId: string | null;
        activeOnly?: boolean | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        platform?: string | null;
    }): Promise<Response<EntitlementInfo>>;
    /**
     * Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByAppType_ByUserId(userId: string, queryParams: {
        appType: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        activeOnly?: boolean | null;
        limit?: number;
        offset?: number;
    }): Promise<Response<AppEntitlementPagingSlicedResult>>;
    /**
     * Get user entitlements by itemIds.
     */
    getEntitlementsByItemIds_ByUserId(userId: string, queryParams?: {
        ids?: string[];
        platform?: string | null;
    }): Promise<Response<EntitlementInfoArray>>;
    /**
     * Get platform entitlement config list.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementConfig_ByPlatform(platform: string): Promise<Response<EntitlementPlatformConfigInfo>>;
    /**
     * Update platform entitlement config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform entitlement config&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementConfig_ByPlatform(platform: string, data: EntitlementPlatformConfigUpdate): Promise<Response<EntitlementPlatformConfigInfo>>;
    /**
     * Revoke user&#39;s entitlements by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlements count&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementRevokeById_ByUserId(userId: string, queryParams: {
        entitlementIds: string | null;
    }): Promise<Response<BulkOperationResult>>;
    /**
     * Exists any user active entitlement of specified itemIds, skus and appIds
     */
    getEntitlementsOwnershipAny_ByUserId(userId: string, queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        platform?: string | null;
        skus?: string[];
    }): Promise<Response<Ownership>>;
    /**
     * Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlement_ByUserId_ByEntitlementId(userId: string, entitlementId: string): Promise<Response<EntitlementInfo>>;
    /**
     * Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlement_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: EntitlementUpdate): Promise<Response<EntitlementInfo>>;
    /**
     * Exists any user active entitlement of specified items.
     */
    getEntitlementsOwnershipAnyOf_ByUserId(userId: string, queryParams: {
        itemIds: string[];
        platform?: string | null;
    }): Promise<Response<Ownership>>;
    /**
     * Get user entitlement ownership by sku.
     */
    getEntitlementsOwnershipBySku_ByUserId(userId: string, queryParams: {
        sku: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        platform?: string | null;
    }): Promise<Response<TimedOwnership>>;
    /**
     * Enable Entitlement origin feature.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementConfigEntitlementOriginEnable(): Promise<Response<EntitlementConfigInfo>>;
    /**
     * Get user app entitlement ownership by appId.
     */
    getEntitlementsOwnershipByAppId_ByUserId(userId: string, queryParams: {
        appId: string | null;
    }): Promise<Response<Ownership>>;
    /**
     * Get user entitlement ownership by itemId.
     */
    getEntitlementsOwnershipByItemId_ByUserId(userId: string, queryParams: {
        itemId: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        platform?: string | null;
    }): Promise<Response<TimedOwnership>>;
    /**
     * Get user entitlement ownership by itemIds.
     */
    getEntitlementsOwnershipByItemIds_ByUserId(userId: string, queryParams?: {
        ids?: string[];
        platform?: string | null;
    }): Promise<Response<EntitlementOwnershipArray>>;
    /**
     * Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateSell_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: AdminEntitlementSoldRequest): Promise<Response<EntitlementSoldResult>>;
    /**
     * Enable user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enable entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnable_ByUserId_ByEntitlementId(userId: string, entitlementId: string): Promise<Response<EntitlementInfo>>;
    /**
     * Revoke user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevoke_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: EntitlementRevokeRequest): Promise<Response<EntitlementInfo>>;
    /**
     * Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can&#39;t consume.&lt;br&gt;&lt;b&gt;Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disable entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisable_ByUserId_ByEntitlementId(userId: string, entitlementId: string): Promise<Response<EntitlementInfo>>;
    /**
     * Get user entitlement histories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of entitlement history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_ByEntitlementId(userId: string, entitlementId: string): Promise<Response<EntitlementHistoryInfoArray>>;
    /**
     * Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateDecrement_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: AdminEntitlementDecrement): Promise<Response<EntitlementDecrementResult>>;
    /**
     * @deprecated
     * Revoke specified use count of user entitlement. please use /{entitlementId}/revoke/byUseCount endpoint instead of this endpoint&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevokeByUseCount_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: RevokeUseCountRequest): Promise<Response<EntitlementInfo>>;
    /**
     * Revoke specified count of user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: The revoked entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    createRevokeByUseCount_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: RevokeUseCountRequest): Promise<Response<EntitlementIfc>>;
    /**
     * Checks if specified use count of user entitlement can be revoked without actually revoking it.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: true if revokable, false otherwise&lt;/li&gt;&lt;/ul&gt;
     */
    getRevokeByUseCountPreCheck_ByUserId_ByEntitlementId(userId: string, entitlementId: string, queryParams: {
        quantity: number;
    }): Promise<Response<EntitlementPrechekResult>>;
}

/**
 * AUTO GENERATED
 */

declare class FulfillmentAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Query fulfillments in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of fulfillment info:&lt;ul&gt;&lt;li&gt;storeId in items can be ignored&lt;/li&gt;&lt;li&gt;error in successList will always be null&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getFulfillments_v2(queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        state?: 'FULFILLED' | 'FULFILL_FAILED' | 'REVOKED' | 'REVOKE_FAILED';
        transactionId?: string | null;
        userId?: string | null;
    }): Promise<Response<FulfillmentPagingSlicedResult>>;
    /**
     * Query fulfillment histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query fulfillment history&lt;/li&gt;&lt;/ul&gt;
     */
    getFulfillmentHistory(queryParams?: {
        limit?: number;
        offset?: number;
        status?: 'FAIL' | 'SUCCESS';
        userId?: string | null;
    }): Promise<Response<FulfillmentHistoryPagingSlicedResult>>;
    /**
     * Fulfill item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillment_ByUserId(userId: string, data: FulfillmentRequest): Promise<Response<FulfillmentResult>>;
    /**
     * Redeem campaign code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentCode_ByUserId(userId: string, data: FulfillCodeRequest): Promise<Response<FulfillmentResult>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentReward_ByUserId(userId: string, data: RewardsRequest): Promise<Response<unknown>>;
    /**
     * Retrieve and check fulfillment items based on the provided request.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of fulfillment items&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentPreCheck_ByUserId(userId: string, data: PreCheckFulfillmentRequest): Promise<Response<FulfillmentItemArray>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;li&gt;&lt;i&gt;rewards Item unsupported Type&lt;/i&gt;: SUBSCRIPTION&lt;/ul&gt;
     */
    createFulfillmentReward_ByUserId_v2(userId: string, data: RewardsRequest): Promise<Response<FulfillmentResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Fulfill items by transactionId.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: storeId, region, language, and entitlementCollectionId can be ignored.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
     */
    updateFulfillment_ByUserId_ByTransactionId_v2(userId: string, transactionId: string, data: FulfillmentV2Request): Promise<Response<FulfillmentV2Result>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Retry fulfill items by transactionId without sending the original payload.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
     */
    updateRetry_ByUserId_ByTransactionId_v2(userId: string, transactionId: string): Promise<Response<FulfillmentV2Result>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Revoke items by transactionId.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevoke_ByUserId_ByTransactionId_v2(userId: string, transactionId: string): Promise<Response<RevokeFulfillmentV2Result>>;
}

/**
 * AUTO GENERATED
 */

declare class FulfillmentScriptAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;List all fulfillment scripts.
     */
    getFulfillmentScripts(): Promise<Response<FulfillmentScriptInfoArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete fulfillment script.
     */
    deleteFulfillmentScript_ById(id: string): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get fulfillment script by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get fulfillment script&lt;/li&gt;&lt;/ul&gt;
     */
    getFulfillmentScript_ById(id: string): Promise<Response<FulfillmentScriptInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update fulfillment script.
     */
    patchFulfillmentScript_ById(id: string, data: FulfillmentScriptUpdate): Promise<Response<FulfillmentScriptInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Create fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;Fulfillment scripts are used for adding custom fulfillment logic based on &lt;b&gt;ITEM_TYPE&lt;/b&gt;: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.&lt;br&gt;Example for grantDays: &lt;br&gt;&lt;code&gt;order &amp;&amp; ((order.currency &amp;&amp; order.currency.currencyCode) == &#39;LP&#39; || order.isFree) ? 30 : -1&lt;/code&gt;&lt;br&gt;
     */
    createFulfillmentScript_ById(id: string, data: FulfillmentScriptCreate): Promise<Response<FulfillmentScriptInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class IapAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Delete xbl iap config.
     */
    deleteIapConfigXbl(): Promise<Response<unknown>>;
    /**
     * Get xbox iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: xbox iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigXbl(): Promise<Response<XblIapConfigInfo>>;
    /**
     * Update xbl iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigXbl(data: XblIapConfigRequest): Promise<Response<XblIapConfigInfo>>;
    /**
     * delete a iap item config.
     */
    deleteIapConfigItem(): Promise<Response<unknown>>;
    /**
     * Get iap item config.
     */
    getIapConfigItem(): Promise<Response<IapItemConfigInfo>>;
    /**
     * Update iap item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated iap item config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigItem(data: IapItemConfigUpdate): Promise<Response<IapItemConfigInfo>>;
    /**
     * Delete apple iap config.
     */
    deleteIapConfigApple(): Promise<Response<unknown>>;
    /**
     * Get apple iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: apple iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigApple(): Promise<Response<AppleIapConfigInfo>>;
    /**
     * Update apple iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigApple(data: AppleIapConfigRequest): Promise<Response<AppleIapConfigInfo>>;
    /**
     * Delete steam iap config.
     */
    deleteIapConfigSteam(): Promise<Response<unknown>>;
    /**
     * Get steam iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigSteam(): Promise<Response<SteamIapConfig>>;
    /**
     * Update steam iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigSteam(data: SteamIapConfigRequest): Promise<Response<SteamIapConfigInfo>>;
    /**
     * Delete google iap config.
     */
    deleteIapConfigGoogle(): Promise<Response<unknown>>;
    /**
     * Get google iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: google iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigGoogle(): Promise<Response<GoogleIapConfigInfo>>;
    /**
     * Update google iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigGoogle(data: GoogleIapConfigRequest): Promise<Response<GoogleIapConfigInfo>>;
    /**
     * Delete oculus iap config.
     */
    deleteIapConfigOculu(): Promise<Response<unknown>>;
    /**
     * Get oculus iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigOculus(): Promise<Response<OculusIapConfigInfo>>;
    /**
     * Update oculus iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigOculu(data: OculusIapConfigRequest): Promise<Response<OculusIapConfigInfo>>;
    /**
     * Delete twitch iap config.
     */
    deleteIapConfigTwitch(): Promise<Response<unknown>>;
    /**
     * Get twitch iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: twitch iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigTwitch(): Promise<Response<TwitchIapConfigInfo>>;
    /**
     * Update twitch iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated twitch iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigTwitch(data: TwitchIapConfigRequest): Promise<Response<TwitchIapConfigInfo>>;
    /**
     * Query IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap orders&lt;/li&gt;&lt;/ul&gt;
     */
    getIap_ByUserId(userId: string, queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        productId?: string | null;
        startTime?: string | null;
        status?: 'FAILED' | 'FULFILLED' | 'VERIFIED';
        type?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
    }): Promise<Response<IapOrderPagingSlicedResult>>;
    /**
     * Upload xbl business partner cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigXblCert(data: {
        file?: File;
        password?: string | null;
    }): Promise<Response<XblIapConfigInfo>>;
    /**
     * Delete epic games iap config.
     */
    deleteIapConfigEpicgame(): Promise<Response<unknown>>;
    /**
     * Get epic games iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: epic games iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigEpicgames(): Promise<Response<EpicGamesIapConfigInfo>>;
    /**
     * Update epic games iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated epic games iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigEpicgame(data: EpicGamesIapConfigRequest): Promise<Response<EpicGamesIapConfigInfo>>;
    /**
     * Upload Apple Store p8 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigAppleCert(data: {
        file?: File;
    }): Promise<Response<AppleIapConfigInfo>>;
    /**
     * Upload google play p12 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigGoogleCert(data: {
        file?: File;
    }): Promise<Response<GoogleIapConfigInfo>>;
    /**
     * Delete playstation iap config.
     */
    deleteIapConfigPlaystation(): Promise<Response<unknown>>;
    /**
     * Get playstation iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: playstation iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigPlaystation(): Promise<Response<PlayStationIapConfigInfo>>;
    /**
     * Update playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated playstation iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigPlaystation(data: PlaystationIapConfigRequest): Promise<Response<PlayStationIapConfigInfo>>;
    /**
     * Query all user IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of iap orders&lt;/li&gt;&lt;/ul&gt;
     */
    getIapAll_ByUserId(userId: string): Promise<Response<IapOrderPagingSlicedResult>>;
    /**
     * Validate playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Test Results&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigPlaystationValidate(): Promise<Response<TestResult>>;
    /**
     * Validate playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Test Results&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigPlaystationValidate(data: PlaystationIapConfigRequest): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Mock fulfill iap item without validate receipt.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapMockReceipt_ByUserId(userId: string, data: MockIapReceipt): Promise<Response<unknown>>;
    /**
     * Query IAP consume history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap consume history&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConsumeHistory_ByUserId(userId: string, queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        status?: 'FAIL' | 'PENDING' | 'SUCCESS';
        type?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
    }): Promise<Response<IapConsumeHistoryPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare class IapNotificationAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query third party notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Third Party Platform notifications&lt;/li&gt;&lt;/ul&gt;
     */
    getIapNotifications(queryParams?: {
        endDate?: string | null;
        externalId?: string | null;
        limit?: number;
        offset?: number;
        source?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
        startDate?: string | null;
        status?: 'ERROR' | 'IGNORED' | 'PROCESSED' | 'WARN';
        type?: string | null;
    }): Promise<Response<NotificationPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare class IapSubscriptionAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query subscriptions, default sort by updatedAt Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptions(queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
        productId?: string | null;
        userId?: string | null;
    }): Promise<Response<ThirdPartyUserSubscriptionPagingSlicedResult>>;
    /**
     * Query user subscription, default sort by updatedAtOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptions_ByUserId(userId: string, queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
        productId?: string | null;
    }): Promise<Response<ThirdPartyUserSubscriptionPagingSlicedResult>>;
    /**
     * Admin get user subscription details.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscription_ByUserId_ById(userId: string, id: string): Promise<Response<ThirdPartyUserSubscriptionInfo>>;
    /**
     * Sync Subscription Status
     */
    updateSyncIap_ByUserId_ById(userId: string, id: string): Promise<Response<ThirdPartyUserSubscriptionInfo>>;
    /**
     * Admin query user subscription transactions, default sort by startAt timeOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptionsTransactions_ByUserId(userId: string, queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
        productId?: string | null;
    }): Promise<Response<ThirdPartySubscriptionTransactionPagingSlicedResult>>;
    /**
     * Admin get user subscription details.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptionTransaction_ByUserId_ById(userId: string, id: string): Promise<Response<ThirdPartySubscriptionTransactionInfo>>;
    /**
     * Sync Subscription Status
     */
    updateSyncSubscriptionIap_ByUserId_ById(userId: string, id: string): Promise<Response<ThirdPartySubscriptionTransactionInfo>>;
    /**
     * Get Subscription Transaction Update History
     */
    getHistoriesSubscriptionsIap_ByUserId_ById(userId: string, id: string, queryParams?: {
        limit?: number;
        offset?: number;
    }): Promise<Response<ThirdPartySubscriptionTransactionHistoryPagingSlicedResult>>;
    /**
     * Get user third party subscription by subscription group id.
     */
    getOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform(userId: string, platform: string, queryParams: {
        groupId: string | null;
    }): Promise<Response<ThirdPartySubscriptionOwnership>>;
    /**
     * Get user third party subscription by subscription product id.
     */
    getOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform(userId: string, platform: string, queryParams: {
        productId: string | null;
    }): Promise<Response<ThirdPartySubscriptionOwnership>>;
}

/**
 * AUTO GENERATED
 */

declare class InvoiceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Generate invoice summary.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;
     */
    getInvoiceSummary(queryParams: {
        endTime: string | null;
        feature: string | null;
        itemId: string | null;
        itemType: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        startTime: string | null;
    }): Promise<Response<InvoiceSummary>>;
    /**
     * Download invoice details as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: invoice details csv file&lt;/li&gt;&lt;/ul&gt;
     */
    getInvoiceDetailsCsv(queryParams: {
        endTime: string | null;
        feature: string | null;
        itemId: string | null;
        itemType: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        startTime: string | null;
    }): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class ItemAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get all item type configs.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsConfigs(): Promise<Response<ItemTypeConfigInfoArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to create an item type config.&lt;p&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    createItemConfig(data: ItemTypeConfigCreate): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to delete an item type config permanently.
     */
    deleteItemConfig_ById(id: string): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get an item type config.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemConfig_ById(id: string): Promise<Response<ItemTypeConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to update an item type config.&lt;p&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    updateItemConfig_ById(id: string, data: ItemTypeConfigUpdate): Promise<Response<ItemTypeConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get an item type config.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsConfigsSearch(queryParams: {
        itemType: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        clazz?: string | null;
    }): Promise<Response<ItemTypeConfigInfo>>;
    /**
     * This API is used to create an item. APP item only can created in publisher namespace.&lt;p&gt;An item create example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;title&#34;:&#34;required&#34;, &#34;description&#34;:&#34;optional&#34;, &#34;longDescription&#34;:&#34;optional&#34;, &#34;localExt&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \} \} \}, &#34;images&#34;: \[ \{ &#34;as&#34;:&#34;optional, image for&#34;, &#34;caption&#34;:&#34;optional&#34;, &#34;height&#34;:10, &#34;width&#34;:10, &#34;imageUrl&#34;:&#34;http://img-url-required&#34;, &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34; \} \], &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;, &#34;status&#34;: &#34;ACTIVE&#34;, &#34;listable&#34;: true, &#34;purchasable&#34;: true, &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;, &#34;name&#34;: &#34;required, also will be used as entitlement name&#34;, &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable), &#34;stackable&#34;: false, &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;, &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;, &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;, &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;, &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;, &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item created belongs to the publisher namespace&#34;, &#34;sku&#34;: &#34;optional, commonly unique item code&#34;, &#34;regionData&#34;: \{ &#34;US(store&#39;s default region is required)&#34;: \[ \{ &#34;price&#34;:10, &#34;discountPercentage&#34;: 0(integer, optional, range[0,100], discountedPrice = price \* ((100 - discountPercentage) \* 0.01), will use it to calculate discounted price if it is not 0), &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0), &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;, &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;, &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present), &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; \} \] \}, &#34;itemIds&#34;: \[ &#34;itemId&#34; \], &#34;itemQty&#34;: \{ &#34;itemId&#34;:1 \}, &#34;recurring&#34;: \{ &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;, &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set), &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set), &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7) \}, &#34;tags&#34;: \[ &#34;exampleTag24&#34; \], &#34;features&#34;: \[ &#34;feature&#34; \], &#34;clazz&#34;: &#34;weapon&#34;, &#34;boothName&#34;: &#34;C_campaign1&#34;, &#34;displayOrder&#34;: 1000, &#34;ext&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \}, &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED), &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE) }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created item data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for item extension and localization extension and inventory config custom attributes&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createItem(data: ItemCreate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to sync an in game item in game namespace to publisher namespace, only INGAMEITEM, CODE, COINS and SEASON are supported&lt;p&gt;The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    updateItem(data: InGameItemSync, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to get items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByIds(queryParams: {
        itemIds: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<FullItemInfoArray>>;
    /**
     * This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsBySku(queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to search items by keyword in title, description and long description within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsSearch(queryParams: {
        keyword: string | null;
        language: string | null;
        activeOnly?: boolean | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        limit?: number;
        offset?: number;
        sortBy?: string | null;
        storeId?: string | null;
    }): Promise<Response<FullItemPagingSlicedResult>>;
    /**
     * This API is used to get the item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByAppId(queryParams: {
        appId: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to delete an item permanently.&lt;p&gt;force: the default value should be: false. When the value is: &lt;li&gt;&lt;i&gt;false:&lt;i&gt;only the items in the draft store that have never been published yet can be removed.&lt;/li&gt;&lt;li&gt;&lt;i&gt;true:&lt;i&gt;the item in the draft store(even been published before) can be removed.&lt;/li&gt;
     */
    deleteItem_ByItemId(itemId: string, queryParams?: {
        force?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<unknown>>;
    /**
     * This API is used to get an item.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getItem_ByItemId(itemId: string, queryParams?: {
        activeOnly?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to update an item.&lt;p&gt;An item update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;title&#34;:&#34;required&#34;, &#34;description&#34;:&#34;optional&#34;, &#34;longDescription&#34;:&#34;optional&#34;, &#34;localExt&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \} \} \}, &#34;images&#34;: \[ \{ &#34;as&#34;:&#34;optional, image for&#34;, &#34;caption&#34;:&#34;optional&#34;, &#34;height&#34;:10, &#34;width&#34;:10, &#34;imageUrl&#34;:&#34;http://img-url-required&#34;, &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34; \} \], &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;, &#34;status&#34;: &#34;ACTIVE&#34;, &#34;listable&#34;: true, &#34;purchasable&#34;: true, &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;, &#34;name&#34;: &#34;optional&#34;, &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable), &#34;stackable&#34;: false, &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;, &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;, &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;, &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;, &#34;sku&#34;: &#34;optional, commonly unique item code&#34;, &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;, &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item created belongs to the publisher namespace&#34;, &#34;regionData&#34;: \{ &#34;US(store&#39;s default region is required)&#34;: \[ \{ &#34;price&#34;:10, &#34;discountPercentage&#34;:0(integer, optional, range[0,100], discountedPrice = price\*((100 - discountPercentage) \* 0.01), if it is not 0, will use it to calculate discounted price), &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0), &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;, &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;, &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present), &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; \} \] \}, &#34;itemIds&#34;: \[ &#34;itemId&#34; \], &#34;itemQty&#34;: \{ &#34;itemId&#34;:1 \}, &#34;recurring&#34;: \{ &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;, &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set), &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set), &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7) \}, &#34;tags&#34;: \[ &#34;exampleTag24&#34; \], &#34;features&#34;: \[ &#34;feature&#34; \], &#34;clazz&#34;: &#34;weapon&#34;, &#34;boothName&#34;: &#34;C_campaign1&#34;, &#34;displayOrder&#34;: 1000, &#34;ext&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \}, &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED), &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, new value should &gt;= old value if both old value and new value is limited, unset when item type is CODE) }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for item extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateItem_ByItemId(itemId: string, data: ItemUpdate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to query items by criteria within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByCriteria(queryParams?: {
        activeOnly?: boolean | null;
        appType?: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        availableDate?: string | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        limit?: number;
        offset?: number;
        region?: string | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
        targetNamespace?: string | null;
    }): Promise<Response<FullItemPagingSlicedResult>>;
    /**
     * This API is used to update region data of items in bulk &lt;br /&gt;
     */
    updateItemRegiondata(data: BulkRegionDataChangeRequest, queryParams: {
        storeId: string | null;
    }): Promise<Response<unknown>>;
    /**
     * This API is used to get an app info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;
     */
    getApp_ByItemId(itemId: string, queryParams?: {
        activeOnly?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<FullAppInfo>>;
    /**
     * This API is used to update an app.&lt;p&gt;An app update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;developer&#34;: &#34;accelbyte&#34;, &#34;publisher&#34;: &#34;accelbyte&#34;, &#34;websiteUrl&#34;: &#34;http://accelbyte.io&#34;, &#34;forumUrl&#34;: &#34;http://accelbyte.io&#34;, &#34;platforms&#34;: \[&#34;Windows(allowed values: Windows, MacOS, Linux, IOS, Android)&#34;\], &#34;platformRequirements&#34;: \{ &#34;Windows&#34;: \[ \{ &#34;label&#34;:&#34;minimum(can be minimum or recommended)&#34;, &#34;osVersion&#34;:&#34;os version&#34;, &#34;processor&#34;:&#34;processor&#34;, &#34;ram&#34;:&#34;RAM&#34;, &#34;graphics&#34;:&#34;graphics&#34;, &#34;directXVersion&#34;:&#34;directXVersion&#34;, &#34;diskSpace&#34;:&#34;diskSpace&#34;, &#34;soundCard&#34;:&#34;soundCard&#34;, &#34;additionals&#34;:&#34;additionals&#34; \} \] \}, &#34;carousel&#34;: \[ \{ &#34;type&#34;:&#34;image(allowed values: image, video)&#34;, &#34;videoSource&#34;:&#34;generic(allowed values:generic, youtube, viemo)&#34;, &#34;url&#34;:&#34;url&#34;, &#34;alt&#34;:&#34;alternative url or text&#34;, &#34;thumbnailUrl&#34;:&#34;thumbnail url&#34;, &#34;previewUrl&#34;:&#34;preview url&#34;, \} \], &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;slogan&#34;:&#34;slogan&#34;, &#34;announcement&#34;:&#34;announcement&#34;, \} \}, &#34;primaryGenre&#34;: &#34;Action&#34;, &#34;genres&#34;: \[&#34;Action&#34;, &#34;Adventure&#34;\], &#34;players&#34;: \[&#34;Single&#34;\], &#34;releaseDate&#34;: &#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated app data&lt;/li&gt;&lt;/ul&gt;
     */
    updateApp_ByItemId(itemId: string, data: AppUpdate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullAppInfo>>;
    /**
     * This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsBySkuLocale(queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<PopulatedItemInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to get the itemId by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the itemId with sku&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsItemIdBySku(queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }): Promise<Response<ItemId>>;
    /**
     * This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsLocaleByIds(queryParams: {
        itemIds: string | null;
        activeOnly?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<ItemInfoArray>>;
    /**
     * This API is used to get an list of itemId by list of sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsItemIdBySkus(queryParams?: {
        sku?: string[];
        storeId?: string | null;
    }): Promise<Response<ItemIdArray>>;
    /**
     * This API is used to query uncategorized items within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of uncategorized items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsUncategorized(queryParams?: {
        activeOnly?: boolean | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
        storeId?: string | null;
    }): Promise<Response<FullItemPagingSlicedResult>>;
    /**
     * This API is used to query items by criteria within a store.&lt;p&gt;The behaviour for itemStatus query parameter:&lt;li&gt;TRUE: Show only ACTIVE items&lt;/li&gt;&lt;li&gt;FALSE: Show only INACTIVE items&lt;/li&gt;&lt;li&gt;Not provided: show both ACTIVE and INACTIVE items&lt;/li&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByCriteria_v2(queryParams?: {
        appType?: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        availableDate?: string | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemName?: string | null;
        itemStatus?: 'ACTIVE' | 'INACTIVE';
        itemType?: string[];
        limit?: number;
        offset?: number;
        region?: string | null;
        sectionExclusive?: boolean | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
        targetNamespace?: string | null;
        withTotal?: boolean | null;
    }): Promise<Response<FullItemPagingResult>>;
    /**
     * This API is used to get estimated prices of a flexible pricing bundle
     */
    getItemsEstimatedPrice(queryParams: {
        itemIds: string | null;
        userId: string | null;
        platform?: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<EstimatedPriceInfo>>;
    /**
     * Enable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnable_ByItemId(itemId: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getLocale_ByItemId(itemId: string, queryParams?: {
        activeOnly?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<PopulatedItemInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.
     */
    updateReturn_ByItemId(itemId: string, data: ItemReturnRequest): Promise<Response<unknown>>;
    /**
     * Get available predicate types.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: available predicate types&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsPredicateTypes(): Promise<Response<AvailablePredicateArray>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;
     */
    updateAcquire_ByItemId(itemId: string, data: ItemAcquireRequest): Promise<Response<ItemAcquireResult>>;
    /**
     * Disable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisable_ByItemId(itemId: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * Get item dynamic data for published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByItemId(itemId: string): Promise<Response<ItemDynamicDataInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to list basic items by features.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of basic items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByFeaturesBasic(queryParams?: {
        activeOnly?: boolean | null;
        features?: string[];
    }): Promise<Response<BasicItemArray>>;
    /**
     * Remove a feature from an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    deleteFeature_ByItemId_ByFeature(itemId: string, feature: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * Add a feature to an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    updateFeature_ByItemId_ByFeature(itemId: string, feature: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to update item purchase condition
     */
    updatePurchaseCondition_ByItemId(itemId: string, data: PurchaseConditionUpdate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullItemInfo>>;
    /**
     * This API is used to validate user purchase condition
     */
    createItemPurchaseConditionValidate(data: ItemPurchaseConditionValidateRequest, queryParams: {
        userId: string | null;
        platform?: string | null;
    }): Promise<Response<ItemPurchaseConditionValidateResultArray>>;
}

/**
 * AUTO GENERATED
 */

declare class KeyGroupAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query key groups, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of key group&lt;/li&gt;&lt;/ul&gt;
     */
    getKeygroups(queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        tag?: string | null;
    }): Promise<Response<KeyGroupPagingSlicedResult>>;
    /**
     * Create key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created key group&lt;/li&gt;&lt;/ul&gt;
     */
    createKeygroup(data: KeyGroupCreate): Promise<Response<KeyGroupInfo>>;
    /**
     * @deprecated
     * Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
     */
    getKeygroupsByBoothName(queryParams: {
        boothName: string | null;
    }): Promise<Response<KeyGroupInfo>>;
    /**
     * Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
     */
    getKeygroup_ByKeyGroupId(keyGroupId: string): Promise<Response<KeyGroupInfo>>;
    /**
     * Update key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated key group&lt;/li&gt;&lt;/ul&gt;
     */
    updateKeygroup_ByKeyGroupId(keyGroupId: string, data: KeyGroupUpdate): Promise<Response<KeyGroupInfo>>;
    /**
     * This API is used to list keys of a key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: keys&lt;/li&gt;&lt;/ul&gt;
     */
    getKeys_ByKeyGroupId(keyGroupId: string, queryParams?: {
        limit?: number;
        offset?: number;
        status?: 'ACQUIRED' | 'ACTIVE';
    }): Promise<Response<KeyPagingSliceResult>>;
    /**
     * This API is used to upload keys with csv format to a key group.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    createKey_ByKeyGroupId(keyGroupId: string, data: {
        file?: File;
    }): Promise<Response<BulkOperationResult>>;
    /**
     * Get key group dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByKeyGroupId(keyGroupId: string): Promise<Response<KeyGroupDynamicInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class OrderAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders(queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        orderNos?: string[];
        sortBy?: string | null;
        startTime?: string | null;
        status?: 'CHARGEBACK' | 'CHARGEBACK_REVERSED' | 'CHARGED' | 'CLOSED' | 'DELETED' | 'FULFILLED' | 'FULFILL_FAILED' | 'INIT' | 'REFUNDED' | 'REFUNDING' | 'REFUND_FAILED';
        withTotal?: boolean | null;
    }): Promise<Response<OrderPagingResult>>;
    /**
     * Get Order Statistics.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order statistics&lt;/li&gt;&lt;/ul&gt;
     */
    getOrdersStats(): Promise<Response<OrderStatistics>>;
    /**
     * Get order by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order instance&lt;/li&gt;&lt;/ul&gt;
     */
    getOrder_ByOrderNo(orderNo: string): Promise<Response<OrderInfo>>;
    /**
     * Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders_ByUserId(userId: string, queryParams?: {
        discounted?: boolean | null;
        itemId?: string | null;
        limit?: number;
        offset?: number;
        status?: 'CHARGEBACK' | 'CHARGEBACK_REVERSED' | 'CHARGED' | 'CLOSED' | 'DELETED' | 'FULFILLED' | 'FULFILL_FAILED' | 'INIT' | 'REFUNDED' | 'REFUNDING' | 'REFUND_FAILED';
    }): Promise<Response<OrderPagingSlicedResult>>;
    /**
     * Admin Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;sandbox default value is &lt;b&gt;false&lt;/b&gt;&lt;/li&gt;&lt;li&gt;platform default value is &lt;b&gt;Other&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for ext field&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createOrder_ByUserId(userId: string, data: AdminOrderCreate): Promise<Response<OrderInfo>>;
    /**
     * Refund order by orderNo.
     */
    updateRefund_ByOrderNo(orderNo: string, data: OrderRefundCreate): Promise<Response<OrderInfo>>;
    /**
     * Get an order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrder_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderInfo>>;
    /**
     * Update order status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated order&lt;/li&gt;&lt;/ul&gt;
     */
    updateOrder_ByUserId_ByOrderNo(userId: string, orderNo: string, data: OrderUpdate): Promise<Response<OrderInfo>>;
    /**
     * This API is used to get the count of purchased item which is the order target.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Item purchased count&lt;/li&gt;&lt;/ul&gt;
     */
    getOrdersCountOfItem_ByUserId(userId: string, queryParams: {
        itemId: string | null;
    }): Promise<Response<PurchasedItemCount>>;
    /**
     * @deprecated
     * Get user order grant that fulfilled by this order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order grant&lt;/li&gt;&lt;/ul&gt;
     */
    getGrant_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderGrantInfo>>;
    /**
     * Fulfill an order if the order is charged but fulfill failed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfilled order&lt;/li&gt;&lt;/ul&gt;
     */
    updateFulfill_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderInfo>>;
    /**
     * Get user order history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderHistoryInfoArray>>;
    /**
     * Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;
     */
    getReceiptPdf_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;
     */
    createNotification_ByUserId_ByOrderNo(userId: string, orderNo: string, data: TradeNotification): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class OrderDedicatedAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync orders&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders(queryParams: {
        end: string | null;
        start: string | null;
        nextEvaluatedKey?: string | null;
    }): Promise<Response<OrderSyncResult>>;
}

/**
 * AUTO GENERATED
 */

declare class PaymentAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query payment orders&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrders(queryParams?: {
        channel?: 'EXTERNAL' | 'INTERNAL';
        extTxId?: string | null;
        limit?: number;
        offset?: number;
        status?: 'AUTHORISED' | 'AUTHORISE_FAILED' | 'CHARGEBACK' | 'CHARGEBACK_REVERSED' | 'CHARGED' | 'CHARGE_FAILED' | 'DELETED' | 'INIT' | 'NOTIFICATION_OF_CHARGEBACK' | 'REFUNDED' | 'REFUNDING' | 'REFUND_FAILED' | 'REQUEST_FOR_INFORMATION';
    }): Promise<Response<PaymentOrderPagingSlicedResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment notifications&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentNotifications(queryParams?: {
        endDate?: string | null;
        externalId?: string | null;
        limit?: number;
        notificationSource?: 'ADYEN' | 'ALIPAY' | 'CHECKOUT' | 'NEONPAY' | 'PAYPAL' | 'STRIPE' | 'WALLET' | 'WXPAY' | 'XSOLLA';
        notificationType?: string | null;
        offset?: number;
        paymentOrderNo?: string | null;
        startDate?: string | null;
        status?: 'ERROR' | 'IGNORED' | 'PROCESSED' | 'WARN';
    }): Promise<Response<PaymentNotificationPagingSlicedResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;List external order No by external transaction id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment orders&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrdersByExtTxId(queryParams: {
        extTxId: string | null;
    }): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to create payment order from justice service. The result contains the payment station url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for custom parameters and meta data&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createPaymentOrder_ByUserId(userId: string, data: PaymentOrderCreate): Promise<Response<PaymentOrderInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order by paymentOrderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrder_ByPaymentOrderNo(paymentOrderNo: string): Promise<Response<PaymentOrderInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentOrder_ByPaymentOrderNo(paymentOrderNo: string, data: PaymentOrderChargeRequest): Promise<Response<PaymentOrderInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order charge status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order charge status&lt;/li&gt;&lt;/ul&gt;
     */
    getStatusPayment_ByPaymentOrderNo(paymentOrderNo: string): Promise<Response<PaymentOrderChargeStatus>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Simulate payment notification on sandbox payment order, usually for test usage to simulate real currency payment notification.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: notification process result&lt;/li&gt;&lt;/ul&gt;
     */
    updateSimulateNotificationPayment_ByPaymentOrderNo(paymentOrderNo: string, data: PaymentOrderNotifySimulation): Promise<Response<NotificationProcessResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to refund order by paymentOrderNo from justice service.
     */
    updateRefundPayment_ByUserId_ByPaymentOrderNo(userId: string, paymentOrderNo: string, data: PaymentOrderRefund): Promise<Response<PaymentOrderInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class PaymentCallbackConfigAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigCallback(): Promise<Response<PaymentCallbackConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigCallback(data: PaymentCallbackConfigUpdate): Promise<Response<PaymentCallbackConfigInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class PaymentConfigAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment global tax config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigTax(): Promise<Response<PaymentTaxConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment tax config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarEnabled&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;required, when taxJarEnabled is true and there is no existing token&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandboxTaxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarProductCodesMapping&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;key is item type(APP|COINS|INGAMEITEM|BUNDLE|CODE|SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment global tax config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigTax(data: PaymentTaxConfigEdit): Promise<Response<PaymentTaxConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProvider(queryParams?: {
        limit?: number;
        namespace?: string | null;
        offset?: number;
        region?: string | null;
    }): Promise<Response<PaymentProviderConfigPagingSlicedResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Create payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigProvider(data: PaymentProviderConfigEdit): Promise<Response<PaymentProviderConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment merchant config by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigMerchant_ById(id: string): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    deletePaymentConfigProvider_ById(id: string): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigProvider_ById(id: string, data: PaymentProviderConfigEdit): Promise<Response<PaymentProviderConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Debug matched payment merchant config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigMerchantMatched(queryParams?: {
        namespace?: string | null;
        region?: string | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Debug matched payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProviderMatched(queryParams?: {
        namespace?: string | null;
        region?: string | null;
    }): Promise<Response<PaymentProviderConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get special payment providers, such as ALIPAY, WXPAY.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProviderSpecial(): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get aggregate payment providers, such as XSOLLA, ADYEN.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProviderAggregate(): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update adyen config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateAdyenconfigPayment_ById(id: string, data: AdyenConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update wxpay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWxpayconfigPayment_ById(id: string, data: WxPayConfigRequest, queryParams?: {
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test adyen configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;merchantAccount&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;notificationHmacKey&lt;/li&gt;&lt;li&gt;notificationUsername&lt;/li&gt;&lt;li&gt;notificationPassword&lt;/li&gt;&lt;li&gt;liveEndpointUrlPrefix&lt;/li&gt;&lt;li&gt;allowedPaymentMethods&lt;/li&gt;&lt;li&gt;blockedPaymentMethods&lt;/li&gt;&lt;li&gt;settings&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantAdyenconfigTest(data: AdyenConfig, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test WxPay configuration. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantWxpayconfigTest(data: WxPayConfigRequest): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update alipay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateAlipayconfigPayment_ById(id: string, data: AliPayConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update PayPal config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaypalconfigPayment_ById(id: string, data: PayPalConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update stripe config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateStripeconfigPayment_ById(id: string, data: StripeConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update xsolla configuration. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateXsollaconfigPayment_ById(id: string, data: XsollaConfig, queryParams?: {
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test AliPay configuration.Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantAlipayconfigTest(data: AliPayConfig, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test PayPal configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;clientID&lt;/li&gt;&lt;li&gt;clientSecret&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;webHookId&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantPaypalconfigTest(data: PayPalConfig, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test stripe configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;li&gt;allowedPaymentMethodTypes&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;publishableKey&lt;/li&gt;&lt;li&gt;webhookSecret&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantStripeconfigTest(data: StripeConfig, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check xsolla configuration, Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;merchantId&lt;/li&gt;&lt;li&gt;projectId&lt;/li&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;projectSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantXsollaconfigTest(data: XsollaConfig): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update Neon Pay config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateNeonpayconfigPayment_ById(id: string, data: NeonPayConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check Neon Pay configuration, Reference: &lt;a href=&#34;https://docs.neonpay.com/docs/checkout&#34;&gt;Neon Pay Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;webhookSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantNeonpayconfigTest(data: NeonPayConfig, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update checkout.com config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCheckoutconfigPayment_ById(id: string, data: CheckoutConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update xsolla UI configuration.Reference: &lt;a href=&#34;https://developers.xsolla.com/api.html#ui-integrations&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateXsollauiconfigPayment_ById(id: string, data: XsollaPaywallConfigRequest): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test checkout.com configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;publicKey&lt;/li&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantCheckoutconfigTest(data: CheckoutConfig, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment domain whitelist config by namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment domain whitelist config info&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigDomains(): Promise<Response<PaymentDomainWhitelistConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment provider config by namespace.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;domains&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;list of domains to whitelist for the return URL.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Validation&lt;/i&gt;: the domain should include the protocol (http/https), but the whitelist check will only compare the host part (www.example.com)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment domain whitelist config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigDomain(data: PaymentDomainWhitelistConfigEdit): Promise<Response<PaymentDomainWhitelistConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test adyen configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    getAdyenconfigTestPayment_ById(id: string, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Upload wxpay cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWxpayconfigCertPayment_ById(id: string, data: {
        file?: File;
    }): Promise<Response<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test WxPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;
     */
    getWxpayconfigTestPayment_ById(id: string): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test AliPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test alipay config&lt;/li&gt;&lt;/ul&gt;
     */
    getAlipayconfigTestPayment_ById(id: string, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test PayPal configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    getPaypalconfigTestPayment_ById(id: string, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test stripe configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    getStripeconfigTestPayment_ById(id: string, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test xsolla configuration in payment merchant config. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test xsolla config&lt;/li&gt;&lt;/ul&gt;
     */
    getXsollaconfigTestPayment_ById(id: string): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test Neon Pay configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    getNeonpayconfigTestPayment_ById(id: string, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test checkout.com configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    getCheckoutconfigTestPayment_ById(id: string, queryParams?: {
        sandbox?: boolean | null;
    }): Promise<Response<TestResult>>;
}

/**
 * AUTO GENERATED
 */

declare class PaymentDedicatedAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync payment orders&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrders(queryParams: {
        end: string | null;
        start: string | null;
        nextEvaluatedKey?: string | null;
    }): Promise<Response<PaymentOrderSyncResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;p&gt;This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in, should be publisher namespace if it&#39;s a Steam like platform that share &lt;br&gt;payment config cross namespaces, otherwise it&#39;s the game namespace&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;External order number, it should be unique in invoker order system&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;User id for the order owner in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be user character id &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;price which should be greater than 0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item title&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency code, default is USD&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency namespace, default is publisher namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Country of the user, will get from user info if not present&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;language&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Language of the user&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandbox&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;set to true will create sandbox order that not real paid for xsolla/alipay and will not validate &lt;br&gt;price for wxpay.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;returnUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized return url for redirect once payment finished, leave unset to use configuration in &lt;br&gt;namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;notifyUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized notify url for payment web hook, leave unset to use configuration in namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Custom parameters&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;extOrderNo&#34;: &#34;123456789&#34;, &#34;sku&#34;: &#34;sku&#34;, &#34;targetNamespace&#34;: &#34;game1&#34;, &#34;targetUserId&#34;: &#34;94451623768940d58416ca33ca767ec3&#34;, &#34;extUserId&#34;: &#34;678&#34;, &#34;title&#34;: &#34;Frostmourne&#34;, &#34;description\&#34;: &#34;Here was power. Here was despair&#34;, &#34;price&#34;: 100, &#34;region&#34;: &#34;CN&#34;, &#34;language&#34;: &#34;zh-CN&#34;, &#34;currencyCode&#34;: &#34;USD&#34;, &#34;currencyNamespace&#34;: &#34;accelbyte&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Payment Notification:&lt;/h4&gt;&lt;p&gt;After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;payload&#34;: &#34;{ \&#34;type\&#34;: \&#34;payment\&#34;, \&#34;nonceStr\&#34;: \&#34;34c1dcf3eb58455eb161465bbfc0b590\&#34;, \&#34;paymentOrderNo\&#34;: \&#34;18081239088\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;targetNamespace\&#34;: \&#34;game1\&#34;, \&#34;targetUserId\&#34;: \&#34;94451623768940d58416ca33ca767ec3\&#34;, \&#34;extOrderNo\&#34;: \&#34;123456789\&#34;, \&#34;sku\&#34;: \&#34;sku\&#34;, \&#34;extUserId\&#34;: \&#34;678\&#34;, \&#34;price\&#34;: 100, \&#34;paymentProvider\&#34;: \&#34;XSOLLA\&#34;, \&#34;vat\&#34;: 0, \&#34;salesTax\&#34;: 0, \&#34;paymentProviderFee\&#34;: 0, \&#34;paymentMethodFee\&#34;: 0, \&#34;currency\&#34;: { \&#34;currencyCode\&#34;: \&#34;USD\&#34;, \&#34;currencySymbol\&#34;: \&#34;$\&#34;, \&#34;currencyType\&#34;: \&#34;REAL\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;decimals\&#34;: 2 }, \&#34;status\&#34;: \&#34;CHARGED\&#34;, \&#34;createdTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;chargedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34; }&#34;, &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Payment notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider, allowed values: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, can be timestamp or uuid&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created payment order info&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentOrder(data: ExternalPaymentOrderCreate): Promise<Response<PaymentOrderCreateResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;p&gt;This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. &lt;ul&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDED&#34;, usually wallet paid, it indicates payment order already refunded&lt;/li&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDING&#34;, usually real money paid, platform will send notification to registered notify url once refund successfully&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order number&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund description&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;description&#34;: &#34;Repeated item.&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Refund Notification:&lt;/h4&gt;&lt;p&gt;It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Refund notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Refund notification Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;payload&#34;: &#34;{ \&#34;type\&#34;: \&#34;payment\&#34;, \&#34;nonceStr\&#34;: \&#34;34c1dcf3eb58455eb161465bbfc0b590\&#34;, \&#34;paymentOrderNo\&#34;: \&#34;18081239088\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;targetNamespace\&#34;: \&#34;game1\&#34;, \&#34;targetUserId\&#34;: \&#34;94451623768940d58416ca33ca767ec3\&#34;, \&#34;extOrderNo\&#34;: \&#34;123456789\&#34;, \&#34;sku\&#34;: \&#34;sku\&#34;, \&#34;extUserId\&#34;: \&#34;678\&#34;, \&#34;price\&#34;: 100, \&#34;paymentProvider\&#34;: \&#34;XSOLLA\&#34;, \&#34;vat\&#34;: 0, \&#34;salesTax\&#34;: 0, \&#34;paymentProviderFee\&#34;: 0, \&#34;paymentMethodFee\&#34;: 0, \&#34;currency\&#34;: { \&#34;currencyCode\&#34;: \&#34;USD\&#34;, \&#34;currencySymbol\&#34;: \&#34;$\&#34;, \&#34;currencyType\&#34;: \&#34;REAL\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;decimals\&#34;: 2 }, \&#34;status\&#34;: \&#34;REFUNDED\&#34;, \&#34;createdTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;chargedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;refundedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34; }&#34;, &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Refund notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order refund status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;refundedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order refunded&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    updateRefundPayment_ByPaymentOrderNo(paymentOrderNo: string, data: PaymentOrderRefund): Promise<Response<PaymentOrderRefundResult>>;
}

/**
 * AUTO GENERATED
 */

declare class PlatformAccountClosureAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get user platform account closure history.&lt;br&gt;
     */
    getPlatformClosureHistory_ByUserId(userId: string): Promise<Response<PlatformAccountClosureHistoryInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class PlatformAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get Xbox entitlement ownership by product sku.
     */
    createOwnershipXblPlatform_ByProductSku(productSku: string, data: XblEntitlementOwnershipRequest): Promise<Response<PlatformOwnership>>;
    /**
     * Get user psn entitlement ownership by entitlement label.
     */
    createOwnershipPsnPlatform_ByEntitlementLabel(entitlementLabel: string, data: PsnEntitlementOwnershipRequest): Promise<Response<Ownership>>;
}

/**
 * AUTO GENERATED
 */

declare class RevocationAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Delete revocation config.
     */
    deleteRevocationConfig(): Promise<Response<unknown>>;
    /**
     * Get revocation configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Revocation config&lt;/li&gt;&lt;/ul&gt;
     */
    getRevocationConfig(): Promise<Response<RevocationConfigInfo>>;
    /**
     * Update revocation configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Revocation config&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocationConfig(data: RevocationConfigUpdate): Promise<Response<RevocationConfigInfo>>;
    /**
     * Query revocation histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query revocation history&lt;/li&gt;&lt;/ul&gt;
     */
    getRevocationHistory(queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        source?: 'DLC' | 'IAP' | 'ORDER' | 'OTHER';
        startTime?: string | null;
        status?: 'FAIL' | 'SUCCESS';
        transactionId?: string | null;
        userId?: string | null;
    }): Promise<Response<RevocationHistoryPagingSlicedResult>>;
    /**
     * Do revocation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revocation results&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocation_ByUserId(userId: string, data: RevocationRequest): Promise<Response<RevocationResult>>;
}

/**
 * AUTO GENERATED
 */

declare class RewardAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to create a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created reward data&lt;/li&gt;&lt;li&gt;&lt;i&gt;Acceptable values for rewardItem&#39;s identityType are&lt;/i&gt;: ITEM_ID or ITEM_SKU&lt;/li&gt;&lt;/ul&gt;
     */
    createReward(data: RewardCreate): Promise<Response<RewardInfo>>;
    /**
     * Export reward configurations for a given namespace into file. At current, only JSON file is supported.
     */
    getRewardsExport(): Promise<Response<unknown>>;
    /**
     * Import reward configurations for a given namespace from file. At current, only JSON file is supported.
     */
    createRewardImport(data: {
        file?: File;
    }, queryParams: {
        replaceExisting: boolean | null;
    }): Promise<Response<unknown>>;
    /**
     * This API is used to delete a reward by reward Id. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted reward data&lt;/li&gt;&lt;/ul&gt;
     */
    deleteReward_ByRewardId(rewardId: string): Promise<Response<RewardInfo>>;
    /**
     * This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
     */
    getReward_ByRewardId(rewardId: string): Promise<Response<RewardInfo>>;
    /**
     * This API is used to update a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;li&gt;&lt;i&gt;Acceptable values for rewardItem&#39;s identityType are&lt;/i&gt;: ITEM_ID or ITEM_SKU&lt;/li&gt;&lt;/ul&gt;
     */
    updateReward_ByRewardId(rewardId: string, data: RewardUpdate): Promise<Response<RewardInfo>>;
    /**
     * This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;
     */
    getRewardsByCriteria(queryParams?: {
        eventTopic?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
    }): Promise<Response<RewardPagingSlicedResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: match result&lt;/li&gt;&lt;/ul&gt;
     */
    updateMatch_ByRewardId(rewardId: string, data: EventPayload): Promise<Response<ConditionMatchResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; This API is used to delete a reward condition record by reward Id and condition Name (optional). &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: 204 No Content &lt;/li&gt;&lt;/ul&gt;
     */
    deleteRecord_ByRewardId(rewardId: string, data: DeleteRewardConditionRequest): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class SectionAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to query sections.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated sections&lt;/li&gt;&lt;/ul&gt;
     */
    getSections(queryParams?: {
        end?: string | null;
        limit?: number;
        offset?: number;
        start?: string | null;
        storeId?: string | null;
        viewId?: string | null;
    }): Promise<Response<SectionPagingSlicedResult>>;
    /**
     * This API is used to create a section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created a section&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for section extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createSection(data: SectionCreate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullSectionInfo>>;
    /**
     * This API is used to delete s section.
     */
    deleteSection_BySectionId(sectionId: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<unknown>>;
    /**
     * This API is used to get a section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: section data&lt;/li&gt;&lt;/ul&gt;
     */
    getSection_BySectionId(sectionId: string, queryParams?: {
        storeId?: string | null;
    }): Promise<Response<FullSectionInfo>>;
    /**
     * This API is used to update s section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated section data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for section extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateSection_BySectionId(sectionId: string, data: SectionUpdate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullSectionInfo>>;
    /**
     * This API is used to purge expired section.
     */
    deleteSectionPurgeExpired(queryParams: {
        storeId: string | null;
    }): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class ServicePluginConfigAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * @deprecated
     * Delete service plugin config
     */
    deleteConfigServicePlugin(): Promise<Response<unknown>>;
    /**
     * @deprecated
     * Get service plugin config
     */
    getConfigsServicePlugin(): Promise<Response<ServicePluginConfigInfo>>;
    /**
     * @deprecated
     * Update catalog config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateConfigServicePlugin(data: ServicePluginConfigUpdate): Promise<Response<ServicePluginConfigInfo>>;
    /**
     * Delete service plugin config.
     */
    deleteCatalogPluginLootbox(): Promise<Response<unknown>>;
    /**
     * Get lootbox plugin config.
     */
    getCatalogPluginsLootbox(): Promise<Response<LootBoxPluginConfigInfo>>;
    /**
     * Update lootbox plugin config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginLootbox(data: LootBoxPluginConfigUpdate): Promise<Response<LootBoxPluginConfigInfo>>;
    /**
     * Delete section plugin config.
     */
    deleteCatalogPluginSection(): Promise<Response<unknown>>;
    /**
     * Get section plugin config.
     */
    getCatalogPluginsSection(): Promise<Response<SectionPluginConfigInfo>>;
    /**
     * Update section config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginSection(data: SectionPluginConfigUpdate): Promise<Response<SectionPluginConfigInfo>>;
    /**
     * Delete service plugin config.
     */
    deleteRevocationPluginRevocation(): Promise<Response<unknown>>;
    /**
     * Get revocation plugin config.
     */
    getRevocationPluginsRevocation(): Promise<Response<RevocationPluginConfigInfo>>;
    /**
     * Update revocation plugin config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocationPluginRevocation(data: RevocationPluginConfigUpdate): Promise<Response<RevocationPluginConfigInfo>>;
    /**
     * Get lootbox plugin gRPC info.
     */
    getCatalogPluginsLootboxGrpcInfo(queryParams?: {
        force?: boolean | null;
    }): Promise<Response<GrpcServerInfo>>;
    /**
     * Upload lootbox plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginLootboxCustomConfigCert(data: {
        file?: File;
    }): Promise<Response<LootBoxPluginConfigInfo>>;
    /**
     * Upload section plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginSectionCustomConfigCert(data: {
        file?: File;
    }): Promise<Response<SectionPluginConfigInfo>>;
    /**
     * Upload revocation plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocationPluginRevocationRevocationCustomConfigCert(data: {
        file?: File;
    }): Promise<Response<RevocationPluginConfigInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class SessionPlatformAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to register/update a session on xbox.
     */
    updateSessionXbl_ByUserId(userId: string, data: XblUserSessionRequest): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class StoreAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to list stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;
     */
    getStores(): Promise<Response<StoreInfoArray>>;
    /**
     * This API is used to create a non published store in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created store data&lt;/li&gt;&lt;/ul&gt;
     */
    createStore(data: StoreCreate): Promise<Response<StoreInfo>>;
    /**
     * @deprecated
     * This API is used to import a store.&lt;p&gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/import to import store.&lt;br&gt;
     */
    updateStoreImport(data: {
        file?: File;
    }, queryParams?: {
        storeId?: string | null;
    }): Promise<Response<StoreInfo>>;
    /**
     * Get catalog config.
     */
    getCatalogConfigs(): Promise<Response<CatalogConfigInfo>>;
    /**
     * Update catalog config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated catalog config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogConfig(data: CatalogConfigUpdate): Promise<Response<CatalogConfigInfo>>;
    /**
     * This API is used to delete a store. Only non published store can be deleted.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store&lt;/li&gt;&lt;/ul&gt;
     */
    deleteStore_ByStoreId(storeId: string): Promise<Response<StoreInfo>>;
    /**
     * This API is used to get a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;
     */
    getStore_ByStoreId(storeId: string): Promise<Response<StoreInfo>>;
    /**
     * This API is used to Update a store basic info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store data&lt;/li&gt;&lt;/ul&gt;
     */
    updateStore_ByStoreId(storeId: string, data: StoreUpdate): Promise<Response<StoreInfo>>;
    /**
     * This API is used to delete published store including category and items before release to public.&lt;p&gt;&lt;b&gt;Warning: Please do not use this API once published to public user.&lt;/b&gt;
     */
    deleteStorePublished(): Promise<Response<StoreInfo>>;
    /**
     * This API is used to get a published store basic info, exclude category and item information.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;
     */
    getStoresPublished(): Promise<Response<StoreInfo>>;
    /**
     * This API is used to import a store.
     */
    updateStoreImport_v2(data: {
        file?: File;
    }, queryParams?: {
        storeId?: string | null;
        strictMode?: boolean | null;
    }): Promise<Response<ImportStoreResult>>;
    /**
     * This API is used to export a store to CSV format
     */
    createStoreExportByCsv(data: ExportStoreToCsvRequest): Promise<Response<unknown>>;
    /**
     * This API is used to clone a store. Usually clone a draft store to published store because published store can&#39;t directly edit content.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: clone store info&lt;/li&gt;&lt;/ul&gt;
     */
    updateClone_ByStoreId(storeId: string, queryParams?: {
        targetStoreId?: string | null;
    }): Promise<Response<StoreInfo>>;
    /**
     * @deprecated
     * This API is used to export a store.&lt;p&gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/export to export store.&lt;br&gt;
     */
    getExport_ByStoreId(storeId: string): Promise<Response<unknown>>;
    /**
     * This API is used to get a store&#39;s backup. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store backup info&lt;/li&gt;&lt;/ul&gt;
     */
    getStoresPublishedBackup(): Promise<Response<StoreBackupInfo>>;
    /**
     * This API is used to get catalog definition for import/export store by CSV&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: catalog definition&lt;/li&gt;&lt;/ul&gt;
     */
    getStoresCatalogDefinition(queryParams: {
        catalogType: 'APP' | 'CATEGORY' | 'ITEM' | 'SECTION' | 'VIEW';
    }): Promise<Response<CatalogDefinitionInfoArray>>;
    /**
     * This API is used to rollback a published store. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store info&lt;/li&gt;&lt;/ul&gt;
     */
    updateStorePublishedRollback(): Promise<Response<StoreInfo>>;
    /**
     * This API is used to export a whole or partial store.
     */
    createExport_ByStoreId_v2(storeId: string, data: ExportStoreRequest): Promise<Response<unknown>>;
    /**
     * This API is used to download store csv templates for store importing by CSV feature
     */
    getStoresDownloadCsvTemplates(): Promise<Response<unknown>>;
    /**
     * This API is used to import a store by CSV format.
     */
    createImportByCsv_ByStoreId(storeId: string, data: {
        category: File;
        display: File;
        item: File;
        notes: string | null;
        section: File;
    }): Promise<Response<ImportStoreResult>>;
    /**
     * This API is used to query import store history
     */
    getImportHistory_ByStoreId(storeId: string, queryParams?: {
        end?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string | null;
        start?: string | null;
        success?: boolean | null;
    }): Promise<Response<ImportStoreHistoryPagingResult>>;
}

/**
 * AUTO GENERATED
 */

declare class SubscriptionAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscriptions&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptions(queryParams?: {
        chargeStatus?: 'CHARGED' | 'CHARGE_FAILED' | 'NEVER' | 'RECURRING_CHARGING' | 'SETUP';
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: 'ACTIVE' | 'CANCELLED' | 'EXPIRED' | 'INIT';
        subscribedBy?: 'PLATFORM' | 'USER';
        userId?: string | null;
    }): Promise<Response<SubscriptionPagingSlicedResult>>;
    /**
     * Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptions_ByUserId(userId: string, queryParams?: {
        chargeStatus?: 'CHARGED' | 'CHARGE_FAILED' | 'NEVER' | 'RECURRING_CHARGING' | 'SETUP';
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: 'ACTIVE' | 'CANCELLED' | 'EXPIRED' | 'INIT';
        subscribedBy?: 'PLATFORM' | 'USER';
    }): Promise<Response<SubscriptionPagingSlicedResult>>;
    /**
     * Get user subscription activity.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription activity&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptionsActivities_ByUserId(userId: string, queryParams?: {
        excludeSystem?: boolean | null;
        limit?: number;
        offset?: number;
        subscriptionId?: string | null;
    }): Promise<Response<SubscriptionActivityPagingSlicedResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Recurring charge subscription, it will trigger recurring charge if the USER subscription status is ACTIVE, nextBillingDate is before now and no fail recurring charge within X(default 12) hours.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: recurring charge result&lt;/li&gt;&lt;/ul&gt;
     */
    updateRecurring_BySubscriptionId(subscriptionId: string): Promise<Response<RecurringChargeResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Delete user subscription.
     */
    deleteSubscription_ByUserId_BySubscriptionId(userId: string, subscriptionId: string): Promise<Response<unknown>>;
    /**
     * Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscription_ByUserId_BySubscriptionId(userId: string, subscriptionId: string): Promise<Response<SubscriptionInfo>>;
    /**
     * Free subscribe by platform, can used by other justice service to redeem/reward the subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result subscription&lt;/li&gt;&lt;/ul&gt;
     */
    createSubscriptionPlatformSubscribe_ByUserId(userId: string, data: PlatformSubscribeRequest): Promise<Response<SubscriptionInfo>>;
    /**
     * Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptionsSubscribableByItemId_ByUserId(userId: string, queryParams: {
        itemId: string | null;
    }): Promise<Response<Subscribable>>;
    /**
     * Grant days to a subscription, if grantDays is positive, it will add free days and push the next billing date by the amount of day.&lt;br&gt;if the grantDays is negative or zero, it only apply to active/cancelled subscription, remove days will decrease current period end, and move the next billing date closer.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateGrant_ByUserId_BySubscriptionId(userId: string, subscriptionId: string, data: GrantSubscriptionDaysRequest): Promise<Response<SubscriptionInfo>>;
    /**
     * Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Set force true, will ignore the error if subscription is during recurring charging.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateCancel_ByUserId_BySubscriptionId(userId: string, subscriptionId: string, data: CancelRequest, queryParams?: {
        force?: boolean | null;
    }): Promise<Response<SubscriptionInfo>>;
    /**
     * Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription billing history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_BySubscriptionId(userId: string, subscriptionId: string, queryParams?: {
        excludeFree?: boolean | null;
        limit?: number;
        offset?: number;
    }): Promise<Response<BillingHistoryPagingSlicedResult>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;
     */
    createNotification_ByUserId_BySubscriptionId(userId: string, subscriptionId: string, data: TradeNotification): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class TicketAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get ticket(code/key) dynamic based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket dynamic&lt;/li&gt;&lt;/ul&gt;
     */
    getTicket_ByBoothName(boothName: string): Promise<Response<TicketDynamicInfo>>;
    /**
     * Get ticket(code/key) booth ID.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket booth id&lt;/li&gt;&lt;/ul&gt;
     */
    getId_ByBoothName(boothName: string): Promise<Response<TicketBoothId>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Decrease ticket(code/key) sale if requested orderNo is already increased.
     */
    updateDecrement_ByBoothName(boothName: string, data: TicketSaleDecrementRequest): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; increase ticket(code/key) sale.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Ticket sale increment result&lt;/li&gt;&lt;/ul&gt;
     */
    updateIncrement_ByBoothName(boothName: string, data: TicketSaleIncrementRequest): Promise<Response<TicketSaleIncrementResult>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Acquire ticket(code/key) based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;
     */
    createTicket_ByUserId_ByBoothName(userId: string, boothName: string, data: TicketAcquireRequest): Promise<Response<TicketAcquireResult>>;
}

/**
 * AUTO GENERATED
 */

declare class TradeActionAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to create a chained operations&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: chain action history&lt;/li&gt;&lt;li&gt;&lt;i&gt;FULFILL_ITEM operation supported item type&lt;/i&gt;: INGAMEITEM,LOOTBOX,OPTIONBOX&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for metadata&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createTradeCommit(data: TradeChainedActionCommitRequest): Promise<Response<TradeChainActionHistoryInfo>>;
    /**
     * This API is used to fetch a specific trade history using transaction ID&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: trade history based on transaction ID&lt;/li&gt;&lt;/ul&gt;
     */
    getTrade_ByTransactionId(transactionId: string): Promise<Response<TradeChainActionHistoryInfo>>;
    /**
     * This API is used to fetch trade history based on the provided criteria&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: trade history list based on criteria&lt;/li&gt;&lt;/ul&gt;
     */
    getTradeHistoryByCriteria(queryParams?: {
        limit?: number;
        offset?: number;
        status?: 'FAILED' | 'INIT' | 'SUCCESS';
        type?: string | null;
        userId?: string | null;
    }): Promise<Response<TradeActionPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare class ViewAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to list all views.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of views&lt;/li&gt;&lt;/ul&gt;
     */
    getViews(queryParams?: {
        storeId?: string | null;
    }): Promise<Response<ListViewInfoArray>>;
    /**
     * This API is used to create a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created a view&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createView(data: ViewCreate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullViewInfo>>;
    /**
     * This API is used to delete a view.It will also delete all the related sections
     */
    deleteView_ByViewId(viewId: string, queryParams: {
        storeId: string | null;
    }): Promise<Response<unknown>>;
    /**
     * This API is used to get a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: view data&lt;/li&gt;&lt;/ul&gt;
     */
    getView_ByViewId(viewId: string, queryParams?: {
        storeId?: string | null;
    }): Promise<Response<FullViewInfo>>;
    /**
     * This API is used to update a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated view data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateView_ByViewId(viewId: string, data: ViewUpdate, queryParams: {
        storeId: string | null;
    }): Promise<Response<FullViewInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class WalletAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * @deprecated
     * Query wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated wallets info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallets(queryParams?: {
        currencyCode?: string | null;
        limit?: number;
        offset?: number;
        origin?: 'Epic' | 'GooglePlay' | 'IOS' | 'Nintendo' | 'Oculus' | 'Other' | 'Playstation' | 'Steam' | 'System' | 'Twitch' | 'Xbox';
        userId?: string | null;
    }): Promise<Response<WalletPagingSlicedResult>>;
    /**
     * Debit different users&#39; wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk credit result&lt;/li&gt;&lt;/ul&gt;
     */
    createWalletDebit(data: BulkDebitRequest[]): Promise<Response<BulkDebitResult>>;
    /**
     * Credit different users&#39; wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk credit result&lt;/li&gt;&lt;/ul&gt;
     */
    createWalletCredit(data: BulkCreditRequest[]): Promise<Response<BulkCreditResult>>;
    /**
     * @deprecated
     * get a wallet by wallet id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallet_ByWalletId(walletId: string): Promise<Response<WalletInfo>>;
    /**
     * @deprecated
     * get a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallet_ByUserId_ByWalletId(userId: string, walletId: string): Promise<Response<WalletInfo>>;
    /**
     * Get platform wallet config list.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWalletConfig_ByPlatform(platform: string): Promise<Response<PlatformWalletConfigInfo>>;
    /**
     * Update platform wallet config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform wallet config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWalletConfig_ByPlatform(platform: string, data: PlatformWalletConfigUpdate): Promise<Response<PlatformWalletConfigInfo>>;
    /**
     * @deprecated
     * Debit a user wallet.
     */
    updateDebit_ByUserId_ByWalletId(userId: string, walletId: string, data: DebitRequest): Promise<Response<WalletInfo>>;
    /**
     * Reset platform wallet config to default config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform wallet config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWalletConfigReset_ByPlatform(platform: string): Promise<Response<PlatformWalletConfigInfo>>;
    /**
     * @deprecated
     * enable a user wallet.
     */
    updateEnable_ByUserId_ByWalletId(userId: string, walletId: string): Promise<Response<unknown>>;
    /**
     * @deprecated
     * disable a user wallet.
     */
    updateDisable_ByUserId_ByWalletId(userId: string, walletId: string): Promise<Response<unknown>>;
    /**
     * Get user currency wallet summary.&lt;br&gt;Other detail info: &lt;ul&gt;(READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency wallet summary&lt;/li&gt;&lt;/ul&gt;
     */
    getWalletsCurrenciesSummary_ByUserId(userId: string): Promise<Response<CurrencyWalletArray>>;
    /**
     * @deprecated
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Check wallet by balance origin and currency code whether it&#39;s inactive.
     */
    getCheck_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, queryParams: {
        origin: 'Epic' | 'GooglePlay' | 'IOS' | 'Nintendo' | 'Oculus' | 'Other' | 'Playstation' | 'Steam' | 'System' | 'Twitch' | 'Xbox';
    }): Promise<Response<unknown>>;
    /**
     * Credit a user wallet by currency code and balance origin, if wallet not exists, it will create a new wallet.&lt;br&gt;Other detail info: &lt;ul&gt;(UPDATE)&lt;/li&gt;&lt;/ul&gt;
     */
    updateCredit_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, data: CreditRequest): Promise<Response<WalletInfo>>;
    /**
     * Pay with user wallet by currency code and client platform.
     */
    updatePayment_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, data: PaymentRequest): Promise<Response<PlatformWallet>>;
    /**
     * @deprecated
     * List user wallet transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet transaction info&lt;/li&gt;&lt;/ul&gt;
     */
    getTransactions_ByUserId_ByWalletId(userId: string, walletId: string, queryParams?: {
        limit?: number;
        offset?: number;
    }): Promise<Response<DetailedWalletTransactionPagingSlicedResult>>;
    /**
     * Checks if the user has enough balance based on the provided criteria.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: boolean value indicating if the user has enough balance&lt;/li&gt;&lt;/ul&gt;
     */
    createBalanceCheck_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, data: DebitByWalletPlatformRequest): Promise<Response<unknown>>;
    /**
     * Debit a user wallet by currency code, default is debit system wallet.
     */
    updateDebitWallet_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, data: DebitByCurrencyCodeRequest): Promise<Response<WalletInfo>>;
    /**
     * Pay with user wallet by currency code and client platform.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for metadata&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateDebitByWalletPlatform_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, data: DebitByWalletPlatformRequest): Promise<Response<PlatformWallet>>;
    /**
     * List user currency transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency transaction info&lt;/li&gt;&lt;/ul&gt;
     */
    getTransactionsWallets_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, queryParams?: {
        limit?: number;
        offset?: number;
    }): Promise<Response<WalletTransactionPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare function EntitlementAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query entitlements.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlements: (queryParams?: {
        activeOnly?: boolean | null;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        entitlementName?: string | null;
        itemId?: string[];
        limit?: number;
        offset?: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
        userId?: string | null;
    }) => Promise<AxiosResponse<EntitlementPagingSlicedResult>>;
    /**
     * Grant entitlements to multiple users, skipped granting will be treated as fail.&lt;br&gt;&lt;br&gt;Notes: &lt;br&gt;&lt;br&gt;Support Item Types:&lt;ul&gt;&lt;li&gt;&lt;i&gt;APP&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;INGAMEITEM&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;CODE&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUBSCRIPTION&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MEDIA&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;OPTIONBOX&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;LOOTBOX&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk grant entitlements result&lt;/li&gt;&lt;/ul&gt;
     */
    createEntitlementGrant: (data: BulkEntitlementGrantRequest) => Promise<AxiosResponse<BulkEntitlementGrantResult>>;
    /**
     * Revoke entitlements, skipped revocation will be treated as fail.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk revoke entitlements result&lt;/li&gt;&lt;/ul&gt;
     */
    createEntitlementRevoke: (data: string[]) => Promise<AxiosResponse<BulkEntitlementRevokeResult>>;
    /**
     * Query entitlements by Item Ids.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByItemIds: (queryParams?: {
        activeOnly?: boolean | null;
        itemIds?: string[];
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<EntitlementPagingSlicedResult>>;
    /**
     * Get entitlement config info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsConfigInfo: (queryParams?: {
        withoutCache?: boolean | null;
    }) => Promise<AxiosResponse<EntitlementConfigInfo>>;
    /**
     * Query entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlements_ByUserId: (userId: string, queryParams?: {
        activeOnly?: boolean | null;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        collectionId?: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        entitlementName?: string | null;
        features?: string[];
        fuzzyMatchName?: boolean | null;
        itemId?: string[];
        limit?: number;
        offset?: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
    }) => Promise<AxiosResponse<EntitlementPagingSlicedResult>>;
    /**
     * Grant user entitlement.&lt;br&gt;&lt;br&gt;Notes: &lt;br&gt;&lt;br&gt;will skip un-supported item if input un-supported item types, please use /admin/namespaces/{namespace}/users/{userId}/fulfillment endpoint if want to fulfill other item type, like coin item&lt;br&gt;&lt;br&gt;Support Item Types:&lt;ul&gt;&lt;li&gt;&lt;i&gt;APP&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;INGAMEITEM&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;CODE&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUBSCRIPTION&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MEDIA&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;OPTIONBOX&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;LOOTBOX&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: granted entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    createEntitlement_ByUserId: (userId: string, data: EntitlementGrant[]) => Promise<AxiosResponse<StackableEntitlementInfoArray>>;
    /**
     * Get entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlement_ByEntitlementId: (entitlementId: string) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Get user entitlement by sku.
     */
    getEntitlementsBySku_ByUserId: (userId: string, queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    }) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Revoke all entitlements of a user (This API is for testing purpose only)&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoked entitlements count&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementRevoke_ByUserId: (userId: string) => Promise<AxiosResponse<BulkOperationResult>>;
    /**
     * Get user app entitlement by appId.
     */
    getEntitlementsByAppId_ByUserId: (userId: string, queryParams: {
        appId: string | null;
        activeOnly?: boolean | null;
    }) => Promise<AxiosResponse<AppEntitlementInfo>>;
    /**
     * Get user entitlement by itemId.
     */
    getEntitlementsByItemId_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
        activeOnly?: boolean | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    }) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByAppType_ByUserId: (userId: string, queryParams: {
        appType: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        activeOnly?: boolean | null;
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<AppEntitlementPagingSlicedResult>>;
    /**
     * Get user entitlements by itemIds.
     */
    getEntitlementsByItemIds_ByUserId: (userId: string, queryParams?: {
        ids?: string[];
        platform?: string | null;
    }) => Promise<AxiosResponse<EntitlementInfoArray>>;
    /**
     * Get platform entitlement config list.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementConfig_ByPlatform: (platform: string) => Promise<AxiosResponse<EntitlementPlatformConfigInfo>>;
    /**
     * Update platform entitlement config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform entitlement config&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementConfig_ByPlatform: (platform: string, data: EntitlementPlatformConfigUpdate) => Promise<AxiosResponse<EntitlementPlatformConfigInfo>>;
    /**
     * Revoke user&#39;s entitlements by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlements count&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementRevokeById_ByUserId: (userId: string, queryParams: {
        entitlementIds: string | null;
    }) => Promise<AxiosResponse<BulkOperationResult>>;
    /**
     * Exists any user active entitlement of specified itemIds, skus and appIds
     */
    getEntitlementsOwnershipAny_ByUserId: (userId: string, queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        platform?: string | null;
        skus?: string[];
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlement_ByUserId_ByEntitlementId: (userId: string, entitlementId: string) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlement_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: EntitlementUpdate) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Exists any user active entitlement of specified items.
     */
    getEntitlementsOwnershipAnyOf_ByUserId: (userId: string, queryParams: {
        itemIds: string[];
        platform?: string | null;
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * Get user entitlement ownership by sku.
     */
    getEntitlementsOwnershipBySku_ByUserId: (userId: string, queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    }) => Promise<AxiosResponse<TimedOwnership>>;
    /**
     * Enable Entitlement origin feature.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement info&lt;/li&gt;&lt;/ul&gt;
     */
    updateEntitlementConfigEntitlementOriginEnable: () => Promise<AxiosResponse<EntitlementConfigInfo>>;
    /**
     * Get user app entitlement ownership by appId.
     */
    getEntitlementsOwnershipByAppId_ByUserId: (userId: string, queryParams: {
        appId: string | null;
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * Get user entitlement ownership by itemId.
     */
    getEntitlementsOwnershipByItemId_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        platform?: string | null;
    }) => Promise<AxiosResponse<TimedOwnership>>;
    /**
     * Get user entitlement ownership by itemIds.
     */
    getEntitlementsOwnershipByItemIds_ByUserId: (userId: string, queryParams?: {
        ids?: string[];
        platform?: string | null;
    }) => Promise<AxiosResponse<EntitlementOwnershipArray>>;
    /**
     * Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateSell_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: AdminEntitlementSoldRequest) => Promise<AxiosResponse<EntitlementSoldResult>>;
    /**
     * Enable user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enable entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnable_ByUserId_ByEntitlementId: (userId: string, entitlementId: string) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Revoke user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevoke_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: EntitlementRevokeRequest) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can&#39;t consume.&lt;br&gt;&lt;b&gt;Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disable entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisable_ByUserId_ByEntitlementId: (userId: string, entitlementId: string) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Get user entitlement histories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of entitlement history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_ByEntitlementId: (userId: string, entitlementId: string) => Promise<AxiosResponse<EntitlementHistoryInfoArray>>;
    /**
     * Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateDecrement_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: AdminEntitlementDecrement) => Promise<AxiosResponse<EntitlementDecrementResult>>;
    /**
     * @deprecated
     * Revoke specified use count of user entitlement. please use /{entitlementId}/revoke/byUseCount endpoint instead of this endpoint&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevokeByUseCount_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: RevokeUseCountRequest) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Revoke specified count of user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: The revoked entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    createRevokeByUseCount_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: RevokeUseCountRequest) => Promise<AxiosResponse<EntitlementIfc>>;
    /**
     * Checks if specified use count of user entitlement can be revoked without actually revoking it.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: true if revokable, false otherwise&lt;/li&gt;&lt;/ul&gt;
     */
    getRevokeByUseCountPreCheck_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, queryParams: {
        quantity: number;
    }) => Promise<AxiosResponse<EntitlementPrechekResult>>;
};

/**
 * AUTO GENERATED
 */

declare function FulfillmentAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Query fulfillments in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of fulfillment info:&lt;ul&gt;&lt;li&gt;storeId in items can be ignored&lt;/li&gt;&lt;li&gt;error in successList will always be null&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getFulfillments_v2: (queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        state?: "FULFILLED" | "FULFILL_FAILED" | "REVOKED" | "REVOKE_FAILED";
        transactionId?: string | null;
        userId?: string | null;
    }) => Promise<AxiosResponse<FulfillmentPagingSlicedResult>>;
    /**
     * Query fulfillment histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query fulfillment history&lt;/li&gt;&lt;/ul&gt;
     */
    getFulfillmentHistory: (queryParams?: {
        limit?: number;
        offset?: number;
        status?: "FAIL" | "SUCCESS";
        userId?: string | null;
    }) => Promise<AxiosResponse<FulfillmentHistoryPagingSlicedResult>>;
    /**
     * Fulfill item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillment_ByUserId: (userId: string, data: FulfillmentRequest) => Promise<AxiosResponse<FulfillmentResult>>;
    /**
     * Redeem campaign code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentCode_ByUserId: (userId: string, data: FulfillCodeRequest) => Promise<AxiosResponse<FulfillmentResult>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentReward_ByUserId: (userId: string, data: RewardsRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Retrieve and check fulfillment items based on the provided request.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of fulfillment items&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentPreCheck_ByUserId: (userId: string, data: PreCheckFulfillmentRequest) => Promise<AxiosResponse<FulfillmentItemArray>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;li&gt;&lt;i&gt;rewards Item unsupported Type&lt;/i&gt;: SUBSCRIPTION&lt;/ul&gt;
     */
    createFulfillmentReward_ByUserId_v2: (userId: string, data: RewardsRequest) => Promise<AxiosResponse<FulfillmentResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Fulfill items by transactionId.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: storeId, region, language, and entitlementCollectionId can be ignored.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
     */
    updateFulfillment_ByUserId_ByTransactionId_v2: (userId: string, transactionId: string, data: FulfillmentV2Request) => Promise<AxiosResponse<FulfillmentV2Result>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Retry fulfill items by transactionId without sending the original payload.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
     */
    updateRetry_ByUserId_ByTransactionId_v2: (userId: string, transactionId: string) => Promise<AxiosResponse<FulfillmentV2Result>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt; Revoke items by transactionId.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke fulfillment v2 result, storeId field can be ignored.&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevoke_ByUserId_ByTransactionId_v2: (userId: string, transactionId: string) => Promise<AxiosResponse<RevokeFulfillmentV2Result>>;
};

/**
 * AUTO GENERATED
 */

declare function FulfillmentScriptAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;List all fulfillment scripts.
     */
    getFulfillmentScripts: () => Promise<AxiosResponse<FulfillmentScriptInfoArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete fulfillment script.
     */
    deleteFulfillmentScript_ById: (id: string) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get fulfillment script by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get fulfillment script&lt;/li&gt;&lt;/ul&gt;
     */
    getFulfillmentScript_ById: (id: string) => Promise<AxiosResponse<FulfillmentScriptInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update fulfillment script.
     */
    patchFulfillmentScript_ById: (id: string, data: FulfillmentScriptUpdate) => Promise<AxiosResponse<FulfillmentScriptInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Create fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;Fulfillment scripts are used for adding custom fulfillment logic based on &lt;b&gt;ITEM_TYPE&lt;/b&gt;: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.&lt;br&gt;Example for grantDays: &lt;br&gt;&lt;code&gt;order &amp;&amp; ((order.currency &amp;&amp; order.currency.currencyCode) == &#39;LP&#39; || order.isFree) ? 30 : -1&lt;/code&gt;&lt;br&gt;
     */
    createFulfillmentScript_ById: (id: string, data: FulfillmentScriptCreate) => Promise<AxiosResponse<FulfillmentScriptInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function IapAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Delete xbl iap config.
     */
    deleteIapConfigXbl: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get xbox iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: xbox iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigXbl: () => Promise<AxiosResponse<XblIapConfigInfo>>;
    /**
     * Update xbl iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigXbl: (data: XblIapConfigRequest) => Promise<AxiosResponse<XblIapConfigInfo>>;
    /**
     * delete a iap item config.
     */
    deleteIapConfigItem: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get iap item config.
     */
    getIapConfigItem: () => Promise<AxiosResponse<IapItemConfigInfo>>;
    /**
     * Update iap item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated iap item config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigItem: (data: IapItemConfigUpdate) => Promise<AxiosResponse<IapItemConfigInfo>>;
    /**
     * Delete apple iap config.
     */
    deleteIapConfigApple: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get apple iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: apple iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigApple: () => Promise<AxiosResponse<AppleIapConfigInfo>>;
    /**
     * Update apple iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigApple: (data: AppleIapConfigRequest) => Promise<AxiosResponse<AppleIapConfigInfo>>;
    /**
     * Delete steam iap config.
     */
    deleteIapConfigSteam: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get steam iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigSteam: () => Promise<AxiosResponse<SteamIapConfig>>;
    /**
     * Update steam iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigSteam: (data: SteamIapConfigRequest) => Promise<AxiosResponse<SteamIapConfigInfo>>;
    /**
     * Delete google iap config.
     */
    deleteIapConfigGoogle: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get google iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: google iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigGoogle: () => Promise<AxiosResponse<GoogleIapConfigInfo>>;
    /**
     * Update google iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigGoogle: (data: GoogleIapConfigRequest) => Promise<AxiosResponse<GoogleIapConfigInfo>>;
    /**
     * Delete oculus iap config.
     */
    deleteIapConfigOculu: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get oculus iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigOculus: () => Promise<AxiosResponse<OculusIapConfigInfo>>;
    /**
     * Update oculus iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigOculu: (data: OculusIapConfigRequest) => Promise<AxiosResponse<OculusIapConfigInfo>>;
    /**
     * Delete twitch iap config.
     */
    deleteIapConfigTwitch: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get twitch iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: twitch iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigTwitch: () => Promise<AxiosResponse<TwitchIapConfigInfo>>;
    /**
     * Update twitch iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated twitch iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigTwitch: (data: TwitchIapConfigRequest) => Promise<AxiosResponse<TwitchIapConfigInfo>>;
    /**
     * Query IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap orders&lt;/li&gt;&lt;/ul&gt;
     */
    getIap_ByUserId: (userId: string, queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        productId?: string | null;
        startTime?: string | null;
        status?: "FAILED" | "FULFILLED" | "VERIFIED";
        type?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
    }) => Promise<AxiosResponse<IapOrderPagingSlicedResult>>;
    /**
     * Upload xbl business partner cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigXblCert: (data: {
        file?: File;
        password?: string | null;
    }) => Promise<AxiosResponse<XblIapConfigInfo>>;
    /**
     * Delete epic games iap config.
     */
    deleteIapConfigEpicgame: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get epic games iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: epic games iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigEpicgames: () => Promise<AxiosResponse<EpicGamesIapConfigInfo>>;
    /**
     * Update epic games iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated epic games iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigEpicgame: (data: EpicGamesIapConfigRequest) => Promise<AxiosResponse<EpicGamesIapConfigInfo>>;
    /**
     * Upload Apple Store p8 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigAppleCert: (data: {
        file?: File;
    }) => Promise<AxiosResponse<AppleIapConfigInfo>>;
    /**
     * Upload google play p12 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigGoogleCert: (data: {
        file?: File;
    }) => Promise<AxiosResponse<GoogleIapConfigInfo>>;
    /**
     * Delete playstation iap config.
     */
    deleteIapConfigPlaystation: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get playstation iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: playstation iap config&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigPlaystation: () => Promise<AxiosResponse<PlayStationIapConfigInfo>>;
    /**
     * Update playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated playstation iap config&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigPlaystation: (data: PlaystationIapConfigRequest) => Promise<AxiosResponse<PlayStationIapConfigInfo>>;
    /**
     * Query all user IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of iap orders&lt;/li&gt;&lt;/ul&gt;
     */
    getIapAll_ByUserId: (userId: string) => Promise<AxiosResponse<IapOrderPagingSlicedResult>>;
    /**
     * Validate playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Test Results&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConfigPlaystationValidate: () => Promise<AxiosResponse<TestResult>>;
    /**
     * Validate playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Test Results&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapConfigPlaystationValidate: (data: PlaystationIapConfigRequest) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Mock fulfill iap item without validate receipt.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapMockReceipt_ByUserId: (userId: string, data: MockIapReceipt) => Promise<AxiosResponse<unknown>>;
    /**
     * Query IAP consume history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap consume history&lt;/li&gt;&lt;/ul&gt;
     */
    getIapConsumeHistory_ByUserId: (userId: string, queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        startTime?: string | null;
        status?: "FAIL" | "PENDING" | "SUCCESS";
        type?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
    }) => Promise<AxiosResponse<IapConsumeHistoryPagingSlicedResult>>;
};

/**
 * AUTO GENERATED
 */

declare function IapNotificationAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query third party notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Third Party Platform notifications&lt;/li&gt;&lt;/ul&gt;
     */
    getIapNotifications: (queryParams?: {
        endDate?: string | null;
        externalId?: string | null;
        limit?: number;
        offset?: number;
        source?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        startDate?: string | null;
        status?: "ERROR" | "IGNORED" | "PROCESSED" | "WARN";
        type?: string | null;
    }) => Promise<AxiosResponse<NotificationPagingSlicedResult>>;
};

/**
 * AUTO GENERATED
 */

declare function IapSubscriptionAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query subscriptions, default sort by updatedAt Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptions: (queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        productId?: string | null;
        userId?: string | null;
    }) => Promise<AxiosResponse<ThirdPartyUserSubscriptionPagingSlicedResult>>;
    /**
     * Query user subscription, default sort by updatedAtOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptions_ByUserId: (userId: string, queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        productId?: string | null;
    }) => Promise<AxiosResponse<ThirdPartyUserSubscriptionPagingSlicedResult>>;
    /**
     * Admin get user subscription details.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscription_ByUserId_ById: (userId: string, id: string) => Promise<AxiosResponse<ThirdPartyUserSubscriptionInfo>>;
    /**
     * Sync Subscription Status
     */
    updateSyncIap_ByUserId_ById: (userId: string, id: string) => Promise<AxiosResponse<ThirdPartyUserSubscriptionInfo>>;
    /**
     * Admin query user subscription transactions, default sort by startAt timeOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptionsTransactions_ByUserId: (userId: string, queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
        productId?: string | null;
    }) => Promise<AxiosResponse<ThirdPartySubscriptionTransactionPagingSlicedResult>>;
    /**
     * Admin get user subscription details.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptionTransaction_ByUserId_ById: (userId: string, id: string) => Promise<AxiosResponse<ThirdPartySubscriptionTransactionInfo>>;
    /**
     * Sync Subscription Status
     */
    updateSyncSubscriptionIap_ByUserId_ById: (userId: string, id: string) => Promise<AxiosResponse<ThirdPartySubscriptionTransactionInfo>>;
    /**
     * Get Subscription Transaction Update History
     */
    getHistoriesSubscriptionsIap_ByUserId_ById: (userId: string, id: string, queryParams?: {
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<ThirdPartySubscriptionTransactionHistoryPagingSlicedResult>>;
    /**
     * Get user third party subscription by subscription group id.
     */
    getOwnershipByGroupIdSubscriptionsIap_ByUserId_ByPlatform: (userId: string, platform: string, queryParams: {
        groupId: string | null;
    }) => Promise<AxiosResponse<ThirdPartySubscriptionOwnership>>;
    /**
     * Get user third party subscription by subscription product id.
     */
    getOwnershipByProductIdSubscriptionsIap_ByUserId_ByPlatform: (userId: string, platform: string, queryParams: {
        productId: string | null;
    }) => Promise<AxiosResponse<ThirdPartySubscriptionOwnership>>;
};

/**
 * AUTO GENERATED
 */

declare function InvoiceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Generate invoice summary.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;
     */
    getInvoiceSummary: (queryParams: {
        endTime: string | null;
        feature: string | null;
        itemId: string | null;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        startTime: string | null;
    }) => Promise<AxiosResponse<InvoiceSummary>>;
    /**
     * Download invoice details as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: invoice details csv file&lt;/li&gt;&lt;/ul&gt;
     */
    getInvoiceDetailsCsv: (queryParams: {
        endTime: string | null;
        feature: string | null;
        itemId: string | null;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        startTime: string | null;
    }) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function ItemAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get all item type configs.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsConfigs: () => Promise<AxiosResponse<ItemTypeConfigInfoArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to create an item type config.&lt;p&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    createItemConfig: (data: ItemTypeConfigCreate) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to delete an item type config permanently.
     */
    deleteItemConfig_ById: (id: string) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get an item type config.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemConfig_ById: (id: string) => Promise<AxiosResponse<ItemTypeConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to update an item type config.&lt;p&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    updateItemConfig_ById: (id: string, data: ItemTypeConfigUpdate) => Promise<AxiosResponse<ItemTypeConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to get an item type config.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item type config data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsConfigsSearch: (queryParams: {
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        clazz?: string | null;
    }) => Promise<AxiosResponse<ItemTypeConfigInfo>>;
    /**
     * This API is used to create an item. APP item only can created in publisher namespace.&lt;p&gt;An item create example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;title&#34;:&#34;required&#34;, &#34;description&#34;:&#34;optional&#34;, &#34;longDescription&#34;:&#34;optional&#34;, &#34;localExt&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \} \} \}, &#34;images&#34;: \[ \{ &#34;as&#34;:&#34;optional, image for&#34;, &#34;caption&#34;:&#34;optional&#34;, &#34;height&#34;:10, &#34;width&#34;:10, &#34;imageUrl&#34;:&#34;http://img-url-required&#34;, &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34; \} \], &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;, &#34;status&#34;: &#34;ACTIVE&#34;, &#34;listable&#34;: true, &#34;purchasable&#34;: true, &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;, &#34;name&#34;: &#34;required, also will be used as entitlement name&#34;, &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable), &#34;stackable&#34;: false, &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;, &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;, &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;, &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;, &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;, &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item created belongs to the publisher namespace&#34;, &#34;sku&#34;: &#34;optional, commonly unique item code&#34;, &#34;regionData&#34;: \{ &#34;US(store&#39;s default region is required)&#34;: \[ \{ &#34;price&#34;:10, &#34;discountPercentage&#34;: 0(integer, optional, range[0,100], discountedPrice = price \* ((100 - discountPercentage) \* 0.01), will use it to calculate discounted price if it is not 0), &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0), &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;, &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;, &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present), &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; \} \] \}, &#34;itemIds&#34;: \[ &#34;itemId&#34; \], &#34;itemQty&#34;: \{ &#34;itemId&#34;:1 \}, &#34;recurring&#34;: \{ &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;, &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set), &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set), &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7) \}, &#34;tags&#34;: \[ &#34;exampleTag24&#34; \], &#34;features&#34;: \[ &#34;feature&#34; \], &#34;clazz&#34;: &#34;weapon&#34;, &#34;boothName&#34;: &#34;C_campaign1&#34;, &#34;displayOrder&#34;: 1000, &#34;ext&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \}, &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED), &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE) }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created item data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for item extension and localization extension and inventory config custom attributes&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createItem: (data: ItemCreate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;This API is used to sync an in game item in game namespace to publisher namespace, only INGAMEITEM, CODE, COINS and SEASON are supported&lt;p&gt;The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    updateItem: (data: InGameItemSync, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to get items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByIds: (queryParams: {
        itemIds: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullItemInfoArray>>;
    /**
     * This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsBySku: (queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to search items by keyword in title, description and long description within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsSearch: (queryParams: {
        keyword: string | null;
        language: string | null;
        activeOnly?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        sortBy?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullItemPagingSlicedResult>>;
    /**
     * This API is used to get the item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByAppId: (queryParams: {
        appId: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to delete an item permanently.&lt;p&gt;force: the default value should be: false. When the value is: &lt;li&gt;&lt;i&gt;false:&lt;i&gt;only the items in the draft store that have never been published yet can be removed.&lt;/li&gt;&lt;li&gt;&lt;i&gt;true:&lt;i&gt;the item in the draft store(even been published before) can be removed.&lt;/li&gt;
     */
    deleteItem_ByItemId: (itemId: string, queryParams?: {
        force?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to get an item.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getItem_ByItemId: (itemId: string, queryParams?: {
        activeOnly?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to update an item.&lt;p&gt;An item update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;categoryPath&#34;: &#34;/games&#34;, &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;title&#34;:&#34;required&#34;, &#34;description&#34;:&#34;optional&#34;, &#34;longDescription&#34;:&#34;optional&#34;, &#34;localExt&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \} \} \}, &#34;images&#34;: \[ \{ &#34;as&#34;:&#34;optional, image for&#34;, &#34;caption&#34;:&#34;optional&#34;, &#34;height&#34;:10, &#34;width&#34;:10, &#34;imageUrl&#34;:&#34;http://img-url-required&#34;, &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34; \} \], &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;, &#34;status&#34;: &#34;ACTIVE&#34;, &#34;listable&#34;: true, &#34;purchasable&#34;: true, &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;, &#34;name&#34;: &#34;optional&#34;, &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable), &#34;stackable&#34;: false, &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;, &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;, &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;, &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;, &#34;sku&#34;: &#34;optional, commonly unique item code&#34;, &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;, &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item created belongs to the publisher namespace&#34;, &#34;regionData&#34;: \{ &#34;US(store&#39;s default region is required)&#34;: \[ \{ &#34;price&#34;:10, &#34;discountPercentage&#34;:0(integer, optional, range[0,100], discountedPrice = price\*((100 - discountPercentage) \* 0.01), if it is not 0, will use it to calculate discounted price), &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0), &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;, &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;, &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present), &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;, &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; \} \] \}, &#34;itemIds&#34;: \[ &#34;itemId&#34; \], &#34;itemQty&#34;: \{ &#34;itemId&#34;:1 \}, &#34;recurring&#34;: \{ &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;, &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set), &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set), &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7) \}, &#34;tags&#34;: \[ &#34;exampleTag24&#34; \], &#34;features&#34;: \[ &#34;feature&#34; \], &#34;clazz&#34;: &#34;weapon&#34;, &#34;boothName&#34;: &#34;C_campaign1&#34;, &#34;displayOrder&#34;: 1000, &#34;ext&#34;: \{ &#34;properties&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \], &#34;functions&#34;:\[ \{ &#34;key1&#34;:&#34;value1&#34;, &#34;key2&#34;:&#34;value2&#34; \} \] \}, &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED), &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, new value should &gt;= old value if both old value and new value is limited, unset when item type is CODE) }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for item extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateItem_ByItemId: (itemId: string, data: ItemUpdate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to query items by criteria within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByCriteria: (queryParams?: {
        activeOnly?: boolean | null;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        availableDate?: string | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        region?: string | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
        targetNamespace?: string | null;
    }) => Promise<AxiosResponse<FullItemPagingSlicedResult>>;
    /**
     * This API is used to update region data of items in bulk &lt;br /&gt;
     */
    updateItemRegiondata: (data: BulkRegionDataChangeRequest, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to get an app info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;
     */
    getApp_ByItemId: (itemId: string, queryParams?: {
        activeOnly?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullAppInfo>>;
    /**
     * This API is used to update an app.&lt;p&gt;An app update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;developer&#34;: &#34;accelbyte&#34;, &#34;publisher&#34;: &#34;accelbyte&#34;, &#34;websiteUrl&#34;: &#34;http://accelbyte.io&#34;, &#34;forumUrl&#34;: &#34;http://accelbyte.io&#34;, &#34;platforms&#34;: \[&#34;Windows(allowed values: Windows, MacOS, Linux, IOS, Android)&#34;\], &#34;platformRequirements&#34;: \{ &#34;Windows&#34;: \[ \{ &#34;label&#34;:&#34;minimum(can be minimum or recommended)&#34;, &#34;osVersion&#34;:&#34;os version&#34;, &#34;processor&#34;:&#34;processor&#34;, &#34;ram&#34;:&#34;RAM&#34;, &#34;graphics&#34;:&#34;graphics&#34;, &#34;directXVersion&#34;:&#34;directXVersion&#34;, &#34;diskSpace&#34;:&#34;diskSpace&#34;, &#34;soundCard&#34;:&#34;soundCard&#34;, &#34;additionals&#34;:&#34;additionals&#34; \} \] \}, &#34;carousel&#34;: \[ \{ &#34;type&#34;:&#34;image(allowed values: image, video)&#34;, &#34;videoSource&#34;:&#34;generic(allowed values:generic, youtube, viemo)&#34;, &#34;url&#34;:&#34;url&#34;, &#34;alt&#34;:&#34;alternative url or text&#34;, &#34;thumbnailUrl&#34;:&#34;thumbnail url&#34;, &#34;previewUrl&#34;:&#34;preview url&#34;, \} \], &#34;localizations&#34;: \{ &#34;en&#34;: \{ &#34;slogan&#34;:&#34;slogan&#34;, &#34;announcement&#34;:&#34;announcement&#34;, \} \}, &#34;primaryGenre&#34;: &#34;Action&#34;, &#34;genres&#34;: \[&#34;Action&#34;, &#34;Adventure&#34;\], &#34;players&#34;: \[&#34;Single&#34;\], &#34;releaseDate&#34;: &#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34; }&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated app data&lt;/li&gt;&lt;/ul&gt;
     */
    updateApp_ByItemId: (itemId: string, data: AppUpdate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullAppInfo>>;
    /**
     * This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsBySkuLocale: (queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<PopulatedItemInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to get the itemId by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the itemId with sku&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsItemIdBySku: (queryParams: {
        sku: string | null;
        activeOnly?: boolean | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemId>>;
    /**
     * This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsLocaleByIds: (queryParams: {
        itemIds: string | null;
        activeOnly?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemInfoArray>>;
    /**
     * This API is used to get an list of itemId by list of sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsItemIdBySkus: (queryParams?: {
        sku?: string[];
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemIdArray>>;
    /**
     * This API is used to query uncategorized items within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of uncategorized items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsUncategorized: (queryParams?: {
        activeOnly?: boolean | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullItemPagingSlicedResult>>;
    /**
     * This API is used to query items by criteria within a store.&lt;p&gt;The behaviour for itemStatus query parameter:&lt;li&gt;TRUE: Show only ACTIVE items&lt;/li&gt;&lt;li&gt;FALSE: Show only INACTIVE items&lt;/li&gt;&lt;li&gt;Not provided: show both ACTIVE and INACTIVE items&lt;/li&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByCriteria_v2: (queryParams?: {
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        availableDate?: string | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemName?: string | null;
        itemStatus?: "ACTIVE" | "INACTIVE";
        itemType?: string[];
        limit?: number;
        offset?: number;
        region?: string | null;
        sectionExclusive?: boolean | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
        targetNamespace?: string | null;
        withTotal?: boolean | null;
    }) => Promise<AxiosResponse<FullItemPagingResult>>;
    /**
     * This API is used to get estimated prices of a flexible pricing bundle
     */
    getItemsEstimatedPrice: (queryParams: {
        itemIds: string | null;
        userId: string | null;
        platform?: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<EstimatedPriceInfo>>;
    /**
     * Enable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    updateEnable_ByItemId: (itemId: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getLocale_ByItemId: (itemId: string, queryParams?: {
        activeOnly?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<PopulatedItemInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.
     */
    updateReturn_ByItemId: (itemId: string, data: ItemReturnRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Get available predicate types.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: available predicate types&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsPredicateTypes: () => Promise<AxiosResponse<AvailablePredicateArray>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;
     */
    updateAcquire_ByItemId: (itemId: string, data: ItemAcquireRequest) => Promise<AxiosResponse<ItemAcquireResult>>;
    /**
     * Disable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    updateDisable_ByItemId: (itemId: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * Get item dynamic data for published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByItemId: (itemId: string) => Promise<AxiosResponse<ItemDynamicDataInfo>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to list basic items by features.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of basic items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByFeaturesBasic: (queryParams?: {
        activeOnly?: boolean | null;
        features?: string[];
    }) => Promise<AxiosResponse<BasicItemArray>>;
    /**
     * Remove a feature from an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    deleteFeature_ByItemId_ByFeature: (itemId: string, feature: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * Add a feature to an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;
     */
    updateFeature_ByItemId_ByFeature: (itemId: string, feature: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to update item purchase condition
     */
    updatePurchaseCondition_ByItemId: (itemId: string, data: PurchaseConditionUpdate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullItemInfo>>;
    /**
     * This API is used to validate user purchase condition
     */
    createItemPurchaseConditionValidate: (data: ItemPurchaseConditionValidateRequest, queryParams: {
        userId: string | null;
        platform?: string | null;
    }) => Promise<AxiosResponse<ItemPurchaseConditionValidateResultArray>>;
};

/**
 * AUTO GENERATED
 */

declare function KeyGroupAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query key groups, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of key group&lt;/li&gt;&lt;/ul&gt;
     */
    getKeygroups: (queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        tag?: string | null;
    }) => Promise<AxiosResponse<KeyGroupPagingSlicedResult>>;
    /**
     * Create key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created key group&lt;/li&gt;&lt;/ul&gt;
     */
    createKeygroup: (data: KeyGroupCreate) => Promise<AxiosResponse<KeyGroupInfo>>;
    /**
     * @deprecated
     * Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
     */
    getKeygroupsByBoothName: (queryParams: {
        boothName: string | null;
    }) => Promise<AxiosResponse<KeyGroupInfo>>;
    /**
     * Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
     */
    getKeygroup_ByKeyGroupId: (keyGroupId: string) => Promise<AxiosResponse<KeyGroupInfo>>;
    /**
     * Update key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated key group&lt;/li&gt;&lt;/ul&gt;
     */
    updateKeygroup_ByKeyGroupId: (keyGroupId: string, data: KeyGroupUpdate) => Promise<AxiosResponse<KeyGroupInfo>>;
    /**
     * This API is used to list keys of a key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: keys&lt;/li&gt;&lt;/ul&gt;
     */
    getKeys_ByKeyGroupId: (keyGroupId: string, queryParams?: {
        limit?: number;
        offset?: number;
        status?: "ACQUIRED" | "ACTIVE";
    }) => Promise<AxiosResponse<KeyPagingSliceResult>>;
    /**
     * This API is used to upload keys with csv format to a key group.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    createKey_ByKeyGroupId: (keyGroupId: string, data: {
        file?: File;
    }) => Promise<AxiosResponse<BulkOperationResult>>;
    /**
     * Get key group dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByKeyGroupId: (keyGroupId: string) => Promise<AxiosResponse<KeyGroupDynamicInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function OrderAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders: (queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        orderNos?: string[];
        sortBy?: string | null;
        startTime?: string | null;
        status?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CLOSED" | "DELETED" | "FULFILLED" | "FULFILL_FAILED" | "INIT" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED";
        withTotal?: boolean | null;
    }) => Promise<AxiosResponse<OrderPagingResult>>;
    /**
     * Get Order Statistics.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order statistics&lt;/li&gt;&lt;/ul&gt;
     */
    getOrdersStats: () => Promise<AxiosResponse<OrderStatistics>>;
    /**
     * Get order by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order instance&lt;/li&gt;&lt;/ul&gt;
     */
    getOrder_ByOrderNo: (orderNo: string) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders_ByUserId: (userId: string, queryParams?: {
        discounted?: boolean | null;
        itemId?: string | null;
        limit?: number;
        offset?: number;
        status?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CLOSED" | "DELETED" | "FULFILLED" | "FULFILL_FAILED" | "INIT" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED";
    }) => Promise<AxiosResponse<OrderPagingSlicedResult>>;
    /**
     * Admin Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;sandbox default value is &lt;b&gt;false&lt;/b&gt;&lt;/li&gt;&lt;li&gt;platform default value is &lt;b&gt;Other&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for ext field&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createOrder_ByUserId: (userId: string, data: AdminOrderCreate) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Refund order by orderNo.
     */
    updateRefund_ByOrderNo: (orderNo: string, data: OrderRefundCreate) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Get an order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrder_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Update order status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated order&lt;/li&gt;&lt;/ul&gt;
     */
    updateOrder_ByUserId_ByOrderNo: (userId: string, orderNo: string, data: OrderUpdate) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * This API is used to get the count of purchased item which is the order target.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Item purchased count&lt;/li&gt;&lt;/ul&gt;
     */
    getOrdersCountOfItem_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
    }) => Promise<AxiosResponse<PurchasedItemCount>>;
    /**
     * @deprecated
     * Get user order grant that fulfilled by this order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order grant&lt;/li&gt;&lt;/ul&gt;
     */
    getGrant_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderGrantInfo>>;
    /**
     * Fulfill an order if the order is charged but fulfill failed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfilled order&lt;/li&gt;&lt;/ul&gt;
     */
    updateFulfill_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Get user order history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderHistoryInfoArray>>;
    /**
     * Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;
     */
    getReceiptPdf_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;
     */
    createNotification_ByUserId_ByOrderNo: (userId: string, orderNo: string, data: TradeNotification) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function OrderDedicatedAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync orders&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders: (queryParams: {
        end: string | null;
        start: string | null;
        nextEvaluatedKey?: string | null;
    }) => Promise<AxiosResponse<OrderSyncResult>>;
};

/**
 * AUTO GENERATED
 */

declare function PaymentAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query payment orders&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrders: (queryParams?: {
        channel?: "EXTERNAL" | "INTERNAL";
        extTxId?: string | null;
        limit?: number;
        offset?: number;
        status?: "AUTHORISED" | "AUTHORISE_FAILED" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CHARGE_FAILED" | "DELETED" | "INIT" | "NOTIFICATION_OF_CHARGEBACK" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "REQUEST_FOR_INFORMATION";
    }) => Promise<AxiosResponse<PaymentOrderPagingSlicedResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment notifications&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentNotifications: (queryParams?: {
        endDate?: string | null;
        externalId?: string | null;
        limit?: number;
        notificationSource?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        notificationType?: string | null;
        offset?: number;
        paymentOrderNo?: string | null;
        startDate?: string | null;
        status?: "ERROR" | "IGNORED" | "PROCESSED" | "WARN";
    }) => Promise<AxiosResponse<PaymentNotificationPagingSlicedResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;List external order No by external transaction id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment orders&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrdersByExtTxId: (queryParams: {
        extTxId: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to create payment order from justice service. The result contains the payment station url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for custom parameters and meta data&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createPaymentOrder_ByUserId: (userId: string, data: PaymentOrderCreate) => Promise<AxiosResponse<PaymentOrderInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order by paymentOrderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrder_ByPaymentOrderNo: (paymentOrderNo: string) => Promise<AxiosResponse<PaymentOrderInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentOrder_ByPaymentOrderNo: (paymentOrderNo: string, data: PaymentOrderChargeRequest) => Promise<AxiosResponse<PaymentOrderInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order charge status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order charge status&lt;/li&gt;&lt;/ul&gt;
     */
    getStatusPayment_ByPaymentOrderNo: (paymentOrderNo: string) => Promise<AxiosResponse<PaymentOrderChargeStatus>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Simulate payment notification on sandbox payment order, usually for test usage to simulate real currency payment notification.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: notification process result&lt;/li&gt;&lt;/ul&gt;
     */
    updateSimulateNotificationPayment_ByPaymentOrderNo: (paymentOrderNo: string, data: PaymentOrderNotifySimulation) => Promise<AxiosResponse<NotificationProcessResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to refund order by paymentOrderNo from justice service.
     */
    updateRefundPayment_ByUserId_ByPaymentOrderNo: (userId: string, paymentOrderNo: string, data: PaymentOrderRefund) => Promise<AxiosResponse<PaymentOrderInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function PaymentCallbackConfigAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigCallback: () => Promise<AxiosResponse<PaymentCallbackConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigCallback: (data: PaymentCallbackConfigUpdate) => Promise<AxiosResponse<PaymentCallbackConfigInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function PaymentConfigAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment global tax config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigTax: () => Promise<AxiosResponse<PaymentTaxConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment tax config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarEnabled&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;required, when taxJarEnabled is true and there is no existing token&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandboxTaxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarProductCodesMapping&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;key is item type(APP|COINS|INGAMEITEM|BUNDLE|CODE|SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment global tax config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigTax: (data: PaymentTaxConfigEdit) => Promise<AxiosResponse<PaymentTaxConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Query payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProvider: (queryParams?: {
        limit?: number;
        namespace?: string | null;
        offset?: number;
        region?: string | null;
    }) => Promise<AxiosResponse<PaymentProviderConfigPagingSlicedResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Create payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigProvider: (data: PaymentProviderConfigEdit) => Promise<AxiosResponse<PaymentProviderConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment merchant config by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigMerchant_ById: (id: string) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    deletePaymentConfigProvider_ById: (id: string) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigProvider_ById: (id: string, data: PaymentProviderConfigEdit) => Promise<AxiosResponse<PaymentProviderConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Debug matched payment merchant config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigMerchantMatched: (queryParams?: {
        namespace?: string | null;
        region?: string | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Debug matched payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProviderMatched: (queryParams?: {
        namespace?: string | null;
        region?: string | null;
    }) => Promise<AxiosResponse<PaymentProviderConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get special payment providers, such as ALIPAY, WXPAY.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProviderSpecial: () => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get aggregate payment providers, such as XSOLLA, ADYEN.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigProviderAggregate: () => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update adyen config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateAdyenconfigPayment_ById: (id: string, data: AdyenConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update wxpay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWxpayconfigPayment_ById: (id: string, data: WxPayConfigRequest, queryParams?: {
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test adyen configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;merchantAccount&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;notificationHmacKey&lt;/li&gt;&lt;li&gt;notificationUsername&lt;/li&gt;&lt;li&gt;notificationPassword&lt;/li&gt;&lt;li&gt;liveEndpointUrlPrefix&lt;/li&gt;&lt;li&gt;allowedPaymentMethods&lt;/li&gt;&lt;li&gt;blockedPaymentMethods&lt;/li&gt;&lt;li&gt;settings&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantAdyenconfigTest: (data: AdyenConfig, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test WxPay configuration. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantWxpayconfigTest: (data: WxPayConfigRequest) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update alipay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateAlipayconfigPayment_ById: (id: string, data: AliPayConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update PayPal config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaypalconfigPayment_ById: (id: string, data: PayPalConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update stripe config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateStripeconfigPayment_ById: (id: string, data: StripeConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update xsolla configuration. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateXsollaconfigPayment_ById: (id: string, data: XsollaConfig, queryParams?: {
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test AliPay configuration.Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantAlipayconfigTest: (data: AliPayConfig, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test PayPal configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;clientID&lt;/li&gt;&lt;li&gt;clientSecret&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;webHookId&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantPaypalconfigTest: (data: PayPalConfig, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test stripe configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;li&gt;allowedPaymentMethodTypes&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;publishableKey&lt;/li&gt;&lt;li&gt;webhookSecret&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantStripeconfigTest: (data: StripeConfig, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check xsolla configuration, Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;merchantId&lt;/li&gt;&lt;li&gt;projectId&lt;/li&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;projectSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantXsollaconfigTest: (data: XsollaConfig) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update Neon Pay config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateNeonpayconfigPayment_ById: (id: string, data: NeonPayConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check Neon Pay configuration, Reference: &lt;a href=&#34;https://docs.neonpay.com/docs/checkout&#34;&gt;Neon Pay Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;webhookSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantNeonpayconfigTest: (data: NeonPayConfig, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update checkout.com config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCheckoutconfigPayment_ById: (id: string, data: CheckoutConfig, queryParams?: {
        sandbox?: boolean | null;
        validate?: boolean | null;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update xsolla UI configuration.Reference: &lt;a href=&#34;https://developers.xsolla.com/api.html#ui-integrations&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateXsollauiconfigPayment_ById: (id: string, data: XsollaPaywallConfigRequest) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test checkout.com configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;publicKey&lt;/li&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentConfigMerchantCheckoutconfigTest: (data: CheckoutConfig, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment domain whitelist config by namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment domain whitelist config info&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentConfigDomains: () => Promise<AxiosResponse<PaymentDomainWhitelistConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Update payment provider config by namespace.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;domains&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;list of domains to whitelist for the return URL.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Validation&lt;/i&gt;: the domain should include the protocol (http/https), but the whitelist check will only compare the host part (www.example.com)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment domain whitelist config&lt;/li&gt;&lt;/ul&gt;
     */
    updatePaymentConfigDomain: (data: PaymentDomainWhitelistConfigEdit) => Promise<AxiosResponse<PaymentDomainWhitelistConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test adyen configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    getAdyenconfigTestPayment_ById: (id: string, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Upload wxpay cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWxpayconfigCertPayment_ById: (id: string, data: {
        file?: File;
    }) => Promise<AxiosResponse<PaymentMerchantConfigInfo>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test WxPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;
     */
    getWxpayconfigTestPayment_ById: (id: string) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test AliPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test alipay config&lt;/li&gt;&lt;/ul&gt;
     */
    getAlipayconfigTestPayment_ById: (id: string, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test PayPal configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    getPaypalconfigTestPayment_ById: (id: string, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test stripe configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;
     */
    getStripeconfigTestPayment_ById: (id: string, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test xsolla configuration in payment merchant config. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test xsolla config&lt;/li&gt;&lt;/ul&gt;
     */
    getXsollaconfigTestPayment_ById: (id: string) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test Neon Pay configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    getNeonpayconfigTestPayment_ById: (id: string, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Test checkout.com configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;
     */
    getCheckoutconfigTestPayment_ById: (id: string, queryParams?: {
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<TestResult>>;
};

/**
 * AUTO GENERATED
 */

declare function PaymentDedicatedAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync payment orders&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentOrders: (queryParams: {
        end: string | null;
        start: string | null;
        nextEvaluatedKey?: string | null;
    }) => Promise<AxiosResponse<PaymentOrderSyncResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;p&gt;This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in, should be publisher namespace if it&#39;s a Steam like platform that share &lt;br&gt;payment config cross namespaces, otherwise it&#39;s the game namespace&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;External order number, it should be unique in invoker order system&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;User id for the order owner in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be user character id &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;price which should be greater than 0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item title&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency code, default is USD&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency namespace, default is publisher namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Country of the user, will get from user info if not present&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;language&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Language of the user&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandbox&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;set to true will create sandbox order that not real paid for xsolla/alipay and will not validate &lt;br&gt;price for wxpay.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;returnUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized return url for redirect once payment finished, leave unset to use configuration in &lt;br&gt;namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;notifyUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized notify url for payment web hook, leave unset to use configuration in namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Custom parameters&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;extOrderNo&#34;: &#34;123456789&#34;, &#34;sku&#34;: &#34;sku&#34;, &#34;targetNamespace&#34;: &#34;game1&#34;, &#34;targetUserId&#34;: &#34;94451623768940d58416ca33ca767ec3&#34;, &#34;extUserId&#34;: &#34;678&#34;, &#34;title&#34;: &#34;Frostmourne&#34;, &#34;description\&#34;: &#34;Here was power. Here was despair&#34;, &#34;price&#34;: 100, &#34;region&#34;: &#34;CN&#34;, &#34;language&#34;: &#34;zh-CN&#34;, &#34;currencyCode&#34;: &#34;USD&#34;, &#34;currencyNamespace&#34;: &#34;accelbyte&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Payment Notification:&lt;/h4&gt;&lt;p&gt;After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;payload&#34;: &#34;{ \&#34;type\&#34;: \&#34;payment\&#34;, \&#34;nonceStr\&#34;: \&#34;34c1dcf3eb58455eb161465bbfc0b590\&#34;, \&#34;paymentOrderNo\&#34;: \&#34;18081239088\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;targetNamespace\&#34;: \&#34;game1\&#34;, \&#34;targetUserId\&#34;: \&#34;94451623768940d58416ca33ca767ec3\&#34;, \&#34;extOrderNo\&#34;: \&#34;123456789\&#34;, \&#34;sku\&#34;: \&#34;sku\&#34;, \&#34;extUserId\&#34;: \&#34;678\&#34;, \&#34;price\&#34;: 100, \&#34;paymentProvider\&#34;: \&#34;XSOLLA\&#34;, \&#34;vat\&#34;: 0, \&#34;salesTax\&#34;: 0, \&#34;paymentProviderFee\&#34;: 0, \&#34;paymentMethodFee\&#34;: 0, \&#34;currency\&#34;: { \&#34;currencyCode\&#34;: \&#34;USD\&#34;, \&#34;currencySymbol\&#34;: \&#34;$\&#34;, \&#34;currencyType\&#34;: \&#34;REAL\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;decimals\&#34;: 2 }, \&#34;status\&#34;: \&#34;CHARGED\&#34;, \&#34;createdTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;chargedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34; }&#34;, &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Payment notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider, allowed values: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, can be timestamp or uuid&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created payment order info&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentOrder: (data: ExternalPaymentOrderCreate) => Promise<AxiosResponse<PaymentOrderCreateResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;&lt;p&gt;This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. &lt;ul&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDED&#34;, usually wallet paid, it indicates payment order already refunded&lt;/li&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDING&#34;, usually real money paid, platform will send notification to registered notify url once refund successfully&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order number&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund description&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;description&#34;: &#34;Repeated item.&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Refund Notification:&lt;/h4&gt;&lt;p&gt;It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Refund notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Refund notification Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{ &#34;payload&#34;: &#34;{ \&#34;type\&#34;: \&#34;payment\&#34;, \&#34;nonceStr\&#34;: \&#34;34c1dcf3eb58455eb161465bbfc0b590\&#34;, \&#34;paymentOrderNo\&#34;: \&#34;18081239088\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;targetNamespace\&#34;: \&#34;game1\&#34;, \&#34;targetUserId\&#34;: \&#34;94451623768940d58416ca33ca767ec3\&#34;, \&#34;extOrderNo\&#34;: \&#34;123456789\&#34;, \&#34;sku\&#34;: \&#34;sku\&#34;, \&#34;extUserId\&#34;: \&#34;678\&#34;, \&#34;price\&#34;: 100, \&#34;paymentProvider\&#34;: \&#34;XSOLLA\&#34;, \&#34;vat\&#34;: 0, \&#34;salesTax\&#34;: 0, \&#34;paymentProviderFee\&#34;: 0, \&#34;paymentMethodFee\&#34;: 0, \&#34;currency\&#34;: { \&#34;currencyCode\&#34;: \&#34;USD\&#34;, \&#34;currencySymbol\&#34;: \&#34;$\&#34;, \&#34;currencyType\&#34;: \&#34;REAL\&#34;, \&#34;namespace\&#34;: \&#34;accelbyte\&#34;, \&#34;decimals\&#34;: 2 }, \&#34;status\&#34;: \&#34;REFUNDED\&#34;, \&#34;createdTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;chargedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34;, \&#34;refundedTime\&#34;: \&#34;2018-07-28T00:39:16.274Z\&#34; }&#34;, &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34; }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Refund notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order refund status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;refundedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order refunded&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    updateRefundPayment_ByPaymentOrderNo: (paymentOrderNo: string, data: PaymentOrderRefund) => Promise<AxiosResponse<PaymentOrderRefundResult>>;
};

/**
 * AUTO GENERATED
 */

declare function PlatformAccountClosureAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get user platform account closure history.&lt;br&gt;
     */
    getPlatformClosureHistory_ByUserId: (userId: string) => Promise<AxiosResponse<PlatformAccountClosureHistoryInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function PlatformAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get Xbox entitlement ownership by product sku.
     */
    createOwnershipXblPlatform_ByProductSku: (productSku: string, data: XblEntitlementOwnershipRequest) => Promise<AxiosResponse<PlatformOwnership>>;
    /**
     * Get user psn entitlement ownership by entitlement label.
     */
    createOwnershipPsnPlatform_ByEntitlementLabel: (entitlementLabel: string, data: PsnEntitlementOwnershipRequest) => Promise<AxiosResponse<Ownership>>;
};

/**
 * AUTO GENERATED
 */

declare function RevocationAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Delete revocation config.
     */
    deleteRevocationConfig: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get revocation configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Revocation config&lt;/li&gt;&lt;/ul&gt;
     */
    getRevocationConfig: () => Promise<AxiosResponse<RevocationConfigInfo>>;
    /**
     * Update revocation configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Revocation config&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocationConfig: (data: RevocationConfigUpdate) => Promise<AxiosResponse<RevocationConfigInfo>>;
    /**
     * Query revocation histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query revocation history&lt;/li&gt;&lt;/ul&gt;
     */
    getRevocationHistory: (queryParams?: {
        endTime?: string | null;
        limit?: number;
        offset?: number;
        source?: "DLC" | "IAP" | "ORDER" | "OTHER";
        startTime?: string | null;
        status?: "FAIL" | "SUCCESS";
        transactionId?: string | null;
        userId?: string | null;
    }) => Promise<AxiosResponse<RevocationHistoryPagingSlicedResult>>;
    /**
     * Do revocation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revocation results&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocation_ByUserId: (userId: string, data: RevocationRequest) => Promise<AxiosResponse<RevocationResult>>;
};

/**
 * AUTO GENERATED
 */

declare function RewardAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to create a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created reward data&lt;/li&gt;&lt;li&gt;&lt;i&gt;Acceptable values for rewardItem&#39;s identityType are&lt;/i&gt;: ITEM_ID or ITEM_SKU&lt;/li&gt;&lt;/ul&gt;
     */
    createReward: (data: RewardCreate) => Promise<AxiosResponse<RewardInfo>>;
    /**
     * Export reward configurations for a given namespace into file. At current, only JSON file is supported.
     */
    getRewardsExport: () => Promise<AxiosResponse<unknown>>;
    /**
     * Import reward configurations for a given namespace from file. At current, only JSON file is supported.
     */
    createRewardImport: (data: {
        file?: File;
    }, queryParams: {
        replaceExisting: boolean | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to delete a reward by reward Id. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted reward data&lt;/li&gt;&lt;/ul&gt;
     */
    deleteReward_ByRewardId: (rewardId: string) => Promise<AxiosResponse<RewardInfo>>;
    /**
     * This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
     */
    getReward_ByRewardId: (rewardId: string) => Promise<AxiosResponse<RewardInfo>>;
    /**
     * This API is used to update a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;li&gt;&lt;i&gt;Acceptable values for rewardItem&#39;s identityType are&lt;/i&gt;: ITEM_ID or ITEM_SKU&lt;/li&gt;&lt;/ul&gt;
     */
    updateReward_ByRewardId: (rewardId: string, data: RewardUpdate) => Promise<AxiosResponse<RewardInfo>>;
    /**
     * This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;
     */
    getRewardsByCriteria: (queryParams?: {
        eventTopic?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
    }) => Promise<AxiosResponse<RewardPagingSlicedResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: match result&lt;/li&gt;&lt;/ul&gt;
     */
    updateMatch_ByRewardId: (rewardId: string, data: EventPayload) => Promise<AxiosResponse<ConditionMatchResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; This API is used to delete a reward condition record by reward Id and condition Name (optional). &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: 204 No Content &lt;/li&gt;&lt;/ul&gt;
     */
    deleteRecord_ByRewardId: (rewardId: string, data: DeleteRewardConditionRequest) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function SectionAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to query sections.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated sections&lt;/li&gt;&lt;/ul&gt;
     */
    getSections: (queryParams?: {
        end?: string | null;
        limit?: number;
        offset?: number;
        start?: string | null;
        storeId?: string | null;
        viewId?: string | null;
    }) => Promise<AxiosResponse<SectionPagingSlicedResult>>;
    /**
     * This API is used to create a section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created a section&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for section extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createSection: (data: SectionCreate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullSectionInfo>>;
    /**
     * This API is used to delete s section.
     */
    deleteSection_BySectionId: (sectionId: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to get a section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: section data&lt;/li&gt;&lt;/ul&gt;
     */
    getSection_BySectionId: (sectionId: string, queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullSectionInfo>>;
    /**
     * This API is used to update s section.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated section data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for section extension and localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateSection_BySectionId: (sectionId: string, data: SectionUpdate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullSectionInfo>>;
    /**
     * This API is used to purge expired section.
     */
    deleteSectionPurgeExpired: (queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function ServicePluginConfigAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * @deprecated
     * Delete service plugin config
     */
    deleteConfigServicePlugin: () => Promise<AxiosResponse<unknown>>;
    /**
     * @deprecated
     * Get service plugin config
     */
    getConfigsServicePlugin: () => Promise<AxiosResponse<ServicePluginConfigInfo>>;
    /**
     * @deprecated
     * Update catalog config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateConfigServicePlugin: (data: ServicePluginConfigUpdate) => Promise<AxiosResponse<ServicePluginConfigInfo>>;
    /**
     * Delete service plugin config.
     */
    deleteCatalogPluginLootbox: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get lootbox plugin config.
     */
    getCatalogPluginsLootbox: () => Promise<AxiosResponse<LootBoxPluginConfigInfo>>;
    /**
     * Update lootbox plugin config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginLootbox: (data: LootBoxPluginConfigUpdate) => Promise<AxiosResponse<LootBoxPluginConfigInfo>>;
    /**
     * Delete section plugin config.
     */
    deleteCatalogPluginSection: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get section plugin config.
     */
    getCatalogPluginsSection: () => Promise<AxiosResponse<SectionPluginConfigInfo>>;
    /**
     * Update section config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginSection: (data: SectionPluginConfigUpdate) => Promise<AxiosResponse<SectionPluginConfigInfo>>;
    /**
     * Delete service plugin config.
     */
    deleteRevocationPluginRevocation: () => Promise<AxiosResponse<unknown>>;
    /**
     * Get revocation plugin config.
     */
    getRevocationPluginsRevocation: () => Promise<AxiosResponse<RevocationPluginConfigInfo>>;
    /**
     * Update revocation plugin config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocationPluginRevocation: (data: RevocationPluginConfigUpdate) => Promise<AxiosResponse<RevocationPluginConfigInfo>>;
    /**
     * Get lootbox plugin gRPC info.
     */
    getCatalogPluginsLootboxGrpcInfo: (queryParams?: {
        force?: boolean | null;
    }) => Promise<AxiosResponse<GrpcServerInfo>>;
    /**
     * Upload lootbox plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginLootboxCustomConfigCert: (data: {
        file?: File;
    }) => Promise<AxiosResponse<LootBoxPluginConfigInfo>>;
    /**
     * Upload section plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogPluginSectionCustomConfigCert: (data: {
        file?: File;
    }) => Promise<AxiosResponse<SectionPluginConfigInfo>>;
    /**
     * Upload revocation plugin custom config tls cert.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated service plugin config&lt;/li&gt;&lt;/ul&gt;
     */
    updateRevocationPluginRevocationRevocationCustomConfigCert: (data: {
        file?: File;
    }) => Promise<AxiosResponse<RevocationPluginConfigInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function SessionPlatformAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to register/update a session on xbox.
     */
    updateSessionXbl_ByUserId: (userId: string, data: XblUserSessionRequest) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function StoreAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to list stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;
     */
    getStores: () => Promise<AxiosResponse<StoreInfoArray>>;
    /**
     * This API is used to create a non published store in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created store data&lt;/li&gt;&lt;/ul&gt;
     */
    createStore: (data: StoreCreate) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * @deprecated
     * This API is used to import a store.&lt;p&gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/import to import store.&lt;br&gt;
     */
    updateStoreImport: (data: {
        file?: File;
    }, queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * Get catalog config.
     */
    getCatalogConfigs: () => Promise<AxiosResponse<CatalogConfigInfo>>;
    /**
     * Update catalog config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated catalog config&lt;/li&gt;&lt;/ul&gt;
     */
    updateCatalogConfig: (data: CatalogConfigUpdate) => Promise<AxiosResponse<CatalogConfigInfo>>;
    /**
     * This API is used to delete a store. Only non published store can be deleted.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store&lt;/li&gt;&lt;/ul&gt;
     */
    deleteStore_ByStoreId: (storeId: string) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to get a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;
     */
    getStore_ByStoreId: (storeId: string) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to Update a store basic info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store data&lt;/li&gt;&lt;/ul&gt;
     */
    updateStore_ByStoreId: (storeId: string, data: StoreUpdate) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to delete published store including category and items before release to public.&lt;p&gt;&lt;b&gt;Warning: Please do not use this API once published to public user.&lt;/b&gt;
     */
    deleteStorePublished: () => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to get a published store basic info, exclude category and item information.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;
     */
    getStoresPublished: () => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to import a store.
     */
    updateStoreImport_v2: (data: {
        file?: File;
    }, queryParams?: {
        storeId?: string | null;
        strictMode?: boolean | null;
    }) => Promise<AxiosResponse<ImportStoreResult>>;
    /**
     * This API is used to export a store to CSV format
     */
    createStoreExportByCsv: (data: ExportStoreToCsvRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to clone a store. Usually clone a draft store to published store because published store can&#39;t directly edit content.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: clone store info&lt;/li&gt;&lt;/ul&gt;
     */
    updateClone_ByStoreId: (storeId: string, queryParams?: {
        targetStoreId?: string | null;
    }) => Promise<AxiosResponse<StoreInfo>>;
    /**
     * @deprecated
     * This API is used to export a store.&lt;p&gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/export to export store.&lt;br&gt;
     */
    getExport_ByStoreId: (storeId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to get a store&#39;s backup. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store backup info&lt;/li&gt;&lt;/ul&gt;
     */
    getStoresPublishedBackup: () => Promise<AxiosResponse<StoreBackupInfo>>;
    /**
     * This API is used to get catalog definition for import/export store by CSV&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: catalog definition&lt;/li&gt;&lt;/ul&gt;
     */
    getStoresCatalogDefinition: (queryParams: {
        catalogType: "APP" | "CATEGORY" | "ITEM" | "SECTION" | "VIEW";
    }) => Promise<AxiosResponse<CatalogDefinitionInfoArray>>;
    /**
     * This API is used to rollback a published store. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store info&lt;/li&gt;&lt;/ul&gt;
     */
    updateStorePublishedRollback: () => Promise<AxiosResponse<StoreInfo>>;
    /**
     * This API is used to export a whole or partial store.
     */
    createExport_ByStoreId_v2: (storeId: string, data: ExportStoreRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to download store csv templates for store importing by CSV feature
     */
    getStoresDownloadCsvTemplates: () => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to import a store by CSV format.
     */
    createImportByCsv_ByStoreId: (storeId: string, data: {
        category: File;
        display: File;
        item: File;
        notes: string | null;
        section: File;
    }) => Promise<AxiosResponse<ImportStoreResult>>;
    /**
     * This API is used to query import store history
     */
    getImportHistory_ByStoreId: (storeId: string, queryParams?: {
        end?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string | null;
        start?: string | null;
        success?: boolean | null;
    }) => Promise<AxiosResponse<ImportStoreHistoryPagingResult>>;
};

/**
 * AUTO GENERATED
 */

declare function SubscriptionAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscriptions&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptions: (queryParams?: {
        chargeStatus?: "CHARGED" | "CHARGE_FAILED" | "NEVER" | "RECURRING_CHARGING" | "SETUP";
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: "ACTIVE" | "CANCELLED" | "EXPIRED" | "INIT";
        subscribedBy?: "PLATFORM" | "USER";
        userId?: string | null;
    }) => Promise<AxiosResponse<SubscriptionPagingSlicedResult>>;
    /**
     * Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptions_ByUserId: (userId: string, queryParams?: {
        chargeStatus?: "CHARGED" | "CHARGE_FAILED" | "NEVER" | "RECURRING_CHARGING" | "SETUP";
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: "ACTIVE" | "CANCELLED" | "EXPIRED" | "INIT";
        subscribedBy?: "PLATFORM" | "USER";
    }) => Promise<AxiosResponse<SubscriptionPagingSlicedResult>>;
    /**
     * Get user subscription activity.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription activity&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptionsActivities_ByUserId: (userId: string, queryParams?: {
        excludeSystem?: boolean | null;
        limit?: number;
        offset?: number;
        subscriptionId?: string | null;
    }) => Promise<AxiosResponse<SubscriptionActivityPagingSlicedResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Recurring charge subscription, it will trigger recurring charge if the USER subscription status is ACTIVE, nextBillingDate is before now and no fail recurring charge within X(default 12) hours.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: recurring charge result&lt;/li&gt;&lt;/ul&gt;
     */
    updateRecurring_BySubscriptionId: (subscriptionId: string) => Promise<AxiosResponse<RecurringChargeResult>>;
    /**
     * &lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Delete user subscription.
     */
    deleteSubscription_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscription_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string) => Promise<AxiosResponse<SubscriptionInfo>>;
    /**
     * Free subscribe by platform, can used by other justice service to redeem/reward the subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result subscription&lt;/li&gt;&lt;/ul&gt;
     */
    createSubscriptionPlatformSubscribe_ByUserId: (userId: string, data: PlatformSubscribeRequest) => Promise<AxiosResponse<SubscriptionInfo>>;
    /**
     * Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptionsSubscribableByItemId_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
    }) => Promise<AxiosResponse<Subscribable>>;
    /**
     * Grant days to a subscription, if grantDays is positive, it will add free days and push the next billing date by the amount of day.&lt;br&gt;if the grantDays is negative or zero, it only apply to active/cancelled subscription, remove days will decrease current period end, and move the next billing date closer.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateGrant_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string, data: GrantSubscriptionDaysRequest) => Promise<AxiosResponse<SubscriptionInfo>>;
    /**
     * Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Set force true, will ignore the error if subscription is during recurring charging.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateCancel_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string, data: CancelRequest, queryParams?: {
        force?: boolean | null;
    }) => Promise<AxiosResponse<SubscriptionInfo>>;
    /**
     * Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription billing history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string, queryParams?: {
        excludeFree?: boolean | null;
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<BillingHistoryPagingSlicedResult>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;
     */
    createNotification_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string, data: TradeNotification) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function TicketAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get ticket(code/key) dynamic based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket dynamic&lt;/li&gt;&lt;/ul&gt;
     */
    getTicket_ByBoothName: (boothName: string) => Promise<AxiosResponse<TicketDynamicInfo>>;
    /**
     * Get ticket(code/key) booth ID.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket booth id&lt;/li&gt;&lt;/ul&gt;
     */
    getId_ByBoothName: (boothName: string) => Promise<AxiosResponse<TicketBoothId>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Decrease ticket(code/key) sale if requested orderNo is already increased.
     */
    updateDecrement_ByBoothName: (boothName: string, data: TicketSaleDecrementRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; increase ticket(code/key) sale.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Ticket sale increment result&lt;/li&gt;&lt;/ul&gt;
     */
    updateIncrement_ByBoothName: (boothName: string, data: TicketSaleIncrementRequest) => Promise<AxiosResponse<TicketSaleIncrementResult>>;
    /**
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Acquire ticket(code/key) based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;
     */
    createTicket_ByUserId_ByBoothName: (userId: string, boothName: string, data: TicketAcquireRequest) => Promise<AxiosResponse<TicketAcquireResult>>;
};

/**
 * AUTO GENERATED
 */

declare function TradeActionAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to create a chained operations&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: chain action history&lt;/li&gt;&lt;li&gt;&lt;i&gt;FULFILL_ITEM operation supported item type&lt;/i&gt;: INGAMEITEM,LOOTBOX,OPTIONBOX&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for metadata&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createTradeCommit: (data: TradeChainedActionCommitRequest) => Promise<AxiosResponse<TradeChainActionHistoryInfo>>;
    /**
     * This API is used to fetch a specific trade history using transaction ID&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: trade history based on transaction ID&lt;/li&gt;&lt;/ul&gt;
     */
    getTrade_ByTransactionId: (transactionId: string) => Promise<AxiosResponse<TradeChainActionHistoryInfo>>;
    /**
     * This API is used to fetch trade history based on the provided criteria&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: trade history list based on criteria&lt;/li&gt;&lt;/ul&gt;
     */
    getTradeHistoryByCriteria: (queryParams?: {
        limit?: number;
        offset?: number;
        status?: "FAILED" | "INIT" | "SUCCESS";
        type?: string | null;
        userId?: string | null;
    }) => Promise<AxiosResponse<TradeActionPagingSlicedResult>>;
};

/**
 * AUTO GENERATED
 */

declare function ViewAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to list all views.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of views&lt;/li&gt;&lt;/ul&gt;
     */
    getViews: (queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<ListViewInfoArray>>;
    /**
     * This API is used to create a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created a view&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createView: (data: ViewCreate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullViewInfo>>;
    /**
     * This API is used to delete a view.It will also delete all the related sections
     */
    deleteView_ByViewId: (viewId: string, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * This API is used to get a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: view data&lt;/li&gt;&lt;/ul&gt;
     */
    getView_ByViewId: (viewId: string, queryParams?: {
        storeId?: string | null;
    }) => Promise<AxiosResponse<FullViewInfo>>;
    /**
     * This API is used to update a view.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated view data&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for localization extension&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateView_ByViewId: (viewId: string, data: ViewUpdate, queryParams: {
        storeId: string | null;
    }) => Promise<AxiosResponse<FullViewInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function WalletAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * @deprecated
     * Query wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated wallets info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallets: (queryParams?: {
        currencyCode?: string | null;
        limit?: number;
        offset?: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
        userId?: string | null;
    }) => Promise<AxiosResponse<WalletPagingSlicedResult>>;
    /**
     * Debit different users&#39; wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk credit result&lt;/li&gt;&lt;/ul&gt;
     */
    createWalletDebit: (data: BulkDebitRequest[]) => Promise<AxiosResponse<BulkDebitResult>>;
    /**
     * Credit different users&#39; wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: bulk credit result&lt;/li&gt;&lt;/ul&gt;
     */
    createWalletCredit: (data: BulkCreditRequest[]) => Promise<AxiosResponse<BulkCreditResult>>;
    /**
     * @deprecated
     * get a wallet by wallet id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallet_ByWalletId: (walletId: string) => Promise<AxiosResponse<WalletInfo>>;
    /**
     * @deprecated
     * get a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallet_ByUserId_ByWalletId: (userId: string, walletId: string) => Promise<AxiosResponse<WalletInfo>>;
    /**
     * Get platform wallet config list.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWalletConfig_ByPlatform: (platform: string) => Promise<AxiosResponse<PlatformWalletConfigInfo>>;
    /**
     * Update platform wallet config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform wallet config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWalletConfig_ByPlatform: (platform: string, data: PlatformWalletConfigUpdate) => Promise<AxiosResponse<PlatformWalletConfigInfo>>;
    /**
     * @deprecated
     * Debit a user wallet.
     */
    updateDebit_ByUserId_ByWalletId: (userId: string, walletId: string, data: DebitRequest) => Promise<AxiosResponse<WalletInfo>>;
    /**
     * Reset platform wallet config to default config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: platform wallet config&lt;/li&gt;&lt;/ul&gt;
     */
    updateWalletConfigReset_ByPlatform: (platform: string) => Promise<AxiosResponse<PlatformWalletConfigInfo>>;
    /**
     * @deprecated
     * enable a user wallet.
     */
    updateEnable_ByUserId_ByWalletId: (userId: string, walletId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * @deprecated
     * disable a user wallet.
     */
    updateDisable_ByUserId_ByWalletId: (userId: string, walletId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Get user currency wallet summary.&lt;br&gt;Other detail info: &lt;ul&gt;(READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency wallet summary&lt;/li&gt;&lt;/ul&gt;
     */
    getWalletsCurrenciesSummary_ByUserId: (userId: string) => Promise<AxiosResponse<CurrencyWalletArray>>;
    /**
     * @deprecated
     * &lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Check wallet by balance origin and currency code whether it&#39;s inactive.
     */
    getCheck_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, queryParams: {
        origin: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox";
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * Credit a user wallet by currency code and balance origin, if wallet not exists, it will create a new wallet.&lt;br&gt;Other detail info: &lt;ul&gt;(UPDATE)&lt;/li&gt;&lt;/ul&gt;
     */
    updateCredit_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, data: CreditRequest) => Promise<AxiosResponse<WalletInfo>>;
    /**
     * Pay with user wallet by currency code and client platform.
     */
    updatePayment_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, data: PaymentRequest) => Promise<AxiosResponse<PlatformWallet>>;
    /**
     * @deprecated
     * List user wallet transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet transaction info&lt;/li&gt;&lt;/ul&gt;
     */
    getTransactions_ByUserId_ByWalletId: (userId: string, walletId: string, queryParams?: {
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<DetailedWalletTransactionPagingSlicedResult>>;
    /**
     * Checks if the user has enough balance based on the provided criteria.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: boolean value indicating if the user has enough balance&lt;/li&gt;&lt;/ul&gt;
     */
    createBalanceCheck_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, data: DebitByWalletPlatformRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Debit a user wallet by currency code, default is debit system wallet.
     */
    updateDebitWallet_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, data: DebitByCurrencyCodeRequest) => Promise<AxiosResponse<WalletInfo>>;
    /**
     * Pay with user wallet by currency code and client platform.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for metadata&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    updateDebitByWalletPlatform_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, data: DebitByWalletPlatformRequest) => Promise<AxiosResponse<PlatformWallet>>;
    /**
     * List user currency transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency transaction info&lt;/li&gt;&lt;/ul&gt;
     */
    getTransactionsWallets_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, queryParams?: {
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<WalletTransactionPagingSlicedResult>>;
};

declare const AchievementInfo: z.ZodObject<{
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    progressState: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    progression: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    serviceConfigId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string | null | undefined;
    serviceConfigId?: string | null | undefined;
    name?: string | null | undefined;
    progressState?: string | null | undefined;
    progression?: Record<string, any> | null | undefined;
}, {
    id?: string | null | undefined;
    serviceConfigId?: string | null | undefined;
    name?: string | null | undefined;
    progressState?: string | null | undefined;
    progression?: Record<string, any> | null | undefined;
}>;
interface AchievementInfo extends z.TypeOf<typeof AchievementInfo> {
}

declare const Action: z.ZodObject<{
    operations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        creditPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
            count: z.ZodNumber;
            currencyCode: z.ZodString;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        }, {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        }>>>;
        debitPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            count: z.ZodNumber;
            currencyCode: z.ZodString;
            walletPlatform: z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        }, {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        }>>>;
        fulFillItemPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            count: z.ZodNumber;
            entitlementCollectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
            itemIdentity: z.ZodString;
            itemIdentityType: z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>;
        }, "strip", z.ZodTypeAny, {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        }, {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        }>>>;
        resultId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        revokeEntitlementPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            entitlementId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            entitlementId: string;
            count?: number | null | undefined;
        }, {
            entitlementId: string;
            count?: number | null | undefined;
        }>>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "INIT", "SKIPPED", "SUCCESS"]>>>;
        statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["CREDIT_WALLET", "DEBIT_WALLET", "FULFILL_ITEM", "REVOKE_ENTITLEMENT"]>;
    }, "strip", z.ZodTypeAny, {
        type: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT";
        status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
        statusReason?: string | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        resultId?: string | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }, {
        type: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT";
        status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
        statusReason?: string | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        resultId?: string | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }>, "many">>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "INIT", "SKIPPED", "SUCCESS"]>>>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
    userId?: string | null | undefined;
    statusReason?: string | null | undefined;
    operations?: {
        type: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT";
        status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
        statusReason?: string | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        resultId?: string | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}, {
    status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
    userId?: string | null | undefined;
    statusReason?: string | null | undefined;
    operations?: {
        type: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT";
        status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
        statusReason?: string | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        resultId?: string | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}>;
interface Action extends z.TypeOf<typeof Action> {
}

declare const ActionRequest: z.ZodObject<{
    operations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        creditPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
            count: z.ZodNumber;
            currencyCode: z.ZodString;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        }, {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        }>>>;
        debitPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            count: z.ZodNumber;
            currencyCode: z.ZodString;
            walletPlatform: z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        }, {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        }>>>;
        fulFillItemPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            count: z.ZodNumber;
            entitlementCollectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
            itemIdentity: z.ZodString;
            itemIdentityType: z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>;
        }, "strip", z.ZodTypeAny, {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        }, {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        }>>>;
        revokeEntitlementPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            entitlementId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            entitlementId: string;
            count?: number | null | undefined;
        }, {
            entitlementId: string;
            count?: number | null | undefined;
        }>>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CREDIT_WALLET", "DEBIT_WALLET", "FULFILL_ITEM", "REVOKE_ENTITLEMENT"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT" | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }, {
        type?: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT" | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }>, "many">>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    userId?: string | null | undefined;
    operations?: {
        type?: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT" | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}, {
    userId?: string | null | undefined;
    operations?: {
        type?: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT" | null | undefined;
        creditPayload?: {
            currencyCode: string;
            count: number;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            expireAt?: string | null | undefined;
        } | null | undefined;
        debitPayload?: {
            currencyCode: string;
            count: number;
            walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
        } | null | undefined;
        fulFillItemPayload?: {
            count: number;
            itemIdentity: string;
            itemIdentityType: "ITEM_ID" | "ITEM_SKU";
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementCollectionId?: string | null | undefined;
        } | null | undefined;
        revokeEntitlementPayload?: {
            entitlementId: string;
            count?: number | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}>;
interface ActionRequest extends z.TypeOf<typeof ActionRequest> {
}

declare const AdditionalData: z.ZodObject<{
    cardSummary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    cardSummary?: string | null | undefined;
}, {
    cardSummary?: string | null | undefined;
}>;
interface AdditionalData extends z.TypeOf<typeof AdditionalData> {
}

declare const AdditionalDataEntitlement: z.ZodObject<{
    clientTransaction: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        amountConsumed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        clientTransactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        amountConsumed?: number | null | undefined;
        clientTransactionId?: string | null | undefined;
    }, {
        amountConsumed?: number | null | undefined;
        clientTransactionId?: string | null | undefined;
    }>, "many">>>;
    entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    usageCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    clientTransaction?: {
        amountConsumed?: number | null | undefined;
        clientTransactionId?: string | null | undefined;
    }[] | null | undefined;
    entitlementId?: string | null | undefined;
    usageCount?: number | null | undefined;
}, {
    clientTransaction?: {
        amountConsumed?: number | null | undefined;
        clientTransactionId?: string | null | undefined;
    }[] | null | undefined;
    entitlementId?: string | null | undefined;
    usageCount?: number | null | undefined;
}>;
interface AdditionalDataEntitlement extends z.TypeOf<typeof AdditionalDataEntitlement> {
}

declare const AppConfig: z.ZodObject<{
    appName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appName: string;
}, {
    appName: string;
}>;
interface AppConfig extends z.TypeOf<typeof AppConfig> {
}

declare const AppLocalization: z.ZodObject<{
    announcement: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    slogan: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    announcement?: string | null | undefined;
    slogan?: string | null | undefined;
}, {
    announcement?: string | null | undefined;
    slogan?: string | null | undefined;
}>;
interface AppLocalization extends z.TypeOf<typeof AppLocalization> {
}

declare const AvailableComparison: z.ZodObject<{
    comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
    text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    text?: string | null | undefined;
    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
}, {
    text?: string | null | undefined;
    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
}>;
interface AvailableComparison extends z.TypeOf<typeof AvailableComparison> {
}

declare const AvailablePredicate: z.ZodObject<{
    availableComparisons: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
        text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        text?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
    }, {
        text?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
    }>, "many">>>;
    predicateType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate", "StatisticCodePredicate"]>>>;
    showAnyOf: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    valueType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["List", "Number", "String"]>>>;
}, "strip", z.ZodTypeAny, {
    availableComparisons?: {
        text?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
    }[] | null | undefined;
    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
    showAnyOf?: boolean | null | undefined;
    valueType?: "List" | "Number" | "String" | null | undefined;
}, {
    availableComparisons?: {
        text?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
    }[] | null | undefined;
    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
    showAnyOf?: boolean | null | undefined;
    valueType?: "List" | "Number" | "String" | null | undefined;
}>;
interface AvailablePredicate extends z.TypeOf<typeof AvailablePredicate> {
}

declare const AvailablePrice: z.ZodObject<{
    currencyCode: z.ZodString;
    currencyNamespace: z.ZodString;
    discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    discountedPrice: z.ZodNumber;
    expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    price: z.ZodNumber;
    priceDetails: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        discountedPrice: z.ZodNumber;
        itemId: z.ZodString;
        itemName: z.ZodString;
        itemSku: z.ZodString;
        owned: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        price: z.ZodNumber;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        owned?: boolean | null | undefined;
    }, {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        owned?: boolean | null | undefined;
    }>, "many">>>;
    purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    currencyCode: string;
    currencyNamespace: string;
    discountedPrice: number;
    price: number;
    discountExpireAt?: string | null | undefined;
    discountPurchaseAt?: string | null | undefined;
    expireAt?: string | null | undefined;
    purchaseAt?: string | null | undefined;
    priceDetails?: {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        owned?: boolean | null | undefined;
    }[] | null | undefined;
}, {
    currencyCode: string;
    currencyNamespace: string;
    discountedPrice: number;
    price: number;
    discountExpireAt?: string | null | undefined;
    discountPurchaseAt?: string | null | undefined;
    expireAt?: string | null | undefined;
    purchaseAt?: string | null | undefined;
    priceDetails?: {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        owned?: boolean | null | undefined;
    }[] | null | undefined;
}>;
interface AvailablePrice extends z.TypeOf<typeof AvailablePrice> {
}

declare const BaseCustomConfig: z.ZodObject<{
    connectionType: z.ZodEnum<["INSECURE", "TLS"]>;
    grpcServerAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    connectionType: "INSECURE" | "TLS";
    grpcServerAddress: string;
}, {
    connectionType: "INSECURE" | "TLS";
    grpcServerAddress: string;
}>;
interface BaseCustomConfig extends z.TypeOf<typeof BaseCustomConfig> {
}

declare const BaseTlsConfig: z.ZodObject<{
    rootCertFileName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    rootCertFileName?: string | null | undefined;
}, {
    rootCertFileName?: string | null | undefined;
}>;
interface BaseTlsConfig extends z.TypeOf<typeof BaseTlsConfig> {
}

declare const BasicCategoryInfo: z.ZodObject<{
    categoryPath: z.ZodString;
    createdAt: z.ZodString;
    namespace: z.ZodString;
    parentCategoryPath: z.ZodString;
    root: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    categoryPath: string;
    createdAt: string;
    updatedAt: string;
    parentCategoryPath: string;
    root?: boolean | null | undefined;
}, {
    namespace: string;
    categoryPath: string;
    createdAt: string;
    updatedAt: string;
    parentCategoryPath: string;
    root?: boolean | null | undefined;
}>;
interface BasicCategoryInfo extends z.TypeOf<typeof BasicCategoryInfo> {
}

declare const BasicItem: z.ZodObject<{
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
    baseAppId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    entitlementType: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
    features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    itemId: z.ZodString;
    itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
    name: z.ZodString;
    namespace: z.ZodString;
    seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["ACTIVE", "INACTIVE"]>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    updatedAt: z.ZodString;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "ACTIVE" | "INACTIVE";
    name: string;
    itemId: string;
    createdAt: string;
    updatedAt: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    entitlementType: "CONSUMABLE" | "DURABLE";
    tags?: string[] | null | undefined;
    sku?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    baseAppId?: string | null | undefined;
    features?: string[] | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
}, {
    namespace: string;
    status: "ACTIVE" | "INACTIVE";
    name: string;
    itemId: string;
    createdAt: string;
    updatedAt: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    entitlementType: "CONSUMABLE" | "DURABLE";
    tags?: string[] | null | undefined;
    sku?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    baseAppId?: string | null | undefined;
    features?: string[] | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
}>;
interface BasicItem extends z.TypeOf<typeof BasicItem> {
}

declare const BillingAccount: z.ZodObject<{
    additionalData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        cardSummary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        cardSummary?: string | null | undefined;
    }, {
        cardSummary?: string | null | undefined;
    }>>>;
    paymentMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentProvider: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>>>;
}, "strip", z.ZodTypeAny, {
    additionalData?: {
        cardSummary?: string | null | undefined;
    } | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
}, {
    additionalData?: {
        cardSummary?: string | null | undefined;
    } | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
}>;
interface BillingAccount extends z.TypeOf<typeof BillingAccount> {
}

declare const BillingHistoryInfo: z.ZodObject<{
    amount: z.ZodNumber;
    billingAccount: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        additionalData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            cardSummary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            cardSummary?: string | null | undefined;
        }, {
            cardSummary?: string | null | undefined;
        }>>>;
        paymentMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        paymentProvider: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>>>;
    }, "strip", z.ZodTypeAny, {
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    }, {
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    }>>>;
    changeBillingAccount: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    createdAt: z.ZodString;
    currency: z.ZodObject<{
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        decimals: z.ZodNumber;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extTxId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodString;
    namespace: z.ZodString;
    paymentOrderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    recurringOrderNo: z.ZodString;
    retryAttempted: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sandbox: z.ZodBoolean;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["CHARGED", "CHARGE_FAILED", "INIT", "REFUNDED", "REFUND_FAILED"]>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subscriptionId: z.ZodString;
    subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    title: z.ZodString;
    totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    txEndTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "INIT" | "CHARGED" | "REFUNDED" | "REFUND_FAILED" | "CHARGE_FAILED";
    itemId: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    title: string;
    currency: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    };
    amount: number;
    sandbox: boolean;
    subscriptionId: string;
    recurringOrderNo: string;
    description?: string | null | undefined;
    sku?: string | null | undefined;
    statusReason?: string | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    totalTax?: number | null | undefined;
    paymentOrderNo?: string | null | undefined;
    extTxId?: string | null | undefined;
    txEndTime?: string | null | undefined;
    billingAccount?: {
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    } | null | undefined;
    changeBillingAccount?: boolean | null | undefined;
    retryAttempted?: number | null | undefined;
}, {
    namespace: string;
    status: "INIT" | "CHARGED" | "REFUNDED" | "REFUND_FAILED" | "CHARGE_FAILED";
    itemId: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    title: string;
    currency: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    };
    amount: number;
    sandbox: boolean;
    subscriptionId: string;
    recurringOrderNo: string;
    description?: string | null | undefined;
    sku?: string | null | undefined;
    statusReason?: string | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    totalTax?: number | null | undefined;
    paymentOrderNo?: string | null | undefined;
    extTxId?: string | null | undefined;
    txEndTime?: string | null | undefined;
    billingAccount?: {
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    } | null | undefined;
    changeBillingAccount?: boolean | null | undefined;
    retryAttempted?: number | null | undefined;
}>;
interface BillingHistoryInfo extends z.TypeOf<typeof BillingHistoryInfo> {
}

declare const BoxItem: z.ZodObject<{
    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    endDate?: string | null | undefined;
    itemId?: string | null | undefined;
    itemType?: string | null | undefined;
    count?: number | null | undefined;
    itemSku?: string | null | undefined;
    duration?: number | null | undefined;
}, {
    endDate?: string | null | undefined;
    itemId?: string | null | undefined;
    itemType?: string | null | undefined;
    count?: number | null | undefined;
    itemSku?: string | null | undefined;
    duration?: number | null | undefined;
}>;
interface BoxItem extends z.TypeOf<typeof BoxItem> {
}

declare const BundledItemInfo: z.ZodObject<{
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
    baseAppId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    boothName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    boundItemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    bundledQty: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    categoryPath: z.ZodString;
    clazz: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayOrder: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    entitlementType: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
    ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    flexible: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    fresh: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    images: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        as: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caption: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        height: z.ZodNumber;
        imageUrl: z.ZodString;
        smallImageUrl: z.ZodString;
        width: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        height: number;
        imageUrl: string;
        smallImageUrl: string;
        width: number;
        as?: string | null | undefined;
        caption?: string | null | undefined;
    }, {
        height: number;
        imageUrl: string;
        smallImageUrl: string;
        width: number;
        as?: string | null | undefined;
        caption?: string | null | undefined;
    }>, "many">>>;
    inventoryConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        customAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        serverCustomAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        slotUsed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    }, {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    }>>>;
    itemId: z.ZodString;
    itemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    itemQty: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
    itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
    language: z.ZodString;
    listable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    lootBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        rewardCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }>, "many">>>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
            weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }, {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }>, "many">>>;
        rollFunction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "DEFAULT"]>>>;
    }, "strip", z.ZodTypeAny, {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    }, {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    }>>>;
    maxCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    maxCountPerUser: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    name: z.ZodString;
    namespace: z.ZodString;
    optionBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        boxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }, {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    }, {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    }>>>;
    purchasable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    purchaseCondition: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        conditionGroups: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            operator: z.ZodOptional<z.ZodNullable<z.ZodEnum<["and", "or"]>>>;
            predicates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                anyOf: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                predicateType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate", "StatisticCodePredicate"]>>>;
                value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            }, "strip", z.ZodTypeAny, {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }, {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            operator?: "and" | "or" | null | undefined;
            predicates?: {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }[] | null | undefined;
        }, {
            operator?: "and" | "or" | null | undefined;
            predicates?: {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }[] | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        conditionGroups?: {
            operator?: "and" | "or" | null | undefined;
            predicates?: {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }, {
        conditionGroups?: {
            operator?: "and" | "or" | null | undefined;
            predicates?: {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }>>>;
    recurring: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        cycle: z.ZodEnum<["MONTHLY", "QUARTERLY", "WEEKLY", "YEARLY"]>;
        fixedFreeDays: z.ZodNumber;
        fixedTrialCycles: z.ZodNumber;
        graceDays: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    }, {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    }>>>;
    region: z.ZodString;
    regionData: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        currencyCode: z.ZodString;
        currencyNamespace: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }>, "many">>>;
    saleConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        price: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        price: number;
    }, {
        currencyCode: string;
        price: number;
    }>>>;
    seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
    sectionExclusive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sellable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    status: z.ZodEnum<["ACTIVE", "INACTIVE"]>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    targetCurrencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    targetItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    targetNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    thumbnailUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    updatedAt: z.ZodString;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "ACTIVE" | "INACTIVE";
    name: string;
    categoryPath: string;
    itemId: string;
    createdAt: string;
    updatedAt: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    title: string;
    entitlementType: "CONSUMABLE" | "DURABLE";
    language: string;
    region: string;
    stackable?: boolean | null | undefined;
    description?: string | null | undefined;
    tags?: string[] | null | undefined;
    boothName?: string | null | undefined;
    sku?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    baseAppId?: string | null | undefined;
    features?: string[] | null | undefined;
    flexible?: boolean | null | undefined;
    inventoryConfig?: {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    } | null | undefined;
    itemIds?: string[] | null | undefined;
    itemQty?: Record<string, number> | null | undefined;
    listable?: boolean | null | undefined;
    lootBoxConfig?: {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    } | null | undefined;
    maxCount?: number | null | undefined;
    maxCountPerUser?: number | null | undefined;
    optionBoxConfig?: {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
    purchasable?: boolean | null | undefined;
    recurring?: {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    } | null | undefined;
    saleConfig?: {
        currencyCode: string;
        price: number;
    } | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
    sectionExclusive?: boolean | null | undefined;
    sellable?: boolean | null | undefined;
    targetCurrencyCode?: string | null | undefined;
    targetItemId?: string | null | undefined;
    targetNamespace?: string | null | undefined;
    thumbnailUrl?: string | null | undefined;
    clazz?: string | null | undefined;
    ext?: Record<string, any> | null | undefined;
    regionData?: {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }[] | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
    boundItemIds?: string[] | null | undefined;
    displayOrder?: number | null | undefined;
    images?: {
        height: number;
        imageUrl: string;
        smallImageUrl: string;
        width: number;
        as?: string | null | undefined;
        caption?: string | null | undefined;
    }[] | null | undefined;
    purchaseCondition?: {
        conditionGroups?: {
            operator?: "and" | "or" | null | undefined;
            predicates?: {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
    fresh?: boolean | null | undefined;
    bundledQty?: number | null | undefined;
}, {
    namespace: string;
    status: "ACTIVE" | "INACTIVE";
    name: string;
    categoryPath: string;
    itemId: string;
    createdAt: string;
    updatedAt: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    title: string;
    entitlementType: "CONSUMABLE" | "DURABLE";
    language: string;
    region: string;
    stackable?: boolean | null | undefined;
    description?: string | null | undefined;
    tags?: string[] | null | undefined;
    boothName?: string | null | undefined;
    sku?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    baseAppId?: string | null | undefined;
    features?: string[] | null | undefined;
    flexible?: boolean | null | undefined;
    inventoryConfig?: {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    } | null | undefined;
    itemIds?: string[] | null | undefined;
    itemQty?: Record<string, number> | null | undefined;
    listable?: boolean | null | undefined;
    lootBoxConfig?: {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    } | null | undefined;
    maxCount?: number | null | undefined;
    maxCountPerUser?: number | null | undefined;
    optionBoxConfig?: {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
    purchasable?: boolean | null | undefined;
    recurring?: {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    } | null | undefined;
    saleConfig?: {
        currencyCode: string;
        price: number;
    } | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
    sectionExclusive?: boolean | null | undefined;
    sellable?: boolean | null | undefined;
    targetCurrencyCode?: string | null | undefined;
    targetItemId?: string | null | undefined;
    targetNamespace?: string | null | undefined;
    thumbnailUrl?: string | null | undefined;
    clazz?: string | null | undefined;
    ext?: Record<string, any> | null | undefined;
    regionData?: {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }[] | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
    boundItemIds?: string[] | null | undefined;
    displayOrder?: number | null | undefined;
    images?: {
        height: number;
        imageUrl: string;
        smallImageUrl: string;
        width: number;
        as?: string | null | undefined;
        caption?: string | null | undefined;
    }[] | null | undefined;
    purchaseCondition?: {
        conditionGroups?: {
            operator?: "and" | "or" | null | undefined;
            predicates?: {
                values?: string[] | null | undefined;
                code?: string | null | undefined;
                value?: string | null | undefined;
                name?: string | null | undefined;
                comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                anyOf?: number | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
    fresh?: boolean | null | undefined;
    bundledQty?: number | null | undefined;
}>;
interface BundledItemInfo extends z.TypeOf<typeof BundledItemInfo> {
}

declare const CampaignBatchNameInfo: z.ZodObject<{
    batchName: z.ZodString;
    batchNos: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    batchName: string;
    batchNos: number[];
}, {
    batchName: string;
    batchNos: number[];
}>;
interface CampaignBatchNameInfo extends z.TypeOf<typeof CampaignBatchNameInfo> {
}

declare const CampaignIfc: z.ZodObject<{
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string | null | undefined;
    name?: string | null | undefined;
}, {
    id?: string | null | undefined;
    name?: string | null | undefined;
}>;
interface CampaignIfc extends z.TypeOf<typeof CampaignIfc> {
}

declare const CatalogChangeInfo: z.ZodObject<{
    action: z.ZodEnum<["CREATE", "DELETE", "UPDATE"]>;
    categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    changeId: z.ZodString;
    createdAt: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
    namespace: z.ZodString;
    publishedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    selected: z.ZodBoolean;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["PUBLISHED", "UNPUBLISHED"]>;
    storeId: z.ZodString;
    title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CATEGORY", "ITEM", "SECTION", "STORE", "VIEW"]>>>;
    updatedAt: z.ZodString;
    viewId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "PUBLISHED" | "UNPUBLISHED";
    action: "DELETE" | "CREATE" | "UPDATE";
    createdAt: string;
    updatedAt: string;
    changeId: string;
    selected: boolean;
    storeId: string;
    type?: "ITEM" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
    categoryPath?: string | null | undefined;
    itemId?: string | null | undefined;
    description?: string | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    publishedAt?: string | null | undefined;
    sectionId?: string | null | undefined;
    sku?: string | null | undefined;
    title?: string | null | undefined;
    viewId?: string | null | undefined;
}, {
    namespace: string;
    status: "PUBLISHED" | "UNPUBLISHED";
    action: "DELETE" | "CREATE" | "UPDATE";
    createdAt: string;
    updatedAt: string;
    changeId: string;
    selected: boolean;
    storeId: string;
    type?: "ITEM" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
    categoryPath?: string | null | undefined;
    itemId?: string | null | undefined;
    description?: string | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    publishedAt?: string | null | undefined;
    sectionId?: string | null | undefined;
    sku?: string | null | undefined;
    title?: string | null | undefined;
    viewId?: string | null | undefined;
}>;
interface CatalogChangeInfo extends z.TypeOf<typeof CatalogChangeInfo> {
}

declare const CatalogDefinitionInfo: z.ZodObject<{
    field: z.ZodString;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
    name: z.ZodString;
    required: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    name: string;
    field: string;
    required: boolean;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
}, {
    name: string;
    field: string;
    required: boolean;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
}>;
interface CatalogDefinitionInfo extends z.TypeOf<typeof CatalogDefinitionInfo> {
}

declare const ClientRequestParameter: z.ZodObject<{
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    currencyCode?: string | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
}, {
    currencyCode?: string | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
}>;
interface ClientRequestParameter extends z.TypeOf<typeof ClientRequestParameter> {
}

declare const ClientTransaction: z.ZodObject<{
    amountConsumed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    clientTransactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    amountConsumed?: number | null | undefined;
    clientTransactionId?: string | null | undefined;
}, {
    amountConsumed?: number | null | undefined;
    clientTransactionId?: string | null | undefined;
}>;
interface ClientTransaction extends z.TypeOf<typeof ClientTransaction> {
}

declare const ConditionGroup: z.ZodObject<{
    operator: z.ZodOptional<z.ZodNullable<z.ZodEnum<["and", "or"]>>>;
    predicates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        anyOf: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        predicateType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate", "StatisticCodePredicate"]>>>;
        value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        values?: string[] | null | undefined;
        code?: string | null | undefined;
        value?: string | null | undefined;
        name?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
        predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
        anyOf?: number | null | undefined;
    }, {
        values?: string[] | null | undefined;
        code?: string | null | undefined;
        value?: string | null | undefined;
        name?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
        predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
        anyOf?: number | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    operator?: "and" | "or" | null | undefined;
    predicates?: {
        values?: string[] | null | undefined;
        code?: string | null | undefined;
        value?: string | null | undefined;
        name?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
        predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
        anyOf?: number | null | undefined;
    }[] | null | undefined;
}, {
    operator?: "and" | "or" | null | undefined;
    predicates?: {
        values?: string[] | null | undefined;
        code?: string | null | undefined;
        value?: string | null | undefined;
        name?: string | null | undefined;
        comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
        predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
        anyOf?: number | null | undefined;
    }[] | null | undefined;
}>;
interface ConditionGroup extends z.TypeOf<typeof ConditionGroup> {
}

declare const ConditionGroupValidateResult: z.ZodObject<{
    predicateValidateResults: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        matched: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        predicateName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        unmatched: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        validated: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        matched?: string[] | null | undefined;
        predicateName?: string | null | undefined;
        unmatched?: string[] | null | undefined;
        validated?: boolean | null | undefined;
    }, {
        matched?: string[] | null | undefined;
        predicateName?: string | null | undefined;
        unmatched?: string[] | null | undefined;
        validated?: boolean | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    predicateValidateResults?: {
        matched?: string[] | null | undefined;
        predicateName?: string | null | undefined;
        unmatched?: string[] | null | undefined;
        validated?: boolean | null | undefined;
    }[] | null | undefined;
}, {
    predicateValidateResults?: {
        matched?: string[] | null | undefined;
        predicateName?: string | null | undefined;
        unmatched?: string[] | null | undefined;
        validated?: boolean | null | undefined;
    }[] | null | undefined;
}>;
interface ConditionGroupValidateResult extends z.TypeOf<typeof ConditionGroupValidateResult> {
}

declare const ConsumableEntitlementRevocationConfig: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    strategy: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "REVOKE_OR_REPORT"]>>>;
}, "strip", z.ZodTypeAny, {
    enabled?: boolean | null | undefined;
    strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
}, {
    enabled?: boolean | null | undefined;
    strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
}>;
interface ConsumableEntitlementRevocationConfig extends z.TypeOf<typeof ConsumableEntitlementRevocationConfig> {
}

declare const ConsumeItem: z.ZodObject<{
    extItemDefId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
}, "strip", z.ZodTypeAny, {
    extItemDefId?: string | null | undefined;
    extItemId?: string | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
}, {
    extItemDefId?: string | null | undefined;
    extItemId?: string | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
}>;
interface ConsumeItem extends z.TypeOf<typeof ConsumeItem> {
}

declare const CreditPayload: z.ZodObject<{
    balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    count: z.ZodNumber;
    currencyCode: z.ZodString;
    expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    currencyCode: string;
    count: number;
    balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    expireAt?: string | null | undefined;
}, {
    currencyCode: string;
    count: number;
    balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    expireAt?: string | null | undefined;
}>;
interface CreditPayload extends z.TypeOf<typeof CreditPayload> {
}

declare const CreditResult: z.ZodObject<{
    creditRequest: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        amount: z.ZodNumber;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        source: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ACHIEVEMENT", "CONSUME_ENTITLEMENT", "DLC", "GIFT", "IAP", "IAP_CHARGEBACK_REVERSED", "OTHER", "PROMOTION", "PURCHASE", "REDEEM_CODE", "REFERRAL_BONUS", "REFUND", "REWARD", "SELL_BACK", "TRADE"]>>>;
    }, "strip", z.ZodTypeAny, {
        amount: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        reason?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        expireAt?: string | null | undefined;
        source?: "OTHER" | "REFUND" | "REWARD" | "DLC" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | "SELL_BACK" | "CONSUME_ENTITLEMENT" | "IAP_CHARGEBACK_REVERSED" | "TRADE" | null | undefined;
    }, {
        amount: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        reason?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        expireAt?: string | null | undefined;
        source?: "OTHER" | "REFUND" | "REWARD" | "DLC" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | "SELL_BACK" | "CONSUME_ENTITLEMENT" | "IAP_CHARGEBACK_REVERSED" | "TRADE" | null | undefined;
    }>>>;
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    currencyCode?: string | null | undefined;
    userId?: string | null | undefined;
    reason?: string | null | undefined;
    creditRequest?: {
        amount: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        reason?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        expireAt?: string | null | undefined;
        source?: "OTHER" | "REFUND" | "REWARD" | "DLC" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | "SELL_BACK" | "CONSUME_ENTITLEMENT" | "IAP_CHARGEBACK_REVERSED" | "TRADE" | null | undefined;
    } | null | undefined;
}, {
    currencyCode?: string | null | undefined;
    userId?: string | null | undefined;
    reason?: string | null | undefined;
    creditRequest?: {
        amount: number;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        reason?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        expireAt?: string | null | undefined;
        source?: "OTHER" | "REFUND" | "REWARD" | "DLC" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | "SELL_BACK" | "CONSUME_ENTITLEMENT" | "IAP_CHARGEBACK_REVERSED" | "TRADE" | null | undefined;
    } | null | undefined;
}>;
interface CreditResult extends z.TypeOf<typeof CreditResult> {
}

declare const CreditSummary: z.ZodObject<{
    amount: z.ZodNumber;
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    userId: z.ZodString;
    walletId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
    amount: number;
    walletId: string;
    currencyCode?: string | null | undefined;
}, {
    namespace: string;
    userId: string;
    amount: number;
    walletId: string;
    currencyCode?: string | null | undefined;
}>;
interface CreditSummary extends z.TypeOf<typeof CreditSummary> {
}

declare const CurrencyWallet: z.ZodObject<{
    balance: z.ZodNumber;
    currencyCode: z.ZodString;
    currencySymbol: z.ZodString;
    namespace: z.ZodString;
    totalPermanentBalance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalTimeLimitedBalance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    userId: z.ZodString;
    walletInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        balance: z.ZodNumber;
        balanceOrigin: z.ZodString;
        createdAt: z.ZodString;
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        id: z.ZodString;
        namespace: z.ZodString;
        status: z.ZodEnum<["ACTIVE", "INACTIVE"]>;
        timeLimitedBalances: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            balance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            balanceSource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }, {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }>, "many">>>;
        totalPermanentBalance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        totalTimeLimitedBalance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        updatedAt: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        id: string;
        currencyCode: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        currencySymbol: string;
        balanceOrigin: string;
        balance: number;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
        totalPermanentBalance?: number | null | undefined;
        totalTimeLimitedBalance?: number | null | undefined;
    }, {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        id: string;
        currencyCode: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        currencySymbol: string;
        balanceOrigin: string;
        balance: number;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
        totalPermanentBalance?: number | null | undefined;
        totalTimeLimitedBalance?: number | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    currencyCode: string;
    userId: string;
    currencySymbol: string;
    balance: number;
    totalPermanentBalance?: number | null | undefined;
    totalTimeLimitedBalance?: number | null | undefined;
    walletInfos?: {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        id: string;
        currencyCode: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        currencySymbol: string;
        balanceOrigin: string;
        balance: number;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
        totalPermanentBalance?: number | null | undefined;
        totalTimeLimitedBalance?: number | null | undefined;
    }[] | null | undefined;
}, {
    namespace: string;
    currencyCode: string;
    userId: string;
    currencySymbol: string;
    balance: number;
    totalPermanentBalance?: number | null | undefined;
    totalTimeLimitedBalance?: number | null | undefined;
    walletInfos?: {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        id: string;
        currencyCode: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        currencySymbol: string;
        balanceOrigin: string;
        balance: number;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
        totalPermanentBalance?: number | null | undefined;
        totalTimeLimitedBalance?: number | null | undefined;
    }[] | null | undefined;
}>;
interface CurrencyWallet extends z.TypeOf<typeof CurrencyWallet> {
}

declare const DebitPayload: z.ZodObject<{
    count: z.ZodNumber;
    currencyCode: z.ZodString;
    walletPlatform: z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]>;
}, "strip", z.ZodTypeAny, {
    currencyCode: string;
    count: number;
    walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
}, {
    currencyCode: string;
    count: number;
    walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
}>;
interface DebitPayload extends z.TypeOf<typeof DebitPayload> {
}

declare const DebitResult: z.ZodObject<{
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    request: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        allowOverdraft: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        amount: z.ZodNumber;
        balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        balanceSource: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DLC_REVOCATION", "EXPIRATION", "IAP_REVOCATION", "ORDER_REVOCATION", "OTHER", "PAYMENT", "TRADE"]>>>;
        metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        amount: number;
        reason?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        balanceSource?: "OTHER" | "EXPIRATION" | "ORDER_REVOCATION" | "PAYMENT" | "TRADE" | "DLC_REVOCATION" | "IAP_REVOCATION" | null | undefined;
        allowOverdraft?: boolean | null | undefined;
    }, {
        amount: number;
        reason?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        balanceSource?: "OTHER" | "EXPIRATION" | "ORDER_REVOCATION" | "PAYMENT" | "TRADE" | "DLC_REVOCATION" | "IAP_REVOCATION" | null | undefined;
        allowOverdraft?: boolean | null | undefined;
    }>>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    request?: {
        amount: number;
        reason?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        balanceSource?: "OTHER" | "EXPIRATION" | "ORDER_REVOCATION" | "PAYMENT" | "TRADE" | "DLC_REVOCATION" | "IAP_REVOCATION" | null | undefined;
        allowOverdraft?: boolean | null | undefined;
    } | null | undefined;
    currencyCode?: string | null | undefined;
    userId?: string | null | undefined;
    reason?: string | null | undefined;
}, {
    request?: {
        amount: number;
        reason?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        balanceSource?: "OTHER" | "EXPIRATION" | "ORDER_REVOCATION" | "PAYMENT" | "TRADE" | "DLC_REVOCATION" | "IAP_REVOCATION" | null | undefined;
        allowOverdraft?: boolean | null | undefined;
    } | null | undefined;
    currencyCode?: string | null | undefined;
    userId?: string | null | undefined;
    reason?: string | null | undefined;
}>;
interface DebitResult extends z.TypeOf<typeof DebitResult> {
}

declare const DeductionDetail: z.ZodObject<{
    deductionType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DISCOUNT_CODE", "PAYMENT_DISCOUNT_CODE"]>>>;
    discountCodeDeductionDetail: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        discountAmountCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    categoryPath: z.ZodString;
                    includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }, {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }>, "many">>>;
                currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
                items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    itemId: z.ZodString;
                    itemName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    itemId: string;
                    itemName: string;
                }, {
                    itemId: string;
                    itemName: string;
                }>, "many">>>;
                restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
                stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            }, {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }, {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }>, "many">>>;
        discountPercentageCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    categoryPath: z.ZodString;
                    includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }, {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }>, "many">>>;
                currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
                items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    itemId: z.ZodString;
                    itemName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    itemId: string;
                    itemName: string;
                }, {
                    itemId: string;
                    itemName: string;
                }>, "many">>>;
                restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
                stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            }, {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }, {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }>, "many">>>;
        totalAmountDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        totalDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        totalPercentageDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        discountAmountCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        discountPercentageCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        totalAmountDeduction?: number | null | undefined;
        totalDeduction?: number | null | undefined;
        totalPercentageDeduction?: number | null | undefined;
    }, {
        discountAmountCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        discountPercentageCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        totalAmountDeduction?: number | null | undefined;
        totalDeduction?: number | null | undefined;
        totalPercentageDeduction?: number | null | undefined;
    }>>>;
    discountProviderName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    deductionType?: "DISCOUNT_CODE" | "PAYMENT_DISCOUNT_CODE" | null | undefined;
    discountCodeDeductionDetail?: {
        discountAmountCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        discountPercentageCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        totalAmountDeduction?: number | null | undefined;
        totalDeduction?: number | null | undefined;
        totalPercentageDeduction?: number | null | undefined;
    } | null | undefined;
    discountProviderName?: string | null | undefined;
}, {
    deductionType?: "DISCOUNT_CODE" | "PAYMENT_DISCOUNT_CODE" | null | undefined;
    discountCodeDeductionDetail?: {
        discountAmountCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        discountPercentageCodes?: {
            code?: string | null | undefined;
            discountConfig?: {
                categories?: {
                    categoryPath: string;
                    includeSubCategories?: boolean | null | undefined;
                }[] | null | undefined;
                currencyCode?: string | null | undefined;
                currencyNamespace?: string | null | undefined;
                discountAmount?: number | null | undefined;
                discountPercentage?: number | null | undefined;
                discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                items?: {
                    itemId: string;
                    itemName: string;
                }[] | null | undefined;
                restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                stackable?: boolean | null | undefined;
            } | null | undefined;
            campaignId?: string | null | undefined;
            campaignName?: string | null | undefined;
            deduction?: number | null | undefined;
        }[] | null | undefined;
        totalAmountDeduction?: number | null | undefined;
        totalDeduction?: number | null | undefined;
        totalPercentageDeduction?: number | null | undefined;
    } | null | undefined;
    discountProviderName?: string | null | undefined;
}>;
interface DeductionDetail extends z.TypeOf<typeof DeductionDetail> {
}

declare const DetailedWalletTransactionInfo: z.ZodObject<{
    amount: z.ZodNumber;
    balanceSource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    currencyCode: z.ZodString;
    namespace: z.ZodString;
    operator: z.ZodString;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
    walletAction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CREDIT", "DEBIT", "PAYMENT"]>>>;
    walletId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    currencyCode: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    amount: number;
    walletId: string;
    operator: string;
    reason?: string | null | undefined;
    balanceSource?: string | null | undefined;
    walletAction?: "PAYMENT" | "CREDIT" | "DEBIT" | null | undefined;
}, {
    namespace: string;
    currencyCode: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    amount: number;
    walletId: string;
    operator: string;
    reason?: string | null | undefined;
    balanceSource?: string | null | undefined;
    walletAction?: "PAYMENT" | "CREDIT" | "DEBIT" | null | undefined;
}>;
interface DetailedWalletTransactionInfo extends z.TypeOf<typeof DetailedWalletTransactionInfo> {
}

declare const DiscountCategory: z.ZodObject<{
    categoryPath: z.ZodString;
    includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    categoryPath: string;
    includeSubCategories?: boolean | null | undefined;
}, {
    categoryPath: string;
    includeSubCategories?: boolean | null | undefined;
}>;
interface DiscountCategory extends z.TypeOf<typeof DiscountCategory> {
}

declare const DiscountCodeDeductionDetail: z.ZodObject<{
    discountAmountCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                categoryPath: z.ZodString;
                includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }, {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }>, "many">>>;
            currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
            items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                itemId: z.ZodString;
                itemName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                itemId: string;
                itemName: string;
            }, {
                itemId: string;
                itemName: string;
            }>, "many">>>;
            restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
            stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        }, {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }, {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }>, "many">>>;
    discountPercentageCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                categoryPath: z.ZodString;
                includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }, {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }>, "many">>>;
            currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
            items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                itemId: z.ZodString;
                itemName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                itemId: string;
                itemName: string;
            }, {
                itemId: string;
                itemName: string;
            }>, "many">>>;
            restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
            stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        }, {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }, {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }>, "many">>>;
    totalAmountDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalPercentageDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    discountAmountCodes?: {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }[] | null | undefined;
    discountPercentageCodes?: {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }[] | null | undefined;
    totalAmountDeduction?: number | null | undefined;
    totalDeduction?: number | null | undefined;
    totalPercentageDeduction?: number | null | undefined;
}, {
    discountAmountCodes?: {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }[] | null | undefined;
    discountPercentageCodes?: {
        code?: string | null | undefined;
        discountConfig?: {
            categories?: {
                categoryPath: string;
                includeSubCategories?: boolean | null | undefined;
            }[] | null | undefined;
            currencyCode?: string | null | undefined;
            currencyNamespace?: string | null | undefined;
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
            items?: {
                itemId: string;
                itemName: string;
            }[] | null | undefined;
            restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
            stackable?: boolean | null | undefined;
        } | null | undefined;
        campaignId?: string | null | undefined;
        campaignName?: string | null | undefined;
        deduction?: number | null | undefined;
    }[] | null | undefined;
    totalAmountDeduction?: number | null | undefined;
    totalDeduction?: number | null | undefined;
    totalPercentageDeduction?: number | null | undefined;
}>;
interface DiscountCodeDeductionDetail extends z.TypeOf<typeof DiscountCodeDeductionDetail> {
}

declare const DiscountCodeInfo: z.ZodObject<{
    campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            categoryPath: z.ZodString;
            includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            categoryPath: string;
            includeSubCategories?: boolean | null | undefined;
        }, {
            categoryPath: string;
            includeSubCategories?: boolean | null | undefined;
        }>, "many">>>;
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
        items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            itemId: z.ZodString;
            itemName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            itemId: string;
            itemName: string;
        }, {
            itemId: string;
            itemName: string;
        }>, "many">>>;
        restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
        stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        categories?: {
            categoryPath: string;
            includeSubCategories?: boolean | null | undefined;
        }[] | null | undefined;
        currencyCode?: string | null | undefined;
        currencyNamespace?: string | null | undefined;
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
        items?: {
            itemId: string;
            itemName: string;
        }[] | null | undefined;
        restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
        stackable?: boolean | null | undefined;
    }, {
        categories?: {
            categoryPath: string;
            includeSubCategories?: boolean | null | undefined;
        }[] | null | undefined;
        currencyCode?: string | null | undefined;
        currencyNamespace?: string | null | undefined;
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
        items?: {
            itemId: string;
            itemName: string;
        }[] | null | undefined;
        restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
        stackable?: boolean | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    code?: string | null | undefined;
    discountConfig?: {
        categories?: {
            categoryPath: string;
            includeSubCategories?: boolean | null | undefined;
        }[] | null | undefined;
        currencyCode?: string | null | undefined;
        currencyNamespace?: string | null | undefined;
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
        items?: {
            itemId: string;
            itemName: string;
        }[] | null | undefined;
        restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
        stackable?: boolean | null | undefined;
    } | null | undefined;
    campaignId?: string | null | undefined;
    campaignName?: string | null | undefined;
    deduction?: number | null | undefined;
}, {
    code?: string | null | undefined;
    discountConfig?: {
        categories?: {
            categoryPath: string;
            includeSubCategories?: boolean | null | undefined;
        }[] | null | undefined;
        currencyCode?: string | null | undefined;
        currencyNamespace?: string | null | undefined;
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
        items?: {
            itemId: string;
            itemName: string;
        }[] | null | undefined;
        restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
        stackable?: boolean | null | undefined;
    } | null | undefined;
    campaignId?: string | null | undefined;
    campaignName?: string | null | undefined;
    deduction?: number | null | undefined;
}>;
interface DiscountCodeInfo extends z.TypeOf<typeof DiscountCodeInfo> {
}

declare const DiscountConfig: z.ZodObject<{
    categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        categoryPath: z.ZodString;
        includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        categoryPath: string;
        includeSubCategories?: boolean | null | undefined;
    }, {
        categoryPath: string;
        includeSubCategories?: boolean | null | undefined;
    }>, "many">>>;
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
    items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        itemId: z.ZodString;
        itemName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        itemId: string;
        itemName: string;
    }, {
        itemId: string;
        itemName: string;
    }>, "many">>>;
    restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    categories?: {
        categoryPath: string;
        includeSubCategories?: boolean | null | undefined;
    }[] | null | undefined;
    currencyCode?: string | null | undefined;
    currencyNamespace?: string | null | undefined;
    discountAmount?: number | null | undefined;
    discountPercentage?: number | null | undefined;
    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
    items?: {
        itemId: string;
        itemName: string;
    }[] | null | undefined;
    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
    stackable?: boolean | null | undefined;
}, {
    categories?: {
        categoryPath: string;
        includeSubCategories?: boolean | null | undefined;
    }[] | null | undefined;
    currencyCode?: string | null | undefined;
    currencyNamespace?: string | null | undefined;
    discountAmount?: number | null | undefined;
    discountPercentage?: number | null | undefined;
    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
    items?: {
        itemId: string;
        itemName: string;
    }[] | null | undefined;
    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
    stackable?: boolean | null | undefined;
}>;
interface DiscountConfig extends z.TypeOf<typeof DiscountConfig> {
}

declare const DiscountItem: z.ZodObject<{
    itemId: z.ZodString;
    itemName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    itemId: string;
    itemName: string;
}, {
    itemId: string;
    itemName: string;
}>;
interface DiscountItem extends z.TypeOf<typeof DiscountItem> {
}

declare const DlcItem: z.ZodObject<{
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            namespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            currencyCode: string;
        }, {
            namespace: string;
            currencyCode: string;
        }>>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }>>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    id?: string | null | undefined;
    rewards?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}, {
    id?: string | null | undefined;
    rewards?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}>;
interface DlcItem extends z.TypeOf<typeof DlcItem> {
}

declare const DlcRecord: z.ZodObject<{
    entitlementOriginSyncResult: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reward: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                currencyCode: z.ZodString;
                namespace: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                namespace: string;
                currencyCode: string;
            }, {
                namespace: string;
                currencyCode: string;
            }>>>;
            item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }>>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
        }, "strip", z.ZodTypeAny, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }>>>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
            syncedCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            syncedEntitlementIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }, {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    entitlementOriginSyncStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["NOT_SYNCED", "SYNCED", "SYNCED_FAILED"]>>>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    obtainedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    revocationResult: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        creditRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            customRevocation: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            revocationStrategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            skipped: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
            walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }>, "many">>>;
        entitlementRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            customRevocation: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            revocationStrategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            skipped: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
        }, "strip", z.ZodTypeAny, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }>, "many">>>;
        id: z.ZodString;
        itemRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodType<ItemRevocation, z.ZodTypeDef, ItemRevocation>, "many">>>;
        status: z.ZodEnum<["FAIL", "SUCCESS"]>;
    }, "strip", z.ZodTypeAny, {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    }, {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    }>>>;
    revokeResults: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        revokeItemSummaries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            revokeStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }>, "many">>>;
        reward: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                currencyCode: z.ZodString;
                namespace: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                namespace: string;
                currencyCode: string;
            }, {
                namespace: string;
                currencyCode: string;
            }>>>;
            item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }>>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
        }, "strip", z.ZodTypeAny, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }>>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
    }, "strip", z.ZodTypeAny, {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }, {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    revokedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            namespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            currencyCode: string;
        }, {
            namespace: string;
            currencyCode: string;
        }>>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }>>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }>, "many">>>;
    sources: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLED", "REVOKED", "REVOKE_FAILED"]>>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    version: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    status?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | null | undefined;
    id?: string | null | undefined;
    rewards?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncResult?: {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncStatus?: "NOT_SYNCED" | "SYNCED" | "SYNCED_FAILED" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    obtainedAt?: string | null | undefined;
    revocationResult?: {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    } | null | undefined;
    revokeResults?: {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    revokedAt?: string | null | undefined;
    sources?: string[] | null | undefined;
    transactionId?: string | null | undefined;
    version?: number | null | undefined;
}, {
    status?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | null | undefined;
    id?: string | null | undefined;
    rewards?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncResult?: {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncStatus?: "NOT_SYNCED" | "SYNCED" | "SYNCED_FAILED" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    obtainedAt?: string | null | undefined;
    revocationResult?: {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    } | null | undefined;
    revokeResults?: {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    revokedAt?: string | null | undefined;
    sources?: string[] | null | undefined;
    transactionId?: string | null | undefined;
    version?: number | null | undefined;
}>;
interface DlcRecord extends z.TypeOf<typeof DlcRecord> {
}

declare const DurableEntitlementRevocationConfig: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    strategy: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "REVOKE_OR_REPORT"]>>>;
}, "strip", z.ZodTypeAny, {
    enabled?: boolean | null | undefined;
    strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
}, {
    enabled?: boolean | null | undefined;
    strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
}>;
interface DurableEntitlementRevocationConfig extends z.TypeOf<typeof DurableEntitlementRevocationConfig> {
}

declare const EntitlementGrantResult: z.ZodObject<{
    entitlementGrants: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        collectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodString;
        itemNamespace: z.ZodString;
        language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        quantity: z.ZodNumber;
        region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        source: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ACHIEVEMENT", "GIFT", "IAP", "OTHER", "PROMOTION", "PURCHASE", "REDEEM_CODE", "REFERRAL_BONUS", "REWARD"]>>>;
        startDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        itemId: string;
        quantity: number;
        itemNamespace: string;
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        storeId?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
        collectionId?: string | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        source?: "OTHER" | "REWARD" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | null | undefined;
    }, {
        itemId: string;
        quantity: number;
        itemNamespace: string;
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        storeId?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
        collectionId?: string | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        source?: "OTHER" | "REWARD" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | null | undefined;
    }>>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    userId?: string | null | undefined;
    reason?: string | null | undefined;
    entitlementGrants?: {
        itemId: string;
        quantity: number;
        itemNamespace: string;
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        storeId?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
        collectionId?: string | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        source?: "OTHER" | "REWARD" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | null | undefined;
    } | null | undefined;
}, {
    userId?: string | null | undefined;
    reason?: string | null | undefined;
    entitlementGrants?: {
        itemId: string;
        quantity: number;
        itemNamespace: string;
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        storeId?: string | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
        collectionId?: string | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        source?: "OTHER" | "REWARD" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | null | undefined;
    } | null | undefined;
}>;
interface EntitlementGrantResult extends z.TypeOf<typeof EntitlementGrantResult> {
}

declare const EntitlementHistoryInfo: z.ZodObject<{
    action: z.ZodEnum<["DECREMENT", "DISABLE", "ENABLE", "GRANT", "REVOKE", "SELL_BACK", "UPDATE"]>;
    clazz: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>>>;
    createdAt: z.ZodString;
    entitlementId: z.ZodString;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    operator: z.ZodString;
    origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    useCountChange: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
    createdAt: string;
    updatedAt: string;
    userId: string;
    entitlementId: string;
    operator: string;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    reason?: string | null | undefined;
    useCount?: number | null | undefined;
    clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
    useCountChange?: number | null | undefined;
}, {
    namespace: string;
    action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
    createdAt: string;
    updatedAt: string;
    userId: string;
    entitlementId: string;
    operator: string;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    reason?: string | null | undefined;
    useCount?: number | null | undefined;
    clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
    useCountChange?: number | null | undefined;
}>;
interface EntitlementHistoryInfo extends z.TypeOf<typeof EntitlementHistoryInfo> {
}

declare const EntitlementLootBoxReward: z.ZodObject<{
    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemId?: string | null | undefined;
    count?: number | null | undefined;
    itemSku?: string | null | undefined;
}, {
    itemId?: string | null | undefined;
    count?: number | null | undefined;
    itemSku?: string | null | undefined;
}>;
interface EntitlementLootBoxReward extends z.TypeOf<typeof EntitlementLootBoxReward> {
}

declare const EntitlementOriginSyncResult: z.ZodObject<{
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reward: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            namespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            currencyCode: string;
        }, {
            namespace: string;
            currencyCode: string;
        }>>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }>>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }>>>;
    summary: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
        syncedCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        syncedEntitlementIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        syncedCount?: number | null | undefined;
        syncedEntitlementIds?: string[] | null | undefined;
    }, {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        syncedCount?: number | null | undefined;
        syncedEntitlementIds?: string[] | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    reason?: string | null | undefined;
    reward?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    } | null | undefined;
    summary?: {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        syncedCount?: number | null | undefined;
        syncedEntitlementIds?: string[] | null | undefined;
    }[] | null | undefined;
}, {
    reason?: string | null | undefined;
    reward?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    } | null | undefined;
    summary?: {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        syncedCount?: number | null | undefined;
        syncedEntitlementIds?: string[] | null | undefined;
    }[] | null | undefined;
}>;
interface EntitlementOriginSyncResult extends z.TypeOf<typeof EntitlementOriginSyncResult> {
}

declare const EntitlementOwnership: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    owned: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    owned: boolean;
    itemId?: string | null | undefined;
}, {
    owned: boolean;
    itemId?: string | null | undefined;
}>;
interface EntitlementOwnership extends z.TypeOf<typeof EntitlementOwnership> {
}

declare const EntitlementRevocationConfig: z.ZodObject<{
    consumable: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        strategy: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "REVOKE_OR_REPORT"]>>>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    }, {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    }>>>;
    durable: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        strategy: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "REVOKE_OR_REPORT"]>>>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    }, {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    consumable?: {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    } | null | undefined;
    durable?: {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    } | null | undefined;
}, {
    consumable?: {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    } | null | undefined;
    durable?: {
        enabled?: boolean | null | undefined;
        strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | null | undefined;
    } | null | undefined;
}>;
interface EntitlementRevocationConfig extends z.TypeOf<typeof EntitlementRevocationConfig> {
}

declare const EntitlementRevokeResult: z.ZodObject<{
    entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    userId?: string | null | undefined;
    entitlementId?: string | null | undefined;
    reason?: string | null | undefined;
}, {
    userId?: string | null | undefined;
    entitlementId?: string | null | undefined;
    reason?: string | null | undefined;
}>;
interface EntitlementRevokeResult extends z.TypeOf<typeof EntitlementRevokeResult> {
}

declare const EntitlementSummary: z.ZodObject<{
    clazz: z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>;
    collectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    noOrigin: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    stackedUseCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    startDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    type: "CONSUMABLE" | "DURABLE";
    id: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
    endDate?: string | null | undefined;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    name?: string | null | undefined;
    itemId?: string | null | undefined;
    stackable?: boolean | null | undefined;
    storeId?: string | null | undefined;
    collectionId?: string | null | undefined;
    noOrigin?: boolean | null | undefined;
    startDate?: string | null | undefined;
    grantedCode?: string | null | undefined;
    stackedUseCount?: number | null | undefined;
}, {
    namespace: string;
    type: "CONSUMABLE" | "DURABLE";
    id: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
    endDate?: string | null | undefined;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    name?: string | null | undefined;
    itemId?: string | null | undefined;
    stackable?: boolean | null | undefined;
    storeId?: string | null | undefined;
    collectionId?: string | null | undefined;
    noOrigin?: boolean | null | undefined;
    startDate?: string | null | undefined;
    grantedCode?: string | null | undefined;
    stackedUseCount?: number | null | undefined;
}>;
interface EntitlementSummary extends z.TypeOf<typeof EntitlementSummary> {
}

declare const EpicGamesReconcileResult: z.ZodObject<{
    epicGamesItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FULFILLED", "VERIFIED"]>>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    transactionId?: string | null | undefined;
    epicGamesItemId?: string | null | undefined;
}, {
    status?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    transactionId?: string | null | undefined;
    epicGamesItemId?: string | null | undefined;
}>;
interface EpicGamesReconcileResult extends z.TypeOf<typeof EpicGamesReconcileResult> {
}

declare const ErrorEntity: z.ZodObject<{
    devStackTrace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    requiredPermission: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        resource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    }, {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
    messageVariables?: Record<string, string> | null | undefined;
    devStackTrace?: string | null | undefined;
    requiredPermission?: {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    } | null | undefined;
}, {
    errorCode: number;
    errorMessage: string;
    messageVariables?: Record<string, string> | null | undefined;
    devStackTrace?: string | null | undefined;
    requiredPermission?: {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    } | null | undefined;
}>;
interface ErrorEntity extends z.TypeOf<typeof ErrorEntity> {
}

declare const EventAdditionalData: z.ZodObject<{
    entitlement: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        clientTransaction: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            amountConsumed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            clientTransactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            amountConsumed?: number | null | undefined;
            clientTransactionId?: string | null | undefined;
        }, {
            amountConsumed?: number | null | undefined;
            clientTransactionId?: string | null | undefined;
        }>, "many">>>;
        entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        usageCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        clientTransaction?: {
            amountConsumed?: number | null | undefined;
            clientTransactionId?: string | null | undefined;
        }[] | null | undefined;
        entitlementId?: string | null | undefined;
        usageCount?: number | null | undefined;
    }, {
        clientTransaction?: {
            amountConsumed?: number | null | undefined;
            clientTransactionId?: string | null | undefined;
        }[] | null | undefined;
        entitlementId?: string | null | undefined;
        usageCount?: number | null | undefined;
    }>, "many">>>;
    purpose: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    entitlement?: {
        clientTransaction?: {
            amountConsumed?: number | null | undefined;
            clientTransactionId?: string | null | undefined;
        }[] | null | undefined;
        entitlementId?: string | null | undefined;
        usageCount?: number | null | undefined;
    }[] | null | undefined;
    purpose?: string | null | undefined;
}, {
    entitlement?: {
        clientTransaction?: {
            amountConsumed?: number | null | undefined;
            clientTransactionId?: string | null | undefined;
        }[] | null | undefined;
        entitlementId?: string | null | undefined;
        usageCount?: number | null | undefined;
    }[] | null | undefined;
    purpose?: string | null | undefined;
}>;
interface EventAdditionalData extends z.TypeOf<typeof EventAdditionalData> {
}

declare const ExtensionFulfillmentSummary: z.ZodObject<{
    grantedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemClazz: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    quantity: z.ZodNumber;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    quantity: number;
    namespace?: string | null | undefined;
    itemId?: string | null | undefined;
    userId?: string | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    grantedAt?: string | null | undefined;
    itemClazz?: string | null | undefined;
    itemExt?: Record<string, any> | null | undefined;
}, {
    quantity: number;
    namespace?: string | null | undefined;
    itemId?: string | null | undefined;
    userId?: string | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    grantedAt?: string | null | undefined;
    itemClazz?: string | null | undefined;
    itemExt?: Record<string, any> | null | undefined;
}>;
interface ExtensionFulfillmentSummary extends z.TypeOf<typeof ExtensionFulfillmentSummary> {
}

declare const FieldValidationError: z.ZodObject<{
    errorCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    errorCode?: string | null | undefined;
    errorField?: string | null | undefined;
    errorMessage?: string | null | undefined;
    errorValue?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
}, {
    errorCode?: string | null | undefined;
    errorField?: string | null | undefined;
    errorMessage?: string | null | undefined;
    errorValue?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
}>;
interface FieldValidationError extends z.TypeOf<typeof FieldValidationError> {
}

declare const FixedPeriodRotationConfig: z.ZodObject<{
    backfillType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "NONE"]>>>;
    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    itemCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rule: z.ZodOptional<z.ZodNullable<z.ZodEnum<["SEQUENCE"]>>>;
}, "strip", z.ZodTypeAny, {
    duration?: number | null | undefined;
    backfillType?: "NONE" | "CUSTOM" | null | undefined;
    itemCount?: number | null | undefined;
    rule?: "SEQUENCE" | null | undefined;
}, {
    duration?: number | null | undefined;
    backfillType?: "NONE" | "CUSTOM" | null | undefined;
    itemCount?: number | null | undefined;
    rule?: "SEQUENCE" | null | undefined;
}>;
interface FixedPeriodRotationConfig extends z.TypeOf<typeof FixedPeriodRotationConfig> {
}

declare const FulfillBundledItemResult: z.ZodObject<{
    error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    error?: string | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    itemSku?: string | null | undefined;
}, {
    error?: string | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    itemSku?: string | null | undefined;
}>;
interface FulfillBundledItemResult extends z.TypeOf<typeof FulfillBundledItemResult> {
}

declare const FulFillItemPayload: z.ZodObject<{
    count: z.ZodNumber;
    entitlementCollectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    itemIdentity: z.ZodString;
    itemIdentityType: z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>;
}, "strip", z.ZodTypeAny, {
    count: number;
    itemIdentity: string;
    itemIdentityType: "ITEM_ID" | "ITEM_SKU";
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    entitlementCollectionId?: string | null | undefined;
}, {
    count: number;
    itemIdentity: string;
    itemIdentityType: "ITEM_ID" | "ITEM_SKU";
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    entitlementCollectionId?: string | null | undefined;
}>;
interface FulFillItemPayload extends z.TypeOf<typeof FulFillItemPayload> {
}

declare const FulfillItemResult: z.ZodObject<{
    error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        itemSku?: string | null | undefined;
    }, {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        itemSku?: string | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    error?: string | null | undefined;
    itemId?: string | null | undefined;
    items?: {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    itemSku?: string | null | undefined;
}, {
    error?: string | null | undefined;
    itemId?: string | null | undefined;
    items?: {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    itemSku?: string | null | undefined;
}>;
interface FulfillItemResult extends z.TypeOf<typeof FulfillItemResult> {
}

declare const FulfillmentActionHistory: z.ZodObject<{
    action: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLMENT", "REVOKE_FULFILLMENT"]>>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    fulfillmentHistoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    revocationHistoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    state: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLED", "FULFILL_FAILED", "REVOKED", "REVOKE_FAILED"]>>>;
}, "strip", z.ZodTypeAny, {
    action?: "FULFILLMENT" | "REVOKE_FULFILLMENT" | null | undefined;
    createdAt?: string | null | undefined;
    fulfillmentHistoryId?: string | null | undefined;
    revocationHistoryId?: string | null | undefined;
    state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
}, {
    action?: "FULFILLMENT" | "REVOKE_FULFILLMENT" | null | undefined;
    createdAt?: string | null | undefined;
    fulfillmentHistoryId?: string | null | undefined;
    revocationHistoryId?: string | null | undefined;
    state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
}>;
interface FulfillmentActionHistory extends z.TypeOf<typeof FulfillmentActionHistory> {
}

declare const FulfillmentError: z.ZodObject<{
    code: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    httpStatus: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code?: number | null | undefined;
    message?: string | null | undefined;
    httpStatus?: number | null | undefined;
}, {
    code?: number | null | undefined;
    message?: string | null | undefined;
    httpStatus?: number | null | undefined;
}>;
interface FulfillmentError extends z.TypeOf<typeof FulfillmentError> {
}

declare const FulfillmentHistoryInfo: z.ZodObject<{
    code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    creditSummaries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        amount: z.ZodNumber;
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodString;
        userId: z.ZodString;
        walletId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }, {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }>, "many">>>;
    entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    entitlementSummaries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        clazz: z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>;
        collectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodString;
        endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodString;
        noOrigin: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        stackedUseCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        startDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
        updatedAt: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }, {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }>, "many">>>;
    extensionFulfillmentSummaries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        grantedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemClazz: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
        metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        quantity: z.ZodNumber;
        userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        quantity: number;
        namespace?: string | null | undefined;
        itemId?: string | null | undefined;
        userId?: string | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        grantedAt?: string | null | undefined;
        itemClazz?: string | null | undefined;
        itemExt?: Record<string, any> | null | undefined;
    }, {
        quantity: number;
        namespace?: string | null | undefined;
        itemId?: string | null | undefined;
        userId?: string | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        grantedAt?: string | null | undefined;
        itemClazz?: string | null | undefined;
        itemExt?: Record<string, any> | null | undefined;
    }>, "many">>>;
    fulfillItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        extraSubscriptionDays: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
        quantity: z.ZodNumber;
        storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }, {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }>, "many">>>;
    fulfillmentError: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        code: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        httpStatus: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    }, {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    }>>>;
    grantedItemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    id: z.ZodString;
    namespace: z.ZodString;
    orderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["FAIL", "SUCCESS"]>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "FAIL" | "SUCCESS";
    id: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    code?: string | null | undefined;
    orderNo?: string | null | undefined;
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    creditSummaries?: {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }[] | null | undefined;
    entitlementSummaries?: {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }[] | null | undefined;
    extensionFulfillmentSummaries?: {
        quantity: number;
        namespace?: string | null | undefined;
        itemId?: string | null | undefined;
        userId?: string | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        grantedAt?: string | null | undefined;
        itemClazz?: string | null | undefined;
        itemExt?: Record<string, any> | null | undefined;
    }[] | null | undefined;
    fulfillItems?: {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    fulfillmentError?: {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    } | null | undefined;
    grantedItemIds?: string[] | null | undefined;
}, {
    namespace: string;
    status: "FAIL" | "SUCCESS";
    id: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    code?: string | null | undefined;
    orderNo?: string | null | undefined;
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    creditSummaries?: {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }[] | null | undefined;
    entitlementSummaries?: {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }[] | null | undefined;
    extensionFulfillmentSummaries?: {
        quantity: number;
        namespace?: string | null | undefined;
        itemId?: string | null | undefined;
        userId?: string | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        metadata?: Record<string, any> | null | undefined;
        grantedAt?: string | null | undefined;
        itemClazz?: string | null | undefined;
        itemExt?: Record<string, any> | null | undefined;
    }[] | null | undefined;
    fulfillItems?: {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    fulfillmentError?: {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    } | null | undefined;
    grantedItemIds?: string[] | null | undefined;
}>;
interface FulfillmentHistoryInfo extends z.TypeOf<typeof FulfillmentHistoryInfo> {
}

declare const FulfillmentInfo: z.ZodObject<{
    actions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        action: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLMENT", "REVOKE_FULFILLMENT"]>>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fulfillmentHistoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        revocationHistoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        state: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLED", "FULFILL_FAILED", "REVOKED", "REVOKE_FAILED"]>>>;
    }, "strip", z.ZodTypeAny, {
        action?: "FULFILLMENT" | "REVOKE_FULFILLMENT" | null | undefined;
        createdAt?: string | null | undefined;
        fulfillmentHistoryId?: string | null | undefined;
        revocationHistoryId?: string | null | undefined;
        state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
    }, {
        action?: "FULFILLMENT" | "REVOKE_FULFILLMENT" | null | undefined;
        createdAt?: string | null | undefined;
        fulfillmentHistoryId?: string | null | undefined;
        revocationHistoryId?: string | null | undefined;
        state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
    }>, "many">>>;
    createdAt: z.ZodString;
    id: z.ZodString;
    items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        extraSubscriptionDays: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
        quantity: z.ZodNumber;
        storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }, {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }>, "many">>>;
    namespace: z.ZodString;
    state: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLED", "FULFILL_FAILED", "REVOKED", "REVOKE_FAILED"]>>>;
    stateInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        failedList: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }, {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }>, "many">>>;
        successList: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }, {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        successList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        failedList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
    }, {
        successList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        failedList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
    }>>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    id: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    items?: {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    transactionId?: string | null | undefined;
    state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
    actions?: {
        action?: "FULFILLMENT" | "REVOKE_FULFILLMENT" | null | undefined;
        createdAt?: string | null | undefined;
        fulfillmentHistoryId?: string | null | undefined;
        revocationHistoryId?: string | null | undefined;
        state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
    }[] | null | undefined;
    stateInfo?: {
        successList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        failedList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
}, {
    namespace: string;
    id: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    items?: {
        quantity: number;
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        extraSubscriptionDays?: number | null | undefined;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
        storeId?: string | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    transactionId?: string | null | undefined;
    state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
    actions?: {
        action?: "FULFILLMENT" | "REVOKE_FULFILLMENT" | null | undefined;
        createdAt?: string | null | undefined;
        fulfillmentHistoryId?: string | null | undefined;
        revocationHistoryId?: string | null | undefined;
        state?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | "FULFILL_FAILED" | null | undefined;
    }[] | null | undefined;
    stateInfo?: {
        successList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        failedList?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            items?: {
                error?: string | null | undefined;
                itemId?: string | null | undefined;
                quantity?: number | null | undefined;
                itemSku?: string | null | undefined;
            }[] | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
}>;
interface FulfillmentInfo extends z.TypeOf<typeof FulfillmentInfo> {
}

declare const FulfillmentItem: z.ZodObject<{
    extraSubscriptionDays: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
    quantity: z.ZodNumber;
    storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    quantity: number;
    itemId?: string | null | undefined;
    itemName?: string | null | undefined;
    extraSubscriptionDays?: number | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    storeId?: string | null | undefined;
    itemSku?: string | null | undefined;
}, {
    quantity: number;
    itemId?: string | null | undefined;
    itemName?: string | null | undefined;
    extraSubscriptionDays?: number | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    storeId?: string | null | undefined;
    itemSku?: string | null | undefined;
}>;
interface FulfillmentItem extends z.TypeOf<typeof FulfillmentItem> {
}

declare const FulfillmentStateInfo: z.ZodObject<{
    failedList: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }, {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }>, "many">>>;
    successList: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }, {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    successList?: {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    failedList?: {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
}, {
    successList?: {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
    failedList?: {
        error?: string | null | undefined;
        itemId?: string | null | undefined;
        items?: {
            error?: string | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            itemSku?: string | null | undefined;
        }[] | null | undefined;
        itemSku?: string | null | undefined;
    }[] | null | undefined;
}>;
interface FulfillmentStateInfo extends z.TypeOf<typeof FulfillmentStateInfo> {
}

declare const FulfillmentV2RequestItem: z.ZodObject<{
    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    entitlementCollectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    orderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    quantity: z.ZodNumber;
    region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    source: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ACHIEVEMENT", "CONSUME_ENTITLEMENT", "DLC", "EXPIRATION", "GIFT", "IAP", "IAP_CHARGEBACK_REVERSED", "ORDER_REVOCATION", "OTHER", "PAYMENT", "PROMOTION", "PURCHASE", "REDEEM_CODE", "REFERRAL_BONUS", "REWARD", "SELL_BACK"]>>>;
    startDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    quantity: number;
    endDate?: string | null | undefined;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemId?: string | null | undefined;
    orderNo?: string | null | undefined;
    storeId?: string | null | undefined;
    itemSku?: string | null | undefined;
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    duration?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    startDate?: string | null | undefined;
    source?: "OTHER" | "REWARD" | "DLC" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | "SELL_BACK" | "CONSUME_ENTITLEMENT" | "EXPIRATION" | "IAP_CHARGEBACK_REVERSED" | "ORDER_REVOCATION" | "PAYMENT" | null | undefined;
    entitlementCollectionId?: string | null | undefined;
}, {
    quantity: number;
    endDate?: string | null | undefined;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemId?: string | null | undefined;
    orderNo?: string | null | undefined;
    storeId?: string | null | undefined;
    itemSku?: string | null | undefined;
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    duration?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    startDate?: string | null | undefined;
    source?: "OTHER" | "REWARD" | "DLC" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | "SELL_BACK" | "CONSUME_ENTITLEMENT" | "EXPIRATION" | "IAP_CHARGEBACK_REVERSED" | "ORDER_REVOCATION" | "PAYMENT" | null | undefined;
    entitlementCollectionId?: string | null | undefined;
}>;
interface FulfillmentV2RequestItem extends z.TypeOf<typeof FulfillmentV2RequestItem> {
}

declare const IapConsumeHistoryInfo: z.ZodObject<{
    clientRequestParameter: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode?: string | null | undefined;
        price?: number | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
    }, {
        currencyCode?: string | null | undefined;
        price?: number | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
    }>>>;
    consumeItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        extItemDefId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        extItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
    }, "strip", z.ZodTypeAny, {
        extItemDefId?: string | null | undefined;
        extItemId?: string | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }, {
        extItemDefId?: string | null | undefined;
        extItemId?: string | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }>, "many">>>;
    iapType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APPLE", "EPICGAMES", "GOOGLE", "OCULUS", "PLAYSTATION", "STADIA", "STEAM", "TWITCH", "XBOX"]>>>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    requestBody: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    requestHistories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        requestTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        responseBody: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        responseTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "PENDING", "SUCCESS"]>>>;
        statusCode: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
        requestTime?: string | null | undefined;
        responseBody?: Record<string, any> | null | undefined;
        responseTime?: string | null | undefined;
        statusCode?: number | null | undefined;
    }, {
        status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
        requestTime?: string | null | undefined;
        responseBody?: Record<string, any> | null | undefined;
        responseTime?: string | null | undefined;
        statusCode?: number | null | undefined;
    }>, "many">>>;
    requestUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "PENDING", "SUCCESS"]>>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
    id?: string | null | undefined;
    userId?: string | null | undefined;
    clientRequestParameter?: {
        currencyCode?: string | null | undefined;
        price?: number | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
    } | null | undefined;
    consumeItems?: {
        extItemDefId?: string | null | undefined;
        extItemId?: string | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }[] | null | undefined;
    iapType?: "EPICGAMES" | "OCULUS" | "STEAM" | "XBOX" | "APPLE" | "GOOGLE" | "PLAYSTATION" | "STADIA" | "TWITCH" | null | undefined;
    requestBody?: Record<string, any> | null | undefined;
    requestHistories?: {
        status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
        requestTime?: string | null | undefined;
        responseBody?: Record<string, any> | null | undefined;
        responseTime?: string | null | undefined;
        statusCode?: number | null | undefined;
    }[] | null | undefined;
    requestUrl?: string | null | undefined;
}, {
    namespace?: string | null | undefined;
    status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
    id?: string | null | undefined;
    userId?: string | null | undefined;
    clientRequestParameter?: {
        currencyCode?: string | null | undefined;
        price?: number | null | undefined;
        language?: string | null | undefined;
        region?: string | null | undefined;
    } | null | undefined;
    consumeItems?: {
        extItemDefId?: string | null | undefined;
        extItemId?: string | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }[] | null | undefined;
    iapType?: "EPICGAMES" | "OCULUS" | "STEAM" | "XBOX" | "APPLE" | "GOOGLE" | "PLAYSTATION" | "STADIA" | "TWITCH" | null | undefined;
    requestBody?: Record<string, any> | null | undefined;
    requestHistories?: {
        status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
        requestTime?: string | null | undefined;
        responseBody?: Record<string, any> | null | undefined;
        responseTime?: string | null | undefined;
        statusCode?: number | null | undefined;
    }[] | null | undefined;
    requestUrl?: string | null | undefined;
}>;
interface IapConsumeHistoryInfo extends z.TypeOf<typeof IapConsumeHistoryInfo> {
}

declare const IapItemEntry: z.ZodObject<{
    itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
    platformProductIdMap: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    platformProductIdMap?: Record<string, string> | null | undefined;
}, {
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    platformProductIdMap?: Record<string, string> | null | undefined;
}>;
interface IapItemEntry extends z.TypeOf<typeof IapItemEntry> {
}

declare const IapItemFlatEntry: z.ZodObject<{
    itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
    platform: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APPLE", "EPICGAMES", "GOOGLE", "OCULUS", "PLAYSTATION", "STADIA", "STEAM", "TWITCH", "XBOX"]>>>;
    platformProductId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    platform?: "EPICGAMES" | "OCULUS" | "STEAM" | "XBOX" | "APPLE" | "GOOGLE" | "PLAYSTATION" | "STADIA" | "TWITCH" | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    platformProductId?: string | null | undefined;
}, {
    platform?: "EPICGAMES" | "OCULUS" | "STEAM" | "XBOX" | "APPLE" | "GOOGLE" | "PLAYSTATION" | "STADIA" | "TWITCH" | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    platformProductId?: string | null | undefined;
}>;
interface IapItemFlatEntry extends z.TypeOf<typeof IapItemFlatEntry> {
}

declare const IapOrderInfo: z.ZodObject<{
    createdAt: z.ZodString;
    credits: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        amount: z.ZodNumber;
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodString;
        userId: z.ZodString;
        walletId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }, {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }>, "many">>>;
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    entitlements: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        clazz: z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>;
        collectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodString;
        endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodString;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodString;
        noOrigin: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        stackedUseCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        startDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
        updatedAt: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }, {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }>, "many">>>;
    fulfilledTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    iapOrderNo: z.ZodString;
    language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    productId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    receiptData: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    retryCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sandbox: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    status: z.ZodEnum<["FAILED", "FULFILLED", "VERIFIED"]>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodEnum<["APPLE", "EPICGAMES", "GOOGLE", "OCULUS", "PLAYSTATION", "STADIA", "STEAM", "TWITCH", "XBOX"]>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    type: "EPICGAMES" | "OCULUS" | "STEAM" | "XBOX" | "APPLE" | "GOOGLE" | "PLAYSTATION" | "STADIA" | "TWITCH";
    status: "FULFILLED" | "FAILED" | "VERIFIED";
    createdAt: string;
    updatedAt: string;
    userId: string;
    iapOrderNo: string;
    currencyCode?: string | null | undefined;
    quantity?: number | null | undefined;
    statusReason?: string | null | undefined;
    transactionId?: string | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    credits?: {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }[] | null | undefined;
    entitlements?: {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }[] | null | undefined;
    fulfilledTime?: string | null | undefined;
    productId?: string | null | undefined;
    receiptData?: string | null | undefined;
    retryCount?: number | null | undefined;
    sandbox?: boolean | null | undefined;
}, {
    namespace: string;
    type: "EPICGAMES" | "OCULUS" | "STEAM" | "XBOX" | "APPLE" | "GOOGLE" | "PLAYSTATION" | "STADIA" | "TWITCH";
    status: "FULFILLED" | "FAILED" | "VERIFIED";
    createdAt: string;
    updatedAt: string;
    userId: string;
    iapOrderNo: string;
    currencyCode?: string | null | undefined;
    quantity?: number | null | undefined;
    statusReason?: string | null | undefined;
    transactionId?: string | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    credits?: {
        namespace: string;
        userId: string;
        amount: number;
        walletId: string;
        currencyCode?: string | null | undefined;
    }[] | null | undefined;
    entitlements?: {
        namespace: string;
        type: "CONSUMABLE" | "DURABLE";
        id: string;
        createdAt: string;
        updatedAt: string;
        userId: string;
        clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
        endDate?: string | null | undefined;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        stackable?: boolean | null | undefined;
        storeId?: string | null | undefined;
        collectionId?: string | null | undefined;
        noOrigin?: boolean | null | undefined;
        startDate?: string | null | undefined;
        grantedCode?: string | null | undefined;
        stackedUseCount?: number | null | undefined;
    }[] | null | undefined;
    fulfilledTime?: string | null | undefined;
    productId?: string | null | undefined;
    receiptData?: string | null | undefined;
    retryCount?: number | null | undefined;
    sandbox?: boolean | null | undefined;
}>;
interface IapOrderInfo extends z.TypeOf<typeof IapOrderInfo> {
}

declare const Image: z.ZodObject<{
    as: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    caption: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    height: z.ZodNumber;
    imageUrl: z.ZodString;
    smallImageUrl: z.ZodString;
    width: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    height: number;
    imageUrl: string;
    smallImageUrl: string;
    width: number;
    as?: string | null | undefined;
    caption?: string | null | undefined;
}, {
    height: number;
    imageUrl: string;
    smallImageUrl: string;
    width: number;
    as?: string | null | undefined;
    caption?: string | null | undefined;
}>;
interface Image extends z.TypeOf<typeof Image> {
}

declare const ImportErrorDetails: z.ZodObject<{
    errorCode: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    errorCode?: number | null | undefined;
    errorField?: string | null | undefined;
    errorMessage?: string | null | undefined;
    errorValue?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
}, {
    errorCode?: number | null | undefined;
    errorField?: string | null | undefined;
    errorMessage?: string | null | undefined;
    errorValue?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
}>;
interface ImportErrorDetails extends z.TypeOf<typeof ImportErrorDetails> {
}

declare const ImportStoreAppInfo: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemId?: string | null | undefined;
}, {
    itemId?: string | null | undefined;
}>;
interface ImportStoreAppInfo extends z.TypeOf<typeof ImportStoreAppInfo> {
}

declare const ImportStoreCategoryInfo: z.ZodObject<{
    categoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    categoryPath?: string | null | undefined;
    categoryId?: string | null | undefined;
}, {
    namespace?: string | null | undefined;
    categoryPath?: string | null | undefined;
    categoryId?: string | null | undefined;
}>;
interface ImportStoreCategoryInfo extends z.TypeOf<typeof ImportStoreCategoryInfo> {
}

declare const ImportStoreError: z.ZodObject<{
    app: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        itemId?: string | null | undefined;
    }, {
        itemId?: string | null | undefined;
    }>>>;
    category: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        categoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace?: string | null | undefined;
        categoryPath?: string | null | undefined;
        categoryId?: string | null | undefined;
    }, {
        namespace?: string | null | undefined;
        categoryPath?: string | null | undefined;
        categoryId?: string | null | undefined;
    }>>>;
    errors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        errorCode: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        errorCode?: number | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }, {
        errorCode?: number | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }>, "many">>>;
    item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
        localizations: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            title: string;
            description?: string | null | undefined;
            localExt?: Record<string, any> | null | undefined;
            longDescription?: string | null | undefined;
        }, {
            title: string;
            description?: string | null | undefined;
            localExt?: Record<string, any> | null | undefined;
            longDescription?: string | null | undefined;
        }>>>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        name?: string | null | undefined;
        categoryPath?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        localizations?: Record<string, {
            title: string;
            description?: string | null | undefined;
            localExt?: Record<string, any> | null | undefined;
            longDescription?: string | null | undefined;
        }> | null | undefined;
    }, {
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        name?: string | null | undefined;
        categoryPath?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        localizations?: Record<string, {
            title: string;
            description?: string | null | undefined;
            localExt?: Record<string, any> | null | undefined;
            longDescription?: string | null | undefined;
        }> | null | undefined;
    }>>>;
    section: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | null | undefined;
        sectionId?: string | null | undefined;
    }, {
        name?: string | null | undefined;
        sectionId?: string | null | undefined;
    }>>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "CATEGORY", "ITEM", "SECTION", "STORE", "VIEW"]>>>;
    view: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        viewId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | null | undefined;
        viewId?: string | null | undefined;
    }, {
        name?: string | null | undefined;
        viewId?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    type?: "ITEM" | "APP" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
    item?: {
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        name?: string | null | undefined;
        categoryPath?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        localizations?: Record<string, {
            title: string;
            description?: string | null | undefined;
            localExt?: Record<string, any> | null | undefined;
            longDescription?: string | null | undefined;
        }> | null | undefined;
    } | null | undefined;
    app?: {
        itemId?: string | null | undefined;
    } | null | undefined;
    category?: {
        namespace?: string | null | undefined;
        categoryPath?: string | null | undefined;
        categoryId?: string | null | undefined;
    } | null | undefined;
    errors?: {
        errorCode?: number | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }[] | null | undefined;
    section?: {
        name?: string | null | undefined;
        sectionId?: string | null | undefined;
    } | null | undefined;
    view?: {
        name?: string | null | undefined;
        viewId?: string | null | undefined;
    } | null | undefined;
}, {
    type?: "ITEM" | "APP" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
    item?: {
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        name?: string | null | undefined;
        categoryPath?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        localizations?: Record<string, {
            title: string;
            description?: string | null | undefined;
            localExt?: Record<string, any> | null | undefined;
            longDescription?: string | null | undefined;
        }> | null | undefined;
    } | null | undefined;
    app?: {
        itemId?: string | null | undefined;
    } | null | undefined;
    category?: {
        namespace?: string | null | undefined;
        categoryPath?: string | null | undefined;
        categoryId?: string | null | undefined;
    } | null | undefined;
    errors?: {
        errorCode?: number | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }[] | null | undefined;
    section?: {
        name?: string | null | undefined;
        sectionId?: string | null | undefined;
    } | null | undefined;
    view?: {
        name?: string | null | undefined;
        viewId?: string | null | undefined;
    } | null | undefined;
}>;
interface ImportStoreError extends z.TypeOf<typeof ImportStoreError> {
}

declare const ImportStoreHistoryInfo: z.ZodObject<{
    createdAt: z.ZodString;
    errors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        app: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
        }, {
            itemId?: string | null | undefined;
        }>>>;
        category: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            categoryId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            namespace?: string | null | undefined;
            categoryPath?: string | null | undefined;
            categoryId?: string | null | undefined;
        }, {
            namespace?: string | null | undefined;
            categoryPath?: string | null | undefined;
            categoryId?: string | null | undefined;
        }>>>;
        errors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            errorCode: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
        }, "strip", z.ZodTypeAny, {
            errorCode?: number | null | undefined;
            errorField?: string | null | undefined;
            errorMessage?: string | null | undefined;
            errorValue?: string | null | undefined;
            messageVariables?: Record<string, string> | null | undefined;
        }, {
            errorCode?: number | null | undefined;
            errorField?: string | null | undefined;
            errorMessage?: string | null | undefined;
            errorValue?: string | null | undefined;
            messageVariables?: Record<string, string> | null | undefined;
        }>, "many">>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
            localizations: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }>>>>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
            name?: string | null | undefined;
            categoryPath?: string | null | undefined;
            itemId?: string | null | undefined;
            sku?: string | null | undefined;
            localizations?: Record<string, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }> | null | undefined;
        }, {
            itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
            name?: string | null | undefined;
            categoryPath?: string | null | undefined;
            itemId?: string | null | undefined;
            sku?: string | null | undefined;
            localizations?: Record<string, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }> | null | undefined;
        }>>>;
        section: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            sectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | null | undefined;
            sectionId?: string | null | undefined;
        }, {
            name?: string | null | undefined;
            sectionId?: string | null | undefined;
        }>>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "CATEGORY", "ITEM", "SECTION", "STORE", "VIEW"]>>>;
        view: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            viewId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | null | undefined;
            viewId?: string | null | undefined;
        }, {
            name?: string | null | undefined;
            viewId?: string | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "APP" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
        item?: {
            itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
            name?: string | null | undefined;
            categoryPath?: string | null | undefined;
            itemId?: string | null | undefined;
            sku?: string | null | undefined;
            localizations?: Record<string, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }> | null | undefined;
        } | null | undefined;
        app?: {
            itemId?: string | null | undefined;
        } | null | undefined;
        category?: {
            namespace?: string | null | undefined;
            categoryPath?: string | null | undefined;
            categoryId?: string | null | undefined;
        } | null | undefined;
        errors?: {
            errorCode?: number | null | undefined;
            errorField?: string | null | undefined;
            errorMessage?: string | null | undefined;
            errorValue?: string | null | undefined;
            messageVariables?: Record<string, string> | null | undefined;
        }[] | null | undefined;
        section?: {
            name?: string | null | undefined;
            sectionId?: string | null | undefined;
        } | null | undefined;
        view?: {
            name?: string | null | undefined;
            viewId?: string | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "APP" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
        item?: {
            itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
            name?: string | null | undefined;
            categoryPath?: string | null | undefined;
            itemId?: string | null | undefined;
            sku?: string | null | undefined;
            localizations?: Record<string, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }> | null | undefined;
        } | null | undefined;
        app?: {
            itemId?: string | null | undefined;
        } | null | undefined;
        category?: {
            namespace?: string | null | undefined;
            categoryPath?: string | null | undefined;
            categoryId?: string | null | undefined;
        } | null | undefined;
        errors?: {
            errorCode?: number | null | undefined;
            errorField?: string | null | undefined;
            errorMessage?: string | null | undefined;
            errorValue?: string | null | undefined;
            messageVariables?: Record<string, string> | null | undefined;
        }[] | null | undefined;
        section?: {
            name?: string | null | undefined;
            sectionId?: string | null | undefined;
        } | null | undefined;
        view?: {
            name?: string | null | undefined;
            viewId?: string | null | undefined;
        } | null | undefined;
    }>, "many">>>;
    id: z.ZodString;
    importFileFormat: z.ZodEnum<["CSV", "JSON"]>;
    initiatedBy: z.ZodString;
    namespace: z.ZodString;
    note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    storeId: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    id: string;
    createdAt: string;
    storeId: string;
    success: boolean;
    importFileFormat: "CSV" | "JSON";
    initiatedBy: string;
    errors?: {
        type?: "ITEM" | "APP" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
        item?: {
            itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
            name?: string | null | undefined;
            categoryPath?: string | null | undefined;
            itemId?: string | null | undefined;
            sku?: string | null | undefined;
            localizations?: Record<string, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }> | null | undefined;
        } | null | undefined;
        app?: {
            itemId?: string | null | undefined;
        } | null | undefined;
        category?: {
            namespace?: string | null | undefined;
            categoryPath?: string | null | undefined;
            categoryId?: string | null | undefined;
        } | null | undefined;
        errors?: {
            errorCode?: number | null | undefined;
            errorField?: string | null | undefined;
            errorMessage?: string | null | undefined;
            errorValue?: string | null | undefined;
            messageVariables?: Record<string, string> | null | undefined;
        }[] | null | undefined;
        section?: {
            name?: string | null | undefined;
            sectionId?: string | null | undefined;
        } | null | undefined;
        view?: {
            name?: string | null | undefined;
            viewId?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
    note?: string | null | undefined;
}, {
    namespace: string;
    id: string;
    createdAt: string;
    storeId: string;
    success: boolean;
    importFileFormat: "CSV" | "JSON";
    initiatedBy: string;
    errors?: {
        type?: "ITEM" | "APP" | "CATEGORY" | "SECTION" | "STORE" | "VIEW" | null | undefined;
        item?: {
            itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
            name?: string | null | undefined;
            categoryPath?: string | null | undefined;
            itemId?: string | null | undefined;
            sku?: string | null | undefined;
            localizations?: Record<string, {
                title: string;
                description?: string | null | undefined;
                localExt?: Record<string, any> | null | undefined;
                longDescription?: string | null | undefined;
            }> | null | undefined;
        } | null | undefined;
        app?: {
            itemId?: string | null | undefined;
        } | null | undefined;
        category?: {
            namespace?: string | null | undefined;
            categoryPath?: string | null | undefined;
            categoryId?: string | null | undefined;
        } | null | undefined;
        errors?: {
            errorCode?: number | null | undefined;
            errorField?: string | null | undefined;
            errorMessage?: string | null | undefined;
            errorValue?: string | null | undefined;
            messageVariables?: Record<string, string> | null | undefined;
        }[] | null | undefined;
        section?: {
            name?: string | null | undefined;
            sectionId?: string | null | undefined;
        } | null | undefined;
        view?: {
            name?: string | null | undefined;
            viewId?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
    note?: string | null | undefined;
}>;
interface ImportStoreHistoryInfo extends z.TypeOf<typeof ImportStoreHistoryInfo> {
}

declare const ImportStoreItemInfo: z.ZodObject<{
    categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
    localizations: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        title: string;
        description?: string | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
    }, {
        title: string;
        description?: string | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
    }>>>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    name?: string | null | undefined;
    categoryPath?: string | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    localizations?: Record<string, {
        title: string;
        description?: string | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
    }> | null | undefined;
}, {
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    name?: string | null | undefined;
    categoryPath?: string | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    localizations?: Record<string, {
        title: string;
        description?: string | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
    }> | null | undefined;
}>;
interface ImportStoreItemInfo extends z.TypeOf<typeof ImportStoreItemInfo> {
}

declare const ImportStoreSectionInfo: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    sectionId?: string | null | undefined;
}, {
    name?: string | null | undefined;
    sectionId?: string | null | undefined;
}>;
interface ImportStoreSectionInfo extends z.TypeOf<typeof ImportStoreSectionInfo> {
}

declare const ImportStoreViewInfo: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    viewId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    viewId?: string | null | undefined;
}, {
    name?: string | null | undefined;
    viewId?: string | null | undefined;
}>;
interface ImportStoreViewInfo extends z.TypeOf<typeof ImportStoreViewInfo> {
}

declare const InventoryConfig: z.ZodObject<{
    customAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    serverCustomAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    slotUsed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    customAttributes?: Record<string, any> | null | undefined;
    serverCustomAttributes?: Record<string, any> | null | undefined;
    slotUsed?: number | null | undefined;
}, {
    customAttributes?: Record<string, any> | null | undefined;
    serverCustomAttributes?: Record<string, any> | null | undefined;
    slotUsed?: number | null | undefined;
}>;
interface InventoryConfig extends z.TypeOf<typeof InventoryConfig> {
}

declare const InvoiceCurrencySummary: z.ZodObject<{
    currency: z.ZodObject<{
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        decimals: z.ZodNumber;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }>;
    salesVolume: z.ZodNumber;
    subtotalPrice: z.ZodNumber;
    totalPrice: z.ZodNumber;
    totalTax: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    currency: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    };
    salesVolume: number;
    subtotalPrice: number;
    totalPrice: number;
    totalTax: number;
}, {
    currency: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    };
    salesVolume: number;
    subtotalPrice: number;
    totalPrice: number;
    totalTax: number;
}>;
interface InvoiceCurrencySummary extends z.TypeOf<typeof InvoiceCurrencySummary> {
}

declare const ItemNaming: z.ZodObject<{
    categoryPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodString;
    itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
    name: z.ZodString;
    namespace: z.ZodString;
    seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ACTIVE", "INACTIVE"]>>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    name: string;
    itemId: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    status?: "ACTIVE" | "INACTIVE" | null | undefined;
    categoryPath?: string | null | undefined;
    sku?: string | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
}, {
    namespace: string;
    name: string;
    itemId: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    status?: "ACTIVE" | "INACTIVE" | null | undefined;
    categoryPath?: string | null | undefined;
    sku?: string | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
}>;
interface ItemNaming extends z.TypeOf<typeof ItemNaming> {
}

declare const ItemPurchaseConditionValidateResult: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    purchasable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    validateDetails: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        predicateValidateResults: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            matched: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            predicateName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            unmatched: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            validated: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            matched?: string[] | null | undefined;
            predicateName?: string | null | undefined;
            unmatched?: string[] | null | undefined;
            validated?: boolean | null | undefined;
        }, {
            matched?: string[] | null | undefined;
            predicateName?: string | null | undefined;
            unmatched?: string[] | null | undefined;
            validated?: boolean | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        predicateValidateResults?: {
            matched?: string[] | null | undefined;
            predicateName?: string | null | undefined;
            unmatched?: string[] | null | undefined;
            validated?: boolean | null | undefined;
        }[] | null | undefined;
    }, {
        predicateValidateResults?: {
            matched?: string[] | null | undefined;
            predicateName?: string | null | undefined;
            unmatched?: string[] | null | undefined;
            validated?: boolean | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    purchasable?: boolean | null | undefined;
    validateDetails?: {
        predicateValidateResults?: {
            matched?: string[] | null | undefined;
            predicateName?: string | null | undefined;
            unmatched?: string[] | null | undefined;
            validated?: boolean | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}, {
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    purchasable?: boolean | null | undefined;
    validateDetails?: {
        predicateValidateResults?: {
            matched?: string[] | null | undefined;
            predicateName?: string | null | undefined;
            unmatched?: string[] | null | undefined;
            validated?: boolean | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}>;
interface ItemPurchaseConditionValidateResult extends z.TypeOf<typeof ItemPurchaseConditionValidateResult> {
}

declare const ItemSnapshot: z.ZodObject<{
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
    baseAppId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    boothName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    entitlementType: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
    features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    flexible: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    inventoryConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        customAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        serverCustomAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        slotUsed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    }, {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    }>>>;
    itemId: z.ZodString;
    itemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    itemQty: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
    itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
    language: z.ZodString;
    listable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    lootBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        rewardCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }>, "many">>>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
            weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }, {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }>, "many">>>;
        rollFunction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "DEFAULT"]>>>;
    }, "strip", z.ZodTypeAny, {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    }, {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    }>>>;
    maxCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    maxCountPerUser: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    name: z.ZodString;
    namespace: z.ZodString;
    optionBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        boxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }, {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    }, {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    }>>>;
    purchasable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    recurring: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        cycle: z.ZodEnum<["MONTHLY", "QUARTERLY", "WEEKLY", "YEARLY"]>;
        fixedFreeDays: z.ZodNumber;
        fixedTrialCycles: z.ZodNumber;
        graceDays: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    }, {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    }>>>;
    region: z.ZodString;
    regionDataItem: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        currencyNamespace: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }>>>;
    saleConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        price: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        price: number;
    }, {
        currencyCode: string;
        price: number;
    }>>>;
    seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
    sectionExclusive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sellable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    targetCurrencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    targetItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    targetNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    thumbnailUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    name: string;
    itemId: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    title: string;
    entitlementType: "CONSUMABLE" | "DURABLE";
    language: string;
    region: string;
    stackable?: boolean | null | undefined;
    description?: string | null | undefined;
    boothName?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    sku?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    baseAppId?: string | null | undefined;
    features?: string[] | null | undefined;
    flexible?: boolean | null | undefined;
    inventoryConfig?: {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    } | null | undefined;
    itemIds?: string[] | null | undefined;
    itemQty?: Record<string, number> | null | undefined;
    listable?: boolean | null | undefined;
    lootBoxConfig?: {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    } | null | undefined;
    maxCount?: number | null | undefined;
    maxCountPerUser?: number | null | undefined;
    optionBoxConfig?: {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
    purchasable?: boolean | null | undefined;
    recurring?: {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    } | null | undefined;
    regionDataItem?: {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    } | null | undefined;
    saleConfig?: {
        currencyCode: string;
        price: number;
    } | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
    sectionExclusive?: boolean | null | undefined;
    sellable?: boolean | null | undefined;
    targetCurrencyCode?: string | null | undefined;
    targetItemId?: string | null | undefined;
    targetNamespace?: string | null | undefined;
    thumbnailUrl?: string | null | undefined;
}, {
    namespace: string;
    name: string;
    itemId: string;
    itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
    title: string;
    entitlementType: "CONSUMABLE" | "DURABLE";
    language: string;
    region: string;
    stackable?: boolean | null | undefined;
    description?: string | null | undefined;
    boothName?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    sku?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    baseAppId?: string | null | undefined;
    features?: string[] | null | undefined;
    flexible?: boolean | null | undefined;
    inventoryConfig?: {
        customAttributes?: Record<string, any> | null | undefined;
        serverCustomAttributes?: Record<string, any> | null | undefined;
        slotUsed?: number | null | undefined;
    } | null | undefined;
    itemIds?: string[] | null | undefined;
    itemQty?: Record<string, number> | null | undefined;
    listable?: boolean | null | undefined;
    lootBoxConfig?: {
        rewards?: {
            type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
            name?: string | null | undefined;
            lootBoxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
            odds?: number | null | undefined;
            weight?: number | null | undefined;
        }[] | null | undefined;
        rewardCount?: number | null | undefined;
        rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
    } | null | undefined;
    maxCount?: number | null | undefined;
    maxCountPerUser?: number | null | undefined;
    optionBoxConfig?: {
        boxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
    } | null | undefined;
    purchasable?: boolean | null | undefined;
    recurring?: {
        cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
        fixedFreeDays: number;
        fixedTrialCycles: number;
        graceDays: number;
    } | null | undefined;
    regionDataItem?: {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    } | null | undefined;
    saleConfig?: {
        currencyCode: string;
        price: number;
    } | null | undefined;
    seasonType?: "PASS" | "TIER" | null | undefined;
    sectionExclusive?: boolean | null | undefined;
    sellable?: boolean | null | undefined;
    targetCurrencyCode?: string | null | undefined;
    targetItemId?: string | null | undefined;
    targetNamespace?: string | null | undefined;
    thumbnailUrl?: string | null | undefined;
}>;
interface ItemSnapshot extends z.TypeOf<typeof ItemSnapshot> {
}

declare const KeyInfo: z.ZodObject<{
    acquireOrderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    acquireUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    id: z.ZodString;
    keyFile: z.ZodString;
    keyGroupId: z.ZodString;
    namespace: z.ZodString;
    status: z.ZodEnum<["ACQUIRED", "ACTIVE"]>;
    updatedAt: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "ACTIVE" | "ACQUIRED";
    value: string;
    id: string;
    createdAt: string;
    updatedAt: string;
    keyFile: string;
    keyGroupId: string;
    acquireOrderNo?: string | null | undefined;
    acquireUserId?: string | null | undefined;
}, {
    namespace: string;
    status: "ACTIVE" | "ACQUIRED";
    value: string;
    id: string;
    createdAt: string;
    updatedAt: string;
    keyFile: string;
    keyGroupId: string;
    acquireOrderNo?: string | null | undefined;
    acquireUserId?: string | null | undefined;
}>;
interface KeyInfo extends z.TypeOf<typeof KeyInfo> {
}

declare const ListViewInfo: z.ZodObject<{
    createdAt: z.ZodString;
    displayOrder: z.ZodNumber;
    name: z.ZodString;
    namespace: z.ZodString;
    updatedAt: z.ZodString;
    viewId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    viewId: string;
    displayOrder: number;
}, {
    namespace: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    viewId: string;
    displayOrder: number;
}>;
interface ListViewInfo extends z.TypeOf<typeof ListViewInfo> {
}

declare const Localization: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
}, "strip", z.ZodTypeAny, {
    title: string;
    description?: string | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
}, {
    title: string;
    description?: string | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
}>;
interface Localization extends z.TypeOf<typeof Localization> {
}

declare const LootBoxConfig: z.ZodObject<{
    rewardCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }, {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }>, "many">>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
        weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
        name?: string | null | undefined;
        lootBoxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
        odds?: number | null | undefined;
        weight?: number | null | undefined;
    }, {
        type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
        name?: string | null | undefined;
        lootBoxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
        odds?: number | null | undefined;
        weight?: number | null | undefined;
    }>, "many">>>;
    rollFunction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "DEFAULT"]>>>;
}, "strip", z.ZodTypeAny, {
    rewards?: {
        type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
        name?: string | null | undefined;
        lootBoxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
        odds?: number | null | undefined;
        weight?: number | null | undefined;
    }[] | null | undefined;
    rewardCount?: number | null | undefined;
    rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
}, {
    rewards?: {
        type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
        name?: string | null | undefined;
        lootBoxItems?: {
            endDate?: string | null | undefined;
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            count?: number | null | undefined;
            itemSku?: string | null | undefined;
            duration?: number | null | undefined;
        }[] | null | undefined;
        odds?: number | null | undefined;
        weight?: number | null | undefined;
    }[] | null | undefined;
    rewardCount?: number | null | undefined;
    rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
}>;
interface LootBoxConfig extends z.TypeOf<typeof LootBoxConfig> {
}

declare const LootBoxReward: z.ZodObject<{
    lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }, {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }>, "many">>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
    weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
    name?: string | null | undefined;
    lootBoxItems?: {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }[] | null | undefined;
    odds?: number | null | undefined;
    weight?: number | null | undefined;
}, {
    type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
    name?: string | null | undefined;
    lootBoxItems?: {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }[] | null | undefined;
    odds?: number | null | undefined;
    weight?: number | null | undefined;
}>;
interface LootBoxReward extends z.TypeOf<typeof LootBoxReward> {
}

declare const OculusReconcileResult: z.ZodObject<{
    iapOrderStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FULFILLED", "VERIFIED"]>>>;
    itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
    oculusItemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    transactionId?: string | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    iapOrderStatus?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    oculusItemSku?: string | null | undefined;
}, {
    transactionId?: string | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    iapOrderStatus?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    oculusItemSku?: string | null | undefined;
}>;
interface OculusReconcileResult extends z.TypeOf<typeof OculusReconcileResult> {
}

declare const Operation: z.ZodObject<{
    creditPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        count: z.ZodNumber;
        currencyCode: z.ZodString;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    }, {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    }>>>;
    debitPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        count: z.ZodNumber;
        currencyCode: z.ZodString;
        walletPlatform: z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    }, {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    }>>>;
    fulFillItemPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        count: z.ZodNumber;
        entitlementCollectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        itemIdentity: z.ZodString;
        itemIdentityType: z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>;
    }, "strip", z.ZodTypeAny, {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    }, {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    }>>>;
    resultId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    revokeEntitlementPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        entitlementId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        entitlementId: string;
        count?: number | null | undefined;
    }, {
        entitlementId: string;
        count?: number | null | undefined;
    }>>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "INIT", "SKIPPED", "SUCCESS"]>>>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodEnum<["CREDIT_WALLET", "DEBIT_WALLET", "FULFILL_ITEM", "REVOKE_ENTITLEMENT"]>;
}, "strip", z.ZodTypeAny, {
    type: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT";
    status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
    statusReason?: string | null | undefined;
    creditPayload?: {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    } | null | undefined;
    debitPayload?: {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    } | null | undefined;
    fulFillItemPayload?: {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    } | null | undefined;
    resultId?: string | null | undefined;
    revokeEntitlementPayload?: {
        entitlementId: string;
        count?: number | null | undefined;
    } | null | undefined;
}, {
    type: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT";
    status?: "INIT" | "SUCCESS" | "SKIPPED" | "FAILED" | null | undefined;
    statusReason?: string | null | undefined;
    creditPayload?: {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    } | null | undefined;
    debitPayload?: {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    } | null | undefined;
    fulFillItemPayload?: {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    } | null | undefined;
    resultId?: string | null | undefined;
    revokeEntitlementPayload?: {
        entitlementId: string;
        count?: number | null | undefined;
    } | null | undefined;
}>;
interface Operation extends z.TypeOf<typeof Operation> {
}

declare const OperationRequest: z.ZodObject<{
    creditPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        count: z.ZodNumber;
        currencyCode: z.ZodString;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    }, {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    }>>>;
    debitPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        count: z.ZodNumber;
        currencyCode: z.ZodString;
        walletPlatform: z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "Xbox"]>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    }, {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    }>>>;
    fulFillItemPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        count: z.ZodNumber;
        entitlementCollectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        itemIdentity: z.ZodString;
        itemIdentityType: z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>;
    }, "strip", z.ZodTypeAny, {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    }, {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    }>>>;
    revokeEntitlementPayload: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        entitlementId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        entitlementId: string;
        count?: number | null | undefined;
    }, {
        entitlementId: string;
        count?: number | null | undefined;
    }>>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CREDIT_WALLET", "DEBIT_WALLET", "FULFILL_ITEM", "REVOKE_ENTITLEMENT"]>>>;
}, "strip", z.ZodTypeAny, {
    type?: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT" | null | undefined;
    creditPayload?: {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    } | null | undefined;
    debitPayload?: {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    } | null | undefined;
    fulFillItemPayload?: {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    } | null | undefined;
    revokeEntitlementPayload?: {
        entitlementId: string;
        count?: number | null | undefined;
    } | null | undefined;
}, {
    type?: "CREDIT_WALLET" | "DEBIT_WALLET" | "FULFILL_ITEM" | "REVOKE_ENTITLEMENT" | null | undefined;
    creditPayload?: {
        currencyCode: string;
        count: number;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        expireAt?: string | null | undefined;
    } | null | undefined;
    debitPayload?: {
        currencyCode: string;
        count: number;
        walletPlatform: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "Xbox";
    } | null | undefined;
    fulFillItemPayload?: {
        count: number;
        itemIdentity: string;
        itemIdentityType: "ITEM_ID" | "ITEM_SKU";
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementCollectionId?: string | null | undefined;
    } | null | undefined;
    revokeEntitlementPayload?: {
        entitlementId: string;
        count?: number | null | undefined;
    } | null | undefined;
}>;
interface OperationRequest extends z.TypeOf<typeof OperationRequest> {
}

declare const OptionBoxConfig: z.ZodObject<{
    boxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }, {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    boxItems?: {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }[] | null | undefined;
}, {
    boxItems?: {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        count?: number | null | undefined;
        itemSku?: string | null | undefined;
        duration?: number | null | undefined;
    }[] | null | undefined;
}>;
interface OptionBoxConfig extends z.TypeOf<typeof OptionBoxConfig> {
}

declare const Order: z.ZodObject<{
    chargebackReversedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    chargebackTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    charged: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    chargedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    countItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    countNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    countUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creationOptions: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        skipPriceValidation: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        skipPriceValidation?: boolean | null | undefined;
    }, {
        skipPriceValidation?: boolean | null | undefined;
    }>>>;
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        decimals: z.ZodNumber;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }>>>;
    deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    deductionDetails: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        deductionType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DISCOUNT_CODE", "PAYMENT_DISCOUNT_CODE"]>>>;
        discountCodeDeductionDetail: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            discountAmountCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        categoryPath: z.ZodString;
                        includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }, {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }>, "many">>>;
                    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
                    items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        itemId: z.ZodString;
                        itemName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        itemId: string;
                        itemName: string;
                    }, {
                        itemId: string;
                        itemName: string;
                    }>, "many">>>;
                    restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
                    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                }, {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }, {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }>, "many">>>;
            discountPercentageCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                campaignId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                campaignName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                deduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                discountConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    categories: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        categoryPath: z.ZodString;
                        includeSubCategories: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }, {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }>, "many">>>;
                    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    currencyNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    discountType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AMOUNT", "PERCENTAGE"]>>>;
                    items: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        itemId: z.ZodString;
                        itemName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        itemId: string;
                        itemName: string;
                    }, {
                        itemId: string;
                        itemName: string;
                    }>, "many">>>;
                    restrictType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEMS_AND_CATEGORIES", "NONE"]>>>;
                    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                }, {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }, {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }>, "many">>>;
            totalAmountDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            totalDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            totalPercentageDeduction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            discountAmountCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            discountPercentageCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            totalAmountDeduction?: number | null | undefined;
            totalDeduction?: number | null | undefined;
            totalPercentageDeduction?: number | null | undefined;
        }, {
            discountAmountCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            discountPercentageCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            totalAmountDeduction?: number | null | undefined;
            totalDeduction?: number | null | undefined;
            totalPercentageDeduction?: number | null | undefined;
        }>>>;
        discountProviderName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        deductionType?: "DISCOUNT_CODE" | "PAYMENT_DISCOUNT_CODE" | null | undefined;
        discountCodeDeductionDetail?: {
            discountAmountCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            discountPercentageCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            totalAmountDeduction?: number | null | undefined;
            totalDeduction?: number | null | undefined;
            totalPercentageDeduction?: number | null | undefined;
        } | null | undefined;
        discountProviderName?: string | null | undefined;
    }, {
        deductionType?: "DISCOUNT_CODE" | "PAYMENT_DISCOUNT_CODE" | null | undefined;
        discountCodeDeductionDetail?: {
            discountAmountCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            discountPercentageCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            totalAmountDeduction?: number | null | undefined;
            totalDeduction?: number | null | undefined;
            totalPercentageDeduction?: number | null | undefined;
        } | null | undefined;
        discountProviderName?: string | null | undefined;
    }>, "many">>>;
    discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    expireTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    finalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    free: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    fulfilledTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSnapshot: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
        baseAppId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        boothName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        entitlementType: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
        features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        flexible: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        inventoryConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            customAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            serverCustomAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            slotUsed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        }, {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        }>>>;
        itemId: z.ZodString;
        itemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        itemQty: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
        itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
        language: z.ZodString;
        listable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        lootBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            rewardCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }, {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }>, "many">>>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
                weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }, {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }>, "many">>>;
            rollFunction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "DEFAULT"]>>>;
        }, "strip", z.ZodTypeAny, {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        }, {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        }>>>;
        maxCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxCountPerUser: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        name: z.ZodString;
        namespace: z.ZodString;
        optionBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            boxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        }, {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        }>>>;
        purchasable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        recurring: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            cycle: z.ZodEnum<["MONTHLY", "QUARTERLY", "WEEKLY", "YEARLY"]>;
            fixedFreeDays: z.ZodNumber;
            fixedTrialCycles: z.ZodNumber;
            graceDays: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        }, {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        }>>>;
        region: z.ZodString;
        regionDataItem: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            currencyNamespace: z.ZodString;
            currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
            discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }, {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }>>>;
        saleConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            price: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            price: number;
        }, {
            currencyCode: string;
            price: number;
        }>>>;
        seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
        sectionExclusive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        sellable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        targetCurrencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targetItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targetNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        thumbnailUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodString;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    }, {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    }>>>;
    language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    orderBundleItemInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        discountedPrice: z.ZodNumber;
        itemId: z.ZodString;
        itemName: z.ZodString;
        itemSku: z.ZodString;
        price: z.ZodNumber;
        purchased: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        purchased?: boolean | null | undefined;
    }, {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        purchased?: boolean | null | undefined;
    }>, "many">>>;
    orderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    }, {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    }>>>;
    paymentMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentMethodFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    paymentOrderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentProvider: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>>>;
    paymentProviderFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    paymentRemainSeconds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    paymentStationUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    refundedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    returnUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rvn: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    salesTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sandbox: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CHARGEBACK", "CHARGEBACK_REVERSED", "CHARGED", "CLOSED", "DELETED", "FULFILLED", "FULFILL_FAILED", "INIT", "REFUNDED", "REFUNDING", "REFUND_FAILED"]>>>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    vat: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    status?: "INIT" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "FULFILLED" | "FULFILL_FAILED" | "CHARGED" | "DELETED" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "CLOSED" | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    orderNo?: string | null | undefined;
    userId?: string | null | undefined;
    statusReason?: string | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    rvn?: number | null | undefined;
    discountedPrice?: number | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    itemSnapshot?: {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    } | null | undefined;
    ext?: Record<string, any> | null | undefined;
    free?: boolean | null | undefined;
    fulfilledTime?: string | null | undefined;
    sandbox?: boolean | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    totalTax?: number | null | undefined;
    returnUrl?: string | null | undefined;
    deduction?: number | null | undefined;
    chargebackReversedTime?: string | null | undefined;
    chargebackTime?: string | null | undefined;
    chargedTime?: string | null | undefined;
    createdTime?: string | null | undefined;
    creationOptions?: {
        skipPriceValidation?: boolean | null | undefined;
    } | null | undefined;
    deductionDetails?: {
        deductionType?: "DISCOUNT_CODE" | "PAYMENT_DISCOUNT_CODE" | null | undefined;
        discountCodeDeductionDetail?: {
            discountAmountCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            discountPercentageCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            totalAmountDeduction?: number | null | undefined;
            totalDeduction?: number | null | undefined;
            totalPercentageDeduction?: number | null | undefined;
        } | null | undefined;
        discountProviderName?: string | null | undefined;
    }[] | null | undefined;
    expireTime?: string | null | undefined;
    orderBundleItemInfos?: {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        purchased?: boolean | null | undefined;
    }[] | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentMethodFee?: number | null | undefined;
    paymentOrderNo?: string | null | undefined;
    paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    paymentProviderFee?: number | null | undefined;
    paymentRemainSeconds?: number | null | undefined;
    paymentStationUrl?: string | null | undefined;
    refundedTime?: string | null | undefined;
    salesTax?: number | null | undefined;
    tax?: number | null | undefined;
    vat?: number | null | undefined;
    paymentData?: {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    } | null | undefined;
    charged?: boolean | null | undefined;
    countItemId?: string | null | undefined;
    countNamespace?: string | null | undefined;
    countUserId?: string | null | undefined;
    finalPrice?: number | null | undefined;
}, {
    namespace?: string | null | undefined;
    status?: "INIT" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "FULFILLED" | "FULFILL_FAILED" | "CHARGED" | "DELETED" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "CLOSED" | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    orderNo?: string | null | undefined;
    userId?: string | null | undefined;
    statusReason?: string | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    rvn?: number | null | undefined;
    discountedPrice?: number | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    itemSnapshot?: {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    } | null | undefined;
    ext?: Record<string, any> | null | undefined;
    free?: boolean | null | undefined;
    fulfilledTime?: string | null | undefined;
    sandbox?: boolean | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    totalTax?: number | null | undefined;
    returnUrl?: string | null | undefined;
    deduction?: number | null | undefined;
    chargebackReversedTime?: string | null | undefined;
    chargebackTime?: string | null | undefined;
    chargedTime?: string | null | undefined;
    createdTime?: string | null | undefined;
    creationOptions?: {
        skipPriceValidation?: boolean | null | undefined;
    } | null | undefined;
    deductionDetails?: {
        deductionType?: "DISCOUNT_CODE" | "PAYMENT_DISCOUNT_CODE" | null | undefined;
        discountCodeDeductionDetail?: {
            discountAmountCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            discountPercentageCodes?: {
                code?: string | null | undefined;
                discountConfig?: {
                    categories?: {
                        categoryPath: string;
                        includeSubCategories?: boolean | null | undefined;
                    }[] | null | undefined;
                    currencyCode?: string | null | undefined;
                    currencyNamespace?: string | null | undefined;
                    discountAmount?: number | null | undefined;
                    discountPercentage?: number | null | undefined;
                    discountType?: "AMOUNT" | "PERCENTAGE" | null | undefined;
                    items?: {
                        itemId: string;
                        itemName: string;
                    }[] | null | undefined;
                    restrictType?: "ITEMS_AND_CATEGORIES" | "NONE" | null | undefined;
                    stackable?: boolean | null | undefined;
                } | null | undefined;
                campaignId?: string | null | undefined;
                campaignName?: string | null | undefined;
                deduction?: number | null | undefined;
            }[] | null | undefined;
            totalAmountDeduction?: number | null | undefined;
            totalDeduction?: number | null | undefined;
            totalPercentageDeduction?: number | null | undefined;
        } | null | undefined;
        discountProviderName?: string | null | undefined;
    }[] | null | undefined;
    expireTime?: string | null | undefined;
    orderBundleItemInfos?: {
        itemId: string;
        itemName: string;
        itemSku: string;
        discountedPrice: number;
        price: number;
        quantity?: number | null | undefined;
        purchased?: boolean | null | undefined;
    }[] | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentMethodFee?: number | null | undefined;
    paymentOrderNo?: string | null | undefined;
    paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    paymentProviderFee?: number | null | undefined;
    paymentRemainSeconds?: number | null | undefined;
    paymentStationUrl?: string | null | undefined;
    refundedTime?: string | null | undefined;
    salesTax?: number | null | undefined;
    tax?: number | null | undefined;
    vat?: number | null | undefined;
    paymentData?: {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    } | null | undefined;
    charged?: boolean | null | undefined;
    countItemId?: string | null | undefined;
    countNamespace?: string | null | undefined;
    countUserId?: string | null | undefined;
    finalPrice?: number | null | undefined;
}>;
interface Order extends z.TypeOf<typeof Order> {
}

declare const OrderBundleItemInfo: z.ZodObject<{
    discountedPrice: z.ZodNumber;
    itemId: z.ZodString;
    itemName: z.ZodString;
    itemSku: z.ZodString;
    price: z.ZodNumber;
    purchased: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    itemId: string;
    itemName: string;
    itemSku: string;
    discountedPrice: number;
    price: number;
    quantity?: number | null | undefined;
    purchased?: boolean | null | undefined;
}, {
    itemId: string;
    itemName: string;
    itemSku: string;
    discountedPrice: number;
    price: number;
    quantity?: number | null | undefined;
    purchased?: boolean | null | undefined;
}>;
interface OrderBundleItemInfo extends z.TypeOf<typeof OrderBundleItemInfo> {
}

declare const OrderCreationOptions: z.ZodObject<{
    skipPriceValidation: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    skipPriceValidation?: boolean | null | undefined;
}, {
    skipPriceValidation?: boolean | null | undefined;
}>;
interface OrderCreationOptions extends z.TypeOf<typeof OrderCreationOptions> {
}

declare const OrderHistoryInfo: z.ZodObject<{
    action: z.ZodEnum<["CHARGEBACK", "CHARGEBACK_REVERSED", "CHARGED", "CLOSE", "DELETED", "FULFILLED", "FULFILL_FAILED", "INIT", "REFUNDED", "REFUNDING", "REFUND_FAILED", "SET_STATUS"]>;
    createdAt: z.ZodString;
    namespace: z.ZodString;
    operator: z.ZodString;
    orderNo: z.ZodString;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    action: "INIT" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "FULFILLED" | "FULFILL_FAILED" | "CHARGED" | "CLOSE" | "DELETED" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "SET_STATUS";
    createdAt: string;
    updatedAt: string;
    orderNo: string;
    userId: string;
    operator: string;
    reason?: string | null | undefined;
}, {
    namespace: string;
    action: "INIT" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "FULFILLED" | "FULFILL_FAILED" | "CHARGED" | "CLOSE" | "DELETED" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "SET_STATUS";
    createdAt: string;
    updatedAt: string;
    orderNo: string;
    userId: string;
    operator: string;
    reason?: string | null | undefined;
}>;
interface OrderHistoryInfo extends z.TypeOf<typeof OrderHistoryInfo> {
}

declare const OrderSummary: z.ZodObject<{
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        decimals: z.ZodNumber;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }>>>;
    ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    free: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    ext?: Record<string, any> | null | undefined;
    free?: boolean | null | undefined;
}, {
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    ext?: Record<string, any> | null | undefined;
    free?: boolean | null | undefined;
}>;
interface OrderSummary extends z.TypeOf<typeof OrderSummary> {
}

declare const Paging: z.ZodObject<{
    next: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    previous: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    next?: string | null | undefined;
    previous?: string | null | undefined;
}, {
    next?: string | null | undefined;
    previous?: string | null | undefined;
}>;
interface Paging extends z.TypeOf<typeof Paging> {
}

declare const PaymentAccount: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["card", "paypal"]>;
}, "strip", z.ZodTypeAny, {
    type: "card" | "paypal";
    id: string;
    name: string;
}, {
    type: "card" | "paypal";
    id: string;
    name: string;
}>;
interface PaymentAccount extends z.TypeOf<typeof PaymentAccount> {
}

declare const PaymentData: z.ZodObject<{
    discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    discountAmount?: number | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    tax?: number | null | undefined;
    discountCode?: string | null | undefined;
}, {
    discountAmount?: number | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    tax?: number | null | undefined;
    discountCode?: string | null | undefined;
}>;
interface PaymentData extends z.TypeOf<typeof PaymentData> {
}

declare const PaymentMethod: z.ZodObject<{
    name: z.ZodString;
    paymentProvider: z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>;
}, "strip", z.ZodTypeAny, {
    name: string;
    paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
}, {
    name: string;
    paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
}>;
interface PaymentMethod extends z.TypeOf<typeof PaymentMethod> {
}

declare const PaymentNotificationInfo: z.ZodObject<{
    createdAt: z.ZodString;
    externalId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    namespace: z.ZodString;
    notification: z.ZodRecord<z.ZodString, z.ZodAny>;
    notificationSource: z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>;
    notificationType: z.ZodString;
    paymentOrderNo: z.ZodString;
    status: z.ZodEnum<["ERROR", "IGNORED", "PROCESSED", "WARN"]>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "IGNORED" | "ERROR" | "PROCESSED" | "WARN";
    id: string;
    createdAt: string;
    updatedAt: string;
    paymentOrderNo: string;
    notification: Record<string, any>;
    notificationSource: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
    notificationType: string;
    statusReason?: string | null | undefined;
    externalId?: string | null | undefined;
}, {
    namespace: string;
    status: "IGNORED" | "ERROR" | "PROCESSED" | "WARN";
    id: string;
    createdAt: string;
    updatedAt: string;
    paymentOrderNo: string;
    notification: Record<string, any>;
    notificationSource: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
    notificationType: string;
    statusReason?: string | null | undefined;
    externalId?: string | null | undefined;
}>;
interface PaymentNotificationInfo extends z.TypeOf<typeof PaymentNotificationInfo> {
}

declare const PaymentOrder: z.ZodObject<{
    authorisedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    channel: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EXTERNAL", "INTERNAL"]>>>;
    chargebackReversedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    chargebackTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    chargedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    charging: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    checkoutUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    checkoutUrlExpiredAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    checkoutUrlValid: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        decimals: z.ZodNumber;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }>>>;
    customParameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extOrderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>>>;
    language: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    neonPayConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        cancelUrl: z.ZodString;
        successUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cancelUrl: string;
        successUrl: string;
    }, {
        cancelUrl: string;
        successUrl: string;
    }>>>;
    notifyUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    omitNotification: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    paymentData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    }, {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    }>>>;
    paymentMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentMethodFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    paymentOrderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentProvider: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>>>;
    paymentProviderFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    paymentStationUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    recurringPaymentOrderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refundedTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    region: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    returnUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rvn: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    salesTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sandbox: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    state: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AUTHORISED", "AUTHORISE_FAILED", "CHARGEBACK", "CHARGEBACK_REVERSED", "CHARGED", "CHARGE_FAILED", "DELETED", "INIT", "NOTIFICATION_OF_CHARGEBACK", "REFUNDED", "REFUNDING", "REFUND_FAILED", "REQUEST_FOR_INFORMATION"]>>>;
    statusReason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subscriptionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    targetNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    targetUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    totalTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    transactions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        additionalData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            cardSummary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            cardSummary?: string | null | undefined;
        }, {
            cardSummary?: string | null | undefined;
        }>>>;
        amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            currencySymbol: z.ZodString;
            currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
            decimals: z.ZodNumber;
            namespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            currencyCode: string;
            currencySymbol: string;
            currencyType: "REAL" | "VIRTUAL";
            decimals: number;
        }, {
            namespace: string;
            currencyCode: string;
            currencySymbol: string;
            currencyType: "REAL" | "VIRTUAL";
            decimals: number;
        }>>>;
        extMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        extStatusCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        extTxId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        merchantId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        notified: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        paymentData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            discountAmount?: number | null | undefined;
            subtotalPrice?: number | null | undefined;
            totalPrice?: number | null | undefined;
            tax?: number | null | undefined;
            discountCode?: string | null | undefined;
        }, {
            discountAmount?: number | null | undefined;
            subtotalPrice?: number | null | undefined;
            totalPrice?: number | null | undefined;
            tax?: number | null | undefined;
            discountCode?: string | null | undefined;
        }>>>;
        paymentMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        paymentMethodFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        paymentProviderFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        provider: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>>>;
        salesTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FINISHED"]>>>;
        tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        txEndTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        txId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AUTHORISATION", "CHARGE", "CHARGEBACK", "CHARGEBACK_REVERSED", "CHARGE_FAILED", "NOTIFICATION_OF_CHARGEBACK", "REFUND", "REFUND_FAILED", "REQUEST_FOR_INFORMATION"]>>>;
        vat: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        type?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "REFUND" | "REFUND_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | "AUTHORISATION" | "CHARGE" | null | undefined;
        status?: "FAILED" | "FINISHED" | null | undefined;
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
            currencySymbol: string;
            currencyType: "REAL" | "VIRTUAL";
            decimals: number;
        } | null | undefined;
        amount?: number | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentMethodFee?: number | null | undefined;
        paymentProviderFee?: number | null | undefined;
        salesTax?: number | null | undefined;
        tax?: number | null | undefined;
        vat?: number | null | undefined;
        extTxId?: string | null | undefined;
        paymentData?: {
            discountAmount?: number | null | undefined;
            subtotalPrice?: number | null | undefined;
            totalPrice?: number | null | undefined;
            tax?: number | null | undefined;
            discountCode?: string | null | undefined;
        } | null | undefined;
        txEndTime?: string | null | undefined;
        extMessage?: string | null | undefined;
        extStatusCode?: string | null | undefined;
        merchantId?: string | null | undefined;
        notified?: boolean | null | undefined;
        provider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
        txId?: string | null | undefined;
    }, {
        type?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "REFUND" | "REFUND_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | "AUTHORISATION" | "CHARGE" | null | undefined;
        status?: "FAILED" | "FINISHED" | null | undefined;
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
            currencySymbol: string;
            currencyType: "REAL" | "VIRTUAL";
            decimals: number;
        } | null | undefined;
        amount?: number | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentMethodFee?: number | null | undefined;
        paymentProviderFee?: number | null | undefined;
        salesTax?: number | null | undefined;
        tax?: number | null | undefined;
        vat?: number | null | undefined;
        extTxId?: string | null | undefined;
        paymentData?: {
            discountAmount?: number | null | undefined;
            subtotalPrice?: number | null | undefined;
            totalPrice?: number | null | undefined;
            tax?: number | null | undefined;
            discountCode?: string | null | undefined;
        } | null | undefined;
        txEndTime?: string | null | undefined;
        extMessage?: string | null | undefined;
        extStatusCode?: string | null | undefined;
        merchantId?: string | null | undefined;
        notified?: boolean | null | undefined;
        provider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
        txId?: string | null | undefined;
    }>, "many">>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    vat: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    zipCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    status?: "INIT" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "DELETED" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "AUTHORISED" | "AUTHORISE_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | null | undefined;
    description?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    userId?: string | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    sku?: string | null | undefined;
    title?: string | null | undefined;
    platform?: string | null | undefined;
    statusReason?: string | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    metadata?: Record<string, string> | null | undefined;
    rvn?: number | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    targetNamespace?: string | null | undefined;
    state?: string | null | undefined;
    sandbox?: boolean | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    totalTax?: number | null | undefined;
    returnUrl?: string | null | undefined;
    chargebackReversedTime?: string | null | undefined;
    chargebackTime?: string | null | undefined;
    chargedTime?: string | null | undefined;
    createdTime?: string | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentMethodFee?: number | null | undefined;
    paymentOrderNo?: string | null | undefined;
    paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    paymentProviderFee?: number | null | undefined;
    paymentStationUrl?: string | null | undefined;
    refundedTime?: string | null | undefined;
    salesTax?: number | null | undefined;
    tax?: number | null | undefined;
    vat?: number | null | undefined;
    authorisedTime?: string | null | undefined;
    customParameters?: Record<string, any> | null | undefined;
    extOrderNo?: string | null | undefined;
    extUserId?: string | null | undefined;
    paymentData?: {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    } | null | undefined;
    subscriptionId?: string | null | undefined;
    targetUserId?: string | null | undefined;
    charging?: boolean | null | undefined;
    notifyUrl?: string | null | undefined;
    omitNotification?: boolean | null | undefined;
    recurringPaymentOrderNo?: string | null | undefined;
    channel?: "EXTERNAL" | "INTERNAL" | null | undefined;
    transactions?: {
        type?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "REFUND" | "REFUND_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | "AUTHORISATION" | "CHARGE" | null | undefined;
        status?: "FAILED" | "FINISHED" | null | undefined;
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
            currencySymbol: string;
            currencyType: "REAL" | "VIRTUAL";
            decimals: number;
        } | null | undefined;
        amount?: number | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentMethodFee?: number | null | undefined;
        paymentProviderFee?: number | null | undefined;
        salesTax?: number | null | undefined;
        tax?: number | null | undefined;
        vat?: number | null | undefined;
        extTxId?: string | null | undefined;
        paymentData?: {
            discountAmount?: number | null | undefined;
            subtotalPrice?: number | null | undefined;
            totalPrice?: number | null | undefined;
            tax?: number | null | undefined;
            discountCode?: string | null | undefined;
        } | null | undefined;
        txEndTime?: string | null | undefined;
        extMessage?: string | null | undefined;
        extStatusCode?: string | null | undefined;
        merchantId?: string | null | undefined;
        notified?: boolean | null | undefined;
        provider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
        txId?: string | null | undefined;
    }[] | null | undefined;
    neonPayConfig?: {
        cancelUrl: string;
        successUrl: string;
    } | null | undefined;
    checkoutUrl?: string | null | undefined;
    checkoutUrlExpiredAt?: string | null | undefined;
    checkoutUrlValid?: boolean | null | undefined;
    zipCode?: string | null | undefined;
}, {
    namespace?: string | null | undefined;
    status?: "INIT" | "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "DELETED" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED" | "AUTHORISED" | "AUTHORISE_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | null | undefined;
    description?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    userId?: string | null | undefined;
    itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION" | null | undefined;
    sku?: string | null | undefined;
    title?: string | null | undefined;
    platform?: string | null | undefined;
    statusReason?: string | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    metadata?: Record<string, string> | null | undefined;
    rvn?: number | null | undefined;
    price?: number | null | undefined;
    language?: string | null | undefined;
    region?: string | null | undefined;
    targetNamespace?: string | null | undefined;
    state?: string | null | undefined;
    sandbox?: boolean | null | undefined;
    subtotalPrice?: number | null | undefined;
    totalPrice?: number | null | undefined;
    totalTax?: number | null | undefined;
    returnUrl?: string | null | undefined;
    chargebackReversedTime?: string | null | undefined;
    chargebackTime?: string | null | undefined;
    chargedTime?: string | null | undefined;
    createdTime?: string | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentMethodFee?: number | null | undefined;
    paymentOrderNo?: string | null | undefined;
    paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    paymentProviderFee?: number | null | undefined;
    paymentStationUrl?: string | null | undefined;
    refundedTime?: string | null | undefined;
    salesTax?: number | null | undefined;
    tax?: number | null | undefined;
    vat?: number | null | undefined;
    authorisedTime?: string | null | undefined;
    customParameters?: Record<string, any> | null | undefined;
    extOrderNo?: string | null | undefined;
    extUserId?: string | null | undefined;
    paymentData?: {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    } | null | undefined;
    subscriptionId?: string | null | undefined;
    targetUserId?: string | null | undefined;
    charging?: boolean | null | undefined;
    notifyUrl?: string | null | undefined;
    omitNotification?: boolean | null | undefined;
    recurringPaymentOrderNo?: string | null | undefined;
    channel?: "EXTERNAL" | "INTERNAL" | null | undefined;
    transactions?: {
        type?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "REFUND" | "REFUND_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | "AUTHORISATION" | "CHARGE" | null | undefined;
        status?: "FAILED" | "FINISHED" | null | undefined;
        additionalData?: {
            cardSummary?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
            currencySymbol: string;
            currencyType: "REAL" | "VIRTUAL";
            decimals: number;
        } | null | undefined;
        amount?: number | null | undefined;
        paymentMethod?: string | null | undefined;
        paymentMethodFee?: number | null | undefined;
        paymentProviderFee?: number | null | undefined;
        salesTax?: number | null | undefined;
        tax?: number | null | undefined;
        vat?: number | null | undefined;
        extTxId?: string | null | undefined;
        paymentData?: {
            discountAmount?: number | null | undefined;
            subtotalPrice?: number | null | undefined;
            totalPrice?: number | null | undefined;
            tax?: number | null | undefined;
            discountCode?: string | null | undefined;
        } | null | undefined;
        txEndTime?: string | null | undefined;
        extMessage?: string | null | undefined;
        extStatusCode?: string | null | undefined;
        merchantId?: string | null | undefined;
        notified?: boolean | null | undefined;
        provider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
        txId?: string | null | undefined;
    }[] | null | undefined;
    neonPayConfig?: {
        cancelUrl: string;
        successUrl: string;
    } | null | undefined;
    checkoutUrl?: string | null | undefined;
    checkoutUrlExpiredAt?: string | null | undefined;
    checkoutUrlValid?: boolean | null | undefined;
    zipCode?: string | null | undefined;
}>;
interface PaymentOrder extends z.TypeOf<typeof PaymentOrder> {
}

declare const PaymentOrderNeonPayConfig: z.ZodObject<{
    cancelUrl: z.ZodString;
    successUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    cancelUrl: string;
    successUrl: string;
}, {
    cancelUrl: string;
    successUrl: string;
}>;
interface PaymentOrderNeonPayConfig extends z.TypeOf<typeof PaymentOrderNeonPayConfig> {
}

declare const Permission: z.ZodObject<{
    action: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    resource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    action?: number | null | undefined;
    resource?: string | null | undefined;
}, {
    action?: number | null | undefined;
    resource?: string | null | undefined;
}>;
interface Permission extends z.TypeOf<typeof Permission> {
}

declare const PlatformAccountClosureHistoryInfo: z.ZodObject<{
    entitlements: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        namespace?: string | null | undefined;
        origin?: string | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        entitlementId?: string | null | undefined;
        useCount?: number | null | undefined;
        grantedCode?: string | null | undefined;
        itemNamespace?: string | null | undefined;
    }, {
        namespace?: string | null | undefined;
        origin?: string | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        entitlementId?: string | null | undefined;
        useCount?: number | null | undefined;
        grantedCode?: string | null | undefined;
        itemNamespace?: string | null | undefined;
    }>, "many">>>;
    id: z.ZodString;
    namespace: z.ZodString;
    platform: z.ZodString;
    progression: z.ZodEnum<["IN_PROGRESS", "SUCCESS"]>;
    userDlcS: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        dlcId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        dlcId?: string | null | undefined;
    }, {
        dlcId?: string | null | undefined;
    }>, "many">>>;
    userId: z.ZodString;
    wallets: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        balance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        timeLimitedBalances: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            balance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            balanceSource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }, {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }>, "many">>>;
        walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode?: string | null | undefined;
        balanceOrigin?: string | null | undefined;
        walletId?: string | null | undefined;
        balance?: number | null | undefined;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
    }, {
        currencyCode?: string | null | undefined;
        balanceOrigin?: string | null | undefined;
        walletId?: string | null | undefined;
        balance?: number | null | undefined;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    id: string;
    progression: "SUCCESS" | "IN_PROGRESS";
    userId: string;
    platform: string;
    entitlements?: {
        namespace?: string | null | undefined;
        origin?: string | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        entitlementId?: string | null | undefined;
        useCount?: number | null | undefined;
        grantedCode?: string | null | undefined;
        itemNamespace?: string | null | undefined;
    }[] | null | undefined;
    userDlcS?: {
        dlcId?: string | null | undefined;
    }[] | null | undefined;
    wallets?: {
        currencyCode?: string | null | undefined;
        balanceOrigin?: string | null | undefined;
        walletId?: string | null | undefined;
        balance?: number | null | undefined;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}, {
    namespace: string;
    id: string;
    progression: "SUCCESS" | "IN_PROGRESS";
    userId: string;
    platform: string;
    entitlements?: {
        namespace?: string | null | undefined;
        origin?: string | null | undefined;
        name?: string | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        entitlementId?: string | null | undefined;
        useCount?: number | null | undefined;
        grantedCode?: string | null | undefined;
        itemNamespace?: string | null | undefined;
    }[] | null | undefined;
    userDlcS?: {
        dlcId?: string | null | undefined;
    }[] | null | undefined;
    wallets?: {
        currencyCode?: string | null | undefined;
        balanceOrigin?: string | null | undefined;
        walletId?: string | null | undefined;
        balance?: number | null | undefined;
        timeLimitedBalances?: {
            expireAt?: string | null | undefined;
            balance?: number | null | undefined;
            balanceSource?: string | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}>;
interface PlatformAccountClosureHistoryInfo extends z.TypeOf<typeof PlatformAccountClosureHistoryInfo> {
}

declare const PlatformDlcEntry: z.ZodObject<{
    platform: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EPICGAMES", "OCULUS", "PSN", "STEAM", "XBOX"]>>>;
    platformDlcIdMap: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    platform?: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX" | null | undefined;
    platformDlcIdMap?: Record<string, string> | null | undefined;
}, {
    platform?: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX" | null | undefined;
    platformDlcIdMap?: Record<string, string> | null | undefined;
}>;
interface PlatformDlcEntry extends z.TypeOf<typeof PlatformDlcEntry> {
}

declare const PlatformReward: z.ZodObject<{
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
    }, {
        namespace: string;
        currencyCode: string;
    }>>>;
    item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
    }, {
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
    }>>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
}, "strip", z.ZodTypeAny, {
    type?: "ITEM" | "CURRENCY" | null | undefined;
    quantity?: number | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
    } | null | undefined;
    item?: {
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
    } | null | undefined;
}, {
    type?: "ITEM" | "CURRENCY" | null | undefined;
    quantity?: number | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
    } | null | undefined;
    item?: {
        itemId?: string | null | undefined;
        itemName?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
    } | null | undefined;
}>;
interface PlatformReward extends z.TypeOf<typeof PlatformReward> {
}

declare const PlatformRewardCurrency: z.ZodObject<{
    currencyCode: z.ZodString;
    namespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    currencyCode: string;
}, {
    namespace: string;
    currencyCode: string;
}>;
interface PlatformRewardCurrency extends z.TypeOf<typeof PlatformRewardCurrency> {
}

declare const PlatformRewardItem: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemId?: string | null | undefined;
    itemName?: string | null | undefined;
    itemType?: string | null | undefined;
    itemSku?: string | null | undefined;
}, {
    itemId?: string | null | undefined;
    itemName?: string | null | undefined;
    itemType?: string | null | undefined;
    itemSku?: string | null | undefined;
}>;
interface PlatformRewardItem extends z.TypeOf<typeof PlatformRewardItem> {
}

declare const PlayStationReconcileResult: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    psnItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FULFILLED", "VERIFIED"]>>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    transactionId?: string | null | undefined;
    psnItemId?: string | null | undefined;
}, {
    status?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    transactionId?: string | null | undefined;
    psnItemId?: string | null | undefined;
}>;
interface PlayStationReconcileResult extends z.TypeOf<typeof PlayStationReconcileResult> {
}

declare const Predicate: z.ZodObject<{
    anyOf: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    predicateType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate", "StatisticCodePredicate"]>>>;
    value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    values?: string[] | null | undefined;
    code?: string | null | undefined;
    value?: string | null | undefined;
    name?: string | null | undefined;
    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
    anyOf?: number | null | undefined;
}, {
    values?: string[] | null | undefined;
    code?: string | null | undefined;
    value?: string | null | undefined;
    name?: string | null | undefined;
    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
    anyOf?: number | null | undefined;
}>;
interface Predicate extends z.TypeOf<typeof Predicate> {
}

declare const PredicateValidateResult: z.ZodObject<{
    matched: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    predicateName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    unmatched: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    validated: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    matched?: string[] | null | undefined;
    predicateName?: string | null | undefined;
    unmatched?: string[] | null | undefined;
    validated?: boolean | null | undefined;
}, {
    matched?: string[] | null | undefined;
    predicateName?: string | null | undefined;
    unmatched?: string[] | null | undefined;
    validated?: boolean | null | undefined;
}>;
interface PredicateValidateResult extends z.TypeOf<typeof PredicateValidateResult> {
}

declare const PublicCustomConfigInfo: z.ZodObject<{
    connectionType: z.ZodEnum<["INSECURE", "TLS"]>;
    grpcServerAddress: z.ZodString;
    tlsConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        rootCertFileName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        rootCertFileName?: string | null | undefined;
    }, {
        rootCertFileName?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    connectionType: "INSECURE" | "TLS";
    grpcServerAddress: string;
    tlsConfig?: {
        rootCertFileName?: string | null | undefined;
    } | null | undefined;
}, {
    connectionType: "INSECURE" | "TLS";
    grpcServerAddress: string;
    tlsConfig?: {
        rootCertFileName?: string | null | undefined;
    } | null | undefined;
}>;
interface PublicCustomConfigInfo extends z.TypeOf<typeof PublicCustomConfigInfo> {
}

declare const PublicEntitlementHistoryInfo: z.ZodObject<{
    action: z.ZodEnum<["DECREMENT", "DISABLE", "ENABLE", "GRANT", "REVOKE", "SELL_BACK", "UPDATE"]>;
    clazz: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>>>;
    createdAt: z.ZodString;
    entitlementId: z.ZodString;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    useCountChange: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
    createdAt: string;
    updatedAt: string;
    userId: string;
    entitlementId: string;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    reason?: string | null | undefined;
    useCount?: number | null | undefined;
    clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
    useCountChange?: number | null | undefined;
}, {
    namespace: string;
    action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
    createdAt: string;
    updatedAt: string;
    userId: string;
    entitlementId: string;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    reason?: string | null | undefined;
    useCount?: number | null | undefined;
    clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
    useCountChange?: number | null | undefined;
}>;
interface PublicEntitlementHistoryInfo extends z.TypeOf<typeof PublicEntitlementHistoryInfo> {
}

declare const PublicEntitlementMetadata: z.ZodObject<{
    operationSource: z.ZodOptional<z.ZodNullable<z.ZodEnum<["INVENTORY"]>>>;
}, "strip", z.ZodTypeAny, {
    operationSource?: "INVENTORY" | null | undefined;
}, {
    operationSource?: "INVENTORY" | null | undefined;
}>;
interface PublicEntitlementMetadata extends z.TypeOf<typeof PublicEntitlementMetadata> {
}

declare const PurchaseCondition: z.ZodObject<{
    conditionGroups: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        operator: z.ZodOptional<z.ZodNullable<z.ZodEnum<["and", "or"]>>>;
        predicates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            anyOf: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            predicateType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate", "StatisticCodePredicate"]>>>;
            value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            values?: string[] | null | undefined;
            code?: string | null | undefined;
            value?: string | null | undefined;
            name?: string | null | undefined;
            comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
            predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
            anyOf?: number | null | undefined;
        }, {
            values?: string[] | null | undefined;
            code?: string | null | undefined;
            value?: string | null | undefined;
            name?: string | null | undefined;
            comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
            predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
            anyOf?: number | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        operator?: "and" | "or" | null | undefined;
        predicates?: {
            values?: string[] | null | undefined;
            code?: string | null | undefined;
            value?: string | null | undefined;
            name?: string | null | undefined;
            comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
            predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
            anyOf?: number | null | undefined;
        }[] | null | undefined;
    }, {
        operator?: "and" | "or" | null | undefined;
        predicates?: {
            values?: string[] | null | undefined;
            code?: string | null | undefined;
            value?: string | null | undefined;
            name?: string | null | undefined;
            comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
            predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
            anyOf?: number | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    conditionGroups?: {
        operator?: "and" | "or" | null | undefined;
        predicates?: {
            values?: string[] | null | undefined;
            code?: string | null | undefined;
            value?: string | null | undefined;
            name?: string | null | undefined;
            comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
            predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
            anyOf?: number | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}, {
    conditionGroups?: {
        operator?: "and" | "or" | null | undefined;
        predicates?: {
            values?: string[] | null | undefined;
            code?: string | null | undefined;
            value?: string | null | undefined;
            name?: string | null | undefined;
            comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
            predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
            anyOf?: number | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}>;
interface PurchaseCondition extends z.TypeOf<typeof PurchaseCondition> {
}

declare const Recurring: z.ZodObject<{
    cycle: z.ZodEnum<["MONTHLY", "QUARTERLY", "WEEKLY", "YEARLY"]>;
    fixedFreeDays: z.ZodNumber;
    fixedTrialCycles: z.ZodNumber;
    graceDays: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
    fixedFreeDays: number;
    fixedTrialCycles: number;
    graceDays: number;
}, {
    cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
    fixedFreeDays: number;
    fixedTrialCycles: number;
    graceDays: number;
}>;
interface Recurring extends z.TypeOf<typeof Recurring> {
}

declare const RedeemableItem: z.ZodObject<{
    extraSubscriptionDays: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    itemId: z.ZodString;
    itemName: z.ZodString;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    itemId: string;
    itemName: string;
    extraSubscriptionDays?: number | null | undefined;
    quantity?: number | null | undefined;
}, {
    itemId: string;
    itemName: string;
    extraSubscriptionDays?: number | null | undefined;
    quantity?: number | null | undefined;
}>;
interface RedeemableItem extends z.TypeOf<typeof RedeemableItem> {
}

declare const RedeemHistoryInfo: z.ZodObject<{
    campaignId: z.ZodString;
    code: z.ZodString;
    createdAt: z.ZodString;
    id: z.ZodString;
    namespace: z.ZodString;
    orderNo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    redeemedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    code: string;
    id: string;
    createdAt: string;
    updatedAt: string;
    campaignId: string;
    userId: string;
    orderNo?: string | null | undefined;
    redeemedAt?: string | null | undefined;
}, {
    namespace: string;
    code: string;
    id: string;
    createdAt: string;
    updatedAt: string;
    campaignId: string;
    userId: string;
    orderNo?: string | null | undefined;
    redeemedAt?: string | null | undefined;
}>;
interface RedeemHistoryInfo extends z.TypeOf<typeof RedeemHistoryInfo> {
}

declare const RegionDataChange: z.ZodObject<{
    itemIdentities: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    itemIdentityType: z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>;
    regionData: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
        currencyCode: z.ZodString;
        currencyNamespace: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }>, "many">>>>;
}, "strip", z.ZodTypeAny, {
    itemIdentityType: "ITEM_ID" | "ITEM_SKU";
    itemIdentities?: string[] | null | undefined;
    regionData?: Record<string, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }[]> | null | undefined;
}, {
    itemIdentityType: "ITEM_ID" | "ITEM_SKU";
    itemIdentities?: string[] | null | undefined;
    regionData?: Record<string, {
        currencyCode: string;
        currencyNamespace: string;
        currencyType: "REAL" | "VIRTUAL";
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        discountExpireAt?: string | null | undefined;
        discountPurchaseAt?: string | null | undefined;
        discountedPrice?: number | null | undefined;
        expireAt?: string | null | undefined;
        price?: number | null | undefined;
        purchaseAt?: string | null | undefined;
        trialPrice?: number | null | undefined;
    }[]> | null | undefined;
}>;
interface RegionDataChange extends z.TypeOf<typeof RegionDataChange> {
}

declare const RegionDataItem: z.ZodObject<{
    currencyCode: z.ZodString;
    currencyNamespace: z.ZodString;
    currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
    discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    currencyCode: string;
    currencyNamespace: string;
    currencyType: "REAL" | "VIRTUAL";
    discountAmount?: number | null | undefined;
    discountPercentage?: number | null | undefined;
    discountExpireAt?: string | null | undefined;
    discountPurchaseAt?: string | null | undefined;
    discountedPrice?: number | null | undefined;
    expireAt?: string | null | undefined;
    price?: number | null | undefined;
    purchaseAt?: string | null | undefined;
    trialPrice?: number | null | undefined;
}, {
    currencyCode: string;
    currencyNamespace: string;
    currencyType: "REAL" | "VIRTUAL";
    discountAmount?: number | null | undefined;
    discountPercentage?: number | null | undefined;
    discountExpireAt?: string | null | undefined;
    discountPurchaseAt?: string | null | undefined;
    discountedPrice?: number | null | undefined;
    expireAt?: string | null | undefined;
    price?: number | null | undefined;
    purchaseAt?: string | null | undefined;
    trialPrice?: number | null | undefined;
}>;
interface RegionDataItem extends z.TypeOf<typeof RegionDataItem> {
}

declare const RegionDataItemDto: z.ZodObject<{
    currencyCode: z.ZodString;
    currencyNamespace: z.ZodString;
    currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
    discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    price: z.ZodNumber;
    purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    currencyCode: string;
    currencyNamespace: string;
    currencyType: "REAL" | "VIRTUAL";
    price: number;
    discountAmount?: number | null | undefined;
    discountPercentage?: number | null | undefined;
    discountExpireAt?: string | null | undefined;
    discountPurchaseAt?: string | null | undefined;
    expireAt?: string | null | undefined;
    purchaseAt?: string | null | undefined;
    trialPrice?: number | null | undefined;
}, {
    currencyCode: string;
    currencyNamespace: string;
    currencyType: "REAL" | "VIRTUAL";
    price: number;
    discountAmount?: number | null | undefined;
    discountPercentage?: number | null | undefined;
    discountExpireAt?: string | null | undefined;
    discountPurchaseAt?: string | null | undefined;
    expireAt?: string | null | undefined;
    purchaseAt?: string | null | undefined;
    trialPrice?: number | null | undefined;
}>;
interface RegionDataItemDto extends z.TypeOf<typeof RegionDataItemDto> {
}

declare const RequestHistory: z.ZodObject<{
    requestTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    responseBody: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    responseTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "PENDING", "SUCCESS"]>>>;
    statusCode: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
    requestTime?: string | null | undefined;
    responseBody?: Record<string, any> | null | undefined;
    responseTime?: string | null | undefined;
    statusCode?: number | null | undefined;
}, {
    status?: "FAIL" | "SUCCESS" | "PENDING" | null | undefined;
    requestTime?: string | null | undefined;
    responseBody?: Record<string, any> | null | undefined;
    responseTime?: string | null | undefined;
    statusCode?: number | null | undefined;
}>;
interface RequestHistory extends z.TypeOf<typeof RequestHistory> {
}

declare const Requirement: z.ZodObject<{
    additionals: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    directXVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    diskSpace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    graphics: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    label: z.ZodString;
    osVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    processor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ram: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    soundCard: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    label: string;
    additionals?: string | null | undefined;
    directXVersion?: string | null | undefined;
    diskSpace?: string | null | undefined;
    graphics?: string | null | undefined;
    osVersion?: string | null | undefined;
    processor?: string | null | undefined;
    ram?: string | null | undefined;
    soundCard?: string | null | undefined;
}, {
    label: string;
    additionals?: string | null | undefined;
    directXVersion?: string | null | undefined;
    diskSpace?: string | null | undefined;
    graphics?: string | null | undefined;
    osVersion?: string | null | undefined;
    processor?: string | null | undefined;
    ram?: string | null | undefined;
    soundCard?: string | null | undefined;
}>;
interface Requirement extends z.TypeOf<typeof Requirement> {
}

declare const RevocationError: z.ZodObject<{
    code: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    httpStatus: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code?: number | null | undefined;
    message?: string | null | undefined;
    httpStatus?: number | null | undefined;
}, {
    code?: number | null | undefined;
    message?: string | null | undefined;
    httpStatus?: number | null | undefined;
}>;
interface RevocationError extends z.TypeOf<typeof RevocationError> {
}

declare const RevocationHistoryInfo: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creditRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        customRevocation: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        revocationStrategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        skipped: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
        walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        currencyCode?: string | null | undefined;
        reason?: string | null | undefined;
        amount?: number | null | undefined;
        balanceOrigin?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
        walletId?: string | null | undefined;
    }, {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        currencyCode?: string | null | undefined;
        reason?: string | null | undefined;
        amount?: number | null | undefined;
        balanceOrigin?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
        walletId?: string | null | undefined;
    }>, "many">>>;
    entitlementRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        customRevocation: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        revocationStrategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        skipped: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
    }, "strip", z.ZodTypeAny, {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        entitlementId?: string | null | undefined;
        itemSku?: string | null | undefined;
        reason?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
    }, {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        entitlementId?: string | null | undefined;
        itemSku?: string | null | undefined;
        reason?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
    }>, "many">>>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodType<ItemRevocation, z.ZodTypeDef, ItemRevocation>, "many">>>;
    meta: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    revocationErrors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        code: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        httpStatus: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    }, {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    }>, "many">>>;
    revokeEntries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
            currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            namespace?: string | null | undefined;
            currencyCode?: string | null | undefined;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        }, {
            namespace?: string | null | undefined;
            currencyCode?: string | null | undefined;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        }>>>;
        entitlement: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            entitlementId?: string | null | undefined;
        }, {
            entitlementId?: string | null | undefined;
        }>>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
            itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
            origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        }, "strip", z.ZodTypeAny, {
            origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            itemIdentity?: string | null | undefined;
            itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
        }, {
            origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            itemIdentity?: string | null | undefined;
            itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
        }>>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ENTITLEMENT", "ITEM"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "CURRENCY" | "ENTITLEMENT" | null | undefined;
        quantity?: number | null | undefined;
        entitlement?: {
            entitlementId?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace?: string | null | undefined;
            currencyCode?: string | null | undefined;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        } | null | undefined;
        item?: {
            origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            itemIdentity?: string | null | undefined;
            itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "CURRENCY" | "ENTITLEMENT" | null | undefined;
        quantity?: number | null | undefined;
        entitlement?: {
            entitlementId?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace?: string | null | undefined;
            currencyCode?: string | null | undefined;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        } | null | undefined;
        item?: {
            origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            itemIdentity?: string | null | undefined;
            itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
        } | null | undefined;
    }>, "many">>>;
    source: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    status?: "FAIL" | "SUCCESS" | null | undefined;
    id?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    userId?: string | null | undefined;
    creditRevocations?: {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        currencyCode?: string | null | undefined;
        reason?: string | null | undefined;
        amount?: number | null | undefined;
        balanceOrigin?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
        walletId?: string | null | undefined;
    }[] | null | undefined;
    entitlementRevocations?: {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        entitlementId?: string | null | undefined;
        itemSku?: string | null | undefined;
        reason?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
    }[] | null | undefined;
    itemRevocations?: ItemRevocation[] | null | undefined;
    transactionId?: string | null | undefined;
    source?: string | null | undefined;
    meta?: Record<string, any> | null | undefined;
    revocationErrors?: {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    }[] | null | undefined;
    revokeEntries?: {
        type?: "ITEM" | "CURRENCY" | "ENTITLEMENT" | null | undefined;
        quantity?: number | null | undefined;
        entitlement?: {
            entitlementId?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace?: string | null | undefined;
            currencyCode?: string | null | undefined;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        } | null | undefined;
        item?: {
            origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            itemIdentity?: string | null | undefined;
            itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}, {
    namespace?: string | null | undefined;
    status?: "FAIL" | "SUCCESS" | null | undefined;
    id?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    userId?: string | null | undefined;
    creditRevocations?: {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        currencyCode?: string | null | undefined;
        reason?: string | null | undefined;
        amount?: number | null | undefined;
        balanceOrigin?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
        walletId?: string | null | undefined;
    }[] | null | undefined;
    entitlementRevocations?: {
        status?: "FAIL" | "SUCCESS" | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        entitlementId?: string | null | undefined;
        itemSku?: string | null | undefined;
        reason?: string | null | undefined;
        customRevocation?: Record<string, any> | null | undefined;
        revocationStrategy?: string | null | undefined;
        skipped?: boolean | null | undefined;
    }[] | null | undefined;
    itemRevocations?: ItemRevocation[] | null | undefined;
    transactionId?: string | null | undefined;
    source?: string | null | undefined;
    meta?: Record<string, any> | null | undefined;
    revocationErrors?: {
        code?: number | null | undefined;
        message?: string | null | undefined;
        httpStatus?: number | null | undefined;
    }[] | null | undefined;
    revokeEntries?: {
        type?: "ITEM" | "CURRENCY" | "ENTITLEMENT" | null | undefined;
        quantity?: number | null | undefined;
        entitlement?: {
            entitlementId?: string | null | undefined;
        } | null | undefined;
        currency?: {
            namespace?: string | null | undefined;
            currencyCode?: string | null | undefined;
            balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        } | null | undefined;
        item?: {
            origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
            itemIdentity?: string | null | undefined;
            itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
}>;
interface RevocationHistoryInfo extends z.TypeOf<typeof RevocationHistoryInfo> {
}

declare const RevokeCurrency: z.ZodObject<{
    balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    currencyCode?: string | null | undefined;
    balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
}, {
    namespace?: string | null | undefined;
    currencyCode?: string | null | undefined;
    balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
}>;
interface RevokeCurrency extends z.TypeOf<typeof RevokeCurrency> {
}

declare const RevokeEntitlement: z.ZodObject<{
    entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    entitlementId?: string | null | undefined;
}, {
    entitlementId?: string | null | undefined;
}>;
interface RevokeEntitlement extends z.TypeOf<typeof RevokeEntitlement> {
}

declare const RevokeEntitlementPayload: z.ZodObject<{
    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    entitlementId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    entitlementId: string;
    count?: number | null | undefined;
}, {
    entitlementId: string;
    count?: number | null | undefined;
}>;
interface RevokeEntitlementPayload extends z.TypeOf<typeof RevokeEntitlementPayload> {
}

declare const RevokeEntry: z.ZodObject<{
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace?: string | null | undefined;
        currencyCode?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    }, {
        namespace?: string | null | undefined;
        currencyCode?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    }>>>;
    entitlement: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        entitlementId?: string | null | undefined;
    }, {
        entitlementId?: string | null | undefined;
    }>>>;
    item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    }, "strip", z.ZodTypeAny, {
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }, {
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }>>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ENTITLEMENT", "ITEM"]>>>;
}, "strip", z.ZodTypeAny, {
    type?: "ITEM" | "CURRENCY" | "ENTITLEMENT" | null | undefined;
    quantity?: number | null | undefined;
    entitlement?: {
        entitlementId?: string | null | undefined;
    } | null | undefined;
    currency?: {
        namespace?: string | null | undefined;
        currencyCode?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    } | null | undefined;
    item?: {
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    } | null | undefined;
}, {
    type?: "ITEM" | "CURRENCY" | "ENTITLEMENT" | null | undefined;
    quantity?: number | null | undefined;
    entitlement?: {
        entitlementId?: string | null | undefined;
    } | null | undefined;
    currency?: {
        namespace?: string | null | undefined;
        currencyCode?: string | null | undefined;
        balanceOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    } | null | undefined;
    item?: {
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemIdentity?: string | null | undefined;
        itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    } | null | undefined;
}>;
interface RevokeEntry extends z.TypeOf<typeof RevokeEntry> {
}

declare const RevokeItem: z.ZodObject<{
    entitlementOrigin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    itemIdentity: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemIdentityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
}, "strip", z.ZodTypeAny, {
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
}, {
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    entitlementOrigin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    itemIdentity?: string | null | undefined;
    itemIdentityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
}>;
interface RevokeItem extends z.TypeOf<typeof RevokeItem> {
}

declare const RevokeItemSummary: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    revokeStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
}, "strip", z.ZodTypeAny, {
    itemId?: string | null | undefined;
    itemType?: string | null | undefined;
    itemSku?: string | null | undefined;
    revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
}, {
    itemId?: string | null | undefined;
    itemType?: string | null | undefined;
    itemSku?: string | null | undefined;
    revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
}>;
interface RevokeItemSummary extends z.TypeOf<typeof RevokeItemSummary> {
}

declare const RevokeResult: z.ZodObject<{
    revokeItemSummaries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        revokeStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
    }, "strip", z.ZodTypeAny, {
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
        revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
    }, {
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
        revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
    }>, "many">>>;
    reward: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            namespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            currencyCode: string;
        }, {
            namespace: string;
            currencyCode: string;
        }>>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }>>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }>>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
}, "strip", z.ZodTypeAny, {
    status?: "COMPLETED" | "SKIPPED" | null | undefined;
    reward?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    } | null | undefined;
    revokeItemSummaries?: {
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
        revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
    }[] | null | undefined;
}, {
    status?: "COMPLETED" | "SKIPPED" | null | undefined;
    reward?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    } | null | undefined;
    revokeItemSummaries?: {
        itemId?: string | null | undefined;
        itemType?: string | null | undefined;
        itemSku?: string | null | undefined;
        revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
    }[] | null | undefined;
}>;
interface RevokeResult extends z.TypeOf<typeof RevokeResult> {
}

declare const RewardCondition: z.ZodObject<{
    condition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    conditionName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    eventName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rewardItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        identityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        duration?: number | null | undefined;
        identityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }, {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        duration?: number | null | undefined;
        identityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    conditionName?: string | null | undefined;
    condition?: string | null | undefined;
    eventName?: string | null | undefined;
    rewardItems?: {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        duration?: number | null | undefined;
        identityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }[] | null | undefined;
}, {
    conditionName?: string | null | undefined;
    condition?: string | null | undefined;
    eventName?: string | null | undefined;
    rewardItems?: {
        endDate?: string | null | undefined;
        itemId?: string | null | undefined;
        quantity?: number | null | undefined;
        sku?: string | null | undefined;
        duration?: number | null | undefined;
        identityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
    }[] | null | undefined;
}>;
interface RewardCondition extends z.TypeOf<typeof RewardCondition> {
}

declare const RewardItem: z.ZodObject<{
    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    identityType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ITEM_ID", "ITEM_SKU"]>>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    endDate?: string | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    sku?: string | null | undefined;
    duration?: number | null | undefined;
    identityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
}, {
    endDate?: string | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    sku?: string | null | undefined;
    duration?: number | null | undefined;
    identityType?: "ITEM_ID" | "ITEM_SKU" | null | undefined;
}>;
interface RewardItem extends z.TypeOf<typeof RewardItem> {
}

declare const RewardMigrationResult: z.ZodObject<{
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
    syncedCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    syncedEntitlementIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    status?: "FAIL" | "SUCCESS" | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    sku?: string | null | undefined;
    reason?: string | null | undefined;
    syncedCount?: number | null | undefined;
    syncedEntitlementIds?: string[] | null | undefined;
}, {
    status?: "FAIL" | "SUCCESS" | null | undefined;
    itemId?: string | null | undefined;
    quantity?: number | null | undefined;
    sku?: string | null | undefined;
    reason?: string | null | undefined;
    syncedCount?: number | null | undefined;
    syncedEntitlementIds?: string[] | null | undefined;
}>;
interface RewardMigrationResult extends z.TypeOf<typeof RewardMigrationResult> {
}

declare const SaleConfig: z.ZodObject<{
    currencyCode: z.ZodString;
    price: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    currencyCode: string;
    price: number;
}, {
    currencyCode: string;
    price: number;
}>;
interface SaleConfig extends z.TypeOf<typeof SaleConfig> {
}

declare const SectionInfo: z.ZodObject<{
    active: z.ZodBoolean;
    createdAt: z.ZodString;
    currentRotationExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    currentRotationItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
        baseAppId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        boothName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        boundItemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        categoryPath: z.ZodString;
        clazz: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodString;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        displayOrder: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        entitlementType: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
        ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        flexible: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        fresh: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        images: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            as: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            caption: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            height: z.ZodNumber;
            imageUrl: z.ZodString;
            smallImageUrl: z.ZodString;
            width: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            imageUrl: string;
            smallImageUrl: string;
            width: number;
            as?: string | null | undefined;
            caption?: string | null | undefined;
        }, {
            height: number;
            imageUrl: string;
            smallImageUrl: string;
            width: number;
            as?: string | null | undefined;
            caption?: string | null | undefined;
        }>, "many">>>;
        inventoryConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            customAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            serverCustomAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            slotUsed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        }, {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        }>>>;
        itemId: z.ZodString;
        itemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        itemQty: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
        itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
        language: z.ZodString;
        listable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        lootBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            rewardCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }, {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }>, "many">>>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
                weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }, {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }>, "many">>>;
            rollFunction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "DEFAULT"]>>>;
        }, "strip", z.ZodTypeAny, {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        }, {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        }>>>;
        maxCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxCountPerUser: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        name: z.ZodString;
        namespace: z.ZodString;
        optionBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            boxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        }, {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        }>>>;
        purchasable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        purchaseCondition: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            conditionGroups: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                operator: z.ZodOptional<z.ZodNullable<z.ZodEnum<["and", "or"]>>>;
                predicates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    anyOf: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    comparison: z.ZodOptional<z.ZodNullable<z.ZodEnum<["excludes", "includes", "is", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "isNot"]>>>;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    predicateType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate", "StatisticCodePredicate"]>>>;
                    value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
                }, "strip", z.ZodTypeAny, {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }, {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }>, "many">>>;
            }, "strip", z.ZodTypeAny, {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }, {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            conditionGroups?: {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }, {
            conditionGroups?: {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }>>>;
        recurring: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            cycle: z.ZodEnum<["MONTHLY", "QUARTERLY", "WEEKLY", "YEARLY"]>;
            fixedFreeDays: z.ZodNumber;
            fixedTrialCycles: z.ZodNumber;
            graceDays: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        }, {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        }>>>;
        region: z.ZodString;
        regionData: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            currencyCode: z.ZodString;
            currencyNamespace: z.ZodString;
            currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
            discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }, {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }>, "many">>>;
        saleConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            price: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            price: number;
        }, {
            currencyCode: string;
            price: number;
        }>>>;
        seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
        sectionExclusive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        sellable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        status: z.ZodEnum<["ACTIVE", "INACTIVE"]>;
        tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        targetCurrencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targetItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targetNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        thumbnailUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodString;
        updatedAt: z.ZodString;
        useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        name: string;
        categoryPath: string;
        itemId: string;
        createdAt: string;
        updatedAt: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        tags?: string[] | null | undefined;
        boothName?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
        clazz?: string | null | undefined;
        ext?: Record<string, any> | null | undefined;
        regionData?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }[] | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
        boundItemIds?: string[] | null | undefined;
        displayOrder?: number | null | undefined;
        images?: {
            height: number;
            imageUrl: string;
            smallImageUrl: string;
            width: number;
            as?: string | null | undefined;
            caption?: string | null | undefined;
        }[] | null | undefined;
        purchaseCondition?: {
            conditionGroups?: {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        fresh?: boolean | null | undefined;
    }, {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        name: string;
        categoryPath: string;
        itemId: string;
        createdAt: string;
        updatedAt: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        tags?: string[] | null | undefined;
        boothName?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
        clazz?: string | null | undefined;
        ext?: Record<string, any> | null | undefined;
        regionData?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }[] | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
        boundItemIds?: string[] | null | undefined;
        displayOrder?: number | null | undefined;
        images?: {
            height: number;
            imageUrl: string;
            smallImageUrl: string;
            width: number;
            as?: string | null | undefined;
            caption?: string | null | undefined;
        }[] | null | undefined;
        purchaseCondition?: {
            conditionGroups?: {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        fresh?: boolean | null | undefined;
    }>, "many">>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayOrder: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    endDate: z.ZodString;
    ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodString;
    namespace: z.ZodString;
    sectionId: z.ZodString;
    startDate: z.ZodString;
    title: z.ZodString;
    updatedAt: z.ZodString;
    viewId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    endDate: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    sectionId: string;
    title: string;
    viewId: string;
    startDate: string;
    active: boolean;
    description?: string | null | undefined;
    ext?: Record<string, any> | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
    displayOrder?: number | null | undefined;
    currentRotationExpireAt?: string | null | undefined;
    currentRotationItems?: {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        name: string;
        categoryPath: string;
        itemId: string;
        createdAt: string;
        updatedAt: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        tags?: string[] | null | undefined;
        boothName?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
        clazz?: string | null | undefined;
        ext?: Record<string, any> | null | undefined;
        regionData?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }[] | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
        boundItemIds?: string[] | null | undefined;
        displayOrder?: number | null | undefined;
        images?: {
            height: number;
            imageUrl: string;
            smallImageUrl: string;
            width: number;
            as?: string | null | undefined;
            caption?: string | null | undefined;
        }[] | null | undefined;
        purchaseCondition?: {
            conditionGroups?: {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        fresh?: boolean | null | undefined;
    }[] | null | undefined;
}, {
    namespace: string;
    endDate: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    sectionId: string;
    title: string;
    viewId: string;
    startDate: string;
    active: boolean;
    description?: string | null | undefined;
    ext?: Record<string, any> | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
    displayOrder?: number | null | undefined;
    currentRotationExpireAt?: string | null | undefined;
    currentRotationItems?: {
        namespace: string;
        status: "ACTIVE" | "INACTIVE";
        name: string;
        categoryPath: string;
        itemId: string;
        createdAt: string;
        updatedAt: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        tags?: string[] | null | undefined;
        boothName?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
        clazz?: string | null | undefined;
        ext?: Record<string, any> | null | undefined;
        regionData?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }[] | null | undefined;
        localExt?: Record<string, any> | null | undefined;
        longDescription?: string | null | undefined;
        boundItemIds?: string[] | null | undefined;
        displayOrder?: number | null | undefined;
        images?: {
            height: number;
            imageUrl: string;
            smallImageUrl: string;
            width: number;
            as?: string | null | undefined;
            caption?: string | null | undefined;
        }[] | null | undefined;
        purchaseCondition?: {
            conditionGroups?: {
                operator?: "and" | "or" | null | undefined;
                predicates?: {
                    values?: string[] | null | undefined;
                    code?: string | null | undefined;
                    value?: string | null | undefined;
                    name?: string | null | undefined;
                    comparison?: "includes" | "excludes" | "is" | "isGreaterThan" | "isGreaterThanOrEqual" | "isLessThan" | "isLessThanOrEqual" | "isNot" | null | undefined;
                    predicateType?: "EntitlementPredicate" | "SeasonPassPredicate" | "SeasonTierPredicate" | "StatisticCodePredicate" | null | undefined;
                    anyOf?: number | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        fresh?: boolean | null | undefined;
    }[] | null | undefined;
}>;
interface SectionInfo extends z.TypeOf<typeof SectionInfo> {
}

declare const SectionItem: z.ZodObject<{
    id: z.ZodString;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    sku?: string | null | undefined;
}, {
    id: string;
    sku?: string | null | undefined;
}>;
interface SectionItem extends z.TypeOf<typeof SectionItem> {
}

declare const SimpleDlcRewardItem: z.ZodObject<{
    itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemName?: string | null | undefined;
}, {
    itemName?: string | null | undefined;
}>;
interface SimpleDlcRewardItem extends z.TypeOf<typeof SimpleDlcRewardItem> {
}

declare const SimpleEntitlement: z.ZodObject<{
    entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    itemNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    origin?: string | null | undefined;
    name?: string | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    entitlementId?: string | null | undefined;
    useCount?: number | null | undefined;
    grantedCode?: string | null | undefined;
    itemNamespace?: string | null | undefined;
}, {
    namespace?: string | null | undefined;
    origin?: string | null | undefined;
    name?: string | null | undefined;
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    entitlementId?: string | null | undefined;
    useCount?: number | null | undefined;
    grantedCode?: string | null | undefined;
    itemNamespace?: string | null | undefined;
}>;
interface SimpleEntitlement extends z.TypeOf<typeof SimpleEntitlement> {
}

declare const SimpleUserDlc: z.ZodObject<{
    dlcId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    dlcId?: string | null | undefined;
}, {
    dlcId?: string | null | undefined;
}>;
interface SimpleUserDlc extends z.TypeOf<typeof SimpleUserDlc> {
}

declare const SimpleUserDlcRewardContent: z.ZodObject<{
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
    }, {
        namespace: string;
        currencyCode: string;
    }>>>;
    item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        itemName?: string | null | undefined;
    }, {
        itemName?: string | null | undefined;
    }>>>;
    obtainedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
}, "strip", z.ZodTypeAny, {
    type?: "ITEM" | "CURRENCY" | null | undefined;
    quantity?: number | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
    } | null | undefined;
    item?: {
        itemName?: string | null | undefined;
    } | null | undefined;
    obtainedAt?: string | null | undefined;
}, {
    type?: "ITEM" | "CURRENCY" | null | undefined;
    quantity?: number | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
    } | null | undefined;
    item?: {
        itemName?: string | null | undefined;
    } | null | undefined;
    obtainedAt?: string | null | undefined;
}>;
interface SimpleUserDlcRewardContent extends z.TypeOf<typeof SimpleUserDlcRewardContent> {
}

declare const SimpleWallet: z.ZodObject<{
    balance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    timeLimitedBalances: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        balance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        balanceSource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        expireAt?: string | null | undefined;
        balance?: number | null | undefined;
        balanceSource?: string | null | undefined;
    }, {
        expireAt?: string | null | undefined;
        balance?: number | null | undefined;
        balanceSource?: string | null | undefined;
    }>, "many">>>;
    walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    currencyCode?: string | null | undefined;
    balanceOrigin?: string | null | undefined;
    walletId?: string | null | undefined;
    balance?: number | null | undefined;
    timeLimitedBalances?: {
        expireAt?: string | null | undefined;
        balance?: number | null | undefined;
        balanceSource?: string | null | undefined;
    }[] | null | undefined;
}, {
    currencyCode?: string | null | undefined;
    balanceOrigin?: string | null | undefined;
    walletId?: string | null | undefined;
    balance?: number | null | undefined;
    timeLimitedBalances?: {
        expireAt?: string | null | undefined;
        balance?: number | null | undefined;
        balanceSource?: string | null | undefined;
    }[] | null | undefined;
}>;
interface SimpleWallet extends z.TypeOf<typeof SimpleWallet> {
}

declare const Slide: z.ZodObject<{
    alt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    previewUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    thumbnailUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["image", "video"]>>>;
    url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    videoSource: z.ZodOptional<z.ZodNullable<z.ZodEnum<["generic", "vimeo", "youtube"]>>>;
}, "strip", z.ZodTypeAny, {
    url?: string | null | undefined;
    type?: "image" | "video" | null | undefined;
    thumbnailUrl?: string | null | undefined;
    alt?: string | null | undefined;
    previewUrl?: string | null | undefined;
    videoSource?: "generic" | "vimeo" | "youtube" | null | undefined;
}, {
    url?: string | null | undefined;
    type?: "image" | "video" | null | undefined;
    thumbnailUrl?: string | null | undefined;
    alt?: string | null | undefined;
    previewUrl?: string | null | undefined;
    videoSource?: "generic" | "vimeo" | "youtube" | null | undefined;
}>;
interface Slide extends z.TypeOf<typeof Slide> {
}

declare const StackableEntitlementInfo: z.ZodObject<{
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
    clazz: z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>;
    collectionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    grantedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    grantedCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    itemId: z.ZodString;
    itemNamespace: z.ZodString;
    itemSnapshot: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        appType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["DEMO", "DLC", "GAME", "SOFTWARE"]>>>;
        baseAppId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        boothName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        entitlementType: z.ZodEnum<["CONSUMABLE", "DURABLE"]>;
        features: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        flexible: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        inventoryConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            customAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            serverCustomAttributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            slotUsed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        }, {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        }>>>;
        itemId: z.ZodString;
        itemIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        itemQty: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
        itemType: z.ZodEnum<["APP", "BUNDLE", "CODE", "COINS", "EXTENSION", "INGAMEITEM", "LOOTBOX", "MEDIA", "OPTIONBOX", "SEASON", "SUBSCRIPTION"]>;
        language: z.ZodString;
        listable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        lootBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            rewardCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                lootBoxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }, {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }>, "many">>>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                odds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PROBABILITY_GROUP", "REWARD", "REWARD_GROUP"]>>>;
                weight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }, {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }>, "many">>>;
            rollFunction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CUSTOM", "DEFAULT"]>>>;
        }, "strip", z.ZodTypeAny, {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        }, {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        }>>>;
        maxCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxCountPerUser: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        name: z.ZodString;
        namespace: z.ZodString;
        optionBoxConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            boxItems: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                endDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }, {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        }, {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        }>>>;
        purchasable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        recurring: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            cycle: z.ZodEnum<["MONTHLY", "QUARTERLY", "WEEKLY", "YEARLY"]>;
            fixedFreeDays: z.ZodNumber;
            fixedTrialCycles: z.ZodNumber;
            graceDays: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        }, {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        }>>>;
        region: z.ZodString;
        regionDataItem: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            currencyNamespace: z.ZodString;
            currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
            discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountExpireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountPercentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            discountPurchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            discountedPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            purchaseAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            trialPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }, {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        }>>>;
        saleConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            price: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currencyCode: string;
            price: number;
        }, {
            currencyCode: string;
            price: number;
        }>>>;
        seasonType: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PASS", "TIER"]>>>;
        sectionExclusive: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        sellable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        targetCurrencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targetItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targetNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        thumbnailUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodString;
        updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    }, {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    }>>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    noOrigin: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
    platformAvailable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    source: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ACHIEVEMENT", "GIFT", "IAP", "OTHER", "PROMOTION", "PURCHASE", "REDEEM_CODE", "REFERRAL_BONUS", "REWARD"]>>>;
    stackable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    stackedUseCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    startDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["ACTIVE", "CONSUMED", "INACTIVE", "REVOKED", "SOLD"]>;
    storeId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CONSUMABLE", "DURABLE"]>>>;
    updatedAt: z.ZodString;
    useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "ACTIVE" | "INACTIVE" | "REVOKED" | "CONSUMED" | "SOLD";
    id: string;
    itemId: string;
    createdAt: string;
    updatedAt: string;
    itemNamespace: string;
    clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
    type?: "CONSUMABLE" | "DURABLE" | null | undefined;
    endDate?: string | null | undefined;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    name?: string | null | undefined;
    stackable?: boolean | null | undefined;
    userId?: string | null | undefined;
    sku?: string | null | undefined;
    storeId?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    features?: string[] | null | undefined;
    collectionId?: string | null | undefined;
    grantedAt?: string | null | undefined;
    itemSnapshot?: {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    } | null | undefined;
    noOrigin?: boolean | null | undefined;
    startDate?: string | null | undefined;
    grantedCode?: string | null | undefined;
    source?: "OTHER" | "REWARD" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | null | undefined;
    platformAvailable?: boolean | null | undefined;
    stackedUseCount?: number | null | undefined;
}, {
    namespace: string;
    status: "ACTIVE" | "INACTIVE" | "REVOKED" | "CONSUMED" | "SOLD";
    id: string;
    itemId: string;
    createdAt: string;
    updatedAt: string;
    itemNamespace: string;
    clazz: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT";
    type?: "CONSUMABLE" | "DURABLE" | null | undefined;
    endDate?: string | null | undefined;
    origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
    name?: string | null | undefined;
    stackable?: boolean | null | undefined;
    userId?: string | null | undefined;
    sku?: string | null | undefined;
    storeId?: string | null | undefined;
    useCount?: number | null | undefined;
    appId?: string | null | undefined;
    appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
    features?: string[] | null | undefined;
    collectionId?: string | null | undefined;
    grantedAt?: string | null | undefined;
    itemSnapshot?: {
        namespace: string;
        name: string;
        itemId: string;
        itemType: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        title: string;
        entitlementType: "CONSUMABLE" | "DURABLE";
        language: string;
        region: string;
        stackable?: boolean | null | undefined;
        description?: string | null | undefined;
        boothName?: string | null | undefined;
        createdAt?: string | null | undefined;
        updatedAt?: string | null | undefined;
        sku?: string | null | undefined;
        useCount?: number | null | undefined;
        appId?: string | null | undefined;
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE" | null | undefined;
        baseAppId?: string | null | undefined;
        features?: string[] | null | undefined;
        flexible?: boolean | null | undefined;
        inventoryConfig?: {
            customAttributes?: Record<string, any> | null | undefined;
            serverCustomAttributes?: Record<string, any> | null | undefined;
            slotUsed?: number | null | undefined;
        } | null | undefined;
        itemIds?: string[] | null | undefined;
        itemQty?: Record<string, number> | null | undefined;
        listable?: boolean | null | undefined;
        lootBoxConfig?: {
            rewards?: {
                type?: "PROBABILITY_GROUP" | "REWARD" | "REWARD_GROUP" | null | undefined;
                name?: string | null | undefined;
                lootBoxItems?: {
                    endDate?: string | null | undefined;
                    itemId?: string | null | undefined;
                    itemType?: string | null | undefined;
                    count?: number | null | undefined;
                    itemSku?: string | null | undefined;
                    duration?: number | null | undefined;
                }[] | null | undefined;
                odds?: number | null | undefined;
                weight?: number | null | undefined;
            }[] | null | undefined;
            rewardCount?: number | null | undefined;
            rollFunction?: "CUSTOM" | "DEFAULT" | null | undefined;
        } | null | undefined;
        maxCount?: number | null | undefined;
        maxCountPerUser?: number | null | undefined;
        optionBoxConfig?: {
            boxItems?: {
                endDate?: string | null | undefined;
                itemId?: string | null | undefined;
                itemType?: string | null | undefined;
                count?: number | null | undefined;
                itemSku?: string | null | undefined;
                duration?: number | null | undefined;
            }[] | null | undefined;
        } | null | undefined;
        purchasable?: boolean | null | undefined;
        recurring?: {
            cycle: "MONTHLY" | "QUARTERLY" | "WEEKLY" | "YEARLY";
            fixedFreeDays: number;
            fixedTrialCycles: number;
            graceDays: number;
        } | null | undefined;
        regionDataItem?: {
            currencyCode: string;
            currencyNamespace: string;
            currencyType: "REAL" | "VIRTUAL";
            discountAmount?: number | null | undefined;
            discountPercentage?: number | null | undefined;
            discountExpireAt?: string | null | undefined;
            discountPurchaseAt?: string | null | undefined;
            discountedPrice?: number | null | undefined;
            expireAt?: string | null | undefined;
            price?: number | null | undefined;
            purchaseAt?: string | null | undefined;
            trialPrice?: number | null | undefined;
        } | null | undefined;
        saleConfig?: {
            currencyCode: string;
            price: number;
        } | null | undefined;
        seasonType?: "PASS" | "TIER" | null | undefined;
        sectionExclusive?: boolean | null | undefined;
        sellable?: boolean | null | undefined;
        targetCurrencyCode?: string | null | undefined;
        targetItemId?: string | null | undefined;
        targetNamespace?: string | null | undefined;
        thumbnailUrl?: string | null | undefined;
    } | null | undefined;
    noOrigin?: boolean | null | undefined;
    startDate?: string | null | undefined;
    grantedCode?: string | null | undefined;
    source?: "OTHER" | "REWARD" | "ACHIEVEMENT" | "GIFT" | "IAP" | "PROMOTION" | "PURCHASE" | "REDEEM_CODE" | "REFERRAL_BONUS" | null | undefined;
    platformAvailable?: boolean | null | undefined;
    stackedUseCount?: number | null | undefined;
}>;
interface StackableEntitlementInfo extends z.TypeOf<typeof StackableEntitlementInfo> {
}

declare const SteamAchievement: z.ZodObject<{
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    value: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    value?: number | null | undefined;
    id?: string | null | undefined;
}, {
    value?: number | null | undefined;
    id?: string | null | undefined;
}>;
interface SteamAchievement extends z.TypeOf<typeof SteamAchievement> {
}

declare const StreamEventBody: z.ZodObject<{
    account: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    additionalData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        entitlement: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            clientTransaction: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                amountConsumed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                clientTransactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }, {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }>, "many">>>;
            entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            usageCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            clientTransaction?: {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }[] | null | undefined;
            entitlementId?: string | null | undefined;
            usageCount?: number | null | undefined;
        }, {
            clientTransaction?: {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }[] | null | undefined;
            entitlementId?: string | null | undefined;
            usageCount?: number | null | undefined;
        }>, "many">>>;
        purpose: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        entitlement?: {
            clientTransaction?: {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }[] | null | undefined;
            entitlementId?: string | null | undefined;
            usageCount?: number | null | undefined;
        }[] | null | undefined;
        purpose?: string | null | undefined;
    }, {
        entitlement?: {
            clientTransaction?: {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }[] | null | undefined;
            entitlementId?: string | null | undefined;
            usageCount?: number | null | undefined;
        }[] | null | undefined;
        purpose?: string | null | undefined;
    }>>>;
    originalTitleName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentProductSKU: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    purchaseDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sourceOrderItemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    titleName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    account?: string | null | undefined;
    additionalData?: {
        entitlement?: {
            clientTransaction?: {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }[] | null | undefined;
            entitlementId?: string | null | undefined;
            usageCount?: number | null | undefined;
        }[] | null | undefined;
        purpose?: string | null | undefined;
    } | null | undefined;
    originalTitleName?: string | null | undefined;
    paymentProductSKU?: string | null | undefined;
    purchaseDate?: string | null | undefined;
    sourceOrderItemId?: string | null | undefined;
    titleName?: string | null | undefined;
}, {
    account?: string | null | undefined;
    additionalData?: {
        entitlement?: {
            clientTransaction?: {
                amountConsumed?: number | null | undefined;
                clientTransactionId?: string | null | undefined;
            }[] | null | undefined;
            entitlementId?: string | null | undefined;
            usageCount?: number | null | undefined;
        }[] | null | undefined;
        purpose?: string | null | undefined;
    } | null | undefined;
    originalTitleName?: string | null | undefined;
    paymentProductSKU?: string | null | undefined;
    purchaseDate?: string | null | undefined;
    sourceOrderItemId?: string | null | undefined;
    titleName?: string | null | undefined;
}>;
interface StreamEventBody extends z.TypeOf<typeof StreamEventBody> {
}

declare const SubItemAvailablePrice: z.ZodObject<{
    discountedPrice: z.ZodNumber;
    itemId: z.ZodString;
    itemName: z.ZodString;
    itemSku: z.ZodString;
    owned: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    price: z.ZodNumber;
    quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    itemId: string;
    itemName: string;
    itemSku: string;
    discountedPrice: number;
    price: number;
    quantity?: number | null | undefined;
    owned?: boolean | null | undefined;
}, {
    itemId: string;
    itemName: string;
    itemSku: string;
    discountedPrice: number;
    price: number;
    quantity?: number | null | undefined;
    owned?: boolean | null | undefined;
}>;
interface SubItemAvailablePrice extends z.TypeOf<typeof SubItemAvailablePrice> {
}

declare const SubscriptionActivityInfo: z.ZodObject<{
    action: z.ZodEnum<["CANCEL", "CHANGE_BILLING_ACCOUNT", "GRANT_DAYS", "IMMEDIATE_CANCEL", "RESUBSCRIBE", "SUBSCRIBE"]>;
    chargedCycles: z.ZodNumber;
    createdAt: z.ZodString;
    currentCycle: z.ZodNumber;
    grantDays: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    inFixedCycleTrial: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    inFixedFreeDays: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    namespace: z.ZodString;
    operator: z.ZodString;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subscribedBy: z.ZodEnum<["PLATFORM", "USER"]>;
    subscriptionId: z.ZodString;
    trialedCycles: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    action: "CANCEL" | "CHANGE_BILLING_ACCOUNT" | "GRANT_DAYS" | "IMMEDIATE_CANCEL" | "RESUBSCRIBE" | "SUBSCRIBE";
    createdAt: string;
    updatedAt: string;
    userId: string;
    operator: string;
    subscribedBy: "PLATFORM" | "USER";
    subscriptionId: string;
    chargedCycles: number;
    currentCycle: number;
    reason?: string | null | undefined;
    grantDays?: number | null | undefined;
    inFixedCycleTrial?: boolean | null | undefined;
    inFixedFreeDays?: boolean | null | undefined;
    trialedCycles?: number | null | undefined;
}, {
    namespace: string;
    action: "CANCEL" | "CHANGE_BILLING_ACCOUNT" | "GRANT_DAYS" | "IMMEDIATE_CANCEL" | "RESUBSCRIBE" | "SUBSCRIBE";
    createdAt: string;
    updatedAt: string;
    userId: string;
    operator: string;
    subscribedBy: "PLATFORM" | "USER";
    subscriptionId: string;
    chargedCycles: number;
    currentCycle: number;
    reason?: string | null | undefined;
    grantDays?: number | null | undefined;
    inFixedCycleTrial?: boolean | null | undefined;
    inFixedFreeDays?: boolean | null | undefined;
    trialedCycles?: number | null | undefined;
}>;
interface SubscriptionActivityInfo extends z.TypeOf<typeof SubscriptionActivityInfo> {
}

declare const SubscriptionSummary: z.ZodObject<{
    currentPeriodEnd: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    currentPeriodStart: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    itemId: z.ZodString;
    namespace: z.ZodString;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["ACTIVE", "CANCELLED", "EXPIRED", "INIT"]>;
    subscribedBy: z.ZodOptional<z.ZodNullable<z.ZodEnum<["PLATFORM", "USER"]>>>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "ACTIVE" | "INIT" | "CANCELLED" | "EXPIRED";
    id: string;
    itemId: string;
    userId: string;
    sku?: string | null | undefined;
    currentPeriodEnd?: string | null | undefined;
    currentPeriodStart?: string | null | undefined;
    subscribedBy?: "PLATFORM" | "USER" | null | undefined;
}, {
    namespace: string;
    status: "ACTIVE" | "INIT" | "CANCELLED" | "EXPIRED";
    id: string;
    itemId: string;
    userId: string;
    sku?: string | null | undefined;
    currentPeriodEnd?: string | null | undefined;
    currentPeriodStart?: string | null | undefined;
    subscribedBy?: "PLATFORM" | "USER" | null | undefined;
}>;
interface SubscriptionSummary extends z.TypeOf<typeof SubscriptionSummary> {
}

declare const ThirdPartySubscriptionTransactionHistoryInfo: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expiredAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id: z.ZodString;
    lastTransactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    operator: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["ACTIVE", "BILLING_RETRY_PERIOD", "CANCELED", "EXPIRED", "IN_GRACE_PERIOD", "ON_HOLD", "PAUSED", "PENDING", "REVOKED", "UNKNOWN"]>;
    subscriptionProductId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    thirdPartySubscriptionId: z.ZodString;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: "ACTIVE" | "REVOKED" | "EXPIRED" | "PENDING" | "BILLING_RETRY_PERIOD" | "CANCELED" | "IN_GRACE_PERIOD" | "ON_HOLD" | "PAUSED" | "UNKNOWN";
    id: string;
    userId: string;
    thirdPartySubscriptionId: string;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    reason?: string | null | undefined;
    operator?: string | null | undefined;
    expiredAt?: string | null | undefined;
    lastTransactionId?: string | null | undefined;
    subscriptionProductId?: string | null | undefined;
}, {
    namespace: string;
    status: "ACTIVE" | "REVOKED" | "EXPIRED" | "PENDING" | "BILLING_RETRY_PERIOD" | "CANCELED" | "IN_GRACE_PERIOD" | "ON_HOLD" | "PAUSED" | "UNKNOWN";
    id: string;
    userId: string;
    thirdPartySubscriptionId: string;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    reason?: string | null | undefined;
    operator?: string | null | undefined;
    expiredAt?: string | null | undefined;
    lastTransactionId?: string | null | undefined;
    subscriptionProductId?: string | null | undefined;
}>;
interface ThirdPartySubscriptionTransactionHistoryInfo extends z.TypeOf<typeof ThirdPartySubscriptionTransactionHistoryInfo> {
}

declare const TimeLimitedBalance: z.ZodObject<{
    balance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    balanceSource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    expireAt?: string | null | undefined;
    balance?: number | null | undefined;
    balanceSource?: string | null | undefined;
}, {
    expireAt?: string | null | undefined;
    balance?: number | null | undefined;
    balanceSource?: string | null | undefined;
}>;
interface TimeLimitedBalance extends z.TypeOf<typeof TimeLimitedBalance> {
}

declare const TlsConfig: z.ZodObject<{
    rootCertFileBytes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    rootCertFileName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    rootCertFileBytes?: string[] | null | undefined;
    rootCertFileName?: string | null | undefined;
}, {
    rootCertFileBytes?: string[] | null | undefined;
    rootCertFileName?: string | null | undefined;
}>;
interface TlsConfig extends z.TypeOf<typeof TlsConfig> {
}

declare const Transaction: z.ZodObject<{
    additionalData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        cardSummary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        cardSummary?: string | null | undefined;
    }, {
        cardSummary?: string | null | undefined;
    }>>>;
    amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        currencyCode: z.ZodString;
        currencySymbol: z.ZodString;
        currencyType: z.ZodEnum<["REAL", "VIRTUAL"]>;
        decimals: z.ZodNumber;
        namespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }, {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    }>>>;
    extMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extStatusCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extTxId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    merchantId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    notified: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    paymentData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        discountAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        discountCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        subtotalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        totalPrice: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    }, {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    }>>>;
    paymentMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    paymentMethodFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    paymentProviderFee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    provider: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ADYEN", "ALIPAY", "CHECKOUT", "NEONPAY", "PAYPAL", "STRIPE", "WALLET", "WXPAY", "XSOLLA"]>>>;
    salesTax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FINISHED"]>>>;
    tax: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    txEndTime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    txId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AUTHORISATION", "CHARGE", "CHARGEBACK", "CHARGEBACK_REVERSED", "CHARGE_FAILED", "NOTIFICATION_OF_CHARGEBACK", "REFUND", "REFUND_FAILED", "REQUEST_FOR_INFORMATION"]>>>;
    vat: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    type?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "REFUND" | "REFUND_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | "AUTHORISATION" | "CHARGE" | null | undefined;
    status?: "FAILED" | "FINISHED" | null | undefined;
    additionalData?: {
        cardSummary?: string | null | undefined;
    } | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    amount?: number | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentMethodFee?: number | null | undefined;
    paymentProviderFee?: number | null | undefined;
    salesTax?: number | null | undefined;
    tax?: number | null | undefined;
    vat?: number | null | undefined;
    extTxId?: string | null | undefined;
    paymentData?: {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    } | null | undefined;
    txEndTime?: string | null | undefined;
    extMessage?: string | null | undefined;
    extStatusCode?: string | null | undefined;
    merchantId?: string | null | undefined;
    notified?: boolean | null | undefined;
    provider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    txId?: string | null | undefined;
}, {
    type?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "REFUND" | "REFUND_FAILED" | "CHARGE_FAILED" | "NOTIFICATION_OF_CHARGEBACK" | "REQUEST_FOR_INFORMATION" | "AUTHORISATION" | "CHARGE" | null | undefined;
    status?: "FAILED" | "FINISHED" | null | undefined;
    additionalData?: {
        cardSummary?: string | null | undefined;
    } | null | undefined;
    currency?: {
        namespace: string;
        currencyCode: string;
        currencySymbol: string;
        currencyType: "REAL" | "VIRTUAL";
        decimals: number;
    } | null | undefined;
    amount?: number | null | undefined;
    paymentMethod?: string | null | undefined;
    paymentMethodFee?: number | null | undefined;
    paymentProviderFee?: number | null | undefined;
    salesTax?: number | null | undefined;
    tax?: number | null | undefined;
    vat?: number | null | undefined;
    extTxId?: string | null | undefined;
    paymentData?: {
        discountAmount?: number | null | undefined;
        subtotalPrice?: number | null | undefined;
        totalPrice?: number | null | undefined;
        tax?: number | null | undefined;
        discountCode?: string | null | undefined;
    } | null | undefined;
    txEndTime?: string | null | undefined;
    extMessage?: string | null | undefined;
    extStatusCode?: string | null | undefined;
    merchantId?: string | null | undefined;
    notified?: boolean | null | undefined;
    provider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA" | null | undefined;
    txId?: string | null | undefined;
}>;
interface Transaction extends z.TypeOf<typeof Transaction> {
}

declare const TransactionAmountDetails: z.ZodObject<{
    amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    origin?: string | null | undefined;
    amount?: number | null | undefined;
    walletId?: string | null | undefined;
    expireAt?: string | null | undefined;
}, {
    origin?: string | null | undefined;
    amount?: number | null | undefined;
    walletId?: string | null | undefined;
    expireAt?: string | null | undefined;
}>;
interface TransactionAmountDetails extends z.TypeOf<typeof TransactionAmountDetails> {
}

declare const TwitchSyncResult: z.ZodObject<{
    iapOrderStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FULFILLED", "VERIFIED"]>>>;
    itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemSku?: string | null | undefined;
    transactionId?: string | null | undefined;
    iapOrderStatus?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
}, {
    itemSku?: string | null | undefined;
    transactionId?: string | null | undefined;
    iapOrderStatus?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
}>;
interface TwitchSyncResult extends z.TypeOf<typeof TwitchSyncResult> {
}

declare const UserDlcRecord: z.ZodObject<{
    entitlementOriginSyncResult: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reward: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                currencyCode: z.ZodString;
                namespace: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                namespace: string;
                currencyCode: string;
            }, {
                namespace: string;
                currencyCode: string;
            }>>>;
            item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }>>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
        }, "strip", z.ZodTypeAny, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }>>>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
            syncedCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            syncedEntitlementIds: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }, {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    entitlementOriginSyncStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["NOT_SYNCED", "SYNCED", "SYNCED_FAILED"]>>>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    obtainedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform: z.ZodOptional<z.ZodNullable<z.ZodEnum<["EPICGAMES", "OCULUS", "PSN", "STEAM", "XBOX"]>>>;
    revocationResult: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        creditRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            balanceOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            currencyCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            customRevocation: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            revocationStrategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            skipped: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
            walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }>, "many">>>;
        entitlementRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            customRevocation: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            entitlementId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            revocationStrategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            skipped: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAIL", "SUCCESS"]>>>;
        }, "strip", z.ZodTypeAny, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }, {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }>, "many">>>;
        id: z.ZodString;
        itemRevocations: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodType<ItemRevocation, z.ZodTypeDef, ItemRevocation>, "many">>>;
        status: z.ZodEnum<["FAIL", "SUCCESS"]>;
    }, "strip", z.ZodTypeAny, {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    }, {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    }>>>;
    revokeResults: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        revokeItemSummaries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            revokeStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }>, "many">>>;
        reward: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                currencyCode: z.ZodString;
                namespace: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                namespace: string;
                currencyCode: string;
            }, {
                namespace: string;
                currencyCode: string;
            }>>>;
            item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }, {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            }>>>;
            quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
        }, "strip", z.ZodTypeAny, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }, {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        }>>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["COMPLETED", "SKIPPED"]>>>;
    }, "strip", z.ZodTypeAny, {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }, {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    revokedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rewards: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        currency: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            currencyCode: z.ZodString;
            namespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            currencyCode: string;
        }, {
            namespace: string;
            currencyCode: string;
        }>>>;
        item: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemSku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            itemType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }, {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        }>>>;
        quantity: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CURRENCY", "ITEM"]>>>;
    }, "strip", z.ZodTypeAny, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }, {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }>, "many">>>;
    sources: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FULFILLED", "REVOKED", "REVOKE_FAILED"]>>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    version: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    namespace?: string | null | undefined;
    status?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | null | undefined;
    id?: string | null | undefined;
    userId?: string | null | undefined;
    platform?: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX" | null | undefined;
    rewards?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncResult?: {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncStatus?: "NOT_SYNCED" | "SYNCED" | "SYNCED_FAILED" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    obtainedAt?: string | null | undefined;
    revocationResult?: {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    } | null | undefined;
    revokeResults?: {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    revokedAt?: string | null | undefined;
    sources?: string[] | null | undefined;
    transactionId?: string | null | undefined;
    version?: number | null | undefined;
}, {
    namespace?: string | null | undefined;
    status?: "FULFILLED" | "REVOKED" | "REVOKE_FAILED" | null | undefined;
    id?: string | null | undefined;
    userId?: string | null | undefined;
    platform?: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX" | null | undefined;
    rewards?: {
        type?: "ITEM" | "CURRENCY" | null | undefined;
        quantity?: number | null | undefined;
        currency?: {
            namespace: string;
            currencyCode: string;
        } | null | undefined;
        item?: {
            itemId?: string | null | undefined;
            itemName?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
        } | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncResult?: {
        reason?: string | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        summary?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            sku?: string | null | undefined;
            reason?: string | null | undefined;
            syncedCount?: number | null | undefined;
            syncedEntitlementIds?: string[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    entitlementOriginSyncStatus?: "NOT_SYNCED" | "SYNCED" | "SYNCED_FAILED" | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    obtainedAt?: string | null | undefined;
    revocationResult?: {
        status: "FAIL" | "SUCCESS";
        id: string;
        creditRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            currencyCode?: string | null | undefined;
            reason?: string | null | undefined;
            amount?: number | null | undefined;
            balanceOrigin?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
            walletId?: string | null | undefined;
        }[] | null | undefined;
        entitlementRevocations?: {
            status?: "FAIL" | "SUCCESS" | null | undefined;
            itemId?: string | null | undefined;
            quantity?: number | null | undefined;
            entitlementId?: string | null | undefined;
            itemSku?: string | null | undefined;
            reason?: string | null | undefined;
            customRevocation?: Record<string, any> | null | undefined;
            revocationStrategy?: string | null | undefined;
            skipped?: boolean | null | undefined;
        }[] | null | undefined;
        itemRevocations?: ItemRevocation[] | null | undefined;
    } | null | undefined;
    revokeResults?: {
        status?: "COMPLETED" | "SKIPPED" | null | undefined;
        reward?: {
            type?: "ITEM" | "CURRENCY" | null | undefined;
            quantity?: number | null | undefined;
            currency?: {
                namespace: string;
                currencyCode: string;
            } | null | undefined;
            item?: {
                itemId?: string | null | undefined;
                itemName?: string | null | undefined;
                itemType?: string | null | undefined;
                itemSku?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        revokeItemSummaries?: {
            itemId?: string | null | undefined;
            itemType?: string | null | undefined;
            itemSku?: string | null | undefined;
            revokeStatus?: "COMPLETED" | "SKIPPED" | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    revokedAt?: string | null | undefined;
    sources?: string[] | null | undefined;
    transactionId?: string | null | undefined;
    version?: number | null | undefined;
}>;
interface UserDlcRecord extends z.TypeOf<typeof UserDlcRecord> {
}

declare const UserEntitlementHistoryPagingSlicedResult: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        action: z.ZodEnum<["DECREMENT", "DISABLE", "ENABLE", "GRANT", "REVOKE", "SELL_BACK", "UPDATE"]>;
        clazz: z.ZodOptional<z.ZodNullable<z.ZodEnum<["APP", "CODE", "ENTITLEMENT", "LOOTBOX", "MEDIA", "OPTIONBOX", "SUBSCRIPTION"]>>>;
        createdAt: z.ZodString;
        entitlementId: z.ZodString;
        itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespace: z.ZodString;
        origin: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Epic", "GooglePlay", "IOS", "Nintendo", "Oculus", "Other", "Playstation", "Steam", "System", "Twitch", "Xbox"]>>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        updatedAt: z.ZodString;
        useCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        useCountChange: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
        createdAt: string;
        updatedAt: string;
        userId: string;
        entitlementId: string;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        useCount?: number | null | undefined;
        clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
        useCountChange?: number | null | undefined;
    }, {
        namespace: string;
        action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
        createdAt: string;
        updatedAt: string;
        userId: string;
        entitlementId: string;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        useCount?: number | null | undefined;
        clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
        useCountChange?: number | null | undefined;
    }>, "many">;
    paging: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        next: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        previous: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        next?: string | null | undefined;
        previous?: string | null | undefined;
    }, {
        next?: string | null | undefined;
        previous?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
        createdAt: string;
        updatedAt: string;
        userId: string;
        entitlementId: string;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        useCount?: number | null | undefined;
        clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
        useCountChange?: number | null | undefined;
    }[];
    paging?: {
        next?: string | null | undefined;
        previous?: string | null | undefined;
    } | null | undefined;
}, {
    data: {
        namespace: string;
        action: "REVOKE" | "UPDATE" | "DECREMENT" | "DISABLE" | "ENABLE" | "GRANT" | "SELL_BACK";
        createdAt: string;
        updatedAt: string;
        userId: string;
        entitlementId: string;
        origin?: "Epic" | "GooglePlay" | "IOS" | "Nintendo" | "Oculus" | "Other" | "Playstation" | "Steam" | "System" | "Twitch" | "Xbox" | null | undefined;
        itemId?: string | null | undefined;
        sku?: string | null | undefined;
        reason?: string | null | undefined;
        useCount?: number | null | undefined;
        clazz?: "APP" | "CODE" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION" | "ENTITLEMENT" | null | undefined;
        useCountChange?: number | null | undefined;
    }[];
    paging?: {
        next?: string | null | undefined;
        previous?: string | null | undefined;
    } | null | undefined;
}>;
interface UserEntitlementHistoryPagingSlicedResult extends z.TypeOf<typeof UserEntitlementHistoryPagingSlicedResult> {
}

declare const ValidationErrorEntity: z.ZodObject<{
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    errors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        errorCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        errorCode?: string | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }, {
        errorCode?: string | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
    errors?: {
        errorCode?: string | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }[] | null | undefined;
}, {
    errorCode: number;
    errorMessage: string;
    errors?: {
        errorCode?: string | null | undefined;
        errorField?: string | null | undefined;
        errorMessage?: string | null | undefined;
        errorValue?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
    }[] | null | undefined;
}>;
interface ValidationErrorEntity extends z.TypeOf<typeof ValidationErrorEntity> {
}

declare const ViewInfo: z.ZodObject<{
    createdAt: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayOrder: z.ZodNumber;
    localExt: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    longDescription: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodString;
    namespace: z.ZodString;
    title: z.ZodString;
    updatedAt: z.ZodString;
    viewId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    title: string;
    viewId: string;
    displayOrder: number;
    description?: string | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
}, {
    namespace: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    title: string;
    viewId: string;
    displayOrder: number;
    description?: string | null | undefined;
    localExt?: Record<string, any> | null | undefined;
    longDescription?: string | null | undefined;
}>;
interface ViewInfo extends z.TypeOf<typeof ViewInfo> {
}

declare const WalletRevocationConfig: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    strategy: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ALWAYS_REVOKE", "CUSTOM", "REVOKE_OR_REPORT"]>>>;
}, "strip", z.ZodTypeAny, {
    enabled?: boolean | null | undefined;
    strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | "ALWAYS_REVOKE" | null | undefined;
}, {
    enabled?: boolean | null | undefined;
    strategy?: "CUSTOM" | "REVOKE_OR_REPORT" | "ALWAYS_REVOKE" | null | undefined;
}>;
interface WalletRevocationConfig extends z.TypeOf<typeof WalletRevocationConfig> {
}

declare const WalletTransactionInfo: z.ZodObject<{
    amount: z.ZodNumber;
    balanceSource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodString;
    currencyCode: z.ZodString;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    namespace: z.ZodString;
    operator: z.ZodString;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    transactionAmountDetails: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        amount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        expireAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        walletId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        origin?: string | null | undefined;
        amount?: number | null | undefined;
        walletId?: string | null | undefined;
        expireAt?: string | null | undefined;
    }, {
        origin?: string | null | undefined;
        amount?: number | null | undefined;
        walletId?: string | null | undefined;
        expireAt?: string | null | undefined;
    }>, "many">>>;
    updatedAt: z.ZodString;
    userId: z.ZodString;
    walletAction: z.ZodOptional<z.ZodNullable<z.ZodEnum<["CREDIT", "DEBIT", "PAYMENT"]>>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    currencyCode: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    amount: number;
    operator: string;
    reason?: string | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    balanceSource?: string | null | undefined;
    walletAction?: "PAYMENT" | "CREDIT" | "DEBIT" | null | undefined;
    transactionAmountDetails?: {
        origin?: string | null | undefined;
        amount?: number | null | undefined;
        walletId?: string | null | undefined;
        expireAt?: string | null | undefined;
    }[] | null | undefined;
}, {
    namespace: string;
    currencyCode: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    amount: number;
    operator: string;
    reason?: string | null | undefined;
    metadata?: Record<string, any> | null | undefined;
    balanceSource?: string | null | undefined;
    walletAction?: "PAYMENT" | "CREDIT" | "DEBIT" | null | undefined;
    transactionAmountDetails?: {
        origin?: string | null | undefined;
        amount?: number | null | undefined;
        walletId?: string | null | undefined;
        expireAt?: string | null | undefined;
    }[] | null | undefined;
}>;
interface WalletTransactionInfo extends z.TypeOf<typeof WalletTransactionInfo> {
}

declare const WxPayConfigInfo: z.ZodObject<{
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    certPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    key: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    mchid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    returnUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    appId?: string | null | undefined;
    returnUrl?: string | null | undefined;
    certPath?: string | null | undefined;
    key?: string | null | undefined;
    mchid?: string | null | undefined;
}, {
    appId?: string | null | undefined;
    returnUrl?: string | null | undefined;
    certPath?: string | null | undefined;
    key?: string | null | undefined;
    mchid?: string | null | undefined;
}>;
interface WxPayConfigInfo extends z.TypeOf<typeof WxPayConfigInfo> {
}

declare const XblReconcileResult: z.ZodObject<{
    iapOrderStatus: z.ZodOptional<z.ZodNullable<z.ZodEnum<["FAILED", "FULFILLED", "VERIFIED"]>>>;
    itemId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sku: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    transactionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    xboxProductId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    transactionId?: string | null | undefined;
    iapOrderStatus?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    xboxProductId?: string | null | undefined;
}, {
    itemId?: string | null | undefined;
    sku?: string | null | undefined;
    transactionId?: string | null | undefined;
    iapOrderStatus?: "FULFILLED" | "FAILED" | "VERIFIED" | null | undefined;
    xboxProductId?: string | null | undefined;
}>;
interface XblReconcileResult extends z.TypeOf<typeof XblReconcileResult> {
}

declare const XboxAchievement: z.ZodObject<{
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    percentComplete: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    id?: string | null | undefined;
    percentComplete?: number | null | undefined;
}, {
    id?: string | null | undefined;
    percentComplete?: number | null | undefined;
}>;
interface XboxAchievement extends z.TypeOf<typeof XboxAchievement> {
}

declare const XsollaPaywallConfig: z.ZodObject<{
    device: z.ZodEnum<["DESKTOP", "MOBILE"]>;
    showCloseButton: z.ZodBoolean;
    size: z.ZodEnum<["LARGE", "MEDIUM", "SMALL"]>;
    theme: z.ZodEnum<["DARK", "DEFAULT", "DEFAULT_DARK"]>;
}, "strip", z.ZodTypeAny, {
    device: "DESKTOP" | "MOBILE";
    showCloseButton: boolean;
    size: "LARGE" | "MEDIUM" | "SMALL";
    theme: "DEFAULT" | "DARK" | "DEFAULT_DARK";
}, {
    device: "DESKTOP" | "MOBILE";
    showCloseButton: boolean;
    size: "LARGE" | "MEDIUM" | "SMALL";
    theme: "DEFAULT" | "DARK" | "DEFAULT_DARK";
}>;
interface XsollaPaywallConfig extends z.TypeOf<typeof XsollaPaywallConfig> {
}

/**
 * AUTO GENERATED
 */

declare function CategoryApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategories: (queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<CategoryInfoArray>>;
    /**
     * This API is used to download store&#39;s structured categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: structured categories&lt;/li&gt;&lt;/ul&gt;
     */
    getCategoriesDownload: (queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<HierarchicalCategoryInfoArray>>;
    /**
     * This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)(user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategory_ByCategoryPath: (categoryPath: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<CategoryInfo>>;
    /**
     * This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getChildren_ByCategoryPath: (categoryPath: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<CategoryInfoArray>>;
    /**
     * This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getDescendants_ByCategoryPath: (categoryPath: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<CategoryInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function CurrencyApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;
     */
    getCurrencies: (queryParams?: {
        currencyType?: "REAL" | "VIRTUAL";
    }) => Promise<AxiosResponse<CurrencyInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function DlcApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get user dlc reward contents. If includeAllNamespaces is false, will only return the dlc synced from the current namespace&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeDlcContent: (queryParams: {
        type: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
        includeAllNamespaces?: boolean | null;
    }) => Promise<AxiosResponse<SimpleUserDlcRewardContentsResponse>>;
    /**
     * Get dlc reward simple map, only return the sku of durable item reward.
     */
    getDlcRewardsDurableMap: (queryParams: {
        dlcType: "EPICGAMES" | "OCULUS" | "PSN" | "STEAM" | "XBOX";
    }) => Promise<AxiosResponse<DlcConfigRewardShortInfo>>;
    /**
     * Synchronize with dlc entitlements in PSN Store.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateDlcPsnSync_ByUserId: (userId: string, data: PlayStationDlcSyncRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Sync Xbox inventory&#39;s dlc items
     */
    updateDlcXblSync_ByUserId: (userId: string, data: XblDlcSyncRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Sync steam dlc
     */
    updateDlcSteamSync_ByUserId: (userId: string, data: SteamDlcSyncRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Sync oculus dlc
     */
    updateDlcOculuSync_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Sync epic games dlc items
     */
    updateDlcEpicgameSync_ByUserId: (userId: string, data: EpicGamesDlcSyncRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Synchronize with dlc entitlements in PSN Store with multiple service labels.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateDlcPsnSyncMultiServiceLabel_ByUserId: (userId: string, data: PlayStationDlcSyncMultiServiceLabelsRequest) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare class Category$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategories(queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }): Promise<Response<CategoryInfoArray>>;
    /**
     * This API is used to download store&#39;s structured categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: structured categories&lt;/li&gt;&lt;/ul&gt;
     */
    getCategoriesDownload(queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }): Promise<Response<HierarchicalCategoryInfoArray>>;
    /**
     * This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)(user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;
     */
    getCategory_ByCategoryPath(categoryPath: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }): Promise<Response<CategoryInfo>>;
    /**
     * This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getChildren_ByCategoryPath(categoryPath: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }): Promise<Response<CategoryInfoArray>>;
    /**
     * This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;
     */
    getDescendants_ByCategoryPath(categoryPath: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }): Promise<Response<CategoryInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Currency$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;
     */
    getCurrencies(queryParams?: {
        currencyType?: 'REAL' | 'VIRTUAL';
    }): Promise<Response<CurrencyInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Dlc$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get user dlc reward contents. If includeAllNamespaces is false, will only return the dlc synced from the current namespace&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user dlc&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeDlcContent(queryParams: {
        type: 'EPICGAMES' | 'OCULUS' | 'PSN' | 'STEAM' | 'XBOX';
        includeAllNamespaces?: boolean | null;
    }): Promise<Response<SimpleUserDlcRewardContentsResponse>>;
    /**
     * Get dlc reward simple map, only return the sku of durable item reward.
     */
    getDlcRewardsDurableMap(queryParams: {
        dlcType: 'EPICGAMES' | 'OCULUS' | 'PSN' | 'STEAM' | 'XBOX';
    }): Promise<Response<DlcConfigRewardShortInfo>>;
    /**
     * Synchronize with dlc entitlements in PSN Store.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateDlcPsnSync_ByUserId(userId: string, data: PlayStationDlcSyncRequest): Promise<Response<unknown>>;
    /**
     * Sync Xbox inventory&#39;s dlc items
     */
    updateDlcXblSync_ByUserId(userId: string, data: XblDlcSyncRequest): Promise<Response<unknown>>;
    /**
     * Sync steam dlc
     */
    updateDlcSteamSync_ByUserId(userId: string, data: SteamDlcSyncRequest): Promise<Response<unknown>>;
    /**
     * Sync oculus dlc
     */
    updateDlcOculuSync_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Sync epic games dlc items
     */
    updateDlcEpicgameSync_ByUserId(userId: string, data: EpicGamesDlcSyncRequest): Promise<Response<unknown>>;
    /**
     * Synchronize with dlc entitlements in PSN Store with multiple service labels.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateDlcPsnSyncMultiServiceLabel_ByUserId(userId: string, data: PlayStationDlcSyncMultiServiceLabelsRequest): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class Entitlement$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query user entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlements_ByUserId(userId: string, queryParams?: {
        appType?: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        entitlementName?: string | null;
        features?: string[];
        itemId?: string[];
        limit?: number;
        offset?: number;
    }): Promise<Response<EntitlementPagingSlicedResult>>;
    /**
     * Get user entitlements by ids..&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByIds_ByUserId(userId: string, queryParams?: {
        availablePlatformOnly?: boolean | null;
        ids?: string[];
    }): Promise<Response<EntitlementInfoArray>>;
    /**
     * @deprecated
     * Get user entitlement by sku.
     */
    getEntitlementsBySku_ByUserId(userId: string, queryParams: {
        sku: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
    }): Promise<Response<EntitlementInfo>>;
    /**
     * Get user app entitlement by appId.
     */
    getEntitlementsByAppId_ByUserId(userId: string, queryParams: {
        appId: string | null;
    }): Promise<Response<AppEntitlementInfo>>;
    /**
     * Get user entitlement history&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user entitlement history list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsHistory_ByUserId(userId: string, queryParams?: {
        endDate?: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
        limit?: number;
        offset?: number;
        startDate?: string | null;
    }): Promise<Response<UserEntitlementHistoryPagingSlicedResultArray>>;
    /**
     * Exists any my active entitlement of specified itemIds, skus and appIds
     */
    getUsersMeEntitlementsOwnershipAny(queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    }): Promise<Response<Ownership>>;
    /**
     * @deprecated
     * Get user entitlement by itemId.
     */
    getEntitlementsByItemId_ByUserId(userId: string, queryParams: {
        itemId: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
    }): Promise<Response<EntitlementInfo>>;
    /**
     * Gets an entitlement ownership token of specified itemIds, skus and appIds&lt;p&gt;The decoded ownership token header like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;kid&#34;: &#34;9fd4cd5f991cebe3323605cd12d3b8bfdfc73fa4&#34;, &#34;typ&#34;: &#34;JWT&#34;, &#34;alg&#34;: &#34;RS256&#34; } &lt;/code&gt;&lt;/pre&gt;That you can get the jwks by api &lt;baseUrl&gt;/platform/jwks, if the configured private key is same as IAM, &lt;p&gt;you can also get jwks from IAM endpoint. &lt;p&gt;The decoded ownership token payload like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;entitlements&#34;: [ { &#34;itemId&#34;: &#34;4c1296291f604c199f7bb7f0ee02e5f8&#34;, &#34;appType&#34;: null, &#34;appId&#34;: null, &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;itemNamespace&#34;: &#34;accelbyte&#34;, &#34;sku&#34;: &#34;prime-plus&#34; }, { &#34;itemId&#34;: &#34;e8f4974cf45c4e1f8d4f0c6990c518bd&#34;, &#34;appType&#34;: &#34;GAME&#34;, &#34;appId&#34;: &#34;omeganebula&#34;, &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;itemNamespace&#34;: &#34;accelbyte&#34;, &#34;sku&#34;: &#34;APPG005ON&#34; } ], &#34;sub&#34;: &#34;66459eb6a4e44e6fb0040bd20c1079a5&#34;, &#34;exp&#34;: 1619624360, &#34;iat&#34;: 1619624060 } &lt;/code&gt;&lt;/pre&gt;&lt;b&gt;if there&#39;s no active entitlement for the specific params, the entitlements section will be omitted&lt;/b&gt;.
     */
    getUsersMeEntitlementsOwnershipToken(queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    }): Promise<Response<OwnershipToken>>;
    /**
     * Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByAppType_ByUserId(userId: string, queryParams: {
        appType: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        limit?: number;
        offset?: number;
    }): Promise<Response<AppEntitlementPagingSlicedResult>>;
    /**
     * Get my entitlement ownership by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeEntitlementsOwnershipBySku(queryParams: {
        sku: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
    }): Promise<Response<TimedOwnership>>;
    /**
     * Get my app entitlement ownership by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace app entitlement ownership&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeEntitlementsOwnershipByAppId(queryParams: {
        appId: string | null;
    }): Promise<Response<Ownership>>;
    /**
     * Get my entitlement ownership by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeEntitlementsOwnershipByItemId(queryParams: {
        itemId: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
    }): Promise<Response<TimedOwnership>>;
    /**
     * Exists any user active entitlement of specified itemIds, skus and appIds
     */
    getEntitlementsOwnershipAny_ByUserId(userId: string, queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    }): Promise<Response<Ownership>>;
    /**
     * Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlement_ByUserId_ByEntitlementId(userId: string, entitlementId: string): Promise<Response<EntitlementInfo>>;
    /**
     * Get user entitlement ownership by sku.
     */
    getEntitlementsOwnershipBySku_ByUserId(userId: string, queryParams: {
        sku: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
    }): Promise<Response<TimedOwnership>>;
    /**
     * Get user app entitlement ownership by appId.
     */
    getEntitlementsOwnershipByAppId_ByUserId(userId: string, queryParams: {
        appId: string | null;
    }): Promise<Response<Ownership>>;
    /**
     * Get user entitlement ownership by itemId.
     */
    getEntitlementsOwnershipByItemId_ByUserId(userId: string, queryParams: {
        itemId: string | null;
        entitlementClazz?: 'APP' | 'CODE' | 'ENTITLEMENT' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SUBSCRIPTION';
    }): Promise<Response<TimedOwnership>>;
    /**
     * Get user entitlement ownership by itemIds.
     */
    getEntitlementsOwnershipByItemIds_ByUserId(userId: string, queryParams?: {
        ids?: string[];
    }): Promise<Response<EntitlementOwnershipArray>>;
    /**
     * Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateSell_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: EntitlementSoldRequest): Promise<Response<EntitlementSoldResult>>;
    /**
     * Split a specified use count of entitlement and create a new entitlement with splitting use count.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateSplit_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: EntitlementSplitRequest): Promise<Response<EntitlementSplitResult>>;
    /**
     * Transfer a specified use count from entitlement A to B..Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateTransfer_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: EntitlementTransferRequest): Promise<Response<EntitlementTransferResult>>;
    /**
     * Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED. Client should pass item id in options if entitlement clazz is OPTIONBOX&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateDecrement_ByUserId_ByEntitlementId(userId: string, entitlementId: string, data: PublicEntitlementDecrement): Promise<Response<EntitlementDecrementResult>>;
}

/**
 * AUTO GENERATED
 */

declare class Fulfillment$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Redeem campaign code, this api have rate limit, default: only allow request once per user in 2 seconds&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentCode_ByUserId(userId: string, data: FulfillCodeRequest): Promise<Response<FulfillmentResult>>;
}

/**
 * AUTO GENERATED
 */

declare class Iap$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get iap item mapping.
     */
    getIapItemMapping(queryParams?: {
        platform?: 'APPLE' | 'EPICGAMES' | 'GOOGLE' | 'OCULUS' | 'PLAYSTATION' | 'STADIA' | 'STEAM' | 'TWITCH' | 'XBOX';
    }): Promise<Response<IapItemMappingInfo>>;
    /**
     * Get apple config version.
     */
    getIapAppleConfigVersion(): Promise<Response<AppleIapConfigVersionInfo>>;
    /**
     * Sync my game twitch drops entitlements.
     */
    updateUserMeIapTwitchSync(data: TwitchSyncRequest): Promise<Response<TwitchSyncResultArray>>;
    /**
     * Synchronize with entitlements in PSN Store.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapPsnSync_ByUserId(userId: string, data: PlayStationReconcileRequest): Promise<Response<PlayStationReconcileResultArray>>;
    /**
     * Sync Xbox inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapXblSync_ByUserId(userId: string, data: XblReconcileRequest): Promise<Response<XblReconcileResultArray>>;
    /**
     * Sync steam inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapSteamSync_ByUserId(userId: string, data: SteamSyncRequest): Promise<Response<unknown>>;
    /**
     * Sync Oculus entitlements.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapOculuSync_ByUserId(userId: string): Promise<Response<OculusReconcileResultArray>>;
    /**
     * Sync twitch drops entitlements.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapTwitchSync_ByUserId(userId: string, data: TwitchSyncRequest): Promise<Response<unknown>>;
    /**
     * Verify apple iap receipt and fulfill item. don&#39;t support subscriptionOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapAppleReceipt_ByUserId(userId: string, data: AppleIapReceipt): Promise<Response<unknown>>;
    /**
     * Sync epic games inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapEpicgameSync_ByUserId(userId: string, data: EpicGamesReconcileRequest): Promise<Response<EpicGamesReconcileResultArray>>;
    /**
     * Verify google iap receipt and fulfill item.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapGoogleReceipt_ByUserId(userId: string, data: GoogleIapReceipt): Promise<Response<GoogleReceiptResolveResult>>;
    /**
     * Verify apple iap transaction and fulfill item, support subscriptionOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapAppleReceipt_ByUserId_v2(userId: string, data: AppleIapRequest): Promise<Response<unknown>>;
    /**
     * Synchronize with entitlements in PSN Store with multiple service labels.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapPsnSyncMultiServiceLabel_ByUserId(userId: string, data: PlayStationMultiServiceLabelsReconcileRequest): Promise<Response<PlayStationReconcileResultArray>>;
}

/**
 * AUTO GENERATED
 */

declare class IapSubscription$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query user subscription, default sort by updatedAtOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptionPlatform_ByUserId_ByPlatform(userId: string, platform: string, queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        productId?: string | null;
    }): Promise<Response<ThirdPartyUserSubscriptionPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare class Item$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsBySku(queryParams: {
        sku: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<ItemInfo>>;
    /**
     * This API is used to search items by keyword in title, description and long description, It&#39;s language constrained, also if item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsSearch(queryParams: {
        keyword: string | null;
        language: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        limit?: number;
        offset?: number;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<ItemPagingSlicedResult>>;
    /**
     * This API is used to get item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByAppId(queryParams: {
        appId: string | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<ItemInfo>>;
    /**
     * This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByCriteria(queryParams?: {
        appType?: 'DEMO' | 'DLC' | 'GAME' | 'SOFTWARE';
        autoCalcEstimatedPrice?: boolean | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemType?: 'APP' | 'BUNDLE' | 'CODE' | 'COINS' | 'EXTENSION' | 'INGAMEITEM' | 'LOOTBOX' | 'MEDIA' | 'OPTIONBOX' | 'SEASON' | 'SUBSCRIPTION';
        language?: string | null;
        limit?: number;
        offset?: number;
        region?: string | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
    }): Promise<Response<ItemPagingSlicedResult>>;
    /**
     * This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsLocaleByIds(queryParams: {
        itemIds: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<ItemInfoArray>>;
    /**
     * This API is used to get estimated prices of item
     */
    getItemsEstimatedPrice(queryParams: {
        itemIds: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<EstimatedPriceInfoArray>>;
    /**
     * This API is used to get an item in locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getLocale_ByItemId(itemId: string, queryParams?: {
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<PopulatedItemInfo>>;
    /**
     * Get item dynamic data for a published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByItemId(itemId: string): Promise<Response<ItemDynamicDataInfo>>;
    /**
     * This API is used to get an app in locale. If app not exist in specific region, default region app will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;
     */
    getAppLocale_ByItemId(itemId: string, queryParams?: {
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }): Promise<Response<AppInfo>>;
    /**
     * This API is used to validate user item purchase condition
     */
    createItemPurchaseConditionValidate(data: ItemPurchaseConditionValidateRequest): Promise<Response<ItemPurchaseConditionValidateResultArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Order$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders_ByUserId(userId: string, queryParams?: {
        discounted?: boolean | null;
        itemId?: string | null;
        limit?: number;
        offset?: number;
        status?: 'CHARGEBACK' | 'CHARGEBACK_REVERSED' | 'CHARGED' | 'CLOSED' | 'DELETED' | 'FULFILLED' | 'FULFILL_FAILED' | 'INIT' | 'REFUNDED' | 'REFUNDING' | 'REFUND_FAILED';
    }): Promise<Response<OrderPagingSlicedResult>>;
    /**
     * Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for ext field&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createOrder_ByUserId(userId: string, data: OrderCreate): Promise<Response<OrderInfo>>;
    /**
     * Get user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrder_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderInfo>>;
    /**
     * Cancel user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled order&lt;/li&gt;&lt;/ul&gt;
     */
    updateCancel_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderInfo>>;
    /**
     * Preview order price with discount code, this api is used to auto calc order price with discount code.Notes: this api don&#39;t do full order validation, only check discount code and calc final order price.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: previewed order&lt;/li&gt;&lt;/ul&gt;
     */
    createOrderDiscountPreview_ByUserId(userId: string, data: OrderDiscountPreviewRequest): Promise<Response<OrderDiscountPreviewResponse>>;
    /**
     * Get user order histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<OrderHistoryInfoArray>>;
    /**
     * Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;
     */
    getReceiptPdf_ByUserId_ByOrderNo(userId: string, orderNo: string): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class PaymentAccount$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment accounts.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment account list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentAccounts_ByUserId(userId: string): Promise<Response<PaymentAccountArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete payment account.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;:&lt;/li&gt;&lt;/ul&gt;
     */
    deletePaymentAccount_ByUserId_ByType_ById(userId: string, type: string, id: string): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class PaymentStation$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check and get a payment order&#39;s should pay tax.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: tax result&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentTax(queryParams: {
        paymentOrderNo: string | null;
        paymentProvider: 'ADYEN' | 'ALIPAY' | 'CHECKOUT' | 'NEONPAY' | 'PAYPAL' | 'STRIPE' | 'WALLET' | 'WXPAY' | 'XSOLLA';
        zipCode?: string | null;
    }): Promise<Response<TaxResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;For Neon Pay payment provider, the &#39;neonPayConfig&#39; field can be used to provide success and cancel URL. If &#39;neonPayConfig&#39; field is not present, the &#39;returnUrl&#39; will be used for both success and cancel URL.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Get payment link&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentLink(data: PaymentUrlCreate): Promise<Response<PaymentUrl>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get qrcode.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: QRCode image stream&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentQrcode(queryParams: {
        code: string | null;
    }): Promise<Response<BinarySchema>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment methods.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment method list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentMethods(queryParams: {
        paymentOrderNo: string | null;
    }): Promise<Response<PaymentMethodArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Normalize payment return url for payment provider&lt;br&gt;Payment response: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Field&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;orderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;order no&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentStatus&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;DONE: The payment was successfully completed.&lt;/li&gt;&lt;li&gt;CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant&#39;s site before completing the transaction.&lt;/li&gt;&lt;li&gt;PENDING: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to be completed. When the shopper has completed the payment you will receive a successful AUTHORISATION.&lt;/li&gt;&lt;li&gt;RECEIVED: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to clear.&lt;/li&gt;&lt;li&gt;UNKNOWN: An error occurred during the payment processing.&lt;/li&gt;&lt;li&gt;FAILED: Shopper paid failed because of various reasons.&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;payment status reason&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;xsolla&lt;/i&gt;: parameters &#39;user_id&#39;, &#39;foreinginvoice&#39;, &#39;invoice_id&#39; and &#39;status&#39; will be automatically added to the link&lt;/li&gt;&lt;li&gt;&lt;i&gt;adyen&lt;/i&gt;: https://docs.adyen.com/developers/checkout/web-sdk&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentReturnurl(queryParams: {
        orderNo: string | null;
        paymentOrderNo: string | null;
        paymentProvider: 'ADYEN' | 'ALIPAY' | 'CHECKOUT' | 'NEONPAY' | 'PAYPAL' | 'STRIPE' | 'WALLET' | 'WXPAY' | 'XSOLLA';
        returnUrl: string | null;
        PayerID?: string | null;
        foreinginvoice?: string | null;
        invoice_id?: string | null;
        payload?: string | null;
        redirectResult?: string | null;
        resultCode?: string | null;
        sessionId?: string | null;
        status?: string | null;
        token?: string | null;
        type?: string | null;
        user_id?: string | null;
    }): Promise<Response<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment provider public config, at current only Strip provide public config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Public config&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentPublicconfig(queryParams: {
        paymentProvider: 'ADYEN' | 'ALIPAY' | 'CHECKOUT' | 'NEONPAY' | 'PAYPAL' | 'STRIPE' | 'WALLET' | 'WXPAY' | 'XSOLLA';
        region: string | null;
        sandbox?: boolean | null;
    }): Promise<Response<unknown>>;
    /**
     * @deprecated
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: customization&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentCustomization(queryParams: {
        paymentProvider: 'ADYEN' | 'ALIPAY' | 'CHECKOUT' | 'NEONPAY' | 'PAYPAL' | 'STRIPE' | 'WALLET' | 'WXPAY' | 'XSOLLA';
        region: string | null;
        sandbox?: boolean | null;
    }): Promise<Response<Customization>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Do payment(For now, this only support checkout.com).&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment process result&lt;/li&gt;&lt;/ul&gt;
     */
    createPayPayment_ByPaymentOrderNo(paymentOrderNo: string, data: PaymentToken, queryParams?: {
        paymentProvider?: 'ADYEN' | 'ALIPAY' | 'CHECKOUT' | 'NEONPAY' | 'PAYPAL' | 'STRIPE' | 'WALLET' | 'WXPAY' | 'XSOLLA';
        zipCode?: string | null;
    }): Promise<Response<PaymentProcessResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order details&lt;/li&gt;&lt;/ul&gt;
     */
    getInfoPayment_ByPaymentOrderNo(paymentOrderNo: string): Promise<Response<PaymentOrderDetails>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check payment order paid status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order paid result&lt;/li&gt;&lt;/ul&gt;
     */
    getStatusPayment_ByPaymentOrderNo(paymentOrderNo: string): Promise<Response<PaymentOrderPaidResult>>;
}

/**
 * AUTO GENERATED
 */

declare class Reward$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to get reward by reward code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
     */
    getRewardsByCode(queryParams: {
        rewardCode: string | null;
    }): Promise<Response<RewardInfo>>;
    /**
     * This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
     */
    getReward_ByRewardId(rewardId: string): Promise<Response<RewardInfo>>;
    /**
     * This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;
     */
    getRewardsByCriteria(queryParams?: {
        eventTopic?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
    }): Promise<Response<RewardPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare class Section$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to list active section contents.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store sections)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store sections)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: active section contents&lt;/li&gt;&lt;/ul&gt;
     */
    getSections_ByUserId(userId: string, queryParams?: {
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
        viewId?: string | null;
    }): Promise<Response<SectionInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Store$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to list all stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;
     */
    getStores(): Promise<Response<StoreInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Subscription$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptions_ByUserId(userId: string, queryParams?: {
        chargeStatus?: 'CHARGED' | 'CHARGE_FAILED' | 'NEVER' | 'RECURRING_CHARGING' | 'SETUP';
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: 'ACTIVE' | 'CANCELLED' | 'EXPIRED' | 'INIT';
        subscribedBy?: 'PLATFORM' | 'USER';
    }): Promise<Response<SubscriptionPagingSlicedResult>>;
    /**
     * Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.&lt;br&gt;&lt;b&gt;ACTIVE USER subscription can&#39;t do subscribe again.&lt;/b&gt;&lt;br&gt;&lt;b&gt;The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.&lt;/b&gt;&lt;br&gt;User with permission SANDBOX will create sandbox subscription that not real paid.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox subscription)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created subscription&lt;/li&gt;&lt;/ul&gt;
     */
    createSubscription_ByUserId(userId: string, data: SubscribeRequest): Promise<Response<unknown>>;
    /**
     * Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscription_ByUserId_BySubscriptionId(userId: string, subscriptionId: string): Promise<Response<SubscriptionInfo>>;
    /**
     * Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptionsSubscribableByItemId_ByUserId(userId: string, queryParams: {
        itemId: string | null;
    }): Promise<Response<Subscribable>>;
    /**
     * Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateCancel_ByUserId_BySubscriptionId(userId: string, subscriptionId: string, data: CancelRequest): Promise<Response<SubscriptionInfo>>;
    /**
     * Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_BySubscriptionId(userId: string, subscriptionId: string, queryParams?: {
        excludeFree?: boolean | null;
        limit?: number;
        offset?: number;
    }): Promise<Response<BillingHistoryPagingSlicedResult>>;
    /**
     * Request to change a subscription billing account, this will guide user to payment station. The actual change will happen at the 0 payment notification successfully handled.&lt;br&gt;Only ACTIVE USER subscription with real currency billing account can be changed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateBillingAccount_ByUserId_BySubscriptionId(userId: string, subscriptionId: string): Promise<Response<SubscriptionInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class View$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * This API is used to get all views.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store views)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store views)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: all views&lt;/li&gt;&lt;/ul&gt;
     */
    getViews_ByUserId(userId: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }): Promise<Response<ViewInfoArray>>;
}

/**
 * AUTO GENERATED
 */

declare class Wallet$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * get my wallet by currency code and namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt; &lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user wallet&lt;/b&gt;&lt;/li&gt; &lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user wallet&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUserMeWallet_ByCurrencyCode(currencyCode: string): Promise<Response<PlatformWallet>>;
    /**
     * get a wallet by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallet_ByUserId_ByCurrencyCode(userId: string, currencyCode: string): Promise<Response<PlatformWallet>>;
    /**
     * List wallet transactions by currency code ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency transaction info&lt;/li&gt;&lt;/ul&gt;
     */
    getTransactions_ByUserId_ByCurrencyCode(userId: string, currencyCode: string, queryParams?: {
        limit?: number;
        offset?: number;
    }): Promise<Response<WalletTransactionPagingSlicedResult>>;
}

/**
 * AUTO GENERATED
 */

declare function EntitlementApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query user entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlements_ByUserId: (userId: string, queryParams?: {
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        entitlementName?: string | null;
        features?: string[];
        itemId?: string[];
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<EntitlementPagingSlicedResult>>;
    /**
     * Get user entitlements by ids..&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByIds_ByUserId: (userId: string, queryParams?: {
        availablePlatformOnly?: boolean | null;
        ids?: string[];
    }) => Promise<AxiosResponse<EntitlementInfoArray>>;
    /**
     * @deprecated
     * Get user entitlement by sku.
     */
    getEntitlementsBySku_ByUserId: (userId: string, queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    }) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Get user app entitlement by appId.
     */
    getEntitlementsByAppId_ByUserId: (userId: string, queryParams: {
        appId: string | null;
    }) => Promise<AxiosResponse<AppEntitlementInfo>>;
    /**
     * Get user entitlement history&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user entitlement history list&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsHistory_ByUserId: (userId: string, queryParams?: {
        endDate?: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        startDate?: string | null;
    }) => Promise<AxiosResponse<UserEntitlementHistoryPagingSlicedResultArray>>;
    /**
     * Exists any my active entitlement of specified itemIds, skus and appIds
     */
    getUsersMeEntitlementsOwnershipAny: (queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * @deprecated
     * Get user entitlement by itemId.
     */
    getEntitlementsByItemId_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    }) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Gets an entitlement ownership token of specified itemIds, skus and appIds&lt;p&gt;The decoded ownership token header like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;kid&#34;: &#34;9fd4cd5f991cebe3323605cd12d3b8bfdfc73fa4&#34;, &#34;typ&#34;: &#34;JWT&#34;, &#34;alg&#34;: &#34;RS256&#34; } &lt;/code&gt;&lt;/pre&gt;That you can get the jwks by api &lt;baseUrl&gt;/platform/jwks, if the configured private key is same as IAM, &lt;p&gt;you can also get jwks from IAM endpoint. &lt;p&gt;The decoded ownership token payload like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{ &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;entitlements&#34;: [ { &#34;itemId&#34;: &#34;4c1296291f604c199f7bb7f0ee02e5f8&#34;, &#34;appType&#34;: null, &#34;appId&#34;: null, &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;itemNamespace&#34;: &#34;accelbyte&#34;, &#34;sku&#34;: &#34;prime-plus&#34; }, { &#34;itemId&#34;: &#34;e8f4974cf45c4e1f8d4f0c6990c518bd&#34;, &#34;appType&#34;: &#34;GAME&#34;, &#34;appId&#34;: &#34;omeganebula&#34;, &#34;namespace&#34;: &#34;accelbyte&#34;, &#34;itemNamespace&#34;: &#34;accelbyte&#34;, &#34;sku&#34;: &#34;APPG005ON&#34; } ], &#34;sub&#34;: &#34;66459eb6a4e44e6fb0040bd20c1079a5&#34;, &#34;exp&#34;: 1619624360, &#34;iat&#34;: 1619624060 } &lt;/code&gt;&lt;/pre&gt;&lt;b&gt;if there&#39;s no active entitlement for the specific params, the entitlements section will be omitted&lt;/b&gt;.
     */
    getUsersMeEntitlementsOwnershipToken: (queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    }) => Promise<AxiosResponse<OwnershipToken>>;
    /**
     * Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlementsByAppType_ByUserId: (userId: string, queryParams: {
        appType: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<AppEntitlementPagingSlicedResult>>;
    /**
     * Get my entitlement ownership by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeEntitlementsOwnershipBySku: (queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    }) => Promise<AxiosResponse<TimedOwnership>>;
    /**
     * Get my app entitlement ownership by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace app entitlement ownership&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeEntitlementsOwnershipByAppId: (queryParams: {
        appId: string | null;
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * Get my entitlement ownership by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeEntitlementsOwnershipByItemId: (queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    }) => Promise<AxiosResponse<TimedOwnership>>;
    /**
     * Exists any user active entitlement of specified itemIds, skus and appIds
     */
    getEntitlementsOwnershipAny_ByUserId: (userId: string, queryParams?: {
        appIds?: string[];
        itemIds?: string[];
        skus?: string[];
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    getEntitlement_ByUserId_ByEntitlementId: (userId: string, entitlementId: string) => Promise<AxiosResponse<EntitlementInfo>>;
    /**
     * Get user entitlement ownership by sku.
     */
    getEntitlementsOwnershipBySku_ByUserId: (userId: string, queryParams: {
        sku: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    }) => Promise<AxiosResponse<TimedOwnership>>;
    /**
     * Get user app entitlement ownership by appId.
     */
    getEntitlementsOwnershipByAppId_ByUserId: (userId: string, queryParams: {
        appId: string | null;
    }) => Promise<AxiosResponse<Ownership>>;
    /**
     * Get user entitlement ownership by itemId.
     */
    getEntitlementsOwnershipByItemId_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
        entitlementClazz?: "APP" | "CODE" | "ENTITLEMENT" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SUBSCRIPTION";
    }) => Promise<AxiosResponse<TimedOwnership>>;
    /**
     * Get user entitlement ownership by itemIds.
     */
    getEntitlementsOwnershipByItemIds_ByUserId: (userId: string, queryParams?: {
        ids?: string[];
    }) => Promise<AxiosResponse<EntitlementOwnershipArray>>;
    /**
     * Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateSell_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: EntitlementSoldRequest) => Promise<AxiosResponse<EntitlementSoldResult>>;
    /**
     * Split a specified use count of entitlement and create a new entitlement with splitting use count.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateSplit_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: EntitlementSplitRequest) => Promise<AxiosResponse<EntitlementSplitResult>>;
    /**
     * Transfer a specified use count from entitlement A to B..Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateTransfer_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: EntitlementTransferRequest) => Promise<AxiosResponse<EntitlementTransferResult>>;
    /**
     * Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED. Client should pass item id in options if entitlement clazz is OPTIONBOX&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;
     */
    updateDecrement_ByUserId_ByEntitlementId: (userId: string, entitlementId: string, data: PublicEntitlementDecrement) => Promise<AxiosResponse<EntitlementDecrementResult>>;
};

/**
 * AUTO GENERATED
 */

declare function FulfillmentApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Redeem campaign code, this api have rate limit, default: only allow request once per user in 2 seconds&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;
     */
    createFulfillmentCode_ByUserId: (userId: string, data: FulfillCodeRequest) => Promise<AxiosResponse<FulfillmentResult>>;
};

/**
 * AUTO GENERATED
 */

declare function IapApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get iap item mapping.
     */
    getIapItemMapping: (queryParams?: {
        platform?: "APPLE" | "EPICGAMES" | "GOOGLE" | "OCULUS" | "PLAYSTATION" | "STADIA" | "STEAM" | "TWITCH" | "XBOX";
    }) => Promise<AxiosResponse<IapItemMappingInfo>>;
    /**
     * Get apple config version.
     */
    getIapAppleConfigVersion: () => Promise<AxiosResponse<AppleIapConfigVersionInfo>>;
    /**
     * Sync my game twitch drops entitlements.
     */
    updateUserMeIapTwitchSync: (data: TwitchSyncRequest) => Promise<AxiosResponse<TwitchSyncResultArray>>;
    /**
     * Synchronize with entitlements in PSN Store.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapPsnSync_ByUserId: (userId: string, data: PlayStationReconcileRequest) => Promise<AxiosResponse<PlayStationReconcileResultArray>>;
    /**
     * Sync Xbox inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapXblSync_ByUserId: (userId: string, data: XblReconcileRequest) => Promise<AxiosResponse<XblReconcileResultArray>>;
    /**
     * Sync steam inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapSteamSync_ByUserId: (userId: string, data: SteamSyncRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Sync Oculus entitlements.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapOculuSync_ByUserId: (userId: string) => Promise<AxiosResponse<OculusReconcileResultArray>>;
    /**
     * Sync twitch drops entitlements.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapTwitchSync_ByUserId: (userId: string, data: TwitchSyncRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Verify apple iap receipt and fulfill item. don&#39;t support subscriptionOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapAppleReceipt_ByUserId: (userId: string, data: AppleIapReceipt) => Promise<AxiosResponse<unknown>>;
    /**
     * Sync epic games inventory&#39;s items.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapEpicgameSync_ByUserId: (userId: string, data: EpicGamesReconcileRequest) => Promise<AxiosResponse<EpicGamesReconcileResultArray>>;
    /**
     * Verify google iap receipt and fulfill item.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapGoogleReceipt_ByUserId: (userId: string, data: GoogleIapReceipt) => Promise<AxiosResponse<GoogleReceiptResolveResult>>;
    /**
     * Verify apple iap transaction and fulfill item, support subscriptionOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    updateIapAppleReceipt_ByUserId_v2: (userId: string, data: AppleIapRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Synchronize with entitlements in PSN Store with multiple service labels.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;
     */
    updateIapPsnSyncMultiServiceLabel_ByUserId: (userId: string, data: PlayStationMultiServiceLabelsReconcileRequest) => Promise<AxiosResponse<PlayStationReconcileResultArray>>;
};

/**
 * AUTO GENERATED
 */

declare function IapSubscriptionApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query user subscription, default sort by updatedAtOther detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;
     */
    getIapSubscriptionPlatform_ByUserId_ByPlatform: (userId: string, platform: string, queryParams?: {
        activeOnly?: boolean | null;
        groupId?: string | null;
        limit?: number;
        offset?: number;
        productId?: string | null;
    }) => Promise<AxiosResponse<ThirdPartyUserSubscriptionPagingSlicedResult>>;
};

/**
 * AUTO GENERATED
 */

declare function ItemApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsBySku: (queryParams: {
        sku: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemInfo>>;
    /**
     * This API is used to search items by keyword in title, description and long description, It&#39;s language constrained, also if item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsSearch: (queryParams: {
        keyword: string | null;
        language: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        limit?: number;
        offset?: number;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemPagingSlicedResult>>;
    /**
     * This API is used to get item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByAppId: (queryParams: {
        appId: string | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemInfo>>;
    /**
     * This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsByCriteria: (queryParams?: {
        appType?: "DEMO" | "DLC" | "GAME" | "SOFTWARE";
        autoCalcEstimatedPrice?: boolean | null;
        baseAppId?: string | null;
        categoryPath?: string | null;
        features?: string | null;
        includeSubCategoryItem?: boolean | null;
        itemType?: "APP" | "BUNDLE" | "CODE" | "COINS" | "EXTENSION" | "INGAMEITEM" | "LOOTBOX" | "MEDIA" | "OPTIONBOX" | "SEASON" | "SUBSCRIPTION";
        language?: string | null;
        limit?: number;
        offset?: number;
        region?: string | null;
        sortBy?: string[];
        storeId?: string | null;
        tags?: string | null;
    }) => Promise<AxiosResponse<ItemPagingSlicedResult>>;
    /**
     * This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;
     */
    getItemsLocaleByIds: (queryParams: {
        itemIds: string | null;
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ItemInfoArray>>;
    /**
     * This API is used to get estimated prices of item
     */
    getItemsEstimatedPrice: (queryParams: {
        itemIds: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<EstimatedPriceInfoArray>>;
    /**
     * This API is used to get an item in locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;
     */
    getLocale_ByItemId: (itemId: string, queryParams?: {
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        populateBundle?: boolean | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<PopulatedItemInfo>>;
    /**
     * Get item dynamic data for a published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;
     */
    getDynamic_ByItemId: (itemId: string) => Promise<AxiosResponse<ItemDynamicDataInfo>>;
    /**
     * This API is used to get an app in locale. If app not exist in specific region, default region app will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;
     */
    getAppLocale_ByItemId: (itemId: string, queryParams?: {
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<AppInfo>>;
    /**
     * This API is used to validate user item purchase condition
     */
    createItemPurchaseConditionValidate: (data: ItemPurchaseConditionValidateRequest) => Promise<AxiosResponse<ItemPurchaseConditionValidateResultArray>>;
};

/**
 * AUTO GENERATED
 */

declare function OrderApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrders_ByUserId: (userId: string, queryParams?: {
        discounted?: boolean | null;
        itemId?: string | null;
        limit?: number;
        offset?: number;
        status?: "CHARGEBACK" | "CHARGEBACK_REVERSED" | "CHARGED" | "CLOSED" | "DELETED" | "FULFILLED" | "FULFILL_FAILED" | "INIT" | "REFUNDED" | "REFUNDING" | "REFUND_FAILED";
    }) => Promise<AxiosResponse<OrderPagingSlicedResult>>;
    /**
     * Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Restrictions for ext field&lt;/h2&gt; 1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name - &lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt; 2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names - &lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
     */
    createOrder_ByUserId: (userId: string, data: OrderCreate) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Get user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;
     */
    getOrder_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Cancel user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled order&lt;/li&gt;&lt;/ul&gt;
     */
    updateCancel_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderInfo>>;
    /**
     * Preview order price with discount code, this api is used to auto calc order price with discount code.Notes: this api don&#39;t do full order validation, only check discount code and calc final order price.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: previewed order&lt;/li&gt;&lt;/ul&gt;
     */
    createOrderDiscountPreview_ByUserId: (userId: string, data: OrderDiscountPreviewRequest) => Promise<AxiosResponse<OrderDiscountPreviewResponse>>;
    /**
     * Get user order histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<OrderHistoryInfoArray>>;
    /**
     * Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;
     */
    getReceiptPdf_ByUserId_ByOrderNo: (userId: string, orderNo: string) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function PaymentAccountApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment accounts.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment account list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentAccounts_ByUserId: (userId: string) => Promise<AxiosResponse<PaymentAccountArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Delete payment account.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;:&lt;/li&gt;&lt;/ul&gt;
     */
    deletePaymentAccount_ByUserId_ByType_ById: (userId: string, type: string, id: string) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function PaymentStationApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check and get a payment order&#39;s should pay tax.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: tax result&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentTax: (queryParams: {
        paymentOrderNo: string | null;
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        zipCode?: string | null;
    }) => Promise<AxiosResponse<TaxResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;For Neon Pay payment provider, the &#39;neonPayConfig&#39; field can be used to provide success and cancel URL. If &#39;neonPayConfig&#39; field is not present, the &#39;returnUrl&#39; will be used for both success and cancel URL.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Get payment link&lt;/li&gt;&lt;/ul&gt;
     */
    createPaymentLink: (data: PaymentUrlCreate) => Promise<AxiosResponse<PaymentUrl>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get qrcode.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: QRCode image stream&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentQrcode: (queryParams: {
        code: string | null;
    }) => Promise<AxiosResponse<BinarySchema>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment methods.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment method list&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentMethods: (queryParams: {
        paymentOrderNo: string | null;
    }) => Promise<AxiosResponse<PaymentMethodArray>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Normalize payment return url for payment provider&lt;br&gt;Payment response: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Field&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;orderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;order no&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentStatus&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;DONE: The payment was successfully completed.&lt;/li&gt;&lt;li&gt;CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant&#39;s site before completing the transaction.&lt;/li&gt;&lt;li&gt;PENDING: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to be completed. When the shopper has completed the payment you will receive a successful AUTHORISATION.&lt;/li&gt;&lt;li&gt;RECEIVED: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to clear.&lt;/li&gt;&lt;li&gt;UNKNOWN: An error occurred during the payment processing.&lt;/li&gt;&lt;li&gt;FAILED: Shopper paid failed because of various reasons.&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;payment status reason&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;xsolla&lt;/i&gt;: parameters &#39;user_id&#39;, &#39;foreinginvoice&#39;, &#39;invoice_id&#39; and &#39;status&#39; will be automatically added to the link&lt;/li&gt;&lt;li&gt;&lt;i&gt;adyen&lt;/i&gt;: https://docs.adyen.com/developers/checkout/web-sdk&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentReturnurl: (queryParams: {
        orderNo: string | null;
        paymentOrderNo: string | null;
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        returnUrl: string | null;
        PayerID?: string | null;
        foreinginvoice?: string | null;
        invoice_id?: string | null;
        payload?: string | null;
        redirectResult?: string | null;
        resultCode?: string | null;
        sessionId?: string | null;
        status?: string | null;
        token?: string | null;
        type?: string | null;
        user_id?: string | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment provider public config, at current only Strip provide public config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Public config&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentPublicconfig: (queryParams: {
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        region: string | null;
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<unknown>>;
    /**
     * @deprecated
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: customization&lt;/li&gt;&lt;/ul&gt;
     */
    getPaymentCustomization: (queryParams: {
        paymentProvider: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        region: string | null;
        sandbox?: boolean | null;
    }) => Promise<AxiosResponse<Customization>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Do payment(For now, this only support checkout.com).&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment process result&lt;/li&gt;&lt;/ul&gt;
     */
    createPayPayment_ByPaymentOrderNo: (paymentOrderNo: string, data: PaymentToken, queryParams?: {
        paymentProvider?: "ADYEN" | "ALIPAY" | "CHECKOUT" | "NEONPAY" | "PAYPAL" | "STRIPE" | "WALLET" | "WXPAY" | "XSOLLA";
        zipCode?: string | null;
    }) => Promise<AxiosResponse<PaymentProcessResult>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Get payment order info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order details&lt;/li&gt;&lt;/ul&gt;
     */
    getInfoPayment_ByPaymentOrderNo: (paymentOrderNo: string) => Promise<AxiosResponse<PaymentOrderDetails>>;
    /**
     * &lt;b&gt;[Not supported yet in AGS Shared Cloud]&lt;/b&gt;Check payment order paid status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order paid result&lt;/li&gt;&lt;/ul&gt;
     */
    getStatusPayment_ByPaymentOrderNo: (paymentOrderNo: string) => Promise<AxiosResponse<PaymentOrderPaidResult>>;
};

/**
 * AUTO GENERATED
 */

declare function RewardApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to get reward by reward code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
     */
    getRewardsByCode: (queryParams: {
        rewardCode: string | null;
    }) => Promise<AxiosResponse<RewardInfo>>;
    /**
     * This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;
     */
    getReward_ByRewardId: (rewardId: string) => Promise<AxiosResponse<RewardInfo>>;
    /**
     * This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;
     */
    getRewardsByCriteria: (queryParams?: {
        eventTopic?: string | null;
        limit?: number;
        offset?: number;
        sortBy?: string[];
    }) => Promise<AxiosResponse<RewardPagingSlicedResult>>;
};

/**
 * AUTO GENERATED
 */

declare function SectionApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to list active section contents.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store sections)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store sections)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: active section contents&lt;/li&gt;&lt;/ul&gt;
     */
    getSections_ByUserId: (userId: string, queryParams?: {
        autoCalcEstimatedPrice?: boolean | null;
        language?: string | null;
        region?: string | null;
        storeId?: string | null;
        viewId?: string | null;
    }) => Promise<AxiosResponse<SectionInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function StoreApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to list all stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;
     */
    getStores: () => Promise<AxiosResponse<StoreInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function SubscriptionApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptions_ByUserId: (userId: string, queryParams?: {
        chargeStatus?: "CHARGED" | "CHARGE_FAILED" | "NEVER" | "RECURRING_CHARGING" | "SETUP";
        itemId?: string | null;
        limit?: number;
        offset?: number;
        sku?: string | null;
        status?: "ACTIVE" | "CANCELLED" | "EXPIRED" | "INIT";
        subscribedBy?: "PLATFORM" | "USER";
    }) => Promise<AxiosResponse<SubscriptionPagingSlicedResult>>;
    /**
     * Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.&lt;br&gt;&lt;b&gt;ACTIVE USER subscription can&#39;t do subscribe again.&lt;/b&gt;&lt;br&gt;&lt;b&gt;The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.&lt;/b&gt;&lt;br&gt;User with permission SANDBOX will create sandbox subscription that not real paid.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox subscription)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created subscription&lt;/li&gt;&lt;/ul&gt;
     */
    createSubscription_ByUserId: (userId: string, data: SubscribeRequest) => Promise<AxiosResponse<unknown>>;
    /**
     * Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscription_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string) => Promise<AxiosResponse<SubscriptionInfo>>;
    /**
     * Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;
     */
    getSubscriptionsSubscribableByItemId_ByUserId: (userId: string, queryParams: {
        itemId: string | null;
    }) => Promise<AxiosResponse<Subscribable>>;
    /**
     * Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateCancel_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string, data: CancelRequest) => Promise<AxiosResponse<SubscriptionInfo>>;
    /**
     * Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription history&lt;/li&gt;&lt;/ul&gt;
     */
    getHistory_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string, queryParams?: {
        excludeFree?: boolean | null;
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<BillingHistoryPagingSlicedResult>>;
    /**
     * Request to change a subscription billing account, this will guide user to payment station. The actual change will happen at the 0 payment notification successfully handled.&lt;br&gt;Only ACTIVE USER subscription with real currency billing account can be changed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;
     */
    updateBillingAccount_ByUserId_BySubscriptionId: (userId: string, subscriptionId: string) => Promise<AxiosResponse<SubscriptionInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function ViewApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * This API is used to get all views.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store views)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store views)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: all views&lt;/li&gt;&lt;/ul&gt;
     */
    getViews_ByUserId: (userId: string, queryParams?: {
        language?: string | null;
        storeId?: string | null;
    }) => Promise<AxiosResponse<ViewInfoArray>>;
};

/**
 * AUTO GENERATED
 */

declare function WalletApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * get my wallet by currency code and namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt; &lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user wallet&lt;/b&gt;&lt;/li&gt; &lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user wallet&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    getUserMeWallet_ByCurrencyCode: (currencyCode: string) => Promise<AxiosResponse<PlatformWallet>>;
    /**
     * get a wallet by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;
     */
    getWallet_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string) => Promise<AxiosResponse<PlatformWallet>>;
    /**
     * List wallet transactions by currency code ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: currency transaction info&lt;/li&gt;&lt;/ul&gt;
     */
    getTransactions_ByUserId_ByCurrencyCode: (userId: string, currencyCode: string, queryParams?: {
        limit?: number;
        offset?: number;
    }) => Promise<AxiosResponse<WalletTransactionPagingSlicedResult>>;
};

/**
 * AUTO GENERATED
 */

declare const Platform: {
    OrderDedicatedAdminApi: typeof OrderDedicatedAdminApi;
    ItemAdminApi: typeof ItemAdminApi;
    PaymentDedicatedAdminApi: typeof PaymentDedicatedAdminApi;
    PaymentConfigAdminApi: typeof PaymentConfigAdminApi;
    FulfillmentScriptAdminApi: typeof FulfillmentScriptAdminApi;
    ViewAdminApi: typeof ViewAdminApi;
    OrderAdminApi: typeof OrderAdminApi;
    StoreAdminApi: typeof StoreAdminApi;
    RewardAdminApi: typeof RewardAdminApi;
    WalletAdminApi: typeof WalletAdminApi;
    SectionAdminApi: typeof SectionAdminApi;
    CampaignAdminApi: typeof CampaignAdminApi;
    KeyGroupAdminApi: typeof KeyGroupAdminApi;
    CategoryAdminApi: typeof CategoryAdminApi;
    CurrencyAdminApi: typeof CurrencyAdminApi;
    EntitlementAdminApi: typeof EntitlementAdminApi;
    TradeActionAdminApi: typeof TradeActionAdminApi;
    SubscriptionAdminApi: typeof SubscriptionAdminApi;
    IapAdminApi: typeof IapAdminApi;
    PaymentAdminApi: typeof PaymentAdminApi;
    DlcAdminApi: typeof DlcAdminApi;
    InvoiceAdminApi: typeof InvoiceAdminApi;
    FulfillmentAdminApi: typeof FulfillmentAdminApi;
    IapNotificationAdminApi: typeof IapNotificationAdminApi;
    IapSubscriptionAdminApi: typeof IapSubscriptionAdminApi;
    RevocationAdminApi: typeof RevocationAdminApi;
    TicketAdminApi: typeof TicketAdminApi;
    ServicePluginConfigAdminApi: typeof ServicePluginConfigAdminApi;
    ClawbackAdminApi: typeof ClawbackAdminApi;
    PaymentCallbackConfigAdminApi: typeof PaymentCallbackConfigAdminApi;
    SessionPlatformAdminApi: typeof SessionPlatformAdminApi;
    AchievementPlatformAdminApi: typeof AchievementPlatformAdminApi;
    AnonymizationAdminApi: typeof AnonymizationAdminApi;
    PlatformAccountClosureAdminApi: typeof PlatformAccountClosureAdminApi;
    CatalogChangesAdminApi: typeof CatalogChangesAdminApi;
    PlatformAdminApi: typeof PlatformAdminApi;
    DlcApi: typeof DlcApi;
    StoreApi: typeof StoreApi;
    CategoryApi: typeof CategoryApi;
    CurrencyApi: typeof CurrencyApi;
    ItemApi: typeof ItemApi;
    PaymentStationApi: typeof PaymentStationApi;
    RewardApi: typeof RewardApi;
    IapApi: typeof IapApi;
    ViewApi: typeof ViewApi;
    OrderApi: typeof OrderApi;
    SectionApi: typeof SectionApi;
    EntitlementApi: typeof EntitlementApi;
    SubscriptionApi: typeof SubscriptionApi;
    FulfillmentApi: typeof FulfillmentApi;
    PaymentAccountApi: typeof PaymentAccountApi;
    WalletApi: typeof WalletApi;
    IapSubscriptionApi: typeof IapSubscriptionApi;
    version: () => void;
};

declare const OrderStatus: zod.ZodEnum<["CHARGEBACK", "CHARGEBACK_REVERSED", "CHARGED", "CLOSED", "DELETED", "FULFILLED", "FULFILL_FAILED", "INIT", "REFUNDED", "REFUNDING", "REFUND_FAILED"]>;

/**
 */
declare class PlatformClient {
    static getCurrencyMap(sdk: AccelByteSDK): Promise<Map<string, CurrencyInfo>>;
    /**
     * get a map of wallet represented by its currency code. Taken from LegacyWalletApi
     */
    static getWalletMap: (userId: string, currencyCodes: string[], sdk: AccelByteSDK) => Promise<Map<string, WalletInfo>>;
    /**
     * Fetch all information needed for a user to check the user's availability to purchase the item
     */
    static fetchPrePurchaseInformation: ({ userId, item, sdk }: {
        userId?: string | null;
        item: ItemInfo;
        sdk: AccelByteSDK;
    }) => Promise<{
        currencyMapResult: Map<string, CurrencyInfo>;
        availableItemInfoResult: axios.AxiosResponse<ItemDynamicDataInfo, any>;
        itemOwnershipResult: axios.AxiosResponse<Ownership, any> | null;
        baseAppOwnershipResult: axios.AxiosResponse<Ownership, any> | null;
        purchaseConditionValidationResult: axios.AxiosResponse<ItemPurchaseConditionValidateResultArray, any> | null;
    }>;
}

export { AchievementInfo, AchievementPlatformAdmin$, AchievementPlatformAdminApi, Action, ActionRequest, AdditionalData, AdditionalDataEntitlement, AdminEntitlementDecrement, AdminEntitlementSoldRequest, AdminOrderCreate, AdyenConfig, AliPayConfig, AnonymizationAdmin$, AnonymizationAdminApi, AppConfig, AppEntitlementInfo, AppEntitlementPagingSlicedResult, AppInfo, AppLocalization, AppUpdate, AppleIapConfigInfo, AppleIapConfigRequest, AppleIapConfigVersionInfo, AppleIapReceipt, AppleIapRequest, AvailableComparison, AvailablePredicate, AvailablePredicateArray, AvailablePrice, BaseCustomConfig, BaseTlsConfig, BasicCategoryInfo, BasicCategoryInfoArray, BasicItem, BasicItemArray, BillingAccount, BillingHistoryInfo, BillingHistoryPagingSlicedResult, BinarySchema, BoxItem, BulkCreditRequest, BulkCreditResult, BulkDebitRequest, BulkDebitResult, BulkEntitlementGrantRequest, BulkEntitlementGrantResult, BulkEntitlementRevokeResult, BulkOperationResult, BulkRegionDataChangeRequest, BundledItemInfo, CampaignAdmin$, CampaignAdminApi, CampaignBatchNameChange, CampaignBatchNameInfo, CampaignBatchNameInfoArray, CampaignCreate, CampaignDynamicInfo, CampaignIfc, CampaignInfo, CampaignPagingSlicedResult, CampaignUpdate, CancelRequest, CatalogChangeInfo, CatalogChangePagingResult, CatalogChangeStatistics, CatalogChangesAdmin$, CatalogChangesAdminApi, CatalogConfigInfo, CatalogConfigUpdate, CatalogDefinitionInfo, CatalogDefinitionInfoArray, Category$, CategoryAdmin$, CategoryAdminApi, CategoryApi, CategoryCreate, CategoryInfo, CategoryInfoArray, CategoryUpdate, CheckoutConfig, ClawbackAdmin$, ClawbackAdminApi, ClawbackInfo, ClientRequestParameter, ClientTransaction, CodeCreate, CodeCreateResult, CodeInfo, CodeInfoPagingSlicedResult, ConditionGroup, ConditionGroupValidateResult, ConditionMatchResult, ConsumableEntitlementRevocationConfig, ConsumeItem, CreditPayload, CreditRequest, CreditResult, CreditSummary, Currency$, CurrencyAdmin$, CurrencyAdminApi, CurrencyApi, CurrencyConfig, CurrencyCreate, CurrencyInfo, CurrencyInfoArray, CurrencySummary, CurrencyUpdate, CurrencyWallet, CurrencyWalletArray, Customization, DebitByCurrencyCodeRequest, DebitByWalletPlatformRequest, DebitPayload, DebitRequest, DebitResult, DeductionDetail, DeleteRewardConditionRequest, DetailedWalletTransactionInfo, DetailedWalletTransactionPagingSlicedResult, DiscountCategory, DiscountCodeDeductionDetail, DiscountCodeInfo, DiscountConfig, DiscountItem, Dlc$, DlcAdmin$, DlcAdminApi, DlcApi, DlcConfigRewardShortInfo, DlcItem, DlcItemConfigInfo, DlcItemConfigUpdate, DlcRecord, DurableEntitlementRevocationConfig, Entitlement$, EntitlementAdmin$, EntitlementAdminApi, EntitlementApi, EntitlementConfigInfo, EntitlementDecrementResult, EntitlementGrant, EntitlementGrantResult, EntitlementHistoryInfo, EntitlementHistoryInfoArray, EntitlementIfc, EntitlementInfo, EntitlementInfoArray, EntitlementLootBoxReward, EntitlementOriginSyncResult, EntitlementOwnership, EntitlementOwnershipArray, EntitlementPagingSlicedResult, EntitlementPlatformConfigInfo, EntitlementPlatformConfigUpdate, EntitlementPrechekResult, EntitlementRevocationConfig, EntitlementRevokeRequest, EntitlementRevokeResult, EntitlementSoldRequest, EntitlementSoldResult, EntitlementSplitRequest, EntitlementSplitResult, EntitlementSummary, EntitlementTransferRequest, EntitlementTransferResult, EntitlementUpdate, EpicGamesDlcSyncRequest, EpicGamesIapConfigInfo, EpicGamesIapConfigRequest, EpicGamesReconcileRequest, EpicGamesReconcileResult, EpicGamesReconcileResultArray, ErrorEntity, EstimatedPriceInfo, EstimatedPriceInfoArray, EventAdditionalData, EventPayload, ExportStoreRequest, ExportStoreToCsvRequest, ExtensionFulfillmentSummary, ExternalPaymentOrderCreate, FieldValidationError, FixedPeriodRotationConfig, FulFillItemPayload, FulfillBundledItemResult, FulfillCodeRequest, FulfillItemResult, Fulfillment$, FulfillmentActionHistory, FulfillmentAdmin$, FulfillmentAdminApi, FulfillmentApi, FulfillmentError, FulfillmentHistoryInfo, FulfillmentHistoryPagingSlicedResult, FulfillmentInfo, FulfillmentItem, FulfillmentItemArray, FulfillmentPagingSlicedResult, FulfillmentRequest, FulfillmentResult, FulfillmentScriptAdmin$, FulfillmentScriptAdminApi, FulfillmentScriptCreate, FulfillmentScriptInfo, FulfillmentScriptInfoArray, FulfillmentScriptUpdate, FulfillmentStateInfo, FulfillmentV2Request, FulfillmentV2RequestItem, FulfillmentV2Result, FullAppInfo, FullCategoryInfo, FullCategoryInfoArray, FullItemInfo, FullItemInfoArray, FullItemPagingResult, FullItemPagingSlicedResult, FullSectionInfo, FullViewInfo, GoogleIapConfigInfo, GoogleIapConfigRequest, GoogleIapReceipt, GoogleReceiptResolveResult, GrantSubscriptionDaysRequest, GrpcServerInfo, HierarchicalCategoryInfoArray, Iap$, IapAdmin$, IapAdminApi, IapApi, IapClawbackPagingSlicedResult, IapConsumeHistoryInfo, IapConsumeHistoryPagingSlicedResult, IapItemConfigInfo, IapItemConfigUpdate, IapItemEntry, IapItemFlatEntry, IapItemMappingInfo, IapNotificationAdmin$, IapNotificationAdminApi, IapOrderInfo, IapOrderPagingSlicedResult, IapSubscription$, IapSubscriptionAdmin$, IapSubscriptionAdminApi, IapSubscriptionApi, Image, ImportErrorDetails, ImportStoreAppInfo, ImportStoreCategoryInfo, ImportStoreError, ImportStoreHistoryInfo, ImportStoreHistoryPagingResult, ImportStoreItemInfo, ImportStoreResult, ImportStoreSectionInfo, ImportStoreViewInfo, InGameItemSync, InventoryConfig, InvoiceAdmin$, InvoiceAdminApi, InvoiceCurrencySummary, InvoiceSummary, Item$, ItemAcquireRequest, ItemAcquireResult, ItemAdmin$, ItemAdminApi, ItemApi, ItemCreate, ItemDynamicDataInfo, ItemId, ItemIdArray, ItemInfo, ItemInfoArray, ItemNaming, ItemPagingSlicedResult, ItemPurchaseConditionValidateRequest, ItemPurchaseConditionValidateResult, ItemPurchaseConditionValidateResultArray, ItemReturnRequest, ItemRevocation, ItemSnapshot, ItemTypeConfigCreate, ItemTypeConfigInfo, ItemTypeConfigInfoArray, ItemTypeConfigUpdate, ItemUpdate, KeyGroupAdmin$, KeyGroupAdminApi, KeyGroupCreate, KeyGroupDynamicInfo, KeyGroupInfo, KeyGroupPagingSlicedResult, KeyGroupUpdate, KeyInfo, KeyPagingSliceResult, ListViewInfo, ListViewInfoArray, Localization, LootBoxConfig, LootBoxPluginConfigInfo, LootBoxPluginConfigUpdate, LootBoxReward, MockIapReceipt, NeonPayConfig, NotificationPagingSlicedResult, NotificationProcessResult, OculusIapConfigInfo, OculusIapConfigRequest, OculusReconcileResult, OculusReconcileResultArray, Operation, OperationRequest, OptionBoxConfig, Order, Order$, OrderAdmin$, OrderAdminApi, OrderApi, OrderBundleItemInfo, OrderCreate, OrderCreationOptions, OrderDedicatedAdmin$, OrderDedicatedAdminApi, OrderDiscountPreviewRequest, OrderDiscountPreviewResponse, OrderGrantInfo, OrderHistoryInfo, OrderHistoryInfoArray, OrderInfo, OrderPagingResult, OrderPagingSlicedResult, OrderRefundCreate, OrderStatistics, OrderStatus, OrderSummary, OrderSyncResult, OrderUpdate, Ownership, OwnershipToken, Paging, PayPalConfig, PaymentAccount, PaymentAccount$, PaymentAccountApi, PaymentAccountArray, PaymentAdmin$, PaymentAdminApi, PaymentCallbackConfigAdmin$, PaymentCallbackConfigAdminApi, PaymentCallbackConfigInfo, PaymentCallbackConfigUpdate, PaymentConfigAdmin$, PaymentConfigAdminApi, PaymentData, PaymentDedicatedAdmin$, PaymentDedicatedAdminApi, PaymentDomainWhitelistConfigEdit, PaymentDomainWhitelistConfigInfo, PaymentMerchantConfigInfo, PaymentMethod, PaymentMethodArray, PaymentNotificationInfo, PaymentNotificationPagingSlicedResult, PaymentOrder, PaymentOrderChargeRequest, PaymentOrderChargeStatus, PaymentOrderCreate, PaymentOrderCreateResult, PaymentOrderDetails, PaymentOrderInfo, PaymentOrderNeonPayConfig, PaymentOrderNotifySimulation, PaymentOrderPagingSlicedResult, PaymentOrderPaidResult, PaymentOrderRefund, PaymentOrderRefundResult, PaymentOrderSyncResult, PaymentProcessResult, PaymentProviderConfigEdit, PaymentProviderConfigInfo, PaymentProviderConfigPagingSlicedResult, PaymentRequest, PaymentStation$, PaymentStationApi, PaymentTaxConfigEdit, PaymentTaxConfigInfo, PaymentToken, PaymentUrl, PaymentUrlCreate, Permission, Platform, PlatformAccountClosureAdmin$, PlatformAccountClosureAdminApi, PlatformAccountClosureHistoryInfo, PlatformAccountClosureHistoryInfoArray, PlatformAdmin$, PlatformAdminApi, PlatformClient, PlatformDlcConfigInfo, PlatformDlcConfigUpdate, PlatformDlcEntry, PlatformOwnership, PlatformReward, PlatformRewardCurrency, PlatformRewardItem, PlatformSubscribeRequest, PlatformWallet, PlatformWalletConfigInfo, PlatformWalletConfigUpdate, PlayStationDlcSyncMultiServiceLabelsRequest, PlayStationDlcSyncRequest, PlayStationIapConfigInfo, PlayStationMultiServiceLabelsReconcileRequest, PlayStationReconcileRequest, PlayStationReconcileResult, PlayStationReconcileResultArray, PlaystationIapConfigRequest, PopulatedItemInfo, PreCheckFulfillmentRequest, Predicate, PredicateValidateResult, PsnEntitlementOwnershipRequest, PublicCustomConfigInfo, PublicEntitlementDecrement, PublicEntitlementHistoryInfo, PublicEntitlementMetadata, PurchaseCondition, PurchaseConditionUpdate, PurchasedItemCount, Recurring, RecurringChargeResult, RedeemHistoryInfo, RedeemHistoryPagingSlicedResult, RedeemRequest, RedeemResult, RedeemableItem, RegionDataChange, RegionDataItem, RegionDataItemDto, RequestHistory, Requirement, RevocationAdmin$, RevocationAdminApi, RevocationConfigInfo, RevocationConfigUpdate, RevocationError, RevocationHistoryInfo, RevocationHistoryPagingSlicedResult, RevocationPluginConfigInfo, RevocationPluginConfigUpdate, RevocationRequest, RevocationResult, RevokeCurrency, RevokeEntitlement, RevokeEntitlementPayload, RevokeEntry, RevokeFulfillmentV2Result, RevokeItem, RevokeItemSummary, RevokeResult, RevokeUseCountRequest, Reward$, RewardAdmin$, RewardAdminApi, RewardApi, RewardCondition, RewardCreate, RewardInfo, RewardItem, RewardMigrationResult, RewardPagingSlicedResult, RewardUpdate, RewardsRequest, SaleConfig, Section$, SectionAdmin$, SectionAdminApi, SectionApi, SectionCreate, SectionInfo, SectionInfoArray, SectionItem, SectionPagingSlicedResult, SectionPluginConfigInfo, SectionPluginConfigUpdate, SectionUpdate, ServicePluginConfigAdmin$, ServicePluginConfigAdminApi, ServicePluginConfigInfo, ServicePluginConfigUpdate, SessionPlatformAdmin$, SessionPlatformAdminApi, SimpleDlcRewardItem, SimpleEntitlement, SimpleUserDlc, SimpleUserDlcRewardContent, SimpleUserDlcRewardContentsResponse, SimpleWallet, Slide, StackableEntitlementInfo, StackableEntitlementInfoArray, SteamAchievement, SteamAchievementUpdateRequest, SteamDlcSyncRequest, SteamIapConfig, SteamIapConfigInfo, SteamIapConfigRequest, SteamSyncRequest, Store$, StoreAdmin$, StoreAdminApi, StoreApi, StoreBackupInfo, StoreCreate, StoreInfo, StoreInfoArray, StoreUpdate, StreamEvent, StreamEventBody, StripeConfig, SubItemAvailablePrice, Subscribable, SubscribeRequest, Subscription$, SubscriptionActivityInfo, SubscriptionActivityPagingSlicedResult, SubscriptionAdmin$, SubscriptionAdminApi, SubscriptionApi, SubscriptionInfo, SubscriptionPagingSlicedResult, SubscriptionSummary, TaxResult, TestResult, ThirdPartySubscriptionOwnership, ThirdPartySubscriptionTransactionHistoryInfo, ThirdPartySubscriptionTransactionHistoryPagingSlicedResult, ThirdPartySubscriptionTransactionInfo, ThirdPartySubscriptionTransactionPagingSlicedResult, ThirdPartyUserSubscriptionInfo, ThirdPartyUserSubscriptionPagingSlicedResult, TicketAcquireRequest, TicketAcquireResult, TicketAdmin$, TicketAdminApi, TicketBoothId, TicketDynamicInfo, TicketSaleDecrementRequest, TicketSaleIncrementRequest, TicketSaleIncrementResult, TimeLimitedBalance, TimedOwnership, TlsConfig, TradeActionAdmin$, TradeActionAdminApi, TradeActionPagingSlicedResult, TradeChainActionHistoryInfo, TradeChainedActionCommitRequest, TradeNotification, Transaction, TransactionAmountDetails, TwitchIapConfigInfo, TwitchIapConfigRequest, TwitchSyncRequest, TwitchSyncResult, TwitchSyncResultArray, UserDlc, UserDlcRecord, UserDlcRecordArray, UserEntitlementHistoryPagingSlicedResult, UserEntitlementHistoryPagingSlicedResultArray, ValidationErrorEntity, View$, ViewAdmin$, ViewAdminApi, ViewApi, ViewCreate, ViewInfo, ViewInfoArray, ViewUpdate, Wallet$, WalletAdmin$, WalletAdminApi, WalletApi, WalletInfo, WalletPagingSlicedResult, WalletRevocationConfig, WalletTransactionInfo, WalletTransactionPagingSlicedResult, WxPayConfigInfo, WxPayConfigRequest, XblAchievementUpdateRequest, XblDlcSyncRequest, XblEntitlementOwnershipRequest, XblIapConfigInfo, XblIapConfigRequest, XblReconcileRequest, XblReconcileResult, XblReconcileResultArray, XblUserAchievements, XblUserSessionRequest, XboxAchievement, XsollaConfig, XsollaPaywallConfig, XsollaPaywallConfigRequest };
