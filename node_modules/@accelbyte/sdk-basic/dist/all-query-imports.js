import {
  AnonymizationAdminApi,
  ConfigAdminApi,
  FileUploadAdminApi,
  FileUploadApi,
  MiscAdminApi,
  MiscApi,
  NamespaceAdminApi,
  NamespaceApi,
  UserProfileAdminApi,
  UserProfileApi
} from "./chunk-SVP536Z5.js";

// src/generated-admin/queries/AnonymizationAdmin.query.ts
import { useMutation } from "@tanstack/react-query";
var Key_AnonymizationAdmin = /* @__PURE__ */ ((Key_AnonymizationAdmin2) => {
  Key_AnonymizationAdmin2["AnonymizationProfile_ByUserId"] = "Basic.AnonymizationAdmin.AnonymizationProfile_ByUserId";
  return Key_AnonymizationAdmin2;
})(Key_AnonymizationAdmin || {});
var useAnonymizationAdminApi_DeleteAnonymizationProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationProfile_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Basic.AnonymizationAdmin.AnonymizationProfile_ByUserId" /* AnonymizationProfile_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ConfigAdmin.query.ts
import { useMutation as useMutation2, useQuery } from "@tanstack/react-query";
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["Config"] = "Basic.ConfigAdmin.Config";
  Key_ConfigAdmin2["Config_ByConfigKey"] = "Basic.ConfigAdmin.Config_ByConfigKey";
  Key_ConfigAdmin2["PublisherConfig_ByConfigKey"] = "Basic.ConfigAdmin.PublisherConfig_ByConfigKey";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_CreateConfigMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createConfig(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Basic.ConfigAdmin.Config" /* Config */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_DeleteConfig_ByConfigKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteConfig_ByConfigKey(
      input.configKey
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Basic.ConfigAdmin.Config_ByConfigKey" /* Config_ByConfigKey */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_GetConfig_ByConfigKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByConfigKey(
      input2.configKey
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Basic.ConfigAdmin.Config_ByConfigKey" /* Config_ByConfigKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfig_ByConfigKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfig_ByConfigKey(
      input.configKey,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Basic.ConfigAdmin.Config_ByConfigKey" /* Config_ByConfigKey */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_GetPublisherConfig_ByConfigKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPublisherConfig_ByConfigKey(input2.configKey);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Basic.ConfigAdmin.PublisherConfig_ByConfigKey" /* PublisherConfig_ByConfigKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/FileUploadAdmin.query.ts
import { useMutation as useMutation3 } from "@tanstack/react-query";
var Key_FileUploadAdmin = /* @__PURE__ */ ((Key_FileUploadAdmin2) => {
  Key_FileUploadAdmin2["File_ByUserId"] = "Basic.FileUploadAdmin.File_ByUserId";
  Key_FileUploadAdmin2["File_ByFolder"] = "Basic.FileUploadAdmin.File_ByFolder";
  return Key_FileUploadAdmin2;
})(Key_FileUploadAdmin || {});
var useFileUploadAdminApi_CreateFile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByUserId(
      input.userId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Basic.FileUploadAdmin.File_ByUserId" /* File_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFileUploadAdminApi_CreateFile_ByFolderMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByFolder(
      input.folder,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Basic.FileUploadAdmin.File_ByFolder" /* File_ByFolder */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/MiscAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_MiscAdmin = /* @__PURE__ */ ((Key_MiscAdmin2) => {
  Key_MiscAdmin2["MiscCountries"] = "Basic.MiscAdmin.MiscCountries";
  Key_MiscAdmin2["MiscLanguages"] = "Basic.MiscAdmin.MiscLanguages";
  Key_MiscAdmin2["MiscTimezones"] = "Basic.MiscAdmin.MiscTimezones";
  Key_MiscAdmin2["MiscCountrygroups"] = "Basic.MiscAdmin.MiscCountrygroups";
  Key_MiscAdmin2["MiscCountrygroup"] = "Basic.MiscAdmin.MiscCountrygroup";
  Key_MiscAdmin2["MiscCountrygroup_ByCountryGroupCode"] = "Basic.MiscAdmin.MiscCountrygroup_ByCountryGroupCode";
  return Key_MiscAdmin2;
})(Key_MiscAdmin || {});
var useMiscAdminApi_GetMiscCountries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscCountries(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Basic.MiscAdmin.MiscCountries" /* MiscCountries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_GetMiscLanguages = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscLanguages();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Basic.MiscAdmin.MiscLanguages" /* MiscLanguages */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_GetMiscTimezones = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscTimezones();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Basic.MiscAdmin.MiscTimezones" /* MiscTimezones */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_GetMiscCountrygroups = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscCountrygroups(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Basic.MiscAdmin.MiscCountrygroups" /* MiscCountrygroups */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_CreateMiscCountrygroupMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MiscAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createMiscCountrygroup(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Basic.MiscAdmin.MiscCountrygroup" /* MiscCountrygroup */],
    mutationFn,
    ...options
  });
};
var useMiscAdminApi_DeleteMiscCountrygroup_ByCountryGroupCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MiscAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteMiscCountrygroup_ByCountryGroupCode(input.countryGroupCode);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Basic.MiscAdmin.MiscCountrygroup_ByCountryGroupCode" /* MiscCountrygroup_ByCountryGroupCode */],
    mutationFn,
    ...options
  });
};
var useMiscAdminApi_UpdateMiscCountrygroup_ByCountryGroupCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MiscAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateMiscCountrygroup_ByCountryGroupCode(input.countryGroupCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Basic.MiscAdmin.MiscCountrygroup_ByCountryGroupCode" /* MiscCountrygroup_ByCountryGroupCode */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/NamespaceAdmin.query.ts
import { useMutation as useMutation5, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_NamespaceAdmin = /* @__PURE__ */ ((Key_NamespaceAdmin2) => {
  Key_NamespaceAdmin2["Namespaces"] = "Basic.NamespaceAdmin.Namespaces";
  Key_NamespaceAdmin2["Namespace"] = "Basic.NamespaceAdmin.Namespace";
  Key_NamespaceAdmin2["Namespace_ByNamespace"] = "Basic.NamespaceAdmin.Namespace_ByNamespace";
  Key_NamespaceAdmin2["Game"] = "Basic.NamespaceAdmin.Game";
  Key_NamespaceAdmin2["Basic"] = "Basic.NamespaceAdmin.Basic";
  Key_NamespaceAdmin2["Child"] = "Basic.NamespaceAdmin.Child";
  Key_NamespaceAdmin2["Status"] = "Basic.NamespaceAdmin.Status";
  Key_NamespaceAdmin2["Context"] = "Basic.NamespaceAdmin.Context";
  Key_NamespaceAdmin2["Publisher"] = "Basic.NamespaceAdmin.Publisher";
  return Key_NamespaceAdmin2;
})(Key_NamespaceAdmin || {});
var useNamespaceAdminApi_GetNamespaces = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNamespaces(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Basic.NamespaceAdmin.Namespaces" /* Namespaces */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_CreateNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNamespace(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Basic.NamespaceAdmin.Namespace" /* Namespace */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_DeleteNamespace_ByNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteNamespace_ByNamespace();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Basic.NamespaceAdmin.Namespace_ByNamespace" /* Namespace_ByNamespace */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_GetNamespace_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNamespace_ByNamespace(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Basic.NamespaceAdmin.Namespace_ByNamespace" /* Namespace_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_GetGame = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGame(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Basic.NamespaceAdmin.Game" /* Game */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_PatchBasicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchBasic(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Basic.NamespaceAdmin.Basic" /* Basic */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_GetChild = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getChild(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Basic.NamespaceAdmin.Child" /* Child */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_PatchStatusMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchStatus(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Basic.NamespaceAdmin.Status" /* Status */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_GetContext = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getContext();
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Basic.NamespaceAdmin.Context" /* Context */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_GetPublisher = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPublisher();
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Basic.NamespaceAdmin.Publisher" /* Publisher */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/UserProfileAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery4 } from "@tanstack/react-query";
var Key_UserProfileAdmin = /* @__PURE__ */ ((Key_UserProfileAdmin2) => {
  Key_UserProfileAdmin2["ProfilePublic"] = "Basic.UserProfileAdmin.ProfilePublic";
  Key_UserProfileAdmin2["ProfilesByPublicId"] = "Basic.UserProfileAdmin.ProfilesByPublicId";
  Key_UserProfileAdmin2["Profile_ByUserId"] = "Basic.UserProfileAdmin.Profile_ByUserId";
  Key_UserProfileAdmin2["Profiles_ByUserId"] = "Basic.UserProfileAdmin.Profiles_ByUserId";
  Key_UserProfileAdmin2["ProfileStatus_ByUserId"] = "Basic.UserProfileAdmin.ProfileStatus_ByUserId";
  Key_UserProfileAdmin2["ProfilesCustomAttributes_ByUserId"] = "Basic.UserProfileAdmin.ProfilesCustomAttributes_ByUserId";
  Key_UserProfileAdmin2["ProfileCustomAttribute_ByUserId"] = "Basic.UserProfileAdmin.ProfileCustomAttribute_ByUserId";
  Key_UserProfileAdmin2["ProfilesPrivateCustomAttributes_ByUserId"] = "Basic.UserProfileAdmin.ProfilesPrivateCustomAttributes_ByUserId";
  Key_UserProfileAdmin2["ProfilePrivateCustomAttribute_ByUserId"] = "Basic.UserProfileAdmin.ProfilePrivateCustomAttribute_ByUserId";
  return Key_UserProfileAdmin2;
})(Key_UserProfileAdmin || {});
var useUserProfileAdminApi_CreateProfilePublicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfilePublic(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Basic.UserProfileAdmin.ProfilePublic" /* ProfilePublic */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfilesByPublicId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfilesByPublicId(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Basic.UserProfileAdmin.ProfilesByPublicId" /* ProfilesByPublicId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_DeleteProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteProfile_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Basic.UserProfileAdmin.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfiles_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfiles_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Basic.UserProfileAdmin.Profiles_ByUserId" /* Profiles_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_UpdateProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfile_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Basic.UserProfileAdmin.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_PatchProfileStatus_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchProfileStatus_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Basic.UserProfileAdmin.ProfileStatus_ByUserId" /* ProfileStatus_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfilesCustomAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesCustomAttributes_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Basic.UserProfileAdmin.ProfilesCustomAttributes_ByUserId" /* ProfilesCustomAttributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_UpdateProfileCustomAttribute_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfileCustomAttribute_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Basic.UserProfileAdmin.ProfileCustomAttribute_ByUserId" /* ProfileCustomAttribute_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfilesPrivateCustomAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesPrivateCustomAttributes_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Basic.UserProfileAdmin.ProfilesPrivateCustomAttributes_ByUserId" /* ProfilesPrivateCustomAttributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_UpdateProfilePrivateCustomAttribute_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfilePrivateCustomAttribute_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Basic.UserProfileAdmin.ProfilePrivateCustomAttribute_ByUserId" /* ProfilePrivateCustomAttribute_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/FileUpload.query.ts
import { useMutation as useMutation7 } from "@tanstack/react-query";
var Key_FileUpload = /* @__PURE__ */ ((Key_FileUpload2) => {
  Key_FileUpload2["File_ByUserId"] = "Basic.FileUpload.File_ByUserId";
  Key_FileUpload2["File_ByFolder"] = "Basic.FileUpload.File_ByFolder";
  return Key_FileUpload2;
})(Key_FileUpload || {});
var useFileUploadApi_CreateFile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByUserId(
      input.userId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Basic.FileUpload.File_ByUserId" /* File_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFileUploadApi_CreateFile_ByFolderMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByFolder(
      input.folder,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Basic.FileUpload.File_ByFolder" /* File_ByFolder */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Misc.query.ts
import { useQuery as useQuery5 } from "@tanstack/react-query";
var Key_Misc = /* @__PURE__ */ ((Key_Misc2) => {
  Key_Misc2["MiscTime"] = "Basic.Misc.MiscTime";
  Key_Misc2["MiscCountries"] = "Basic.Misc.MiscCountries";
  Key_Misc2["MiscLanguages"] = "Basic.Misc.MiscLanguages";
  Key_Misc2["MiscTimezones"] = "Basic.Misc.MiscTimezones";
  return Key_Misc2;
})(Key_Misc || {});
var useMiscApi_GetMiscTime = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscTime();
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Basic.Misc.MiscTime" /* MiscTime */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscApi_GetMiscCountries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscCountries(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Basic.Misc.MiscCountries" /* MiscCountries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscApi_GetMiscLanguages = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscLanguages();
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Basic.Misc.MiscLanguages" /* MiscLanguages */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscApi_GetMiscTimezones = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscTimezones();
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Basic.Misc.MiscTimezones" /* MiscTimezones */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Namespace.query.ts
import { useQuery as useQuery6 } from "@tanstack/react-query";
var Key_Namespace = /* @__PURE__ */ ((Key_Namespace2) => {
  Key_Namespace2["Namespaces"] = "Basic.Namespace.Namespaces";
  Key_Namespace2["Namespace_ByNamespace"] = "Basic.Namespace.Namespace_ByNamespace";
  Key_Namespace2["Publisher"] = "Basic.Namespace.Publisher";
  return Key_Namespace2;
})(Key_Namespace || {});
var useNamespaceApi_GetNamespaces = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNamespaces(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Basic.Namespace.Namespaces" /* Namespaces */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceApi_GetNamespace_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNamespace_ByNamespace();
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Basic.Namespace.Namespace_ByNamespace" /* Namespace_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceApi_GetPublisher = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPublisher();
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Basic.Namespace.Publisher" /* Publisher */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/UserProfile.query.ts
import { useMutation as useMutation8, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_UserProfile = /* @__PURE__ */ ((Key_UserProfile2) => {
  Key_UserProfile2["ProfilesPublic"] = "Basic.UserProfile.ProfilesPublic";
  Key_UserProfile2["ProfilePublic"] = "Basic.UserProfile.ProfilePublic";
  Key_UserProfile2["UsersMeProfiles"] = "Basic.UserProfile.UsersMeProfiles";
  Key_UserProfile2["UserMeProfile"] = "Basic.UserProfile.UserMeProfile";
  Key_UserProfile2["Profiles_ByUserId"] = "Basic.UserProfile.Profiles_ByUserId";
  Key_UserProfile2["Profile_ByUserId"] = "Basic.UserProfile.Profile_ByUserId";
  Key_UserProfile2["UsersMeProfilesZipCode"] = "Basic.UserProfile.UsersMeProfilesZipCode";
  Key_UserProfile2["UserMeProfileZipCode"] = "Basic.UserProfile.UserMeProfileZipCode";
  Key_UserProfile2["ProfilesPublicByPublicId"] = "Basic.UserProfile.ProfilesPublicByPublicId";
  Key_UserProfile2["ProfilesPublic_ByUserId"] = "Basic.UserProfile.ProfilesPublic_ByUserId";
  Key_UserProfile2["ProfileStatus_ByUserId"] = "Basic.UserProfile.ProfileStatus_ByUserId";
  Key_UserProfile2["ProfilesCustomAttributes_ByUserId"] = "Basic.UserProfile.ProfilesCustomAttributes_ByUserId";
  Key_UserProfile2["ProfileCustomAttribute_ByUserId"] = "Basic.UserProfile.ProfileCustomAttribute_ByUserId";
  Key_UserProfile2["UsersMeProfilesPrivateCustomAttributes"] = "Basic.UserProfile.UsersMeProfilesPrivateCustomAttributes";
  Key_UserProfile2["UserMeProfilePrivateCustomAttribute"] = "Basic.UserProfile.UserMeProfilePrivateCustomAttribute";
  return Key_UserProfile2;
})(Key_UserProfile || {});
var useUserProfileApi_GetProfilesPublic = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfilesPublic(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.ProfilesPublic" /* ProfilesPublic */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_CreateProfilePublicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfilePublic(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.ProfilePublic" /* ProfilePublic */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetUsersMeProfiles = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeProfiles();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.UsersMeProfiles" /* UsersMeProfiles */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_CreateUserMeProfileMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeProfile(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.UserMeProfile" /* UserMeProfile */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_UpdateUserMeProfileMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserMeProfile(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.UserMeProfile" /* UserMeProfile */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetProfiles_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfiles_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.Profiles_ByUserId" /* Profiles_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_CreateProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfile_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_UpdateProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateProfile_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetUsersMeProfilesZipCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeProfilesZipCode();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.UsersMeProfilesZipCode" /* UsersMeProfilesZipCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_PatchUserMeProfileZipCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUserMeProfileZipCode(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.UserMeProfileZipCode" /* UserMeProfileZipCode */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetProfilesPublicByPublicId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesPublicByPublicId(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.ProfilesPublicByPublicId" /* ProfilesPublicByPublicId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_GetProfilesPublic_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfilesPublic_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.ProfilesPublic_ByUserId" /* ProfilesPublic_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_PatchProfileStatus_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchProfileStatus_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.ProfileStatus_ByUserId" /* ProfileStatus_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetProfilesCustomAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesCustomAttributes_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.ProfilesCustomAttributes_ByUserId" /* ProfilesCustomAttributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_UpdateProfileCustomAttribute_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfileCustomAttribute_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.ProfileCustomAttribute_ByUserId" /* ProfileCustomAttribute_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetUsersMeProfilesPrivateCustomAttributes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeProfilesPrivateCustomAttributes();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Basic.UserProfile.UsersMeProfilesPrivateCustomAttributes" /* UsersMeProfilesPrivateCustomAttributes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_UpdateUserMeProfilePrivateCustomAttributeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateUserMeProfilePrivateCustomAttribute(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Basic.UserProfile.UserMeProfilePrivateCustomAttribute" /* UserMeProfilePrivateCustomAttribute */],
    mutationFn,
    ...options
  });
};
export {
  Key_AnonymizationAdmin,
  Key_ConfigAdmin,
  Key_FileUpload,
  Key_FileUploadAdmin,
  Key_Misc,
  Key_MiscAdmin,
  Key_Namespace,
  Key_NamespaceAdmin,
  Key_UserProfile,
  Key_UserProfileAdmin,
  useAnonymizationAdminApi_DeleteAnonymizationProfile_ByUserIdMutation,
  useConfigAdminApi_CreateConfigMutation,
  useConfigAdminApi_DeleteConfig_ByConfigKeyMutation,
  useConfigAdminApi_GetConfig_ByConfigKey,
  useConfigAdminApi_GetPublisherConfig_ByConfigKey,
  useConfigAdminApi_PatchConfig_ByConfigKeyMutation,
  useFileUploadAdminApi_CreateFile_ByFolderMutation,
  useFileUploadAdminApi_CreateFile_ByUserIdMutation,
  useFileUploadApi_CreateFile_ByFolderMutation,
  useFileUploadApi_CreateFile_ByUserIdMutation,
  useMiscAdminApi_CreateMiscCountrygroupMutation,
  useMiscAdminApi_DeleteMiscCountrygroup_ByCountryGroupCodeMutation,
  useMiscAdminApi_GetMiscCountries,
  useMiscAdminApi_GetMiscCountrygroups,
  useMiscAdminApi_GetMiscLanguages,
  useMiscAdminApi_GetMiscTimezones,
  useMiscAdminApi_UpdateMiscCountrygroup_ByCountryGroupCodeMutation,
  useMiscApi_GetMiscCountries,
  useMiscApi_GetMiscLanguages,
  useMiscApi_GetMiscTime,
  useMiscApi_GetMiscTimezones,
  useNamespaceAdminApi_CreateNamespaceMutation,
  useNamespaceAdminApi_DeleteNamespace_ByNamespaceMutation,
  useNamespaceAdminApi_GetChild,
  useNamespaceAdminApi_GetContext,
  useNamespaceAdminApi_GetGame,
  useNamespaceAdminApi_GetNamespace_ByNamespace,
  useNamespaceAdminApi_GetNamespaces,
  useNamespaceAdminApi_GetPublisher,
  useNamespaceAdminApi_PatchBasicMutation,
  useNamespaceAdminApi_PatchStatusMutation,
  useNamespaceApi_GetNamespace_ByNamespace,
  useNamespaceApi_GetNamespaces,
  useNamespaceApi_GetPublisher,
  useUserProfileAdminApi_CreateProfilePublicMutation,
  useUserProfileAdminApi_DeleteProfile_ByUserIdMutation,
  useUserProfileAdminApi_GetProfilesByPublicId,
  useUserProfileAdminApi_GetProfilesCustomAttributes_ByUserId,
  useUserProfileAdminApi_GetProfilesPrivateCustomAttributes_ByUserId,
  useUserProfileAdminApi_GetProfiles_ByUserId,
  useUserProfileAdminApi_PatchProfileStatus_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfileCustomAttribute_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfilePrivateCustomAttribute_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfile_ByUserIdMutation,
  useUserProfileApi_CreateProfilePublicMutation,
  useUserProfileApi_CreateProfile_ByUserIdMutation,
  useUserProfileApi_CreateUserMeProfileMutation,
  useUserProfileApi_GetProfilesCustomAttributes_ByUserId,
  useUserProfileApi_GetProfilesPublic,
  useUserProfileApi_GetProfilesPublicByPublicId,
  useUserProfileApi_GetProfilesPublic_ByUserId,
  useUserProfileApi_GetProfiles_ByUserId,
  useUserProfileApi_GetUsersMeProfiles,
  useUserProfileApi_GetUsersMeProfilesPrivateCustomAttributes,
  useUserProfileApi_GetUsersMeProfilesZipCode,
  useUserProfileApi_PatchProfileStatus_ByUserIdMutation,
  useUserProfileApi_PatchUserMeProfileZipCodeMutation,
  useUserProfileApi_UpdateProfileCustomAttribute_ByUserIdMutation,
  useUserProfileApi_UpdateProfile_ByUserIdMutation,
  useUserProfileApi_UpdateUserMeProfileMutation,
  useUserProfileApi_UpdateUserMeProfilePrivateCustomAttributeMutation
};
