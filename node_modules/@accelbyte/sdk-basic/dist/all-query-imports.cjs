"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/all-query-imports.ts
var all_query_imports_exports = {};
__export(all_query_imports_exports, {
  Key_AnonymizationAdmin: () => Key_AnonymizationAdmin,
  Key_ConfigAdmin: () => Key_ConfigAdmin,
  Key_FileUpload: () => Key_FileUpload,
  Key_FileUploadAdmin: () => Key_FileUploadAdmin,
  Key_Misc: () => Key_Misc,
  Key_MiscAdmin: () => Key_MiscAdmin,
  Key_Namespace: () => Key_Namespace,
  Key_NamespaceAdmin: () => Key_NamespaceAdmin,
  Key_UserProfile: () => Key_UserProfile,
  Key_UserProfileAdmin: () => Key_UserProfileAdmin,
  useAnonymizationAdminApi_DeleteAnonymizationProfile_ByUserIdMutation: () => useAnonymizationAdminApi_DeleteAnonymizationProfile_ByUserIdMutation,
  useConfigAdminApi_CreateConfigMutation: () => useConfigAdminApi_CreateConfigMutation,
  useConfigAdminApi_DeleteConfig_ByConfigKeyMutation: () => useConfigAdminApi_DeleteConfig_ByConfigKeyMutation,
  useConfigAdminApi_GetConfig_ByConfigKey: () => useConfigAdminApi_GetConfig_ByConfigKey,
  useConfigAdminApi_GetPublisherConfig_ByConfigKey: () => useConfigAdminApi_GetPublisherConfig_ByConfigKey,
  useConfigAdminApi_PatchConfig_ByConfigKeyMutation: () => useConfigAdminApi_PatchConfig_ByConfigKeyMutation,
  useFileUploadAdminApi_CreateFile_ByFolderMutation: () => useFileUploadAdminApi_CreateFile_ByFolderMutation,
  useFileUploadAdminApi_CreateFile_ByUserIdMutation: () => useFileUploadAdminApi_CreateFile_ByUserIdMutation,
  useFileUploadApi_CreateFile_ByFolderMutation: () => useFileUploadApi_CreateFile_ByFolderMutation,
  useFileUploadApi_CreateFile_ByUserIdMutation: () => useFileUploadApi_CreateFile_ByUserIdMutation,
  useMiscAdminApi_CreateMiscCountrygroupMutation: () => useMiscAdminApi_CreateMiscCountrygroupMutation,
  useMiscAdminApi_DeleteMiscCountrygroup_ByCountryGroupCodeMutation: () => useMiscAdminApi_DeleteMiscCountrygroup_ByCountryGroupCodeMutation,
  useMiscAdminApi_GetMiscCountries: () => useMiscAdminApi_GetMiscCountries,
  useMiscAdminApi_GetMiscCountrygroups: () => useMiscAdminApi_GetMiscCountrygroups,
  useMiscAdminApi_GetMiscLanguages: () => useMiscAdminApi_GetMiscLanguages,
  useMiscAdminApi_GetMiscTimezones: () => useMiscAdminApi_GetMiscTimezones,
  useMiscAdminApi_UpdateMiscCountrygroup_ByCountryGroupCodeMutation: () => useMiscAdminApi_UpdateMiscCountrygroup_ByCountryGroupCodeMutation,
  useMiscApi_GetMiscCountries: () => useMiscApi_GetMiscCountries,
  useMiscApi_GetMiscLanguages: () => useMiscApi_GetMiscLanguages,
  useMiscApi_GetMiscTime: () => useMiscApi_GetMiscTime,
  useMiscApi_GetMiscTimezones: () => useMiscApi_GetMiscTimezones,
  useNamespaceAdminApi_CreateNamespaceMutation: () => useNamespaceAdminApi_CreateNamespaceMutation,
  useNamespaceAdminApi_DeleteNamespace_ByNamespaceMutation: () => useNamespaceAdminApi_DeleteNamespace_ByNamespaceMutation,
  useNamespaceAdminApi_GetChild: () => useNamespaceAdminApi_GetChild,
  useNamespaceAdminApi_GetContext: () => useNamespaceAdminApi_GetContext,
  useNamespaceAdminApi_GetGame: () => useNamespaceAdminApi_GetGame,
  useNamespaceAdminApi_GetNamespace_ByNamespace: () => useNamespaceAdminApi_GetNamespace_ByNamespace,
  useNamespaceAdminApi_GetNamespaces: () => useNamespaceAdminApi_GetNamespaces,
  useNamespaceAdminApi_GetPublisher: () => useNamespaceAdminApi_GetPublisher,
  useNamespaceAdminApi_PatchBasicMutation: () => useNamespaceAdminApi_PatchBasicMutation,
  useNamespaceAdminApi_PatchStatusMutation: () => useNamespaceAdminApi_PatchStatusMutation,
  useNamespaceApi_GetNamespace_ByNamespace: () => useNamespaceApi_GetNamespace_ByNamespace,
  useNamespaceApi_GetNamespaces: () => useNamespaceApi_GetNamespaces,
  useNamespaceApi_GetPublisher: () => useNamespaceApi_GetPublisher,
  useUserProfileAdminApi_CreateProfilePublicMutation: () => useUserProfileAdminApi_CreateProfilePublicMutation,
  useUserProfileAdminApi_DeleteProfile_ByUserIdMutation: () => useUserProfileAdminApi_DeleteProfile_ByUserIdMutation,
  useUserProfileAdminApi_GetProfilesByPublicId: () => useUserProfileAdminApi_GetProfilesByPublicId,
  useUserProfileAdminApi_GetProfilesCustomAttributes_ByUserId: () => useUserProfileAdminApi_GetProfilesCustomAttributes_ByUserId,
  useUserProfileAdminApi_GetProfilesPrivateCustomAttributes_ByUserId: () => useUserProfileAdminApi_GetProfilesPrivateCustomAttributes_ByUserId,
  useUserProfileAdminApi_GetProfiles_ByUserId: () => useUserProfileAdminApi_GetProfiles_ByUserId,
  useUserProfileAdminApi_PatchProfileStatus_ByUserIdMutation: () => useUserProfileAdminApi_PatchProfileStatus_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfileCustomAttribute_ByUserIdMutation: () => useUserProfileAdminApi_UpdateProfileCustomAttribute_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfilePrivateCustomAttribute_ByUserIdMutation: () => useUserProfileAdminApi_UpdateProfilePrivateCustomAttribute_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfile_ByUserIdMutation: () => useUserProfileAdminApi_UpdateProfile_ByUserIdMutation,
  useUserProfileApi_CreateProfilePublicMutation: () => useUserProfileApi_CreateProfilePublicMutation,
  useUserProfileApi_CreateProfile_ByUserIdMutation: () => useUserProfileApi_CreateProfile_ByUserIdMutation,
  useUserProfileApi_CreateUserMeProfileMutation: () => useUserProfileApi_CreateUserMeProfileMutation,
  useUserProfileApi_GetProfilesCustomAttributes_ByUserId: () => useUserProfileApi_GetProfilesCustomAttributes_ByUserId,
  useUserProfileApi_GetProfilesPublic: () => useUserProfileApi_GetProfilesPublic,
  useUserProfileApi_GetProfilesPublicByPublicId: () => useUserProfileApi_GetProfilesPublicByPublicId,
  useUserProfileApi_GetProfilesPublic_ByUserId: () => useUserProfileApi_GetProfilesPublic_ByUserId,
  useUserProfileApi_GetProfiles_ByUserId: () => useUserProfileApi_GetProfiles_ByUserId,
  useUserProfileApi_GetUsersMeProfiles: () => useUserProfileApi_GetUsersMeProfiles,
  useUserProfileApi_GetUsersMeProfilesPrivateCustomAttributes: () => useUserProfileApi_GetUsersMeProfilesPrivateCustomAttributes,
  useUserProfileApi_GetUsersMeProfilesZipCode: () => useUserProfileApi_GetUsersMeProfilesZipCode,
  useUserProfileApi_PatchProfileStatus_ByUserIdMutation: () => useUserProfileApi_PatchProfileStatus_ByUserIdMutation,
  useUserProfileApi_PatchUserMeProfileZipCodeMutation: () => useUserProfileApi_PatchUserMeProfileZipCodeMutation,
  useUserProfileApi_UpdateProfileCustomAttribute_ByUserIdMutation: () => useUserProfileApi_UpdateProfileCustomAttribute_ByUserIdMutation,
  useUserProfileApi_UpdateProfile_ByUserIdMutation: () => useUserProfileApi_UpdateProfile_ByUserIdMutation,
  useUserProfileApi_UpdateUserMeProfileMutation: () => useUserProfileApi_UpdateUserMeProfileMutation,
  useUserProfileApi_UpdateUserMeProfilePrivateCustomAttributeMutation: () => useUserProfileApi_UpdateUserMeProfilePrivateCustomAttributeMutation
});
module.exports = __toCommonJS(all_query_imports_exports);

// src/generated-admin/queries/AnonymizationAdmin.query.ts
var import_react_query = require("@tanstack/react-query");

// src/generated-admin/AnonymizationAdminApi.ts
var import_sdk2 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/AnonymizationAdmin$.ts
var import_sdk = require("@accelbyte/sdk");
var import_zod = require("zod");
var AnonymizationAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;
   */
  deleteAnonymizationProfile_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/AnonymizationAdminApi.ts
function AnonymizationAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk2.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk2.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function deleteAnonymizationProfile_ByUserId(userId) {
    const $ = new AnonymizationAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteAnonymizationProfile_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;
     */
    deleteAnonymizationProfile_ByUserId
  };
}

// src/generated-admin/queries/AnonymizationAdmin.query.ts
var Key_AnonymizationAdmin = /* @__PURE__ */ ((Key_AnonymizationAdmin2) => {
  Key_AnonymizationAdmin2["AnonymizationProfile_ByUserId"] = "Basic.AnonymizationAdmin.AnonymizationProfile_ByUserId";
  return Key_AnonymizationAdmin2;
})(Key_AnonymizationAdmin || {});
var useAnonymizationAdminApi_DeleteAnonymizationProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await AnonymizationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAnonymizationProfile_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query.useMutation)({
    mutationKey: ["Basic.AnonymizationAdmin.AnonymizationProfile_ByUserId" /* AnonymizationProfile_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ConfigAdmin.query.ts
var import_react_query2 = require("@tanstack/react-query");

// src/generated-admin/ConfigAdminApi.ts
var import_sdk4 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/ConfigAdmin$.ts
var import_sdk3 = require("@accelbyte/sdk");
var import_zod3 = require("zod");

// src/generated-definitions/ConfigInfo.ts
var import_zod2 = require("zod");
var ConfigInfo = import_zod2.z.object({
  createdAt: import_zod2.z.string().nullish(),
  key: import_zod2.z.string().nullish(),
  namespace: import_zod2.z.string().nullish(),
  updatedAt: import_zod2.z.string().nullish(),
  value: import_zod2.z.string().nullish()
});

// src/generated-admin/endpoints/ConfigAdmin$.ts
var ConfigAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Create a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
   */
  createConfig(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
  /**
   * Delete a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
   */
  deleteConfig_ByConfigKey(configKey) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod3.z.unknown(), "z.unknown()");
  }
  /**
   * Get a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
   */
  getConfig_ByConfigKey(configKey) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
  /**
   * Update a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
   */
  patchConfig_ByConfigKey(configKey, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
  /**
   * Get a publisher config.&lt;br&gt;It will return a publisher namespace config of the given namespace and key.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
   */
  getPublisherConfig_ByConfigKey(configKey) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/publisher/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
};

// src/generated-admin/ConfigAdminApi.ts
function ConfigAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk4.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk4.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createConfig(data) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createConfig(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteConfig_ByConfigKey(configKey) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteConfig_ByConfigKey(configKey);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getConfig_ByConfigKey(configKey) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getConfig_ByConfigKey(configKey);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchConfig_ByConfigKey(configKey, data) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchConfig_ByConfigKey(configKey, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPublisherConfig_ByConfigKey(configKey) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPublisherConfig_ByConfigKey(configKey);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Create a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    createConfig,
    /**
     * Delete a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    deleteConfig_ByConfigKey,
    /**
     * Get a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getConfig_ByConfigKey,
    /**
     * Update a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    patchConfig_ByConfigKey,
    /**
     * Get a publisher config.&lt;br&gt;It will return a publisher namespace config of the given namespace and key.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisherConfig_ByConfigKey
  };
}

// src/generated-admin/queries/ConfigAdmin.query.ts
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["Config"] = "Basic.ConfigAdmin.Config";
  Key_ConfigAdmin2["Config_ByConfigKey"] = "Basic.ConfigAdmin.Config_ByConfigKey";
  Key_ConfigAdmin2["PublisherConfig_ByConfigKey"] = "Basic.ConfigAdmin.PublisherConfig_ByConfigKey";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_CreateConfigMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createConfig(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Basic.ConfigAdmin.Config" /* Config */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_DeleteConfig_ByConfigKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteConfig_ByConfigKey(
      input.configKey
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Basic.ConfigAdmin.Config_ByConfigKey" /* Config_ByConfigKey */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_GetConfig_ByConfigKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByConfigKey(
      input2.configKey
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Basic.ConfigAdmin.Config_ByConfigKey" /* Config_ByConfigKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfig_ByConfigKeyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfig_ByConfigKey(
      input.configKey,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Basic.ConfigAdmin.Config_ByConfigKey" /* Config_ByConfigKey */],
    mutationFn,
    ...options
  });
};
var useConfigAdminApi_GetPublisherConfig_ByConfigKey = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPublisherConfig_ByConfigKey(input2.configKey);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Basic.ConfigAdmin.PublisherConfig_ByConfigKey" /* PublisherConfig_ByConfigKey */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/FileUploadAdmin.query.ts
var import_react_query3 = require("@tanstack/react-query");

// src/generated-admin/FileUploadAdminApi.ts
var import_sdk6 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/FileUploadAdmin$.ts
var import_sdk5 = require("@accelbyte/sdk");

// src/generated-definitions/FileUploadUrlInfo.ts
var import_zod4 = require("zod");
var FileUploadUrlInfo = import_zod4.z.object({
  accessUrl: import_zod4.z.string().nullish(),
  contentType: import_zod4.z.string().nullish(),
  method: import_zod4.z.string().nullish(),
  url: import_zod4.z.string().nullish()
});

// src/generated-admin/endpoints/FileUploadAdmin$.ts
var FileUploadAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByUserId(userId, queryParams) {
    const params = { category: "default", ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/files".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return import_sdk5.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
  /**
   * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByFolder(folder, queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/folders/{folder}/files".replace("{namespace}", this.namespace).replace("{folder}", folder);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return import_sdk5.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
};

// src/generated-admin/FileUploadAdminApi.ts
function FileUploadAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk6.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk6.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createFile_ByUserId(userId, queryParams) {
    const $ = new FileUploadAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByUserId(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createFile_ByFolder(folder, queryParams) {
    const $ = new FileUploadAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByFolder(folder, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId,
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder
  };
}

// src/generated-admin/queries/FileUploadAdmin.query.ts
var Key_FileUploadAdmin = /* @__PURE__ */ ((Key_FileUploadAdmin2) => {
  Key_FileUploadAdmin2["File_ByUserId"] = "Basic.FileUploadAdmin.File_ByUserId";
  Key_FileUploadAdmin2["File_ByFolder"] = "Basic.FileUploadAdmin.File_ByFolder";
  return Key_FileUploadAdmin2;
})(Key_FileUploadAdmin || {});
var useFileUploadAdminApi_CreateFile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByUserId(
      input.userId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query3.useMutation)({
    mutationKey: ["Basic.FileUploadAdmin.File_ByUserId" /* File_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFileUploadAdminApi_CreateFile_ByFolderMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByFolder(
      input.folder,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query3.useMutation)({
    mutationKey: ["Basic.FileUploadAdmin.File_ByFolder" /* File_ByFolder */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/MiscAdmin.query.ts
var import_react_query4 = require("@tanstack/react-query");

// src/generated-admin/MiscAdminApi.ts
var import_sdk8 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/MiscAdmin$.ts
var import_sdk7 = require("@accelbyte/sdk");
var import_zod11 = require("zod");

// src/generated-definitions/AddCountryGroupResponse.ts
var import_zod6 = require("zod");

// src/generated-definitions/CountryObject.ts
var import_zod5 = require("zod");
var CountryObject = import_zod5.z.object({ code: import_zod5.z.string().nullish(), name: import_zod5.z.string().nullish() });

// src/generated-definitions/AddCountryGroupResponse.ts
var AddCountryGroupResponse = import_zod6.z.object({
  countries: import_zod6.z.array(CountryObject).nullish(),
  countryGroupCode: import_zod6.z.string().nullish(),
  countryGroupName: import_zod6.z.string().nullish()
});

// src/generated-definitions/CountryGroupObject.ts
var import_zod7 = require("zod");
var CountryGroupObject = import_zod7.z.object({
  countries: import_zod7.z.array(CountryObject).nullish(),
  countryGroupCode: import_zod7.z.string().nullish(),
  countryGroupName: import_zod7.z.string().nullish()
});

// src/generated-definitions/CountryObjectArray.ts
var import_zod8 = require("zod");
var CountryObjectArray = import_zod8.z.array(CountryObject);

// src/generated-definitions/RetrieveCountryGroupResponseArray.ts
var import_zod10 = require("zod");

// src/generated-definitions/RetrieveCountryGroupResponse.ts
var import_zod9 = require("zod");
var RetrieveCountryGroupResponse = import_zod9.z.object({
  countries: import_zod9.z.array(CountryObject).nullish(),
  countryGroupCode: import_zod9.z.string().nullish(),
  countryGroupName: import_zod9.z.string().nullish()
});

// src/generated-definitions/RetrieveCountryGroupResponseArray.ts
var RetrieveCountryGroupResponseArray = import_zod10.z.array(RetrieveCountryGroupResponse);

// src/generated-admin/endpoints/MiscAdmin$.ts
var MiscAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * @deprecated
   * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscCountries(queryParams) {
    const params = { lang: "en", ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countries".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, CountryObjectArray, "CountryObjectArray");
  }
  /**
   * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscLanguages() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/languages".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod11.z.unknown(), "z.unknown()");
  }
  /**
   * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscTimezones() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/timezones".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod11.z.unknown(), "z.unknown()");
  }
  /**
   * List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscCountrygroups(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveCountryGroupResponseArray,
      "RetrieveCountryGroupResponseArray"
    );
  }
  /**
   * Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;
   */
  createMiscCountrygroup(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      AddCountryGroupResponse,
      "AddCountryGroupResponse"
    );
  }
  /**
   * Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;
   */
  deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups/{countryGroupCode}".replace("{namespace}", this.namespace).replace("{countryGroupCode}", countryGroupCode);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod11.z.unknown(), "z.unknown()");
  }
  /**
   * Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;
   */
  updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups/{countryGroupCode}".replace("{namespace}", this.namespace).replace("{countryGroupCode}", countryGroupCode);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk7.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, CountryGroupObject, "CountryGroupObject");
  }
};

// src/generated-admin/MiscAdminApi.ts
function MiscAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk8.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk8.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getMiscCountries(queryParams) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscCountries(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscLanguages() {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscLanguages();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscTimezones() {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscTimezones();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscCountrygroups(queryParams) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscCountrygroups(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createMiscCountrygroup(data) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createMiscCountrygroup(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode, data) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries,
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages,
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones,
    /**
     * List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountrygroups,
    /**
     * Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;
     */
    createMiscCountrygroup,
    /**
     * Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;
     */
    deleteMiscCountrygroup_ByCountryGroupCode,
    /**
     * Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;
     */
    updateMiscCountrygroup_ByCountryGroupCode
  };
}

// src/generated-admin/queries/MiscAdmin.query.ts
var Key_MiscAdmin = /* @__PURE__ */ ((Key_MiscAdmin2) => {
  Key_MiscAdmin2["MiscCountries"] = "Basic.MiscAdmin.MiscCountries";
  Key_MiscAdmin2["MiscLanguages"] = "Basic.MiscAdmin.MiscLanguages";
  Key_MiscAdmin2["MiscTimezones"] = "Basic.MiscAdmin.MiscTimezones";
  Key_MiscAdmin2["MiscCountrygroups"] = "Basic.MiscAdmin.MiscCountrygroups";
  Key_MiscAdmin2["MiscCountrygroup"] = "Basic.MiscAdmin.MiscCountrygroup";
  Key_MiscAdmin2["MiscCountrygroup_ByCountryGroupCode"] = "Basic.MiscAdmin.MiscCountrygroup_ByCountryGroupCode";
  return Key_MiscAdmin2;
})(Key_MiscAdmin || {});
var useMiscAdminApi_GetMiscCountries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscCountries(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Basic.MiscAdmin.MiscCountries" /* MiscCountries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_GetMiscLanguages = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscLanguages();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Basic.MiscAdmin.MiscLanguages" /* MiscLanguages */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_GetMiscTimezones = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscTimezones();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Basic.MiscAdmin.MiscTimezones" /* MiscTimezones */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_GetMiscCountrygroups = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscCountrygroups(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Basic.MiscAdmin.MiscCountrygroups" /* MiscCountrygroups */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscAdminApi_CreateMiscCountrygroupMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MiscAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createMiscCountrygroup(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query4.useMutation)({
    mutationKey: ["Basic.MiscAdmin.MiscCountrygroup" /* MiscCountrygroup */],
    mutationFn,
    ...options
  });
};
var useMiscAdminApi_DeleteMiscCountrygroup_ByCountryGroupCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MiscAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteMiscCountrygroup_ByCountryGroupCode(input.countryGroupCode);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query4.useMutation)({
    mutationKey: ["Basic.MiscAdmin.MiscCountrygroup_ByCountryGroupCode" /* MiscCountrygroup_ByCountryGroupCode */],
    mutationFn,
    ...options
  });
};
var useMiscAdminApi_UpdateMiscCountrygroup_ByCountryGroupCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MiscAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateMiscCountrygroup_ByCountryGroupCode(input.countryGroupCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query4.useMutation)({
    mutationKey: ["Basic.MiscAdmin.MiscCountrygroup_ByCountryGroupCode" /* MiscCountrygroup_ByCountryGroupCode */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/NamespaceAdmin.query.ts
var import_react_query5 = require("@tanstack/react-query");

// src/generated-admin/NamespaceAdminApi.ts
var import_sdk10 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/NamespaceAdmin$.ts
var import_sdk9 = require("@accelbyte/sdk");

// src/generated-definitions/NamespaceContext.ts
var import_zod12 = require("zod");
var NamespaceContext = import_zod12.z.object({
  namespace: import_zod12.z.string().nullish(),
  publisherNamespace: import_zod12.z.string().nullish(),
  studioNamespace: import_zod12.z.string().nullish(),
  type: import_zod12.z.enum(["Game", "Publisher", "Studio"]).nullish()
});

// src/generated-definitions/NamespaceInfo.ts
var import_zod13 = require("zod");
var NamespaceInfo = import_zod13.z.object({
  clientId: import_zod13.z.string().nullish(),
  createdAt: import_zod13.z.string().nullish(),
  displayName: import_zod13.z.string(),
  namespace: import_zod13.z.string(),
  parentNamespace: import_zod13.z.string().nullish(),
  status: import_zod13.z.enum(["ACTIVE", "DELETED", "INACTIVE"]).nullish(),
  updatedAt: import_zod13.z.string().nullish()
});

// src/generated-definitions/NamespaceInfoArray.ts
var import_zod14 = require("zod");
var NamespaceInfoArray = import_zod14.z.array(NamespaceInfo);

// src/generated-definitions/NamespacePublisherInfo.ts
var import_zod15 = require("zod");
var NamespacePublisherInfo = import_zod15.z.object({ publisher: import_zod15.z.boolean().nullish(), publisherNamespace: import_zod15.z.string().nullish() });

// src/generated-admin/endpoints/NamespaceAdmin$.ts
var NamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespaces(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;In multi tenant mode, parentNamespace will be automatically filled with requester namespace if the requester is using studio or publisher token, and it will be filled with studio namespace if the requester uses game token. An oauth client will also be created and the id will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;
   */
  createNamespace(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces";
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;
   */
  deleteNamespace_ByNamespace() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get a namespace.&lt;br&gt;In multi tenant mode, parentNamespace will be returned.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespace_ByNamespace(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get game namespaces.&lt;br&gt;In multi tenant mode, a given super admin namespace will return all game namespaces of studio namespaces&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11308&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getGame(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/game".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
   */
  patchBasic(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/basic".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get child namespaces.&lt;br&gt;If input namespace is publisher namespace, then it will return its all studio namespace.&lt;br&gt;If input namespace is studio namespace, then it will return its all game namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getChild(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/child".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
   */
  patchStatus(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/status".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get context of namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: context of namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getContext() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/context".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceContext, "NamespaceContext");
  }
  /**
   * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getPublisher() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/publisher".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk9.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      NamespacePublisherInfo,
      "NamespacePublisherInfo"
    );
  }
};

// src/generated-admin/NamespaceAdminApi.ts
function NamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk10.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk10.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getNamespaces(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespaces(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createNamespace(data) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createNamespace(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteNamespace_ByNamespace() {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteNamespace_ByNamespace();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getNamespace_ByNamespace(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespace_ByNamespace(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGame(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGame(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchBasic(data) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchBasic(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getChild(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getChild(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchStatus(data) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchStatus(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getContext() {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getContext();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPublisher() {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPublisher();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces,
    /**
     * Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;In multi tenant mode, parentNamespace will be automatically filled with requester namespace if the requester is using studio or publisher token, and it will be filled with studio namespace if the requester uses game token. An oauth client will also be created and the id will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;
     */
    createNamespace,
    /**
     * Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;
     */
    deleteNamespace_ByNamespace,
    /**
     * Get a namespace.&lt;br&gt;In multi tenant mode, parentNamespace will be returned.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace,
    /**
     * Get game namespaces.&lt;br&gt;In multi tenant mode, a given super admin namespace will return all game namespaces of studio namespaces&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11308&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getGame,
    /**
     * Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchBasic,
    /**
     * Get child namespaces.&lt;br&gt;If input namespace is publisher namespace, then it will return its all studio namespace.&lt;br&gt;If input namespace is studio namespace, then it will return its all game namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getChild,
    /**
     * Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchStatus,
    /**
     * Get context of namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: context of namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getContext,
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher
  };
}

// src/generated-admin/queries/NamespaceAdmin.query.ts
var Key_NamespaceAdmin = /* @__PURE__ */ ((Key_NamespaceAdmin2) => {
  Key_NamespaceAdmin2["Namespaces"] = "Basic.NamespaceAdmin.Namespaces";
  Key_NamespaceAdmin2["Namespace"] = "Basic.NamespaceAdmin.Namespace";
  Key_NamespaceAdmin2["Namespace_ByNamespace"] = "Basic.NamespaceAdmin.Namespace_ByNamespace";
  Key_NamespaceAdmin2["Game"] = "Basic.NamespaceAdmin.Game";
  Key_NamespaceAdmin2["Basic"] = "Basic.NamespaceAdmin.Basic";
  Key_NamespaceAdmin2["Child"] = "Basic.NamespaceAdmin.Child";
  Key_NamespaceAdmin2["Status"] = "Basic.NamespaceAdmin.Status";
  Key_NamespaceAdmin2["Context"] = "Basic.NamespaceAdmin.Context";
  Key_NamespaceAdmin2["Publisher"] = "Basic.NamespaceAdmin.Publisher";
  return Key_NamespaceAdmin2;
})(Key_NamespaceAdmin || {});
var useNamespaceAdminApi_GetNamespaces = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNamespaces(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Basic.NamespaceAdmin.Namespaces" /* Namespaces */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_CreateNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNamespace(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query5.useMutation)({
    mutationKey: ["Basic.NamespaceAdmin.Namespace" /* Namespace */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_DeleteNamespace_ByNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteNamespace_ByNamespace();
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query5.useMutation)({
    mutationKey: ["Basic.NamespaceAdmin.Namespace_ByNamespace" /* Namespace_ByNamespace */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_GetNamespace_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getNamespace_ByNamespace(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Basic.NamespaceAdmin.Namespace_ByNamespace" /* Namespace_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_GetGame = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGame(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Basic.NamespaceAdmin.Game" /* Game */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_PatchBasicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchBasic(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query5.useMutation)({
    mutationKey: ["Basic.NamespaceAdmin.Basic" /* Basic */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_GetChild = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getChild(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Basic.NamespaceAdmin.Child" /* Child */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_PatchStatusMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await NamespaceAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchStatus(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query5.useMutation)({
    mutationKey: ["Basic.NamespaceAdmin.Status" /* Status */],
    mutationFn,
    ...options
  });
};
var useNamespaceAdminApi_GetContext = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getContext();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Basic.NamespaceAdmin.Context" /* Context */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceAdminApi_GetPublisher = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPublisher();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query5.useQuery)({
    queryKey: ["Basic.NamespaceAdmin.Publisher" /* Publisher */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/UserProfileAdmin.query.ts
var import_react_query6 = require("@tanstack/react-query");

// src/generated-admin/UserProfileAdminApi.ts
var import_sdk12 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/UserProfileAdmin$.ts
var import_sdk11 = require("@accelbyte/sdk");
var import_zod20 = require("zod");

// src/generated-definitions/UserProfileInfo.ts
var import_zod16 = require("zod");
var UserProfileInfo = import_zod16.z.object({
  avatarLargeUrl: import_zod16.z.string().nullish(),
  avatarSmallUrl: import_zod16.z.string().nullish(),
  avatarUrl: import_zod16.z.string().nullish(),
  customAttributes: import_zod16.z.record(import_zod16.z.any()).nullish(),
  dateOfBirth: import_zod16.z.string().nullish(),
  firstName: import_zod16.z.string().nullish(),
  language: import_zod16.z.string().nullish(),
  lastName: import_zod16.z.string().nullish(),
  namespace: import_zod16.z.string().nullish(),
  publicId: import_zod16.z.string().nullish(),
  status: import_zod16.z.enum(["ACTIVE", "INACTIVE"]).nullish(),
  timeZone: import_zod16.z.string().nullish(),
  userId: import_zod16.z.string().nullish(),
  zipCode: import_zod16.z.string().nullish()
});

// src/generated-definitions/UserProfilePrivateInfo.ts
var import_zod17 = require("zod");
var UserProfilePrivateInfo = import_zod17.z.object({
  avatarLargeUrl: import_zod17.z.string().nullish(),
  avatarSmallUrl: import_zod17.z.string().nullish(),
  avatarUrl: import_zod17.z.string().nullish(),
  customAttributes: import_zod17.z.record(import_zod17.z.any()).nullish(),
  dateOfBirth: import_zod17.z.string().nullish(),
  firstName: import_zod17.z.string().nullish(),
  language: import_zod17.z.string().nullish(),
  lastName: import_zod17.z.string().nullish(),
  namespace: import_zod17.z.string().nullish(),
  privateCustomAttributes: import_zod17.z.record(import_zod17.z.any()).nullish(),
  publicId: import_zod17.z.string().nullish(),
  status: import_zod17.z.enum(["ACTIVE", "INACTIVE"]).nullish(),
  timeZone: import_zod17.z.string().nullish(),
  userId: import_zod17.z.string().nullish(),
  zipCode: import_zod17.z.string().nullish()
});

// src/generated-definitions/UserProfilePublicInfoArray.ts
var import_zod19 = require("zod");

// src/generated-definitions/UserProfilePublicInfo.ts
var import_zod18 = require("zod");
var UserProfilePublicInfo = import_zod18.z.object({
  avatarLargeUrl: import_zod18.z.string().nullish(),
  avatarSmallUrl: import_zod18.z.string().nullish(),
  avatarUrl: import_zod18.z.string().nullish(),
  customAttributes: import_zod18.z.record(import_zod18.z.any()).nullish(),
  namespace: import_zod18.z.string().nullish(),
  publicId: import_zod18.z.string().nullish(),
  timeZone: import_zod18.z.string().nullish(),
  userId: import_zod18.z.string().nullish()
});

// src/generated-definitions/UserProfilePublicInfoArray.ts
var UserProfilePublicInfoArray = import_zod19.z.array(UserProfilePublicInfo);

// src/generated-admin/endpoints/UserProfileAdmin$.ts
var UserProfileAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
   */
  createProfilePublic(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/profiles/public".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePublicInfoArray,
      "UserProfilePublicInfoArray"
    );
  }
  /**
   * Get user profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile info&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesByPublicId(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/profiles/byPublicId".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;
   */
  deleteProfile_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getProfiles_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfile_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
   */
  patchProfileStatus_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/status".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesCustomAttributes_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod20.z.unknown(), "z.unknown()");
  }
  /**
   * Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfileCustomAttribute_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod20.z.unknown(), "z.unknown()");
  }
  /**
   * Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPrivateCustomAttributes_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/privateCustomAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk11.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod20.z.unknown(), "z.unknown()");
  }
  /**
   * Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfilePrivateCustomAttribute_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/privateCustomAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk11.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod20.z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/UserProfileAdminApi.ts
function UserProfileAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk12.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk12.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createProfilePublic(data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createProfilePublic(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesByPublicId(queryParams) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesByPublicId(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteProfile_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteProfile_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfiles_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfiles_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfile_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfile_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchProfileStatus_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchProfileStatus_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesCustomAttributes_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesCustomAttributes_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfileCustomAttribute_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfileCustomAttribute_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesPrivateCustomAttributes_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPrivateCustomAttributes_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfilePrivateCustomAttribute_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfilePrivateCustomAttribute_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic,
    /**
     * Get user profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile info&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesByPublicId,
    /**
     * Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;
     */
    deleteProfile_ByUserId,
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId,
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId,
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId,
    /**
     * Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId,
    /**
     * Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId,
    /**
     * Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPrivateCustomAttributes_ByUserId,
    /**
     * Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfilePrivateCustomAttribute_ByUserId
  };
}

// src/generated-admin/queries/UserProfileAdmin.query.ts
var Key_UserProfileAdmin = /* @__PURE__ */ ((Key_UserProfileAdmin2) => {
  Key_UserProfileAdmin2["ProfilePublic"] = "Basic.UserProfileAdmin.ProfilePublic";
  Key_UserProfileAdmin2["ProfilesByPublicId"] = "Basic.UserProfileAdmin.ProfilesByPublicId";
  Key_UserProfileAdmin2["Profile_ByUserId"] = "Basic.UserProfileAdmin.Profile_ByUserId";
  Key_UserProfileAdmin2["Profiles_ByUserId"] = "Basic.UserProfileAdmin.Profiles_ByUserId";
  Key_UserProfileAdmin2["ProfileStatus_ByUserId"] = "Basic.UserProfileAdmin.ProfileStatus_ByUserId";
  Key_UserProfileAdmin2["ProfilesCustomAttributes_ByUserId"] = "Basic.UserProfileAdmin.ProfilesCustomAttributes_ByUserId";
  Key_UserProfileAdmin2["ProfileCustomAttribute_ByUserId"] = "Basic.UserProfileAdmin.ProfileCustomAttribute_ByUserId";
  Key_UserProfileAdmin2["ProfilesPrivateCustomAttributes_ByUserId"] = "Basic.UserProfileAdmin.ProfilesPrivateCustomAttributes_ByUserId";
  Key_UserProfileAdmin2["ProfilePrivateCustomAttribute_ByUserId"] = "Basic.UserProfileAdmin.ProfilePrivateCustomAttribute_ByUserId";
  return Key_UserProfileAdmin2;
})(Key_UserProfileAdmin || {});
var useUserProfileAdminApi_CreateProfilePublicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfilePublic(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Basic.UserProfileAdmin.ProfilePublic" /* ProfilePublic */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfilesByPublicId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfilesByPublicId(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query6.useQuery)({
    queryKey: ["Basic.UserProfileAdmin.ProfilesByPublicId" /* ProfilesByPublicId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_DeleteProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteProfile_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Basic.UserProfileAdmin.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfiles_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfiles_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query6.useQuery)({
    queryKey: ["Basic.UserProfileAdmin.Profiles_ByUserId" /* Profiles_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_UpdateProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfile_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Basic.UserProfileAdmin.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_PatchProfileStatus_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchProfileStatus_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Basic.UserProfileAdmin.ProfileStatus_ByUserId" /* ProfileStatus_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfilesCustomAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesCustomAttributes_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query6.useQuery)({
    queryKey: ["Basic.UserProfileAdmin.ProfilesCustomAttributes_ByUserId" /* ProfilesCustomAttributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_UpdateProfileCustomAttribute_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfileCustomAttribute_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Basic.UserProfileAdmin.ProfileCustomAttribute_ByUserId" /* ProfileCustomAttribute_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileAdminApi_GetProfilesPrivateCustomAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesPrivateCustomAttributes_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query6.useQuery)({
    queryKey: ["Basic.UserProfileAdmin.ProfilesPrivateCustomAttributes_ByUserId" /* ProfilesPrivateCustomAttributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileAdminApi_UpdateProfilePrivateCustomAttribute_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfilePrivateCustomAttribute_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query6.useMutation)({
    mutationKey: ["Basic.UserProfileAdmin.ProfilePrivateCustomAttribute_ByUserId" /* ProfilePrivateCustomAttribute_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/FileUpload.query.ts
var import_react_query7 = require("@tanstack/react-query");

// src/generated-public/FileUploadApi.ts
var import_sdk14 = require("@accelbyte/sdk");

// src/generated-public/endpoints/FileUpload$.ts
var import_sdk13 = require("@accelbyte/sdk");
var FileUpload$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;The threshold of those limitations is different between upload category that is used.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByUserId(userId, queryParams) {
    const params = { category: "default", ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/files".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return import_sdk13.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
  /**
   * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByFolder(folder, queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/folders/{folder}/files".replace("{namespace}", this.namespace).replace("{folder}", folder);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return import_sdk13.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
};

// src/generated-public/FileUploadApi.ts
function FileUploadApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk14.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk14.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createFile_ByUserId(userId, queryParams) {
    const $ = new FileUpload$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByUserId(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createFile_ByFolder(folder, queryParams) {
    const $ = new FileUpload$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByFolder(folder, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;The threshold of those limitations is different between upload category that is used.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId,
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder
  };
}

// src/generated-public/queries/FileUpload.query.ts
var Key_FileUpload = /* @__PURE__ */ ((Key_FileUpload2) => {
  Key_FileUpload2["File_ByUserId"] = "Basic.FileUpload.File_ByUserId";
  Key_FileUpload2["File_ByFolder"] = "Basic.FileUpload.File_ByFolder";
  return Key_FileUpload2;
})(Key_FileUpload || {});
var useFileUploadApi_CreateFile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByUserId(
      input.userId,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query7.useMutation)({
    mutationKey: ["Basic.FileUpload.File_ByUserId" /* File_ByUserId */],
    mutationFn,
    ...options
  });
};
var useFileUploadApi_CreateFile_ByFolderMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await FileUploadApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createFile_ByFolder(
      input.folder,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query7.useMutation)({
    mutationKey: ["Basic.FileUpload.File_ByFolder" /* File_ByFolder */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Misc.query.ts
var import_react_query8 = require("@tanstack/react-query");

// src/generated-public/MiscApi.ts
var import_sdk16 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Misc$.ts
var import_sdk15 = require("@accelbyte/sdk");
var import_zod22 = require("zod");

// src/generated-definitions/RetrieveTimeResponse.ts
var import_zod21 = require("zod");
var RetrieveTimeResponse = import_zod21.z.object({ currentTime: import_zod21.z.string().nullish() });

// src/generated-public/endpoints/Misc$.ts
var Misc$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get server time
   */
  getMiscTime() {
    const params = {};
    const url = "/basic/v1/public/misc/time";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk15.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, RetrieveTimeResponse, "RetrieveTimeResponse");
  }
  /**
   * @deprecated
   * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscCountries(queryParams) {
    const params = { lang: "en", ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/misc/countries".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk15.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, CountryObjectArray, "CountryObjectArray");
  }
  /**
   * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscLanguages() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/misc/languages".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk15.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod22.z.unknown(), "z.unknown()");
  }
  /**
   * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscTimezones() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/misc/timezones".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk15.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod22.z.unknown(), "z.unknown()");
  }
};

// src/generated-public/MiscApi.ts
function MiscApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk16.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk16.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getMiscTime() {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscTime();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscCountries(queryParams) {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscCountries(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscLanguages() {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscLanguages();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscTimezones() {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscTimezones();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get server time
     */
    getMiscTime,
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries,
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages,
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones
  };
}

// src/generated-public/queries/Misc.query.ts
var Key_Misc = /* @__PURE__ */ ((Key_Misc2) => {
  Key_Misc2["MiscTime"] = "Basic.Misc.MiscTime";
  Key_Misc2["MiscCountries"] = "Basic.Misc.MiscCountries";
  Key_Misc2["MiscLanguages"] = "Basic.Misc.MiscLanguages";
  Key_Misc2["MiscTimezones"] = "Basic.Misc.MiscTimezones";
  return Key_Misc2;
})(Key_Misc || {});
var useMiscApi_GetMiscTime = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscTime();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query8.useQuery)({
    queryKey: ["Basic.Misc.MiscTime" /* MiscTime */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscApi_GetMiscCountries = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscCountries(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query8.useQuery)({
    queryKey: ["Basic.Misc.MiscCountries" /* MiscCountries */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscApi_GetMiscLanguages = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscLanguages();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query8.useQuery)({
    queryKey: ["Basic.Misc.MiscLanguages" /* MiscLanguages */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useMiscApi_GetMiscTimezones = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MiscApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMiscTimezones();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query8.useQuery)({
    queryKey: ["Basic.Misc.MiscTimezones" /* MiscTimezones */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Namespace.query.ts
var import_react_query9 = require("@tanstack/react-query");

// src/generated-public/NamespaceApi.ts
var import_sdk18 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Namespace$.ts
var import_sdk17 = require("@accelbyte/sdk");

// src/generated-definitions/NamespaceSimpleInfo.ts
var import_zod23 = require("zod");
var NamespaceSimpleInfo = import_zod23.z.object({ displayName: import_zod23.z.string() });

// src/generated-public/endpoints/Namespace$.ts
var Namespace$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespaces(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk17.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Get a namespace info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace info&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespace_ByNamespace() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk17.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceSimpleInfo, "NamespaceSimpleInfo");
  }
  /**
   * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getPublisher() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/publisher".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk17.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      NamespacePublisherInfo,
      "NamespacePublisherInfo"
    );
  }
};

// src/generated-public/NamespaceApi.ts
function NamespaceApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk18.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk18.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getNamespaces(queryParams) {
    const $ = new Namespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespaces(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getNamespace_ByNamespace() {
    const $ = new Namespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespace_ByNamespace();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPublisher() {
    const $ = new Namespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPublisher();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces,
    /**
     * Get a namespace info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace info&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace,
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher
  };
}

// src/generated-public/queries/Namespace.query.ts
var Key_Namespace = /* @__PURE__ */ ((Key_Namespace2) => {
  Key_Namespace2["Namespaces"] = "Basic.Namespace.Namespaces";
  Key_Namespace2["Namespace_ByNamespace"] = "Basic.Namespace.Namespace_ByNamespace";
  Key_Namespace2["Publisher"] = "Basic.Namespace.Publisher";
  return Key_Namespace2;
})(Key_Namespace || {});
var useNamespaceApi_GetNamespaces = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNamespaces(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query9.useQuery)({
    queryKey: ["Basic.Namespace.Namespaces" /* Namespaces */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceApi_GetNamespace_ByNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNamespace_ByNamespace();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query9.useQuery)({
    queryKey: ["Basic.Namespace.Namespace_ByNamespace" /* Namespace_ByNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useNamespaceApi_GetPublisher = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NamespaceApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPublisher();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query9.useQuery)({
    queryKey: ["Basic.Namespace.Publisher" /* Publisher */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/UserProfile.query.ts
var import_react_query10 = require("@tanstack/react-query");

// src/generated-public/UserProfileApi.ts
var import_sdk20 = require("@accelbyte/sdk");

// src/generated-public/endpoints/UserProfile$.ts
var import_sdk19 = require("@accelbyte/sdk");
var import_zod25 = require("zod");

// src/generated-definitions/UserZipCode.ts
var import_zod24 = require("zod");
var UserZipCode = import_zod24.z.object({ zipCode: import_zod24.z.string().nullish() });

// src/generated-public/endpoints/UserProfile$.ts
var UserProfile$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPublic(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/profiles/public".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePublicInfoArray,
      "UserProfilePublicInfoArray"
    );
  }
  /**
   * Bulk get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
   */
  createProfilePublic(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/profiles/public".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePublicInfoArray,
      "UserProfilePublicInfoArray"
    );
  }
  /**
   * Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
   */
  getUsersMeProfiles() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt; : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
   */
  createUserMeProfile(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
   */
  updateUserMeProfile(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
   */
  getProfiles_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;
   */
  createProfile_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfile_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
   */
  getUsersMeProfilesZipCode() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/zipCode".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserZipCode, "UserZipCode");
  }
  /**
   * Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
   */
  patchUserMeProfileZipCode(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/zipCode".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserZipCode, "UserZipCode");
  }
  /**
   * Get user public profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPublicByPublicId(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/profiles/public/byPublicId".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfilePublicInfo, "UserProfilePublicInfo");
  }
  /**
   * Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPublic_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/public".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfilePublicInfo, "UserProfilePublicInfo");
  }
  /**
   * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
   */
  patchProfileStatus_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/status".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesCustomAttributes_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod25.z.unknown(), "z.unknown()");
  }
  /**
   * Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfileCustomAttribute_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod25.z.unknown(), "z.unknown()");
  }
  /**
   * Get my private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getUsersMeProfilesPrivateCustomAttributes() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/privateCustomAttributes".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod25.z.unknown(), "z.unknown()");
  }
  /**
   * Update partially private custom attributes tied to me.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateUserMeProfilePrivateCustomAttribute(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/privateCustomAttributes".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk19.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, import_zod25.z.unknown(), "z.unknown()");
  }
};

// src/generated-public/UserProfileApi.ts
function UserProfileApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk20.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk20.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getProfilesPublic(queryParams) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPublic(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createProfilePublic(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createProfilePublic(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUsersMeProfiles() {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeProfiles();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createUserMeProfile(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createUserMeProfile(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateUserMeProfile(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateUserMeProfile(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfiles_ByUserId(userId) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfiles_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createProfile_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createProfile_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfile_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfile_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUsersMeProfilesZipCode() {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeProfilesZipCode();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchUserMeProfileZipCode(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchUserMeProfileZipCode(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesPublicByPublicId(queryParams) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPublicByPublicId(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesPublic_ByUserId(userId) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPublic_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchProfileStatus_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchProfileStatus_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesCustomAttributes_ByUserId(userId) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesCustomAttributes_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfileCustomAttribute_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfileCustomAttribute_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUsersMeProfilesPrivateCustomAttributes() {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeProfilesPrivateCustomAttributes();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateUserMeProfilePrivateCustomAttribute(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateUserMeProfilePrivateCustomAttribute(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic,
    /**
     * Bulk get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic,
    /**
     * Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfiles,
    /**
     * Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt; : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    createUserMeProfile,
    /**
     * Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfile,
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId,
    /**
     * Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;
     */
    createProfile_ByUserId,
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId,
    /**
     * Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesZipCode,
    /**
     * Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    patchUserMeProfileZipCode,
    /**
     * Get user public profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublicByPublicId,
    /**
     * Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic_ByUserId,
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId,
    /**
     * Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId,
    /**
     * Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId,
    /**
     * Get my private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesPrivateCustomAttributes,
    /**
     * Update partially private custom attributes tied to me.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfilePrivateCustomAttribute
  };
}

// src/generated-public/queries/UserProfile.query.ts
var Key_UserProfile = /* @__PURE__ */ ((Key_UserProfile2) => {
  Key_UserProfile2["ProfilesPublic"] = "Basic.UserProfile.ProfilesPublic";
  Key_UserProfile2["ProfilePublic"] = "Basic.UserProfile.ProfilePublic";
  Key_UserProfile2["UsersMeProfiles"] = "Basic.UserProfile.UsersMeProfiles";
  Key_UserProfile2["UserMeProfile"] = "Basic.UserProfile.UserMeProfile";
  Key_UserProfile2["Profiles_ByUserId"] = "Basic.UserProfile.Profiles_ByUserId";
  Key_UserProfile2["Profile_ByUserId"] = "Basic.UserProfile.Profile_ByUserId";
  Key_UserProfile2["UsersMeProfilesZipCode"] = "Basic.UserProfile.UsersMeProfilesZipCode";
  Key_UserProfile2["UserMeProfileZipCode"] = "Basic.UserProfile.UserMeProfileZipCode";
  Key_UserProfile2["ProfilesPublicByPublicId"] = "Basic.UserProfile.ProfilesPublicByPublicId";
  Key_UserProfile2["ProfilesPublic_ByUserId"] = "Basic.UserProfile.ProfilesPublic_ByUserId";
  Key_UserProfile2["ProfileStatus_ByUserId"] = "Basic.UserProfile.ProfileStatus_ByUserId";
  Key_UserProfile2["ProfilesCustomAttributes_ByUserId"] = "Basic.UserProfile.ProfilesCustomAttributes_ByUserId";
  Key_UserProfile2["ProfileCustomAttribute_ByUserId"] = "Basic.UserProfile.ProfileCustomAttribute_ByUserId";
  Key_UserProfile2["UsersMeProfilesPrivateCustomAttributes"] = "Basic.UserProfile.UsersMeProfilesPrivateCustomAttributes";
  Key_UserProfile2["UserMeProfilePrivateCustomAttribute"] = "Basic.UserProfile.UserMeProfilePrivateCustomAttribute";
  return Key_UserProfile2;
})(Key_UserProfile || {});
var useUserProfileApi_GetProfilesPublic = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfilesPublic(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.ProfilesPublic" /* ProfilesPublic */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_CreateProfilePublicMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfilePublic(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.ProfilePublic" /* ProfilePublic */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetUsersMeProfiles = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeProfiles();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.UsersMeProfiles" /* UsersMeProfiles */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_CreateUserMeProfileMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeProfile(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.UserMeProfile" /* UserMeProfile */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_UpdateUserMeProfileMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserMeProfile(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.UserMeProfile" /* UserMeProfile */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetProfiles_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfiles_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.Profiles_ByUserId" /* Profiles_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_CreateProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createProfile_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_UpdateProfile_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateProfile_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.Profile_ByUserId" /* Profile_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetUsersMeProfilesZipCode = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeProfilesZipCode();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.UsersMeProfilesZipCode" /* UsersMeProfilesZipCode */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_PatchUserMeProfileZipCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUserMeProfileZipCode(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.UserMeProfileZipCode" /* UserMeProfileZipCode */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetProfilesPublicByPublicId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesPublicByPublicId(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.ProfilesPublicByPublicId" /* ProfilesPublicByPublicId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_GetProfilesPublic_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getProfilesPublic_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.ProfilesPublic_ByUserId" /* ProfilesPublic_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_PatchProfileStatus_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchProfileStatus_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.ProfileStatus_ByUserId" /* ProfileStatus_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetProfilesCustomAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfilesCustomAttributes_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.ProfilesCustomAttributes_ByUserId" /* ProfilesCustomAttributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_UpdateProfileCustomAttribute_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfileCustomAttribute_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.ProfileCustomAttribute_ByUserId" /* ProfileCustomAttribute_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUserProfileApi_GetUsersMeProfilesPrivateCustomAttributes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UserProfileApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeProfilesPrivateCustomAttributes();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query10.useQuery)({
    queryKey: ["Basic.UserProfile.UsersMeProfilesPrivateCustomAttributes" /* UsersMeProfilesPrivateCustomAttributes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUserProfileApi_UpdateUserMeProfilePrivateCustomAttributeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UserProfileApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateUserMeProfilePrivateCustomAttribute(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query10.useMutation)({
    mutationKey: ["Basic.UserProfile.UserMeProfilePrivateCustomAttribute" /* UserMeProfilePrivateCustomAttribute */],
    mutationFn,
    ...options
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Key_AnonymizationAdmin,
  Key_ConfigAdmin,
  Key_FileUpload,
  Key_FileUploadAdmin,
  Key_Misc,
  Key_MiscAdmin,
  Key_Namespace,
  Key_NamespaceAdmin,
  Key_UserProfile,
  Key_UserProfileAdmin,
  useAnonymizationAdminApi_DeleteAnonymizationProfile_ByUserIdMutation,
  useConfigAdminApi_CreateConfigMutation,
  useConfigAdminApi_DeleteConfig_ByConfigKeyMutation,
  useConfigAdminApi_GetConfig_ByConfigKey,
  useConfigAdminApi_GetPublisherConfig_ByConfigKey,
  useConfigAdminApi_PatchConfig_ByConfigKeyMutation,
  useFileUploadAdminApi_CreateFile_ByFolderMutation,
  useFileUploadAdminApi_CreateFile_ByUserIdMutation,
  useFileUploadApi_CreateFile_ByFolderMutation,
  useFileUploadApi_CreateFile_ByUserIdMutation,
  useMiscAdminApi_CreateMiscCountrygroupMutation,
  useMiscAdminApi_DeleteMiscCountrygroup_ByCountryGroupCodeMutation,
  useMiscAdminApi_GetMiscCountries,
  useMiscAdminApi_GetMiscCountrygroups,
  useMiscAdminApi_GetMiscLanguages,
  useMiscAdminApi_GetMiscTimezones,
  useMiscAdminApi_UpdateMiscCountrygroup_ByCountryGroupCodeMutation,
  useMiscApi_GetMiscCountries,
  useMiscApi_GetMiscLanguages,
  useMiscApi_GetMiscTime,
  useMiscApi_GetMiscTimezones,
  useNamespaceAdminApi_CreateNamespaceMutation,
  useNamespaceAdminApi_DeleteNamespace_ByNamespaceMutation,
  useNamespaceAdminApi_GetChild,
  useNamespaceAdminApi_GetContext,
  useNamespaceAdminApi_GetGame,
  useNamespaceAdminApi_GetNamespace_ByNamespace,
  useNamespaceAdminApi_GetNamespaces,
  useNamespaceAdminApi_GetPublisher,
  useNamespaceAdminApi_PatchBasicMutation,
  useNamespaceAdminApi_PatchStatusMutation,
  useNamespaceApi_GetNamespace_ByNamespace,
  useNamespaceApi_GetNamespaces,
  useNamespaceApi_GetPublisher,
  useUserProfileAdminApi_CreateProfilePublicMutation,
  useUserProfileAdminApi_DeleteProfile_ByUserIdMutation,
  useUserProfileAdminApi_GetProfilesByPublicId,
  useUserProfileAdminApi_GetProfilesCustomAttributes_ByUserId,
  useUserProfileAdminApi_GetProfilesPrivateCustomAttributes_ByUserId,
  useUserProfileAdminApi_GetProfiles_ByUserId,
  useUserProfileAdminApi_PatchProfileStatus_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfileCustomAttribute_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfilePrivateCustomAttribute_ByUserIdMutation,
  useUserProfileAdminApi_UpdateProfile_ByUserIdMutation,
  useUserProfileApi_CreateProfilePublicMutation,
  useUserProfileApi_CreateProfile_ByUserIdMutation,
  useUserProfileApi_CreateUserMeProfileMutation,
  useUserProfileApi_GetProfilesCustomAttributes_ByUserId,
  useUserProfileApi_GetProfilesPublic,
  useUserProfileApi_GetProfilesPublicByPublicId,
  useUserProfileApi_GetProfilesPublic_ByUserId,
  useUserProfileApi_GetProfiles_ByUserId,
  useUserProfileApi_GetUsersMeProfiles,
  useUserProfileApi_GetUsersMeProfilesPrivateCustomAttributes,
  useUserProfileApi_GetUsersMeProfilesZipCode,
  useUserProfileApi_PatchProfileStatus_ByUserIdMutation,
  useUserProfileApi_PatchUserMeProfileZipCodeMutation,
  useUserProfileApi_UpdateProfileCustomAttribute_ByUserIdMutation,
  useUserProfileApi_UpdateProfile_ByUserIdMutation,
  useUserProfileApi_UpdateUserMeProfileMutation,
  useUserProfileApi_UpdateUserMeProfilePrivateCustomAttributeMutation
});
