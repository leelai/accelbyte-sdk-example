// src/generated-admin/endpoints/AnonymizationAdmin$.ts
import { Validate } from "@accelbyte/sdk";
import { z } from "zod";
var AnonymizationAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;
   */
  deleteAnonymizationProfile_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z.unknown(), "z.unknown()");
  }
};

// src/generated-admin/AnonymizationAdminApi.ts
import { ApiUtils, Network } from "@accelbyte/sdk";
function AnonymizationAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function deleteAnonymizationProfile_ByUserId(userId) {
    const $ = new AnonymizationAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteAnonymizationProfile_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;
     */
    deleteAnonymizationProfile_ByUserId
  };
}

// src/generated-definitions/ConfigInfo.ts
import { z as z2 } from "zod";
var ConfigInfo = z2.object({
  createdAt: z2.string().nullish(),
  key: z2.string().nullish(),
  namespace: z2.string().nullish(),
  updatedAt: z2.string().nullish(),
  value: z2.string().nullish()
});

// src/generated-admin/endpoints/ConfigAdmin$.ts
import { Validate as Validate2 } from "@accelbyte/sdk";
import { z as z3 } from "zod";
var ConfigAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Create a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
   */
  createConfig(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate2.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
  /**
   * Delete a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
   */
  deleteConfig_ByConfigKey(configKey) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return Validate2.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z3.unknown(), "z.unknown()");
  }
  /**
   * Get a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
   */
  getConfig_ByConfigKey(configKey) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate2.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
  /**
   * Update a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
   */
  patchConfig_ByConfigKey(configKey, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return Validate2.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
  /**
   * Get a publisher config.&lt;br&gt;It will return a publisher namespace config of the given namespace and key.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
   */
  getPublisherConfig_ByConfigKey(configKey) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/publisher/configs/{configKey}".replace("{namespace}", this.namespace).replace("{configKey}", configKey);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate2.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, ConfigInfo, "ConfigInfo");
  }
};

// src/generated-admin/ConfigAdminApi.ts
import { ApiUtils as ApiUtils2, Network as Network2 } from "@accelbyte/sdk";
function ConfigAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils2.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network2.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createConfig(data) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createConfig(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteConfig_ByConfigKey(configKey) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteConfig_ByConfigKey(configKey);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getConfig_ByConfigKey(configKey) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getConfig_ByConfigKey(configKey);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchConfig_ByConfigKey(configKey, data) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchConfig_ByConfigKey(configKey, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPublisherConfig_ByConfigKey(configKey) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPublisherConfig_ByConfigKey(configKey);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Create a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    createConfig,
    /**
     * Delete a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    deleteConfig_ByConfigKey,
    /**
     * Get a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getConfig_ByConfigKey,
    /**
     * Update a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    patchConfig_ByConfigKey,
    /**
     * Get a publisher config.&lt;br&gt;It will return a publisher namespace config of the given namespace and key.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisherConfig_ByConfigKey
  };
}

// src/generated-definitions/FileUploadUrlInfo.ts
import { z as z4 } from "zod";
var FileUploadUrlInfo = z4.object({
  accessUrl: z4.string().nullish(),
  contentType: z4.string().nullish(),
  method: z4.string().nullish(),
  url: z4.string().nullish()
});

// src/generated-admin/endpoints/FileUploadAdmin$.ts
import { Validate as Validate3 } from "@accelbyte/sdk";
var FileUploadAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByUserId(userId, queryParams) {
    const params = { category: "default", ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/files".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return Validate3.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
  /**
   * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByFolder(folder, queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/folders/{folder}/files".replace("{namespace}", this.namespace).replace("{folder}", folder);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return Validate3.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
};

// src/generated-admin/FileUploadAdminApi.ts
import { ApiUtils as ApiUtils3, Network as Network3 } from "@accelbyte/sdk";
function FileUploadAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils3.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network3.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createFile_ByUserId(userId, queryParams) {
    const $ = new FileUploadAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByUserId(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createFile_ByFolder(folder, queryParams) {
    const $ = new FileUploadAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByFolder(folder, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId,
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder
  };
}

// src/generated-definitions/CountryObject.ts
import { z as z5 } from "zod";
var CountryObject = z5.object({ code: z5.string().nullish(), name: z5.string().nullish() });

// src/generated-definitions/AddCountryGroupResponse.ts
import { z as z6 } from "zod";
var AddCountryGroupResponse = z6.object({
  countries: z6.array(CountryObject).nullish(),
  countryGroupCode: z6.string().nullish(),
  countryGroupName: z6.string().nullish()
});

// src/generated-definitions/CountryGroupObject.ts
import { z as z7 } from "zod";
var CountryGroupObject = z7.object({
  countries: z7.array(CountryObject).nullish(),
  countryGroupCode: z7.string().nullish(),
  countryGroupName: z7.string().nullish()
});

// src/generated-definitions/CountryObjectArray.ts
import { z as z8 } from "zod";
var CountryObjectArray = z8.array(CountryObject);

// src/generated-definitions/RetrieveCountryGroupResponse.ts
import { z as z9 } from "zod";
var RetrieveCountryGroupResponse = z9.object({
  countries: z9.array(CountryObject).nullish(),
  countryGroupCode: z9.string().nullish(),
  countryGroupName: z9.string().nullish()
});

// src/generated-definitions/RetrieveCountryGroupResponseArray.ts
import { z as z10 } from "zod";
var RetrieveCountryGroupResponseArray = z10.array(RetrieveCountryGroupResponse);

// src/generated-admin/endpoints/MiscAdmin$.ts
import { Validate as Validate4 } from "@accelbyte/sdk";
import { z as z11 } from "zod";
var MiscAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * @deprecated
   * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscCountries(queryParams) {
    const params = { lang: "en", ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countries".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate4.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, CountryObjectArray, "CountryObjectArray");
  }
  /**
   * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscLanguages() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/languages".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate4.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z11.unknown(), "z.unknown()");
  }
  /**
   * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscTimezones() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/timezones".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate4.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z11.unknown(), "z.unknown()");
  }
  /**
   * List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscCountrygroups(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate4.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RetrieveCountryGroupResponseArray,
      "RetrieveCountryGroupResponseArray"
    );
  }
  /**
   * Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;
   */
  createMiscCountrygroup(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate4.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      AddCountryGroupResponse,
      "AddCountryGroupResponse"
    );
  }
  /**
   * Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;
   */
  deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups/{countryGroupCode}".replace("{namespace}", this.namespace).replace("{countryGroupCode}", countryGroupCode);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return Validate4.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z11.unknown(), "z.unknown()");
  }
  /**
   * Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;
   */
  updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/misc/countrygroups/{countryGroupCode}".replace("{namespace}", this.namespace).replace("{countryGroupCode}", countryGroupCode);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate4.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, CountryGroupObject, "CountryGroupObject");
  }
};

// src/generated-admin/MiscAdminApi.ts
import { ApiUtils as ApiUtils4, Network as Network4 } from "@accelbyte/sdk";
function MiscAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils4.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network4.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getMiscCountries(queryParams) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscCountries(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscLanguages() {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscLanguages();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscTimezones() {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscTimezones();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscCountrygroups(queryParams) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscCountrygroups(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createMiscCountrygroup(data) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createMiscCountrygroup(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode, data) {
    const $ = new MiscAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries,
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages,
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones,
    /**
     * List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountrygroups,
    /**
     * Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;
     */
    createMiscCountrygroup,
    /**
     * Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;
     */
    deleteMiscCountrygroup_ByCountryGroupCode,
    /**
     * Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;
     */
    updateMiscCountrygroup_ByCountryGroupCode
  };
}

// src/generated-definitions/NamespaceContext.ts
import { z as z12 } from "zod";
var NamespaceContext = z12.object({
  namespace: z12.string().nullish(),
  publisherNamespace: z12.string().nullish(),
  studioNamespace: z12.string().nullish(),
  type: z12.enum(["Game", "Publisher", "Studio"]).nullish()
});

// src/generated-definitions/NamespaceInfo.ts
import { z as z13 } from "zod";
var NamespaceInfo = z13.object({
  clientId: z13.string().nullish(),
  createdAt: z13.string().nullish(),
  displayName: z13.string(),
  namespace: z13.string(),
  parentNamespace: z13.string().nullish(),
  status: z13.enum(["ACTIVE", "DELETED", "INACTIVE"]).nullish(),
  updatedAt: z13.string().nullish()
});

// src/generated-definitions/NamespaceInfoArray.ts
import { z as z14 } from "zod";
var NamespaceInfoArray = z14.array(NamespaceInfo);

// src/generated-definitions/NamespacePublisherInfo.ts
import { z as z15 } from "zod";
var NamespacePublisherInfo = z15.object({ publisher: z15.boolean().nullish(), publisherNamespace: z15.string().nullish() });

// src/generated-admin/endpoints/NamespaceAdmin$.ts
import { Validate as Validate5 } from "@accelbyte/sdk";
var NamespaceAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespaces(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces";
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;In multi tenant mode, parentNamespace will be automatically filled with requester namespace if the requester is using studio or publisher token, and it will be filled with studio namespace if the requester uses game token. An oauth client will also be created and the id will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;
   */
  createNamespace(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces";
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;
   */
  deleteNamespace_ByNamespace() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get a namespace.&lt;br&gt;In multi tenant mode, parentNamespace will be returned.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespace_ByNamespace(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get game namespaces.&lt;br&gt;In multi tenant mode, a given super admin namespace will return all game namespaces of studio namespaces&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11308&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getGame(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/game".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
   */
  patchBasic(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/basic".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get child namespaces.&lt;br&gt;If input namespace is publisher namespace, then it will return its all studio namespace.&lt;br&gt;If input namespace is studio namespace, then it will return its all game namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getChild(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/child".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
   */
  patchStatus(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/status".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfo, "NamespaceInfo");
  }
  /**
   * Get context of namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: context of namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getContext() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/context".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate5.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceContext, "NamespaceContext");
  }
  /**
   * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getPublisher() {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/publisher".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate5.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      NamespacePublisherInfo,
      "NamespacePublisherInfo"
    );
  }
};

// src/generated-admin/NamespaceAdminApi.ts
import { ApiUtils as ApiUtils5, Network as Network5 } from "@accelbyte/sdk";
function NamespaceAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils5.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network5.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getNamespaces(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespaces(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createNamespace(data) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createNamespace(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteNamespace_ByNamespace() {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteNamespace_ByNamespace();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getNamespace_ByNamespace(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespace_ByNamespace(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGame(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGame(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchBasic(data) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchBasic(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getChild(queryParams) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getChild(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchStatus(data) {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchStatus(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getContext() {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getContext();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPublisher() {
    const $ = new NamespaceAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPublisher();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces,
    /**
     * Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;In multi tenant mode, parentNamespace will be automatically filled with requester namespace if the requester is using studio or publisher token, and it will be filled with studio namespace if the requester uses game token. An oauth client will also be created and the id will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;
     */
    createNamespace,
    /**
     * Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;
     */
    deleteNamespace_ByNamespace,
    /**
     * Get a namespace.&lt;br&gt;In multi tenant mode, parentNamespace will be returned.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace,
    /**
     * Get game namespaces.&lt;br&gt;In multi tenant mode, a given super admin namespace will return all game namespaces of studio namespaces&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11308&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getGame,
    /**
     * Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchBasic,
    /**
     * Get child namespaces.&lt;br&gt;If input namespace is publisher namespace, then it will return its all studio namespace.&lt;br&gt;If input namespace is studio namespace, then it will return its all game namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getChild,
    /**
     * Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchStatus,
    /**
     * Get context of namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: context of namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getContext,
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher
  };
}

// src/generated-definitions/UserProfileInfo.ts
import { z as z16 } from "zod";
var UserProfileInfo = z16.object({
  avatarLargeUrl: z16.string().nullish(),
  avatarSmallUrl: z16.string().nullish(),
  avatarUrl: z16.string().nullish(),
  customAttributes: z16.record(z16.any()).nullish(),
  dateOfBirth: z16.string().nullish(),
  firstName: z16.string().nullish(),
  language: z16.string().nullish(),
  lastName: z16.string().nullish(),
  namespace: z16.string().nullish(),
  publicId: z16.string().nullish(),
  status: z16.enum(["ACTIVE", "INACTIVE"]).nullish(),
  timeZone: z16.string().nullish(),
  userId: z16.string().nullish(),
  zipCode: z16.string().nullish()
});

// src/generated-definitions/UserProfilePrivateInfo.ts
import { z as z17 } from "zod";
var UserProfilePrivateInfo = z17.object({
  avatarLargeUrl: z17.string().nullish(),
  avatarSmallUrl: z17.string().nullish(),
  avatarUrl: z17.string().nullish(),
  customAttributes: z17.record(z17.any()).nullish(),
  dateOfBirth: z17.string().nullish(),
  firstName: z17.string().nullish(),
  language: z17.string().nullish(),
  lastName: z17.string().nullish(),
  namespace: z17.string().nullish(),
  privateCustomAttributes: z17.record(z17.any()).nullish(),
  publicId: z17.string().nullish(),
  status: z17.enum(["ACTIVE", "INACTIVE"]).nullish(),
  timeZone: z17.string().nullish(),
  userId: z17.string().nullish(),
  zipCode: z17.string().nullish()
});

// src/generated-definitions/UserProfilePublicInfo.ts
import { z as z18 } from "zod";
var UserProfilePublicInfo = z18.object({
  avatarLargeUrl: z18.string().nullish(),
  avatarSmallUrl: z18.string().nullish(),
  avatarUrl: z18.string().nullish(),
  customAttributes: z18.record(z18.any()).nullish(),
  namespace: z18.string().nullish(),
  publicId: z18.string().nullish(),
  timeZone: z18.string().nullish(),
  userId: z18.string().nullish()
});

// src/generated-definitions/UserProfilePublicInfoArray.ts
import { z as z19 } from "zod";
var UserProfilePublicInfoArray = z19.array(UserProfilePublicInfo);

// src/generated-admin/endpoints/UserProfileAdmin$.ts
import { Validate as Validate6 } from "@accelbyte/sdk";
import { z as z20 } from "zod";
var UserProfileAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
   */
  createProfilePublic(data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/profiles/public".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate6.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePublicInfoArray,
      "UserProfilePublicInfoArray"
    );
  }
  /**
   * Get user profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile info&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesByPublicId(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/admin/namespaces/{namespace}/profiles/byPublicId".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate6.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;
   */
  deleteProfile_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return Validate6.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getProfiles_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate6.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfile_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate6.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
   */
  patchProfileStatus_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/status".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return Validate6.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesCustomAttributes_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate6.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z20.unknown(), "z.unknown()");
  }
  /**
   * Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfileCustomAttribute_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate6.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z20.unknown(), "z.unknown()");
  }
  /**
   * Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPrivateCustomAttributes_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/privateCustomAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate6.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z20.unknown(), "z.unknown()");
  }
  /**
   * Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfilePrivateCustomAttribute_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/admin/namespaces/{namespace}/users/{userId}/profiles/privateCustomAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate6.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z20.unknown(), "z.unknown()");
  }
};

// src/generated-admin/UserProfileAdminApi.ts
import { ApiUtils as ApiUtils6, Network as Network6 } from "@accelbyte/sdk";
function UserProfileAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils6.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network6.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createProfilePublic(data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createProfilePublic(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesByPublicId(queryParams) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesByPublicId(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteProfile_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteProfile_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfiles_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfiles_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfile_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfile_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchProfileStatus_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchProfileStatus_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesCustomAttributes_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesCustomAttributes_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfileCustomAttribute_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfileCustomAttribute_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesPrivateCustomAttributes_ByUserId(userId) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPrivateCustomAttributes_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfilePrivateCustomAttribute_ByUserId(userId, data) {
    const $ = new UserProfileAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfilePrivateCustomAttribute_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic,
    /**
     * Get user profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile info&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesByPublicId,
    /**
     * Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;
     */
    deleteProfile_ByUserId,
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId,
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId,
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId,
    /**
     * Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId,
    /**
     * Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId,
    /**
     * Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPrivateCustomAttributes_ByUserId,
    /**
     * Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfilePrivateCustomAttribute_ByUserId
  };
}

// src/generated-public/endpoints/FileUpload$.ts
import { Validate as Validate7 } from "@accelbyte/sdk";
var FileUpload$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;The threshold of those limitations is different between upload category that is used.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByUserId(userId, queryParams) {
    const params = { category: "default", ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/files".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return Validate7.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
  /**
   * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
   */
  createFile_ByFolder(folder, queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/folders/{folder}/files".replace("{namespace}", this.namespace).replace("{folder}", folder);
    const resultPromise = this.axiosInstance.post(url, null, { params });
    return Validate7.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, FileUploadUrlInfo, "FileUploadUrlInfo");
  }
};

// src/generated-public/FileUploadApi.ts
import { ApiUtils as ApiUtils7, Network as Network7 } from "@accelbyte/sdk";
function FileUploadApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils7.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network7.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createFile_ByUserId(userId, queryParams) {
    const $ = new FileUpload$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByUserId(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createFile_ByFolder(folder, queryParams) {
    const $ = new FileUpload$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createFile_ByFolder(folder, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;The threshold of those limitations is different between upload category that is used.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId,
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder
  };
}

// src/generated-definitions/RetrieveTimeResponse.ts
import { z as z21 } from "zod";
var RetrieveTimeResponse = z21.object({ currentTime: z21.string().nullish() });

// src/generated-public/endpoints/Misc$.ts
import { Validate as Validate8 } from "@accelbyte/sdk";
import { z as z22 } from "zod";
var Misc$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get server time
   */
  getMiscTime() {
    const params = {};
    const url = "/basic/v1/public/misc/time";
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate8.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, RetrieveTimeResponse, "RetrieveTimeResponse");
  }
  /**
   * @deprecated
   * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscCountries(queryParams) {
    const params = { lang: "en", ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/misc/countries".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate8.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, CountryObjectArray, "CountryObjectArray");
  }
  /**
   * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscLanguages() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/misc/languages".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate8.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z22.unknown(), "z.unknown()");
  }
  /**
   * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
   */
  getMiscTimezones() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/misc/timezones".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate8.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z22.unknown(), "z.unknown()");
  }
};

// src/generated-public/MiscApi.ts
import { ApiUtils as ApiUtils8, Network as Network8 } from "@accelbyte/sdk";
function MiscApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils8.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network8.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getMiscTime() {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscTime();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscCountries(queryParams) {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscCountries(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscLanguages() {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscLanguages();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMiscTimezones() {
    const $ = new Misc$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMiscTimezones();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get server time
     */
    getMiscTime,
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries,
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages,
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones
  };
}

// src/generated-definitions/NamespaceSimpleInfo.ts
import { z as z23 } from "zod";
var NamespaceSimpleInfo = z23.object({ displayName: z23.string() });

// src/generated-public/endpoints/Namespace$.ts
import { Validate as Validate9 } from "@accelbyte/sdk";
var Namespace$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespaces(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces";
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate9.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceInfoArray, "NamespaceInfoArray");
  }
  /**
   * Get a namespace info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace info&lt;/li&gt;&lt;/ul&gt;
   */
  getNamespace_ByNamespace() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate9.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, NamespaceSimpleInfo, "NamespaceSimpleInfo");
  }
  /**
   * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
   */
  getPublisher() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/publisher".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate9.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      NamespacePublisherInfo,
      "NamespacePublisherInfo"
    );
  }
};

// src/generated-public/NamespaceApi.ts
import { ApiUtils as ApiUtils9, Network as Network9 } from "@accelbyte/sdk";
function NamespaceApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils9.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network9.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getNamespaces(queryParams) {
    const $ = new Namespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespaces(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getNamespace_ByNamespace() {
    const $ = new Namespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getNamespace_ByNamespace();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getPublisher() {
    const $ = new Namespace$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getPublisher();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces,
    /**
     * Get a namespace info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace info&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace,
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher
  };
}

// src/generated-definitions/UserZipCode.ts
import { z as z24 } from "zod";
var UserZipCode = z24.object({ zipCode: z24.string().nullish() });

// src/generated-public/endpoints/UserProfile$.ts
import { Validate as Validate10 } from "@accelbyte/sdk";
import { z as z25 } from "zod";
var UserProfile$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPublic(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/profiles/public".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePublicInfoArray,
      "UserProfilePublicInfoArray"
    );
  }
  /**
   * Bulk get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
   */
  createProfilePublic(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/profiles/public".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate10.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePublicInfoArray,
      "UserProfilePublicInfoArray"
    );
  }
  /**
   * Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
   */
  getUsersMeProfiles() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt; : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
   */
  createUserMeProfile(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate10.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
   */
  updateUserMeProfile(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate10.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      UserProfilePrivateInfo,
      "UserProfilePrivateInfo"
    );
  }
  /**
   * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
   */
  getProfiles_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;
   */
  createProfile_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfile_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
   */
  getUsersMeProfilesZipCode() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/zipCode".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserZipCode, "UserZipCode");
  }
  /**
   * Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
   */
  patchUserMeProfileZipCode(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/zipCode".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserZipCode, "UserZipCode");
  }
  /**
   * Get user public profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPublicByPublicId(queryParams) {
    const params = { ...queryParams };
    const url = "/basic/v1/public/namespaces/{namespace}/profiles/public/byPublicId".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfilePublicInfo, "UserProfilePublicInfo");
  }
  /**
   * Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesPublic_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/public".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfilePublicInfo, "UserProfilePublicInfo");
  }
  /**
   * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
   */
  patchProfileStatus_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/status".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, UserProfileInfo, "UserProfileInfo");
  }
  /**
   * Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  getProfilesCustomAttributes_ByUserId(userId) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z25.unknown(), "z.unknown()");
  }
  /**
   * Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateProfileCustomAttribute_ByUserId(userId, data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/{userId}/profiles/customAttributes".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z25.unknown(), "z.unknown()");
  }
  /**
   * Get my private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
   */
  getUsersMeProfilesPrivateCustomAttributes() {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/privateCustomAttributes".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z25.unknown(), "z.unknown()");
  }
  /**
   * Update partially private custom attributes tied to me.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
   */
  updateUserMeProfilePrivateCustomAttribute(data) {
    const params = {};
    const url = "/basic/v1/public/namespaces/{namespace}/users/me/profiles/privateCustomAttributes".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return Validate10.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, z25.unknown(), "z.unknown()");
  }
};

// src/generated-public/UserProfileApi.ts
import { ApiUtils as ApiUtils10, Network as Network10 } from "@accelbyte/sdk";
function UserProfileApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = ApiUtils10.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = Network10.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getProfilesPublic(queryParams) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPublic(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createProfilePublic(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createProfilePublic(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUsersMeProfiles() {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeProfiles();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createUserMeProfile(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createUserMeProfile(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateUserMeProfile(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateUserMeProfile(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfiles_ByUserId(userId) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfiles_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createProfile_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createProfile_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfile_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfile_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUsersMeProfilesZipCode() {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeProfilesZipCode();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchUserMeProfileZipCode(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchUserMeProfileZipCode(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesPublicByPublicId(queryParams) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPublicByPublicId(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesPublic_ByUserId(userId) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesPublic_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchProfileStatus_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchProfileStatus_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getProfilesCustomAttributes_ByUserId(userId) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getProfilesCustomAttributes_ByUserId(userId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateProfileCustomAttribute_ByUserId(userId, data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateProfileCustomAttribute_ByUserId(userId, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getUsersMeProfilesPrivateCustomAttributes() {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeProfilesPrivateCustomAttributes();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateUserMeProfilePrivateCustomAttribute(data) {
    const $ = new UserProfile$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateUserMeProfilePrivateCustomAttribute(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic,
    /**
     * Bulk get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic,
    /**
     * Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfiles,
    /**
     * Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt; : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    createUserMeProfile,
    /**
     * Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfile,
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId,
    /**
     * Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;
     */
    createProfile_ByUserId,
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId,
    /**
     * Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesZipCode,
    /**
     * Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    patchUserMeProfileZipCode,
    /**
     * Get user public profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublicByPublicId,
    /**
     * Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic_ByUserId,
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId,
    /**
     * Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId,
    /**
     * Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId,
    /**
     * Get my private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesPrivateCustomAttributes,
    /**
     * Update partially private custom attributes tied to me.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfilePrivateCustomAttribute
  };
}

export {
  AnonymizationAdmin$,
  AnonymizationAdminApi,
  ConfigInfo,
  ConfigAdmin$,
  ConfigAdminApi,
  FileUploadUrlInfo,
  FileUploadAdmin$,
  FileUploadAdminApi,
  CountryObject,
  AddCountryGroupResponse,
  CountryGroupObject,
  CountryObjectArray,
  RetrieveCountryGroupResponse,
  RetrieveCountryGroupResponseArray,
  MiscAdmin$,
  MiscAdminApi,
  NamespaceContext,
  NamespaceInfo,
  NamespaceInfoArray,
  NamespacePublisherInfo,
  NamespaceAdmin$,
  NamespaceAdminApi,
  UserProfileInfo,
  UserProfilePrivateInfo,
  UserProfilePublicInfo,
  UserProfilePublicInfoArray,
  UserProfileAdmin$,
  UserProfileAdminApi,
  FileUpload$,
  FileUploadApi,
  RetrieveTimeResponse,
  Misc$,
  MiscApi,
  NamespaceSimpleInfo,
  Namespace$,
  NamespaceApi,
  UserZipCode,
  UserProfile$,
  UserProfileApi
};
