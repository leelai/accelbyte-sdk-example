import { AccelByteSDK, SdkSetConfigParam, Response } from '@accelbyte/sdk';
import { AxiosResponse, AxiosInstance } from 'axios';
import { C as ConfigCreate, a as ConfigInfo, b as ConfigUpdate, F as FileUploadUrlInfo, c as CountryObjectArray, R as RetrieveCountryGroupResponseArray, A as AddCountryGroupRequest, d as AddCountryGroupResponse, U as UpdateCountryGroupRequest, e as CountryGroupObject, N as NamespaceInfoArray, f as NamespaceCreate, g as NamespaceInfo, h as NamespaceUpdate, i as NamespaceStatusUpdate, j as NamespaceContext, k as NamespacePublisherInfo, l as UserProfileBulkRequest, m as UserProfilePublicInfoArray, n as UserProfileInfo, o as UserProfilePrivateInfo, p as UserProfileAdmin, q as UserProfileStatusUpdate, r as RetrieveTimeResponse, s as NamespaceSimpleInfo, t as UserProfilePrivateCreate, u as UserProfileUpdate, v as UserProfileCreate, w as UserZipCode, x as UserZipCodeUpdate, y as UserProfilePublicInfo } from './UserZipCodeUpdate-komaueay.cjs';
import { z } from 'zod';

/**
 * AUTO GENERATED
 */

declare function AnonymizationAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;
     */
    deleteAnonymizationProfile_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function ConfigAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Create a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    createConfig: (data: ConfigCreate) => Promise<AxiosResponse<ConfigInfo>>;
    /**
     * Delete a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    deleteConfig_ByConfigKey: (configKey: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Get a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getConfig_ByConfigKey: (configKey: string) => Promise<AxiosResponse<ConfigInfo>>;
    /**
     * Update a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    patchConfig_ByConfigKey: (configKey: string, data: ConfigUpdate) => Promise<AxiosResponse<ConfigInfo>>;
    /**
     * Get a publisher config.&lt;br&gt;It will return a publisher namespace config of the given namespace and key.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisherConfig_ByConfigKey: (configKey: string) => Promise<AxiosResponse<ConfigInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function FileUploadAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId: (userId: string, queryParams: {
        fileType: string | null;
        category?: string | null;
    }) => Promise<AxiosResponse<FileUploadUrlInfo>>;
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder: (folder: string, queryParams: {
        fileType: string | null;
    }) => Promise<AxiosResponse<FileUploadUrlInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function MiscAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries: (queryParams?: {
        lang?: string | null;
    }) => Promise<AxiosResponse<CountryObjectArray>>;
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages: () => Promise<AxiosResponse<unknown>>;
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones: () => Promise<AxiosResponse<unknown>>;
    /**
     * List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountrygroups: (queryParams?: {
        groupCode?: string | null;
    }) => Promise<AxiosResponse<RetrieveCountryGroupResponseArray>>;
    /**
     * Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;
     */
    createMiscCountrygroup: (data: AddCountryGroupRequest) => Promise<AxiosResponse<AddCountryGroupResponse>>;
    /**
     * Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;
     */
    deleteMiscCountrygroup_ByCountryGroupCode: (countryGroupCode: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;
     */
    updateMiscCountrygroup_ByCountryGroupCode: (countryGroupCode: string, data: UpdateCountryGroupRequest) => Promise<AxiosResponse<CountryGroupObject>>;
};

/**
 * AUTO GENERATED
 */

declare function NamespaceAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces: (queryParams?: {
        activeOnly?: boolean | null;
    }) => Promise<AxiosResponse<NamespaceInfoArray>>;
    /**
     * Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;In multi tenant mode, parentNamespace will be automatically filled with requester namespace if the requester is using studio or publisher token, and it will be filled with studio namespace if the requester uses game token. An oauth client will also be created and the id will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;
     */
    createNamespace: (data: NamespaceCreate) => Promise<AxiosResponse<NamespaceInfo>>;
    /**
     * Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;
     */
    deleteNamespace_ByNamespace: () => Promise<AxiosResponse<NamespaceInfo>>;
    /**
     * Get a namespace.&lt;br&gt;In multi tenant mode, parentNamespace will be returned.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace: (queryParams?: {
        activeOnly?: boolean | null;
    }) => Promise<AxiosResponse<NamespaceInfo>>;
    /**
     * Get game namespaces.&lt;br&gt;In multi tenant mode, a given super admin namespace will return all game namespaces of studio namespaces&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11308&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getGame: (queryParams?: {
        activeOnly?: boolean | null;
    }) => Promise<AxiosResponse<NamespaceInfoArray>>;
    /**
     * Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchBasic: (data: NamespaceUpdate) => Promise<AxiosResponse<NamespaceInfo>>;
    /**
     * Get child namespaces.&lt;br&gt;If input namespace is publisher namespace, then it will return its all studio namespace.&lt;br&gt;If input namespace is studio namespace, then it will return its all game namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getChild: (queryParams?: {
        activeOnly?: boolean | null;
    }) => Promise<AxiosResponse<NamespaceInfoArray>>;
    /**
     * Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchStatus: (data: NamespaceStatusUpdate) => Promise<AxiosResponse<NamespaceInfo>>;
    /**
     * Get context of namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: context of namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getContext: () => Promise<AxiosResponse<NamespaceContext>>;
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher: () => Promise<AxiosResponse<NamespacePublisherInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function UserProfileAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic: (data: UserProfileBulkRequest) => Promise<AxiosResponse<UserProfilePublicInfoArray>>;
    /**
     * Get user profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile info&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesByPublicId: (queryParams: {
        publicId: string | null;
    }) => Promise<AxiosResponse<UserProfileInfo>>;
    /**
     * Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;
     */
    deleteProfile_ByUserId: (userId: string) => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId: (userId: string) => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId: (userId: string, data: UserProfileAdmin) => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId: (userId: string, data: UserProfileStatusUpdate) => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId: (userId: string, data: any) => Promise<AxiosResponse<unknown>>;
    /**
     * Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPrivateCustomAttributes_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfilePrivateCustomAttribute_ByUserId: (userId: string, data: any) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function FileUploadApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;The threshold of those limitations is different between upload category that is used.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId: (userId: string, queryParams: {
        fileType: string | null;
        category?: string | null;
    }) => Promise<AxiosResponse<FileUploadUrlInfo>>;
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder: (folder: string, queryParams: {
        fileType: string | null;
    }) => Promise<AxiosResponse<FileUploadUrlInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function MiscApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get server time
     */
    getMiscTime: () => Promise<AxiosResponse<RetrieveTimeResponse>>;
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries: (queryParams?: {
        lang?: string | null;
    }) => Promise<AxiosResponse<CountryObjectArray>>;
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages: () => Promise<AxiosResponse<unknown>>;
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones: () => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare function NamespaceApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces: (queryParams?: {
        activeOnly?: boolean | null;
    }) => Promise<AxiosResponse<NamespaceInfoArray>>;
    /**
     * Get a namespace info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace info&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace: () => Promise<AxiosResponse<NamespaceSimpleInfo>>;
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher: () => Promise<AxiosResponse<NamespacePublisherInfo>>;
};

/**
 * AUTO GENERATED
 */

declare function UserProfileApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic: (queryParams: {
        userIds: string | null;
    }) => Promise<AxiosResponse<UserProfilePublicInfoArray>>;
    /**
     * Bulk get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic: (data: UserProfileBulkRequest) => Promise<AxiosResponse<UserProfilePublicInfoArray>>;
    /**
     * Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfiles: () => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt; : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    createUserMeProfile: (data: UserProfilePrivateCreate) => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfile: (data: UserProfileUpdate) => Promise<AxiosResponse<UserProfilePrivateInfo>>;
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId: (userId: string) => Promise<AxiosResponse<UserProfileInfo>>;
    /**
     * Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;
     */
    createProfile_ByUserId: (userId: string, data: UserProfileCreate) => Promise<AxiosResponse<UserProfileInfo>>;
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId: (userId: string, data: UserProfileUpdate) => Promise<AxiosResponse<UserProfileInfo>>;
    /**
     * Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesZipCode: () => Promise<AxiosResponse<UserZipCode>>;
    /**
     * Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    patchUserMeProfileZipCode: (data: UserZipCodeUpdate) => Promise<AxiosResponse<UserZipCode>>;
    /**
     * Get user public profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublicByPublicId: (queryParams: {
        publicId: string | null;
    }) => Promise<AxiosResponse<UserProfilePublicInfo>>;
    /**
     * Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic_ByUserId: (userId: string) => Promise<AxiosResponse<UserProfilePublicInfo>>;
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId: (userId: string, data: UserProfileStatusUpdate) => Promise<AxiosResponse<UserProfileInfo>>;
    /**
     * Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId: (userId: string) => Promise<AxiosResponse<unknown>>;
    /**
     * Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId: (userId: string, data: any) => Promise<AxiosResponse<unknown>>;
    /**
     * Get my private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesPrivateCustomAttributes: () => Promise<AxiosResponse<unknown>>;
    /**
     * Update partially private custom attributes tied to me.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfilePrivateCustomAttribute: (data: any) => Promise<AxiosResponse<unknown>>;
};

/**
 * AUTO GENERATED
 */

declare const Basic: {
    NamespaceAdminApi: typeof NamespaceAdminApi;
    ConfigAdminApi: typeof ConfigAdminApi;
    MiscAdminApi: typeof MiscAdminApi;
    UserProfileAdminApi: typeof UserProfileAdminApi;
    FileUploadAdminApi: typeof FileUploadAdminApi;
    AnonymizationAdminApi: typeof AnonymizationAdminApi;
    MiscApi: typeof MiscApi;
    NamespaceApi: typeof NamespaceApi;
    UserProfileApi: typeof UserProfileApi;
    FileUploadApi: typeof FileUploadApi;
    version: () => void;
};

/**
 * AUTO GENERATED
 */

declare class AnonymizationAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;
     */
    deleteAnonymizationProfile_ByUserId(userId: string): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class ConfigAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Create a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    createConfig(data: ConfigCreate): Promise<Response<ConfigInfo>>;
    /**
     * Delete a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    deleteConfig_ByConfigKey(configKey: string): Promise<Response<unknown>>;
    /**
     * Get a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getConfig_ByConfigKey(configKey: string): Promise<Response<ConfigInfo>>;
    /**
     * Update a config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created config&lt;/li&gt;&lt;/ul&gt;
     */
    patchConfig_ByConfigKey(configKey: string, data: ConfigUpdate): Promise<Response<ConfigInfo>>;
    /**
     * Get a publisher config.&lt;br&gt;It will return a publisher namespace config of the given namespace and key.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: config&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisherConfig_ByConfigKey(configKey: string): Promise<Response<ConfigInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class FileUploadAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId(userId: string, queryParams: {
        fileType: string | null;
        category?: string | null;
    }): Promise<Response<FileUploadUrlInfo>>;
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder(folder: string, queryParams: {
        fileType: string | null;
    }): Promise<Response<FileUploadUrlInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class MiscAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries(queryParams?: {
        lang?: string | null;
    }): Promise<Response<CountryObjectArray>>;
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages(): Promise<Response<unknown>>;
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones(): Promise<Response<unknown>>;
    /**
     * List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountrygroups(queryParams?: {
        groupCode?: string | null;
    }): Promise<Response<RetrieveCountryGroupResponseArray>>;
    /**
     * Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;
     */
    createMiscCountrygroup(data: AddCountryGroupRequest): Promise<Response<AddCountryGroupResponse>>;
    /**
     * Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;
     */
    deleteMiscCountrygroup_ByCountryGroupCode(countryGroupCode: string): Promise<Response<unknown>>;
    /**
     * Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;
     */
    updateMiscCountrygroup_ByCountryGroupCode(countryGroupCode: string, data: UpdateCountryGroupRequest): Promise<Response<CountryGroupObject>>;
}

/**
 * AUTO GENERATED
 */

declare class NamespaceAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces(queryParams?: {
        activeOnly?: boolean | null;
    }): Promise<Response<NamespaceInfoArray>>;
    /**
     * Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;In multi tenant mode, parentNamespace will be automatically filled with requester namespace if the requester is using studio or publisher token, and it will be filled with studio namespace if the requester uses game token. An oauth client will also be created and the id will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;
     */
    createNamespace(data: NamespaceCreate): Promise<Response<NamespaceInfo>>;
    /**
     * Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;
     */
    deleteNamespace_ByNamespace(): Promise<Response<NamespaceInfo>>;
    /**
     * Get a namespace.&lt;br&gt;In multi tenant mode, parentNamespace will be returned.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace(queryParams?: {
        activeOnly?: boolean | null;
    }): Promise<Response<NamespaceInfo>>;
    /**
     * Get game namespaces.&lt;br&gt;In multi tenant mode, a given super admin namespace will return all game namespaces of studio namespaces&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11308&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getGame(queryParams?: {
        activeOnly?: boolean | null;
    }): Promise<Response<NamespaceInfoArray>>;
    /**
     * Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchBasic(data: NamespaceUpdate): Promise<Response<NamespaceInfo>>;
    /**
     * Get child namespaces.&lt;br&gt;If input namespace is publisher namespace, then it will return its all studio namespace.&lt;br&gt;If input namespace is studio namespace, then it will return its all game namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getChild(queryParams?: {
        activeOnly?: boolean | null;
    }): Promise<Response<NamespaceInfoArray>>;
    /**
     * Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;
     */
    patchStatus(data: NamespaceStatusUpdate): Promise<Response<NamespaceInfo>>;
    /**
     * Get context of namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: context of namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getContext(): Promise<Response<NamespaceContext>>;
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher(): Promise<Response<NamespacePublisherInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class UserProfileAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic(data: UserProfileBulkRequest): Promise<Response<UserProfilePublicInfoArray>>;
    /**
     * Get user profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile info&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesByPublicId(queryParams: {
        publicId: string | null;
    }): Promise<Response<UserProfileInfo>>;
    /**
     * Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;
     */
    deleteProfile_ByUserId(userId: string): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId(userId: string): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId(userId: string, data: UserProfileAdmin): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId(userId: string, data: UserProfileStatusUpdate): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId(userId: string, data: any): Promise<Response<unknown>>;
    /**
     * Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPrivateCustomAttributes_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfilePrivateCustomAttribute_ByUserId(userId: string, data: any): Promise<Response<unknown>>;
}

declare const CountryObject: z.ZodObject<{
    code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code?: string | null | undefined;
    name?: string | null | undefined;
}, {
    code?: string | null | undefined;
    name?: string | null | undefined;
}>;
interface CountryObject extends z.TypeOf<typeof CountryObject> {
}

declare const ErrorEntity: z.ZodObject<{
    devStackTrace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    requiredPermission: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        action: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        resource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    }, {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
    devStackTrace?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    requiredPermission?: {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    } | null | undefined;
}, {
    errorCode: number;
    errorMessage: string;
    devStackTrace?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    requiredPermission?: {
        action?: number | null | undefined;
        resource?: string | null | undefined;
    } | null | undefined;
}>;
interface ErrorEntity extends z.TypeOf<typeof ErrorEntity> {
}

declare const FieldValidationError: z.ZodObject<{
    errorCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    errorCode?: string | null | undefined;
    errorMessage?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    errorField?: string | null | undefined;
    errorValue?: string | null | undefined;
}, {
    errorCode?: string | null | undefined;
    errorMessage?: string | null | undefined;
    messageVariables?: Record<string, string> | null | undefined;
    errorField?: string | null | undefined;
    errorValue?: string | null | undefined;
}>;
interface FieldValidationError extends z.TypeOf<typeof FieldValidationError> {
}

declare const Permission: z.ZodObject<{
    action: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    resource: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    action?: number | null | undefined;
    resource?: string | null | undefined;
}, {
    action?: number | null | undefined;
    resource?: string | null | undefined;
}>;
interface Permission extends z.TypeOf<typeof Permission> {
}

declare const RetrieveCountryGroupResponse: z.ZodObject<{
    countries: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        code?: string | null | undefined;
        name?: string | null | undefined;
    }, {
        code?: string | null | undefined;
        name?: string | null | undefined;
    }>, "many">>>;
    countryGroupCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    countryGroupName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    countries?: {
        code?: string | null | undefined;
        name?: string | null | undefined;
    }[] | null | undefined;
    countryGroupCode?: string | null | undefined;
    countryGroupName?: string | null | undefined;
}, {
    countries?: {
        code?: string | null | undefined;
        name?: string | null | undefined;
    }[] | null | undefined;
    countryGroupCode?: string | null | undefined;
    countryGroupName?: string | null | undefined;
}>;
interface RetrieveCountryGroupResponse extends z.TypeOf<typeof RetrieveCountryGroupResponse> {
}

declare const ValidationErrorEntity: z.ZodObject<{
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    errors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        errorCode: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorField: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        errorValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        messageVariables: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }, {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
    errors?: {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }[] | null | undefined;
}, {
    errorCode: number;
    errorMessage: string;
    errors?: {
        errorCode?: string | null | undefined;
        errorMessage?: string | null | undefined;
        messageVariables?: Record<string, string> | null | undefined;
        errorField?: string | null | undefined;
        errorValue?: string | null | undefined;
    }[] | null | undefined;
}>;
interface ValidationErrorEntity extends z.TypeOf<typeof ValidationErrorEntity> {
}

/**
 * AUTO GENERATED
 */

declare class FileUpload$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;The threshold of those limitations is different between upload category that is used.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByUserId(userId: string, queryParams: {
        fileType: string | null;
        category?: string | null;
    }): Promise<Response<FileUploadUrlInfo>>;
    /**
     * Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;
     */
    createFile_ByFolder(folder: string, queryParams: {
        fileType: string | null;
    }): Promise<Response<FileUploadUrlInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class Misc$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get server time
     */
    getMiscTime(): Promise<Response<RetrieveTimeResponse>>;
    /**
     * @deprecated
     * List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscCountries(queryParams?: {
        lang?: string | null;
    }): Promise<Response<CountryObjectArray>>;
    /**
     * List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscLanguages(): Promise<Response<unknown>>;
    /**
     * List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;
     */
    getMiscTimezones(): Promise<Response<unknown>>;
}

/**
 * AUTO GENERATED
 */

declare class Namespace$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespaces(queryParams?: {
        activeOnly?: boolean | null;
    }): Promise<Response<NamespaceInfoArray>>;
    /**
     * Get a namespace info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace info&lt;/li&gt;&lt;/ul&gt;
     */
    getNamespace_ByNamespace(): Promise<Response<NamespaceSimpleInfo>>;
    /**
     * Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;
     */
    getPublisher(): Promise<Response<NamespacePublisherInfo>>;
}

/**
 * AUTO GENERATED
 */

declare class UserProfile$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic(queryParams: {
        userIds: string | null;
    }): Promise<Response<UserProfilePublicInfoArray>>;
    /**
     * Bulk get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;
     */
    createProfilePublic(data: UserProfileBulkRequest): Promise<Response<UserProfilePublicInfoArray>>;
    /**
     * Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfiles(): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt; : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    createUserMeProfile(data: UserProfilePrivateCreate): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfile(data: UserProfileUpdate): Promise<Response<UserProfilePrivateInfo>>;
    /**
     * Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfiles_ByUserId(userId: string): Promise<Response<UserProfileInfo>>;
    /**
     * Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;
     */
    createProfile_ByUserId(userId: string, data: UserProfileCreate): Promise<Response<UserProfileInfo>>;
    /**
     * Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfile_ByUserId(userId: string, data: UserProfileUpdate): Promise<Response<UserProfileInfo>>;
    /**
     * Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesZipCode(): Promise<Response<UserZipCode>>;
    /**
     * Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;
     */
    patchUserMeProfileZipCode(data: UserZipCodeUpdate): Promise<Response<UserZipCode>>;
    /**
     * Get user public profile by public id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublicByPublicId(queryParams: {
        publicId: string | null;
    }): Promise<Response<UserProfilePublicInfo>>;
    /**
     * Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesPublic_ByUserId(userId: string): Promise<Response<UserProfilePublicInfo>>;
    /**
     * Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;
     */
    patchProfileStatus_ByUserId(userId: string, data: UserProfileStatusUpdate): Promise<Response<UserProfileInfo>>;
    /**
     * Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    getProfilesCustomAttributes_ByUserId(userId: string): Promise<Response<unknown>>;
    /**
     * Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateProfileCustomAttribute_ByUserId(userId: string, data: any): Promise<Response<unknown>>;
    /**
     * Get my private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;
     */
    getUsersMeProfilesPrivateCustomAttributes(): Promise<Response<unknown>>;
    /**
     * Update partially private custom attributes tied to me.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;
     */
    updateUserMeProfilePrivateCustomAttribute(data: any): Promise<Response<unknown>>;
}

export { AddCountryGroupRequest, AddCountryGroupResponse, AnonymizationAdmin$, AnonymizationAdminApi, Basic, ConfigAdmin$, ConfigAdminApi, ConfigCreate, ConfigInfo, ConfigUpdate, CountryGroupObject, CountryObject, CountryObjectArray, ErrorEntity, FieldValidationError, FileUpload$, FileUploadAdmin$, FileUploadAdminApi, FileUploadApi, FileUploadUrlInfo, Misc$, MiscAdmin$, MiscAdminApi, MiscApi, Namespace$, NamespaceAdmin$, NamespaceAdminApi, NamespaceApi, NamespaceContext, NamespaceCreate, NamespaceInfo, NamespaceInfoArray, NamespacePublisherInfo, NamespaceSimpleInfo, NamespaceStatusUpdate, NamespaceUpdate, Permission, RetrieveCountryGroupResponse, RetrieveCountryGroupResponseArray, RetrieveTimeResponse, UpdateCountryGroupRequest, UserProfile$, UserProfileAdmin, UserProfileAdmin$, UserProfileAdminApi, UserProfileApi, UserProfileBulkRequest, UserProfileCreate, UserProfileInfo, UserProfilePrivateCreate, UserProfilePrivateInfo, UserProfilePublicInfo, UserProfilePublicInfoArray, UserProfileStatusUpdate, UserProfileUpdate, UserZipCode, UserZipCodeUpdate, ValidationErrorEntity };
