import {
  SessionAdminApi,
  SessionApi
} from "./chunk-S7Z77FEW.js";

// src/generated-admin/queries/SessionAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_SessionAdmin = /* @__PURE__ */ ((Key_SessionAdmin2) => {
  Key_SessionAdmin2["Gamesession"] = "Sessionbrowser.SessionAdmin.Gamesession";
  Key_SessionAdmin2["Gamesession_BySessionId"] = "Sessionbrowser.SessionAdmin.Gamesession_BySessionId";
  Key_SessionAdmin2["SessionsHistorySearch"] = "Sessionbrowser.SessionAdmin.SessionsHistorySearch";
  Key_SessionAdmin2["GamesessionActiveCount"] = "Sessionbrowser.SessionAdmin.GamesessionActiveCount";
  Key_SessionAdmin2["GamesessionActiveCustomGame"] = "Sessionbrowser.SessionAdmin.GamesessionActiveCustomGame";
  Key_SessionAdmin2["GamesessionActiveMatchmakingGame"] = "Sessionbrowser.SessionAdmin.GamesessionActiveMatchmakingGame";
  Key_SessionAdmin2["HistoryDetailed_ByMatchId"] = "Sessionbrowser.SessionAdmin.HistoryDetailed_ByMatchId";
  return Key_SessionAdmin2;
})(Key_SessionAdmin || {});
var useSessionAdminApi_GetGamesession = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.Gamesession" /* Gamesession */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_DeleteGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteGamesession_BySessionId(input.sessionID);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Sessionbrowser.SessionAdmin.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionAdminApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesession_BySessionId(input2.sessionID);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetSessionsHistorySearch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSessionsHistorySearch(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.SessionsHistorySearch" /* SessionsHistorySearch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetGamesessionActiveCount = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessionActiveCount(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.GamesessionActiveCount" /* GamesessionActiveCount */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetGamesessionActiveCustomGame = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesessionActiveCustomGame(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.GamesessionActiveCustomGame" /* GamesessionActiveCustomGame */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetGamesessionActiveMatchmakingGame = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesessionActiveMatchmakingGame(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.GamesessionActiveMatchmakingGame" /* GamesessionActiveMatchmakingGame */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetHistoryDetailed_ByMatchId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistoryDetailed_ByMatchId(input2.matchID);
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionbrowser.SessionAdmin.HistoryDetailed_ByMatchId" /* HistoryDetailed_ByMatchId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Session.query.ts
import { useMutation as useMutation2, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_Session = /* @__PURE__ */ ((Key_Session2) => {
  Key_Session2["Gamesession"] = "Sessionbrowser.Session.Gamesession";
  Key_Session2["GamesessionBulk"] = "Sessionbrowser.Session.GamesessionBulk";
  Key_Session2["Recentplayer_ByUserId"] = "Sessionbrowser.Session.Recentplayer_ByUserId";
  Key_Session2["Gamesession_BySessionId"] = "Sessionbrowser.Session.Gamesession_BySessionId";
  Key_Session2["Join_BySessionId"] = "Sessionbrowser.Session.Join_BySessionId";
  Key_Session2["Player_BySessionId"] = "Sessionbrowser.Session.Player_BySessionId";
  Key_Session2["Locald_BySessionId"] = "Sessionbrowser.Session.Locald_BySessionId";
  Key_Session2["Setting_BySessionId"] = "Sessionbrowser.Session.Setting_BySessionId";
  Key_Session2["Player_BySessionId_ByUserId"] = "Sessionbrowser.Session.Player_BySessionId_ByUserId";
  return Key_Session2;
})(Key_Session || {});
var useSessionApi_GetGamesession = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionbrowser.Session.Gamesession" /* Gamesession */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_CreateGamesessionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createGamesession(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Gamesession" /* Gamesession */],
    mutationFn,
    ...options
  });
};
var useSessionApi_GetGamesessionBulk = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessionBulk(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionbrowser.Session.GamesessionBulk" /* GamesessionBulk */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_GetRecentplayer_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecentplayer_ByUserId(
      input2.userID
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionbrowser.Session.Recentplayer_ByUserId" /* Recentplayer_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_DeleteGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteGamesession_BySessionId(
      input.sessionID
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession_BySessionId(
      input2.sessionID
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionbrowser.Session.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_UpdateGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateGamesession_BySessionId(
      input.sessionID,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_FetchJoin_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchJoin_BySessionId(
      input2.sessionID,
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionbrowser.Session.Join_BySessionId" /* Join_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_UpdatePlayer_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePlayer_BySessionId(
      input.sessionID,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Player_BySessionId" /* Player_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_DeleteLocald_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteLocald_BySessionId(
      input.sessionID
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Locald_BySessionId" /* Locald_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_UpdateSetting_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateSetting_BySessionId(
      input.sessionID,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Setting_BySessionId" /* Setting_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePlayer_BySessionId_ByUserId(input.sessionID, input.userID);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionbrowser.Session.Player_BySessionId_ByUserId" /* Player_BySessionId_ByUserId */],
    mutationFn,
    ...options
  });
};
export {
  Key_Session,
  Key_SessionAdmin,
  useSessionAdminApi_DeleteGamesession_BySessionIdMutation,
  useSessionAdminApi_GetGamesession,
  useSessionAdminApi_GetGamesessionActiveCount,
  useSessionAdminApi_GetGamesessionActiveCustomGame,
  useSessionAdminApi_GetGamesessionActiveMatchmakingGame,
  useSessionAdminApi_GetGamesession_BySessionId,
  useSessionAdminApi_GetHistoryDetailed_ByMatchId,
  useSessionAdminApi_GetSessionsHistorySearch,
  useSessionApi_CreateGamesessionMutation,
  useSessionApi_DeleteGamesession_BySessionIdMutation,
  useSessionApi_DeleteLocald_BySessionIdMutation,
  useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation,
  useSessionApi_FetchJoin_BySessionId,
  useSessionApi_GetGamesession,
  useSessionApi_GetGamesessionBulk,
  useSessionApi_GetGamesession_BySessionId,
  useSessionApi_GetRecentplayer_ByUserId,
  useSessionApi_UpdateGamesession_BySessionIdMutation,
  useSessionApi_UpdatePlayer_BySessionIdMutation,
  useSessionApi_UpdateSetting_BySessionIdMutation
};
