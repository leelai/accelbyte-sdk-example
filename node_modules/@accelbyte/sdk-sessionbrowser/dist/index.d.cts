import { Response, AccelByteSDK, SdkSetConfigParam } from '@accelbyte/sdk';
import { AxiosInstance, AxiosResponse } from 'axios';
import { S as SessionQueryResponse, A as AdminSessionResponse, G as GetSessionHistorySearchResponseV2, C as CountActiveSessionResponse, a as ActiveCustomGameResponse, b as ActiveMatchmakingGameResponse, c as GetSessionHistoryDetailedResponseItemArray, d as CreateSessionRequest, e as SessionResponse, f as SessionByUserIDsResponse, R as RecentPlayerQueryResponse, U as UpdateSessionRequest, J as JoinGameSessionRequest, g as AddPlayerRequest, h as AddPlayerResponse, i as UpdateSettingsRequest } from './UpdateSettingsRequest-As-4cPtC.cjs';
import { z } from 'zod';

/**
 * AUTO GENERATED
 */

declare class SessionAdmin$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query to available game session
     */
    getGamesession(queryParams: {
        session_type: string | null;
        game_mode?: string | null;
        game_version?: string | null;
        joinable?: string | null;
        limit?: number;
        match_exist?: string | null;
        match_id?: string | null;
        offset?: number;
        server_status?: string | null;
        user_id?: string | null;
    }): Promise<Response<SessionQueryResponse>>;
    /**
     * Admin delete the session by session ID
     */
    deleteGamesession_BySessionId(sessionID: string): Promise<Response<AdminSessionResponse>>;
    /**
     * Get the session by session ID for admin user
     */
    getGamesession_BySessionId(sessionID: string): Promise<Response<AdminSessionResponse>>;
    /**
     * Search sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace &amp; other filter (partyID, userID, matchID). Query with filter namespace only will not group whole session data while query with filter namespace &amp; other filter will include session data.
     */
    getSessionsHistorySearch(queryParams: {
        limit: number;
        offset: number;
        channel?: string | null;
        deleted?: boolean | null;
        matchID?: string | null;
        partyID?: string | null;
        sessionType?: string | null;
        status?: string | null;
        userID?: string | null;
    }): Promise<Response<GetSessionHistorySearchResponseV2>>;
    /**
     * Get all active session
     */
    getGamesessionActiveCount(queryParams?: {
        session_type?: string | null;
    }): Promise<Response<CountActiveSessionResponse>>;
    /**
     * Get all active session for custom game, this return only dedicated session type
     */
    getGamesessionActiveCustomGame(queryParams?: {
        limit?: number;
        offset?: number;
        server_region?: string | null;
        session_id?: string | null;
    }): Promise<Response<ActiveCustomGameResponse>>;
    /**
     * Get all active session for matchmaking game, this return only dedicated session type
     */
    getGamesessionActiveMatchmakingGame(queryParams?: {
        limit?: number;
        match_id?: string | null;
        offset?: number;
        server_region?: string | null;
        session_id?: string | null;
    }): Promise<Response<ActiveMatchmakingGameResponse>>;
    /**
     * Get session history detailed. if party_id value empty/null, field will not show in response body.
     */
    getHistoryDetailed_ByMatchId(matchID: string): Promise<Response<GetSessionHistoryDetailedResponseItemArray>>;
}

/**
 * AUTO GENERATED
 */

declare function SessionAdminApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query to available game session
     */
    getGamesession: (queryParams: {
        session_type: string | null;
        game_mode?: string | null;
        game_version?: string | null;
        joinable?: string | null;
        limit?: number;
        match_exist?: string | null;
        match_id?: string | null;
        offset?: number;
        server_status?: string | null;
        user_id?: string | null;
    }) => Promise<AxiosResponse<SessionQueryResponse>>;
    /**
     * Admin delete the session by session ID
     */
    deleteGamesession_BySessionId: (sessionID: string) => Promise<AxiosResponse<AdminSessionResponse>>;
    /**
     * Get the session by session ID for admin user
     */
    getGamesession_BySessionId: (sessionID: string) => Promise<AxiosResponse<AdminSessionResponse>>;
    /**
     * Search sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace &amp; other filter (partyID, userID, matchID). Query with filter namespace only will not group whole session data while query with filter namespace &amp; other filter will include session data.
     */
    getSessionsHistorySearch: (queryParams: {
        limit: number;
        offset: number;
        channel?: string | null;
        deleted?: boolean | null;
        matchID?: string | null;
        partyID?: string | null;
        sessionType?: string | null;
        status?: string | null;
        userID?: string | null;
    }) => Promise<AxiosResponse<GetSessionHistorySearchResponseV2>>;
    /**
     * Get all active session
     */
    getGamesessionActiveCount: (queryParams?: {
        session_type?: string | null;
    }) => Promise<AxiosResponse<CountActiveSessionResponse>>;
    /**
     * Get all active session for custom game, this return only dedicated session type
     */
    getGamesessionActiveCustomGame: (queryParams?: {
        limit?: number;
        offset?: number;
        server_region?: string | null;
        session_id?: string | null;
    }) => Promise<AxiosResponse<ActiveCustomGameResponse>>;
    /**
     * Get all active session for matchmaking game, this return only dedicated session type
     */
    getGamesessionActiveMatchmakingGame: (queryParams?: {
        limit?: number;
        match_id?: string | null;
        offset?: number;
        server_region?: string | null;
        session_id?: string | null;
    }) => Promise<AxiosResponse<ActiveMatchmakingGameResponse>>;
    /**
     * Get session history detailed. if party_id value empty/null, field will not show in response body.
     */
    getHistoryDetailed_ByMatchId: (matchID: string) => Promise<AxiosResponse<GetSessionHistoryDetailedResponseItemArray>>;
};

declare const CustomGameResponse: z.ZodObject<{
    all_players: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    created_at: z.ZodString;
    game_session_setting: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        allow_join_in_progress: z.ZodBoolean;
        current_internal_player: z.ZodNumber;
        current_player: z.ZodNumber;
        map_name: z.ZodString;
        max_internal_player: z.ZodNumber;
        max_player: z.ZodNumber;
        mode: z.ZodString;
        num_bot: z.ZodNumber;
        password: z.ZodString;
        settings: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    }, {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    }>>>;
    joinable: z.ZodBoolean;
    namespace: z.ZodString;
    players: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    server: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        allocation_id: z.ZodString;
        alternate_ips: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        cpu_limit: z.ZodNumber;
        cpu_request: z.ZodString;
        deployment: z.ZodString;
        game_version: z.ZodString;
        image_version: z.ZodString;
        ip: z.ZodString;
        is_override_game_version: z.ZodBoolean;
        last_update: z.ZodString;
        mem_limit: z.ZodNumber;
        mem_request: z.ZodString;
        namespace: z.ZodString;
        params: z.ZodString;
        pod_name: z.ZodString;
        port: z.ZodNumber;
        ports: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
        provider: z.ZodString;
        region: z.ZodString;
        session_id: z.ZodString;
        status: z.ZodString;
        status_history: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            status: z.ZodString;
            time_stamp: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            status: string;
            time_stamp: string;
        }, {
            status: string;
            time_stamp: string;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    }, {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    }>>>;
    session_id: z.ZodString;
    session_type: z.ZodString;
    spectators: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    session_id: string;
    created_at: string;
    joinable: boolean;
    session_type: string;
    all_players?: string[] | null | undefined;
    game_session_setting?: {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    } | null | undefined;
    players?: string[] | null | undefined;
    server?: {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    } | null | undefined;
    spectators?: string[] | null | undefined;
}, {
    namespace: string;
    session_id: string;
    created_at: string;
    joinable: boolean;
    session_type: string;
    all_players?: string[] | null | undefined;
    game_session_setting?: {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    } | null | undefined;
    players?: string[] | null | undefined;
    server?: {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    } | null | undefined;
    spectators?: string[] | null | undefined;
}>;
interface CustomGameResponse extends z.TypeOf<typeof CustomGameResponse> {
}

declare const Error: z.ZodObject<{
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
}, {
    errorCode: number;
    errorMessage: string;
}>;
interface Error extends z.TypeOf<typeof Error> {
}

declare const ErrorResponseV2: z.ZodObject<{
    attributes: z.ZodRecord<z.ZodString, z.ZodString>;
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
    message: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    errorCode: number;
    errorMessage: string;
    attributes: Record<string, string>;
    name: string;
}, {
    message: string;
    errorCode: number;
    errorMessage: string;
    attributes: Record<string, string>;
    name: string;
}>;
interface ErrorResponseV2 extends z.TypeOf<typeof ErrorResponseV2> {
}

declare const ErrorV1: z.ZodObject<{
    errorCode: z.ZodNumber;
    errorMessage: z.ZodString;
}, "strip", z.ZodTypeAny, {
    errorCode: number;
    errorMessage: string;
}, {
    errorCode: number;
    errorMessage: string;
}>;
interface ErrorV1 extends z.TypeOf<typeof ErrorV1> {
}

declare const GameSession: z.ZodObject<{
    all_players: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    created_at: z.ZodString;
    game_session_setting: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        allow_join_in_progress: z.ZodBoolean;
        current_internal_player: z.ZodNumber;
        current_player: z.ZodNumber;
        map_name: z.ZodString;
        max_internal_player: z.ZodNumber;
        max_player: z.ZodNumber;
        mode: z.ZodString;
        num_bot: z.ZodNumber;
        password: z.ZodString;
        settings: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    }, "strip", z.ZodTypeAny, {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    }, {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    }>>>;
    game_version: z.ZodString;
    joinable: z.ZodBoolean;
    match: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        channel: z.ZodString;
        client_version: z.ZodString;
        created_at: z.ZodString;
        deployment: z.ZodString;
        event: z.ZodString;
        game_mode: z.ZodString;
        joinable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        match_id: z.ZodString;
        matching_allies: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            matching_parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                match_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    first_ticket_created_at: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    first_ticket_created_at: number;
                }, {
                    first_ticket_created_at: number;
                }>>>;
                party_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                party_id: z.ZodString;
                party_members: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    extra_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    user_id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }, {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }>, "many">>>;
            }, "strip", z.ZodTypeAny, {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }, {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            matching_parties?: {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }, {
            matching_parties?: {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }>, "many">>>;
        namespace: z.ZodString;
        party_attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
        party_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        queued_at: z.ZodNumber;
        region: z.ZodString;
        server_name: z.ZodString;
        status: z.ZodString;
        sub_game_mode: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        status: string;
        deployment: string;
        region: string;
        created_at: string;
        party_attributes: Record<string, any>;
        channel: string;
        client_version: string;
        event: string;
        game_mode: string;
        match_id: string;
        queued_at: number;
        server_name: string;
        joinable?: boolean | null | undefined;
        party_id?: string | null | undefined;
        matching_allies?: {
            matching_parties?: {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
        sub_game_mode?: string[] | null | undefined;
    }, {
        namespace: string;
        status: string;
        deployment: string;
        region: string;
        created_at: string;
        party_attributes: Record<string, any>;
        channel: string;
        client_version: string;
        event: string;
        game_mode: string;
        match_id: string;
        queued_at: number;
        server_name: string;
        joinable?: boolean | null | undefined;
        party_id?: string | null | undefined;
        matching_allies?: {
            matching_parties?: {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
        sub_game_mode?: string[] | null | undefined;
    }>>>;
    namespace: z.ZodString;
    players: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    server: z.ZodObject<{
        allocation_id: z.ZodString;
        alternate_ips: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        cpu_limit: z.ZodNumber;
        cpu_request: z.ZodString;
        deployment: z.ZodString;
        game_version: z.ZodString;
        image_version: z.ZodString;
        ip: z.ZodString;
        is_override_game_version: z.ZodBoolean;
        last_update: z.ZodString;
        mem_limit: z.ZodNumber;
        mem_request: z.ZodString;
        namespace: z.ZodString;
        params: z.ZodString;
        pod_name: z.ZodString;
        port: z.ZodNumber;
        ports: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
        provider: z.ZodString;
        region: z.ZodString;
        session_id: z.ZodString;
        status: z.ZodString;
        status_history: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            status: z.ZodString;
            time_stamp: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            status: string;
            time_stamp: string;
        }, {
            status: string;
            time_stamp: string;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    }, {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    }>;
    session_id: z.ZodString;
    session_type: z.ZodString;
    spectators: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    user_id: z.ZodString;
    username: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    user_id: string;
    game_version: string;
    session_id: string;
    created_at: string;
    joinable: boolean;
    server: {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    };
    session_type: string;
    username: string;
    all_players?: string[] | null | undefined;
    game_session_setting?: {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    } | null | undefined;
    players?: string[] | null | undefined;
    spectators?: string[] | null | undefined;
    match?: {
        namespace: string;
        status: string;
        deployment: string;
        region: string;
        created_at: string;
        party_attributes: Record<string, any>;
        channel: string;
        client_version: string;
        event: string;
        game_mode: string;
        match_id: string;
        queued_at: number;
        server_name: string;
        joinable?: boolean | null | undefined;
        party_id?: string | null | undefined;
        matching_allies?: {
            matching_parties?: {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
        sub_game_mode?: string[] | null | undefined;
    } | null | undefined;
}, {
    namespace: string;
    user_id: string;
    game_version: string;
    session_id: string;
    created_at: string;
    joinable: boolean;
    server: {
        namespace: string;
        params: string;
        status: string;
        allocation_id: string;
        cpu_limit: number;
        cpu_request: string;
        deployment: string;
        game_version: string;
        image_version: string;
        ip: string;
        is_override_game_version: boolean;
        last_update: string;
        mem_limit: number;
        mem_request: string;
        pod_name: string;
        port: number;
        provider: string;
        region: string;
        session_id: string;
        alternate_ips?: string[] | null | undefined;
        ports?: Record<string, number> | null | undefined;
        status_history?: {
            status: string;
            time_stamp: string;
        }[] | null | undefined;
    };
    session_type: string;
    username: string;
    all_players?: string[] | null | undefined;
    game_session_setting?: {
        password: string;
        allow_join_in_progress: boolean;
        current_internal_player: number;
        current_player: number;
        map_name: string;
        max_internal_player: number;
        max_player: number;
        mode: string;
        num_bot: number;
        settings?: Record<string, any> | null | undefined;
    } | null | undefined;
    players?: string[] | null | undefined;
    spectators?: string[] | null | undefined;
    match?: {
        namespace: string;
        status: string;
        deployment: string;
        region: string;
        created_at: string;
        party_attributes: Record<string, any>;
        channel: string;
        client_version: string;
        event: string;
        game_mode: string;
        match_id: string;
        queued_at: number;
        server_name: string;
        joinable?: boolean | null | undefined;
        party_id?: string | null | undefined;
        matching_allies?: {
            matching_parties?: {
                party_id: string;
                match_attributes?: {
                    first_ticket_created_at: number;
                } | null | undefined;
                party_attributes?: Record<string, any> | null | undefined;
                party_members?: {
                    user_id: string;
                    extra_attributes?: Record<string, any> | null | undefined;
                }[] | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
        sub_game_mode?: string[] | null | undefined;
    } | null | undefined;
}>;
interface GameSession extends z.TypeOf<typeof GameSession> {
}

declare const GameSessionSetting: z.ZodObject<{
    allow_join_in_progress: z.ZodBoolean;
    current_internal_player: z.ZodNumber;
    current_player: z.ZodNumber;
    map_name: z.ZodString;
    max_internal_player: z.ZodNumber;
    max_player: z.ZodNumber;
    mode: z.ZodString;
    num_bot: z.ZodNumber;
    password: z.ZodString;
    settings: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    password: string;
    allow_join_in_progress: boolean;
    current_internal_player: number;
    current_player: number;
    map_name: string;
    max_internal_player: number;
    max_player: number;
    mode: string;
    num_bot: number;
    settings?: Record<string, any> | null | undefined;
}, {
    password: string;
    allow_join_in_progress: boolean;
    current_internal_player: number;
    current_player: number;
    map_name: string;
    max_internal_player: number;
    max_player: number;
    mode: string;
    num_bot: number;
    settings?: Record<string, any> | null | undefined;
}>;
interface GameSessionSetting extends z.TypeOf<typeof GameSessionSetting> {
}

declare const GetSessionHistoryDetailedResponseItem: z.ZodObject<{
    _id: z.ZodString;
    channel: z.ZodString;
    client_version: z.ZodString;
    created_at: z.ZodString;
    event_description: z.ZodString;
    event_name: z.ZodString;
    game_mode: z.ZodString;
    joinable: z.ZodBoolean;
    joining: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        Date: z.ZodString;
        State: z.ZodString;
        UserID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Date: string;
        UserID: string;
        State: string;
    }, {
        Date: string;
        UserID: string;
        State: string;
    }>, "many">>>;
    match_id: z.ZodString;
    matching_allies: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        matching_parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            match_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                first_ticket_created_at: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                first_ticket_created_at: number;
            }, {
                first_ticket_created_at: number;
            }>>>;
            party_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            party_id: z.ZodString;
            party_members: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                extra_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                user_id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }, {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }, {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }, {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    namespace: z.ZodString;
    party_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    players: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        Action: z.ZodString;
        Date: z.ZodString;
        UserID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Action: string;
        Date: string;
        UserID: string;
    }, {
        Action: string;
        Date: string;
        UserID: string;
    }>, "many">>>;
    region: z.ZodString;
    removed_reason: z.ZodString;
    server_name: z.ZodString;
    session_type: z.ZodString;
    status: z.ZodString;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: string;
    user_id: string;
    region: string;
    created_at: string;
    joinable: boolean;
    session_type: string;
    channel: string;
    client_version: string;
    game_mode: string;
    match_id: string;
    server_name: string;
    _id: string;
    event_description: string;
    event_name: string;
    removed_reason: string;
    players?: {
        Action: string;
        Date: string;
        UserID: string;
    }[] | null | undefined;
    party_id?: string | null | undefined;
    matching_allies?: {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    joining?: {
        Date: string;
        UserID: string;
        State: string;
    }[] | null | undefined;
}, {
    namespace: string;
    status: string;
    user_id: string;
    region: string;
    created_at: string;
    joinable: boolean;
    session_type: string;
    channel: string;
    client_version: string;
    game_mode: string;
    match_id: string;
    server_name: string;
    _id: string;
    event_description: string;
    event_name: string;
    removed_reason: string;
    players?: {
        Action: string;
        Date: string;
        UserID: string;
    }[] | null | undefined;
    party_id?: string | null | undefined;
    matching_allies?: {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    joining?: {
        Date: string;
        UserID: string;
        State: string;
    }[] | null | undefined;
}>;
interface GetSessionHistoryDetailedResponseItem extends z.TypeOf<typeof GetSessionHistoryDetailedResponseItem> {
}

declare const GetSessionHistorySearchResponseItemV2: z.ZodObject<{
    _id: z.ZodString;
    created_at: z.ZodString;
    game_mode: z.ZodString;
    joinable: z.ZodBoolean;
    joining: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        Date: z.ZodString;
        State: z.ZodString;
        UserID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Date: string;
        UserID: string;
        State: string;
    }, {
        Date: string;
        UserID: string;
        State: string;
    }>, "many">>>;
    match_id: z.ZodString;
    namespace: z.ZodString;
    players: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        Action: z.ZodString;
        Date: z.ZodString;
        UserID: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Action: string;
        Date: string;
        UserID: string;
    }, {
        Action: string;
        Date: string;
        UserID: string;
    }>, "many">>>;
    removed_reason: z.ZodString;
    session_type: z.ZodString;
    status: z.ZodString;
    sub_game_mode: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: string;
    user_id: string;
    created_at: string;
    joinable: boolean;
    session_type: string;
    game_mode: string;
    match_id: string;
    _id: string;
    removed_reason: string;
    players?: {
        Action: string;
        Date: string;
        UserID: string;
    }[] | null | undefined;
    sub_game_mode?: string[] | null | undefined;
    joining?: {
        Date: string;
        UserID: string;
        State: string;
    }[] | null | undefined;
}, {
    namespace: string;
    status: string;
    user_id: string;
    created_at: string;
    joinable: boolean;
    session_type: string;
    game_mode: string;
    match_id: string;
    _id: string;
    removed_reason: string;
    players?: {
        Action: string;
        Date: string;
        UserID: string;
    }[] | null | undefined;
    sub_game_mode?: string[] | null | undefined;
    joining?: {
        Date: string;
        UserID: string;
        State: string;
    }[] | null | undefined;
}>;
interface GetSessionHistorySearchResponseItemV2 extends z.TypeOf<typeof GetSessionHistorySearchResponseItemV2> {
}

declare const MatchAttributes: z.ZodObject<{
    first_ticket_created_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    first_ticket_created_at: number;
}, {
    first_ticket_created_at: number;
}>;
interface MatchAttributes extends z.TypeOf<typeof MatchAttributes> {
}

declare const MatchingAlly: z.ZodObject<{
    matching_parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        match_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            first_ticket_created_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            first_ticket_created_at: number;
        }, {
            first_ticket_created_at: number;
        }>>>;
        party_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        party_id: z.ZodString;
        party_members: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            extra_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            user_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            user_id: string;
            extra_attributes?: Record<string, any> | null | undefined;
        }, {
            user_id: string;
            extra_attributes?: Record<string, any> | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        party_id: string;
        match_attributes?: {
            first_ticket_created_at: number;
        } | null | undefined;
        party_attributes?: Record<string, any> | null | undefined;
        party_members?: {
            user_id: string;
            extra_attributes?: Record<string, any> | null | undefined;
        }[] | null | undefined;
    }, {
        party_id: string;
        match_attributes?: {
            first_ticket_created_at: number;
        } | null | undefined;
        party_attributes?: Record<string, any> | null | undefined;
        party_members?: {
            user_id: string;
            extra_attributes?: Record<string, any> | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    matching_parties?: {
        party_id: string;
        match_attributes?: {
            first_ticket_created_at: number;
        } | null | undefined;
        party_attributes?: Record<string, any> | null | undefined;
        party_members?: {
            user_id: string;
            extra_attributes?: Record<string, any> | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}, {
    matching_parties?: {
        party_id: string;
        match_attributes?: {
            first_ticket_created_at: number;
        } | null | undefined;
        party_attributes?: Record<string, any> | null | undefined;
        party_members?: {
            user_id: string;
            extra_attributes?: Record<string, any> | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
}>;
interface MatchingAlly extends z.TypeOf<typeof MatchingAlly> {
}

declare const MatchingParty: z.ZodObject<{
    match_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        first_ticket_created_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        first_ticket_created_at: number;
    }, {
        first_ticket_created_at: number;
    }>>>;
    party_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    party_id: z.ZodString;
    party_members: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        extra_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        user_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        user_id: string;
        extra_attributes?: Record<string, any> | null | undefined;
    }, {
        user_id: string;
        extra_attributes?: Record<string, any> | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    party_id: string;
    match_attributes?: {
        first_ticket_created_at: number;
    } | null | undefined;
    party_attributes?: Record<string, any> | null | undefined;
    party_members?: {
        user_id: string;
        extra_attributes?: Record<string, any> | null | undefined;
    }[] | null | undefined;
}, {
    party_id: string;
    match_attributes?: {
        first_ticket_created_at: number;
    } | null | undefined;
    party_attributes?: Record<string, any> | null | undefined;
    party_members?: {
        user_id: string;
        extra_attributes?: Record<string, any> | null | undefined;
    }[] | null | undefined;
}>;
interface MatchingParty extends z.TypeOf<typeof MatchingParty> {
}

declare const MatchMaking: z.ZodObject<{
    channel: z.ZodString;
    client_version: z.ZodString;
    created_at: z.ZodString;
    deployment: z.ZodString;
    event: z.ZodString;
    game_mode: z.ZodString;
    joinable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    match_id: z.ZodString;
    matching_allies: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        matching_parties: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            match_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                first_ticket_created_at: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                first_ticket_created_at: number;
            }, {
                first_ticket_created_at: number;
            }>>>;
            party_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            party_id: z.ZodString;
            party_members: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                extra_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                user_id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }, {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }, {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }, {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }>, "many">>>;
    namespace: z.ZodString;
    party_attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
    party_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    queued_at: z.ZodNumber;
    region: z.ZodString;
    server_name: z.ZodString;
    status: z.ZodString;
    sub_game_mode: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: string;
    deployment: string;
    region: string;
    created_at: string;
    party_attributes: Record<string, any>;
    channel: string;
    client_version: string;
    event: string;
    game_mode: string;
    match_id: string;
    queued_at: number;
    server_name: string;
    joinable?: boolean | null | undefined;
    party_id?: string | null | undefined;
    matching_allies?: {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    sub_game_mode?: string[] | null | undefined;
}, {
    namespace: string;
    status: string;
    deployment: string;
    region: string;
    created_at: string;
    party_attributes: Record<string, any>;
    channel: string;
    client_version: string;
    event: string;
    game_mode: string;
    match_id: string;
    queued_at: number;
    server_name: string;
    joinable?: boolean | null | undefined;
    party_id?: string | null | undefined;
    matching_allies?: {
        matching_parties?: {
            party_id: string;
            match_attributes?: {
                first_ticket_created_at: number;
            } | null | undefined;
            party_attributes?: Record<string, any> | null | undefined;
            party_members?: {
                user_id: string;
                extra_attributes?: Record<string, any> | null | undefined;
            }[] | null | undefined;
        }[] | null | undefined;
    }[] | null | undefined;
    sub_game_mode?: string[] | null | undefined;
}>;
interface MatchMaking extends z.TypeOf<typeof MatchMaking> {
}

declare const Pagination: z.ZodObject<{
    first: z.ZodString;
    last: z.ZodString;
    next: z.ZodString;
    previous: z.ZodString;
}, "strip", z.ZodTypeAny, {
    next: string;
    previous: string;
    first: string;
    last: string;
}, {
    next: string;
    previous: string;
    first: string;
    last: string;
}>;
interface Pagination extends z.TypeOf<typeof Pagination> {
}

declare const PagingCursor: z.ZodObject<{
    next: z.ZodString;
    previous: z.ZodString;
}, "strip", z.ZodTypeAny, {
    next: string;
    previous: string;
}, {
    next: string;
    previous: string;
}>;
interface PagingCursor extends z.TypeOf<typeof PagingCursor> {
}

declare const PartyMember: z.ZodObject<{
    extra_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user_id: string;
    extra_attributes?: Record<string, any> | null | undefined;
}, {
    user_id: string;
    extra_attributes?: Record<string, any> | null | undefined;
}>;
interface PartyMember extends z.TypeOf<typeof PartyMember> {
}

declare const RecentPlayerHistory: z.ZodObject<{
    created_at: z.ZodString;
    namespace: z.ZodString;
    other_display_name: z.ZodString;
    other_id: z.ZodString;
    updated_at: z.ZodString;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    user_id: string;
    created_at: string;
    other_display_name: string;
    other_id: string;
    updated_at: string;
}, {
    namespace: string;
    user_id: string;
    created_at: string;
    other_display_name: string;
    other_id: string;
    updated_at: string;
}>;
interface RecentPlayerHistory extends z.TypeOf<typeof RecentPlayerHistory> {
}

declare const Server: z.ZodObject<{
    allocation_id: z.ZodString;
    alternate_ips: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    cpu_limit: z.ZodNumber;
    cpu_request: z.ZodString;
    deployment: z.ZodString;
    game_version: z.ZodString;
    image_version: z.ZodString;
    ip: z.ZodString;
    is_override_game_version: z.ZodBoolean;
    last_update: z.ZodString;
    mem_limit: z.ZodNumber;
    mem_request: z.ZodString;
    namespace: z.ZodString;
    params: z.ZodString;
    pod_name: z.ZodString;
    port: z.ZodNumber;
    ports: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
    provider: z.ZodString;
    region: z.ZodString;
    session_id: z.ZodString;
    status: z.ZodString;
    status_history: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        status: z.ZodString;
        time_stamp: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: string;
        time_stamp: string;
    }, {
        status: string;
        time_stamp: string;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    params: string;
    status: string;
    allocation_id: string;
    cpu_limit: number;
    cpu_request: string;
    deployment: string;
    game_version: string;
    image_version: string;
    ip: string;
    is_override_game_version: boolean;
    last_update: string;
    mem_limit: number;
    mem_request: string;
    pod_name: string;
    port: number;
    provider: string;
    region: string;
    session_id: string;
    alternate_ips?: string[] | null | undefined;
    ports?: Record<string, number> | null | undefined;
    status_history?: {
        status: string;
        time_stamp: string;
    }[] | null | undefined;
}, {
    namespace: string;
    params: string;
    status: string;
    allocation_id: string;
    cpu_limit: number;
    cpu_request: string;
    deployment: string;
    game_version: string;
    image_version: string;
    ip: string;
    is_override_game_version: boolean;
    last_update: string;
    mem_limit: number;
    mem_request: string;
    pod_name: string;
    port: number;
    provider: string;
    region: string;
    session_id: string;
    alternate_ips?: string[] | null | undefined;
    ports?: Record<string, number> | null | undefined;
    status_history?: {
        status: string;
        time_stamp: string;
    }[] | null | undefined;
}>;
interface Server extends z.TypeOf<typeof Server> {
}

declare const SessionPlayerHistory: z.ZodObject<{
    Action: z.ZodString;
    Date: z.ZodString;
    UserID: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Action: string;
    Date: string;
    UserID: string;
}, {
    Action: string;
    Date: string;
    UserID: string;
}>;
interface SessionPlayerHistory extends z.TypeOf<typeof SessionPlayerHistory> {
}

declare const SessionPlayerJoining: z.ZodObject<{
    Date: z.ZodString;
    State: z.ZodString;
    UserID: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Date: string;
    UserID: string;
    State: string;
}, {
    Date: string;
    UserID: string;
    State: string;
}>;
interface SessionPlayerJoining extends z.TypeOf<typeof SessionPlayerJoining> {
}

declare const StatusHistory: z.ZodObject<{
    status: z.ZodString;
    time_stamp: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: string;
    time_stamp: string;
}, {
    status: string;
    time_stamp: string;
}>;
interface StatusHistory extends z.TypeOf<typeof StatusHistory> {
}

/**
 * AUTO GENERATED
 */

declare class Session$ {
    private axiosInstance;
    private namespace;
    private useSchemaValidation;
    constructor(axiosInstance: AxiosInstance, namespace: string, useSchemaValidation?: boolean);
    /**
     * Query available game session
     */
    getGamesession(queryParams: {
        session_type: string | null;
        game_mode?: string | null;
        game_version?: string | null;
        joinable?: string | null;
        limit?: number;
        match_exist?: string | null;
        match_id?: string | null;
        offset?: number;
        server_status?: string | null;
        user_id?: string | null;
    }): Promise<Response<SessionQueryResponse>>;
    /**
     * This end point intended to be called directly by P2P game client host or by DSMC
     */
    createGamesession(data: CreateSessionRequest): Promise<Response<SessionResponse>>;
    /**
     * Query game sessions by comma separated user ids
     */
    getGamesessionBulk(queryParams: {
        user_ids: string | null;
    }): Promise<Response<SessionByUserIDsResponse>>;
    /**
     * Query recent player by user ID
     */
    getRecentplayer_ByUserId(userID: string): Promise<Response<RecentPlayerQueryResponse>>;
    /**
     * Delete the session (p2p) by session ID
     */
    deleteGamesession_BySessionId(sessionID: string): Promise<Response<SessionResponse>>;
    /**
     * Get the session by session ID
     */
    getGamesession_BySessionId(sessionID: string): Promise<Response<SessionResponse>>;
    /**
     * Update game session, used to update the current player
     */
    updateGamesession_BySessionId(sessionID: string, data: UpdateSessionRequest): Promise<Response<SessionResponse>>;
    /**
     * Join the specified session by session ID. Possible the game required a password to join
     */
    fetchJoin_BySessionId(sessionID: string, data: JoinGameSessionRequest): Promise<Response<SessionResponse>>;
    /**
     * Add player to game session
     */
    updatePlayer_BySessionId(sessionID: string, data: AddPlayerRequest): Promise<Response<AddPlayerResponse>>;
    /**
     * Only use for local DS entry, will error when calling non local DS entry
     */
    deleteLocald_BySessionId(sessionID: string): Promise<Response<SessionResponse>>;
    /**
     * Update game session, used to update OtherSettings
     */
    updateSetting_BySessionId(sessionID: string, data: UpdateSettingsRequest): Promise<Response<SessionResponse>>;
    /**
     * Remove player from game session
     */
    deletePlayer_BySessionId_ByUserId(sessionID: string, userID: string): Promise<Response<AddPlayerResponse>>;
}

/**
 * AUTO GENERATED
 */

declare function SessionApi(sdk: AccelByteSDK, args?: SdkSetConfigParam): {
    /**
     * Query available game session
     */
    getGamesession: (queryParams: {
        session_type: string | null;
        game_mode?: string | null;
        game_version?: string | null;
        joinable?: string | null;
        limit?: number;
        match_exist?: string | null;
        match_id?: string | null;
        offset?: number;
        server_status?: string | null;
        user_id?: string | null;
    }) => Promise<AxiosResponse<SessionQueryResponse>>;
    /**
     * This end point intended to be called directly by P2P game client host or by DSMC
     */
    createGamesession: (data: CreateSessionRequest) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Query game sessions by comma separated user ids
     */
    getGamesessionBulk: (queryParams: {
        user_ids: string | null;
    }) => Promise<AxiosResponse<SessionByUserIDsResponse>>;
    /**
     * Query recent player by user ID
     */
    getRecentplayer_ByUserId: (userID: string) => Promise<AxiosResponse<RecentPlayerQueryResponse>>;
    /**
     * Delete the session (p2p) by session ID
     */
    deleteGamesession_BySessionId: (sessionID: string) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Get the session by session ID
     */
    getGamesession_BySessionId: (sessionID: string) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Update game session, used to update the current player
     */
    updateGamesession_BySessionId: (sessionID: string, data: UpdateSessionRequest) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Join the specified session by session ID. Possible the game required a password to join
     */
    fetchJoin_BySessionId: (sessionID: string, data: JoinGameSessionRequest) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Add player to game session
     */
    updatePlayer_BySessionId: (sessionID: string, data: AddPlayerRequest) => Promise<AxiosResponse<AddPlayerResponse>>;
    /**
     * Only use for local DS entry, will error when calling non local DS entry
     */
    deleteLocald_BySessionId: (sessionID: string) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Update game session, used to update OtherSettings
     */
    updateSetting_BySessionId: (sessionID: string, data: UpdateSettingsRequest) => Promise<AxiosResponse<SessionResponse>>;
    /**
     * Remove player from game session
     */
    deletePlayer_BySessionId_ByUserId: (sessionID: string, userID: string) => Promise<AxiosResponse<AddPlayerResponse>>;
};

/**
 * AUTO GENERATED
 */

declare const SessionBrowser: {
    SessionAdminApi: typeof SessionAdminApi;
    SessionApi: typeof SessionApi;
    version: () => void;
};

export { ActiveCustomGameResponse, ActiveMatchmakingGameResponse, AddPlayerRequest, AddPlayerResponse, AdminSessionResponse, CountActiveSessionResponse, CreateSessionRequest, CustomGameResponse, Error, ErrorResponseV2, ErrorV1, GameSession, GameSessionSetting, GetSessionHistoryDetailedResponseItem, GetSessionHistoryDetailedResponseItemArray, GetSessionHistorySearchResponseItemV2, GetSessionHistorySearchResponseV2, JoinGameSessionRequest, MatchAttributes, MatchMaking, MatchingAlly, MatchingParty, Pagination, PagingCursor, PartyMember, RecentPlayerHistory, RecentPlayerQueryResponse, Server, Session$, SessionAdmin$, SessionAdminApi, SessionApi, SessionBrowser, SessionByUserIDsResponse, SessionPlayerHistory, SessionPlayerJoining, SessionQueryResponse, SessionResponse, StatusHistory, UpdateSessionRequest, UpdateSettingsRequest };
