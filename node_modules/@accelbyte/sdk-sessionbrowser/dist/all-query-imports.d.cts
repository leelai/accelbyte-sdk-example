import { AccelByteSDK, SdkSetConfigParam, ApiError } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseQueryOptions, UseQueryResult, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
import { S as SessionQueryResponse, A as AdminSessionResponse, G as GetSessionHistorySearchResponseV2, C as CountActiveSessionResponse, a as ActiveCustomGameResponse, b as ActiveMatchmakingGameResponse, c as GetSessionHistoryDetailedResponseItemArray, e as SessionResponse, d as CreateSessionRequest, f as SessionByUserIDsResponse, R as RecentPlayerQueryResponse, U as UpdateSessionRequest, J as JoinGameSessionRequest, h as AddPlayerResponse, g as AddPlayerRequest, i as UpdateSettingsRequest } from './UpdateSettingsRequest-As-4cPtC.cjs';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_SessionAdmin {
    Gamesession = "Sessionbrowser.SessionAdmin.Gamesession",
    Gamesession_BySessionId = "Sessionbrowser.SessionAdmin.Gamesession_BySessionId",
    SessionsHistorySearch = "Sessionbrowser.SessionAdmin.SessionsHistorySearch",
    GamesessionActiveCount = "Sessionbrowser.SessionAdmin.GamesessionActiveCount",
    GamesessionActiveCustomGame = "Sessionbrowser.SessionAdmin.GamesessionActiveCustomGame",
    GamesessionActiveMatchmakingGame = "Sessionbrowser.SessionAdmin.GamesessionActiveMatchmakingGame",
    HistoryDetailed_ByMatchId = "Sessionbrowser.SessionAdmin.HistoryDetailed_ByMatchId"
}
/**
 * Query to available game session
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.Gamesession, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetGamesession: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        session_type: string | null;
        game_mode?: string | null;
        game_version?: string | null;
        joinable?: string | null;
        limit?: number;
        match_exist?: string | null;
        match_id?: string | null;
        offset?: number;
        server_status?: string | null;
        user_id?: string | null;
    };
}, options?: Omit<UseQueryOptions<SessionQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SessionQueryResponse>) => void) => UseQueryResult<SessionQueryResponse, AxiosError<ApiError>>;
/**
 * Admin delete the session by session ID
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useSessionAdminApi_DeleteGamesession_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AdminSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
}>, "mutationKey">, callback?: (data: AdminSessionResponse) => void) => UseMutationResult<AdminSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
}>;
/**
 * Get the session by session ID for admin user
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetGamesession_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionID: string;
}, options?: Omit<UseQueryOptions<AdminSessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<AdminSessionResponse>) => void) => UseQueryResult<AdminSessionResponse, AxiosError<ApiError>>;
/**
 * Search sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace &amp; other filter (partyID, userID, matchID). Query with filter namespace only will not group whole session data while query with filter namespace &amp; other filter will include session data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.SessionsHistorySearch, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetSessionsHistorySearch: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        limit: number;
        offset: number;
        channel?: string | null;
        deleted?: boolean | null;
        matchID?: string | null;
        partyID?: string | null;
        sessionType?: string | null;
        status?: string | null;
        userID?: string | null;
    };
}, options?: Omit<UseQueryOptions<GetSessionHistorySearchResponseV2, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetSessionHistorySearchResponseV2>) => void) => UseQueryResult<GetSessionHistorySearchResponseV2, AxiosError<ApiError>>;
/**
 * Get all active session
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.GamesessionActiveCount, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetGamesessionActiveCount: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        session_type?: string | null;
    };
}, options?: Omit<UseQueryOptions<CountActiveSessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<CountActiveSessionResponse>) => void) => UseQueryResult<CountActiveSessionResponse, AxiosError<ApiError>>;
/**
 * Get all active session for custom game, this return only dedicated session type
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.GamesessionActiveCustomGame, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetGamesessionActiveCustomGame: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        server_region?: string | null;
        session_id?: string | null;
    };
}, options?: Omit<UseQueryOptions<ActiveCustomGameResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ActiveCustomGameResponse>) => void) => UseQueryResult<ActiveCustomGameResponse, AxiosError<ApiError>>;
/**
 * Get all active session for matchmaking game, this return only dedicated session type
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.GamesessionActiveMatchmakingGame, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetGamesessionActiveMatchmakingGame: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        match_id?: string | null;
        offset?: number;
        server_region?: string | null;
        session_id?: string | null;
    };
}, options?: Omit<UseQueryOptions<ActiveMatchmakingGameResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ActiveMatchmakingGameResponse>) => void) => UseQueryResult<ActiveMatchmakingGameResponse, AxiosError<ApiError>>;
/**
 * Get session history detailed. if party_id value empty/null, field will not show in response body.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionAdmin.HistoryDetailed_ByMatchId, input]
 * }
 * ```
 */
declare const useSessionAdminApi_GetHistoryDetailed_ByMatchId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    matchID: string;
}, options?: Omit<UseQueryOptions<GetSessionHistoryDetailedResponseItemArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GetSessionHistoryDetailedResponseItemArray>) => void) => UseQueryResult<GetSessionHistoryDetailedResponseItemArray, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_Session {
    Gamesession = "Sessionbrowser.Session.Gamesession",
    GamesessionBulk = "Sessionbrowser.Session.GamesessionBulk",
    Recentplayer_ByUserId = "Sessionbrowser.Session.Recentplayer_ByUserId",
    Gamesession_BySessionId = "Sessionbrowser.Session.Gamesession_BySessionId",
    Join_BySessionId = "Sessionbrowser.Session.Join_BySessionId",
    Player_BySessionId = "Sessionbrowser.Session.Player_BySessionId",
    Locald_BySessionId = "Sessionbrowser.Session.Locald_BySessionId",
    Setting_BySessionId = "Sessionbrowser.Session.Setting_BySessionId",
    Player_BySessionId_ByUserId = "Sessionbrowser.Session.Player_BySessionId_ByUserId"
}
/**
 * Query available game session
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Gamesession, input]
 * }
 * ```
 */
declare const useSessionApi_GetGamesession: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        session_type: string | null;
        game_mode?: string | null;
        game_version?: string | null;
        joinable?: string | null;
        limit?: number;
        match_exist?: string | null;
        match_id?: string | null;
        offset?: number;
        server_status?: string | null;
        user_id?: string | null;
    };
}, options?: Omit<UseQueryOptions<SessionQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SessionQueryResponse>) => void) => UseQueryResult<SessionQueryResponse, AxiosError<ApiError>>;
/**
 * This end point intended to be called directly by P2P game client host or by DSMC
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Gamesession, input]
 * }
 * ```
 */
declare const useSessionApi_CreateGamesessionMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateSessionRequest;
}>, "mutationKey">, callback?: (data: SessionResponse) => void) => UseMutationResult<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateSessionRequest;
}>;
/**
 * Query game sessions by comma separated user ids
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.GamesessionBulk, input]
 * }
 * ```
 */
declare const useSessionApi_GetGamesessionBulk: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        user_ids: string | null;
    };
}, options?: Omit<UseQueryOptions<SessionByUserIDsResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SessionByUserIDsResponse>) => void) => UseQueryResult<SessionByUserIDsResponse, AxiosError<ApiError>>;
/**
 * Query recent player by user ID
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Recentplayer_ByUserId, input]
 * }
 * ```
 */
declare const useSessionApi_GetRecentplayer_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userID: string;
}, options?: Omit<UseQueryOptions<RecentPlayerQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RecentPlayerQueryResponse>) => void) => UseQueryResult<RecentPlayerQueryResponse, AxiosError<ApiError>>;
/**
 * Delete the session (p2p) by session ID
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_DeleteGamesession_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
}>, "mutationKey">, callback?: (data: SessionResponse) => void) => UseMutationResult<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
}>;
/**
 * Get the session by session ID
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_GetGamesession_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionID: string;
}, options?: Omit<UseQueryOptions<SessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SessionResponse>) => void) => UseQueryResult<SessionResponse, AxiosError<ApiError>>;
/**
 * Update game session, used to update the current player
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_UpdateGamesession_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    data: UpdateSessionRequest;
}>, "mutationKey">, callback?: (data: SessionResponse) => void) => UseMutationResult<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    data: UpdateSessionRequest;
}>;
/**
 * Join the specified session by session ID. Possible the game required a password to join
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Join_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_FetchJoin_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionID: string;
    data: JoinGameSessionRequest;
}, options?: Omit<UseQueryOptions<SessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<SessionResponse>) => void) => UseQueryResult<SessionResponse, AxiosError<ApiError>>;
/**
 * Add player to game session
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Player_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_UpdatePlayer_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AddPlayerResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    data: AddPlayerRequest;
}>, "mutationKey">, callback?: (data: AddPlayerResponse) => void) => UseMutationResult<AddPlayerResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    data: AddPlayerRequest;
}>;
/**
 * Only use for local DS entry, will error when calling non local DS entry
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Locald_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_DeleteLocald_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
}>, "mutationKey">, callback?: (data: SessionResponse) => void) => UseMutationResult<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
}>;
/**
 * Update game session, used to update OtherSettings
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Setting_BySessionId, input]
 * }
 * ```
 */
declare const useSessionApi_UpdateSetting_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    data: UpdateSettingsRequest;
}>, "mutationKey">, callback?: (data: SessionResponse) => void) => UseMutationResult<SessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    data: UpdateSettingsRequest;
}>;
/**
 * Remove player from game session
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Session.Player_BySessionId_ByUserId, input]
 * }
 * ```
 */
declare const useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<AddPlayerResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    userID: string;
}>, "mutationKey">, callback?: (data: AddPlayerResponse) => void) => UseMutationResult<AddPlayerResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionID: string;
    userID: string;
}>;

export { Key_Session, Key_SessionAdmin, useSessionAdminApi_DeleteGamesession_BySessionIdMutation, useSessionAdminApi_GetGamesession, useSessionAdminApi_GetGamesessionActiveCount, useSessionAdminApi_GetGamesessionActiveCustomGame, useSessionAdminApi_GetGamesessionActiveMatchmakingGame, useSessionAdminApi_GetGamesession_BySessionId, useSessionAdminApi_GetHistoryDetailed_ByMatchId, useSessionAdminApi_GetSessionsHistorySearch, useSessionApi_CreateGamesessionMutation, useSessionApi_DeleteGamesession_BySessionIdMutation, useSessionApi_DeleteLocald_BySessionIdMutation, useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation, useSessionApi_FetchJoin_BySessionId, useSessionApi_GetGamesession, useSessionApi_GetGamesessionBulk, useSessionApi_GetGamesession_BySessionId, useSessionApi_GetRecentplayer_ByUserId, useSessionApi_UpdateGamesession_BySessionIdMutation, useSessionApi_UpdatePlayer_BySessionIdMutation, useSessionApi_UpdateSetting_BySessionIdMutation };
