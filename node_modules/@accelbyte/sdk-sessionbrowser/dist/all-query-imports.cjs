"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/all-query-imports.ts
var all_query_imports_exports = {};
__export(all_query_imports_exports, {
  Key_Session: () => Key_Session,
  Key_SessionAdmin: () => Key_SessionAdmin,
  useSessionAdminApi_DeleteGamesession_BySessionIdMutation: () => useSessionAdminApi_DeleteGamesession_BySessionIdMutation,
  useSessionAdminApi_GetGamesession: () => useSessionAdminApi_GetGamesession,
  useSessionAdminApi_GetGamesessionActiveCount: () => useSessionAdminApi_GetGamesessionActiveCount,
  useSessionAdminApi_GetGamesessionActiveCustomGame: () => useSessionAdminApi_GetGamesessionActiveCustomGame,
  useSessionAdminApi_GetGamesessionActiveMatchmakingGame: () => useSessionAdminApi_GetGamesessionActiveMatchmakingGame,
  useSessionAdminApi_GetGamesession_BySessionId: () => useSessionAdminApi_GetGamesession_BySessionId,
  useSessionAdminApi_GetHistoryDetailed_ByMatchId: () => useSessionAdminApi_GetHistoryDetailed_ByMatchId,
  useSessionAdminApi_GetSessionsHistorySearch: () => useSessionAdminApi_GetSessionsHistorySearch,
  useSessionApi_CreateGamesessionMutation: () => useSessionApi_CreateGamesessionMutation,
  useSessionApi_DeleteGamesession_BySessionIdMutation: () => useSessionApi_DeleteGamesession_BySessionIdMutation,
  useSessionApi_DeleteLocald_BySessionIdMutation: () => useSessionApi_DeleteLocald_BySessionIdMutation,
  useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation: () => useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation,
  useSessionApi_FetchJoin_BySessionId: () => useSessionApi_FetchJoin_BySessionId,
  useSessionApi_GetGamesession: () => useSessionApi_GetGamesession,
  useSessionApi_GetGamesessionBulk: () => useSessionApi_GetGamesessionBulk,
  useSessionApi_GetGamesession_BySessionId: () => useSessionApi_GetGamesession_BySessionId,
  useSessionApi_GetRecentplayer_ByUserId: () => useSessionApi_GetRecentplayer_ByUserId,
  useSessionApi_UpdateGamesession_BySessionIdMutation: () => useSessionApi_UpdateGamesession_BySessionIdMutation,
  useSessionApi_UpdatePlayer_BySessionIdMutation: () => useSessionApi_UpdatePlayer_BySessionIdMutation,
  useSessionApi_UpdateSetting_BySessionIdMutation: () => useSessionApi_UpdateSetting_BySessionIdMutation
});
module.exports = __toCommonJS(all_query_imports_exports);

// src/generated-admin/queries/SessionAdmin.query.ts
var import_react_query = require("@tanstack/react-query");

// src/generated-admin/SessionAdminApi.ts
var import_sdk2 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/SessionAdmin$.ts
var import_sdk = require("@accelbyte/sdk");

// src/generated-definitions/ActiveCustomGameResponse.ts
var import_zod6 = require("zod");

// src/generated-definitions/CustomGameResponse.ts
var import_zod4 = require("zod");

// src/generated-definitions/GameSessionSetting.ts
var import_zod = require("zod");
var GameSessionSetting = import_zod.z.object({
  allow_join_in_progress: import_zod.z.boolean(),
  current_internal_player: import_zod.z.number().int(),
  current_player: import_zod.z.number().int(),
  map_name: import_zod.z.string(),
  max_internal_player: import_zod.z.number().int(),
  max_player: import_zod.z.number().int(),
  mode: import_zod.z.string(),
  num_bot: import_zod.z.number().int(),
  password: import_zod.z.string(),
  settings: import_zod.z.record(import_zod.z.any()).nullish()
});

// src/generated-definitions/Server.ts
var import_zod3 = require("zod");

// src/generated-definitions/StatusHistory.ts
var import_zod2 = require("zod");
var StatusHistory = import_zod2.z.object({ status: import_zod2.z.string(), time_stamp: import_zod2.z.string() });

// src/generated-definitions/Server.ts
var Server = import_zod3.z.object({
  allocation_id: import_zod3.z.string(),
  alternate_ips: import_zod3.z.array(import_zod3.z.string()).nullish(),
  cpu_limit: import_zod3.z.number().int(),
  cpu_request: import_zod3.z.string(),
  deployment: import_zod3.z.string(),
  game_version: import_zod3.z.string(),
  image_version: import_zod3.z.string(),
  ip: import_zod3.z.string(),
  is_override_game_version: import_zod3.z.boolean(),
  last_update: import_zod3.z.string(),
  mem_limit: import_zod3.z.number().int(),
  mem_request: import_zod3.z.string(),
  namespace: import_zod3.z.string(),
  params: import_zod3.z.string(),
  pod_name: import_zod3.z.string(),
  port: import_zod3.z.number().int(),
  ports: import_zod3.z.record(import_zod3.z.number().int()).nullish(),
  provider: import_zod3.z.string(),
  region: import_zod3.z.string(),
  session_id: import_zod3.z.string(),
  status: import_zod3.z.string(),
  status_history: import_zod3.z.array(StatusHistory).nullish()
});

// src/generated-definitions/CustomGameResponse.ts
var CustomGameResponse = import_zod4.z.object({
  all_players: import_zod4.z.array(import_zod4.z.string()).nullish(),
  created_at: import_zod4.z.string(),
  game_session_setting: GameSessionSetting.nullish(),
  joinable: import_zod4.z.boolean(),
  namespace: import_zod4.z.string(),
  players: import_zod4.z.array(import_zod4.z.string()).nullish(),
  server: Server.nullish(),
  session_id: import_zod4.z.string(),
  session_type: import_zod4.z.string(),
  spectators: import_zod4.z.array(import_zod4.z.string()).nullish()
});

// src/generated-definitions/PagingCursor.ts
var import_zod5 = require("zod");
var PagingCursor = import_zod5.z.object({ next: import_zod5.z.string(), previous: import_zod5.z.string() });

// src/generated-definitions/ActiveCustomGameResponse.ts
var ActiveCustomGameResponse = import_zod6.z.object({ pagination: PagingCursor, sessions: import_zod6.z.array(CustomGameResponse) });

// src/generated-definitions/ActiveMatchmakingGameResponse.ts
var import_zod13 = require("zod");

// src/generated-definitions/GameSession.ts
var import_zod12 = require("zod");

// src/generated-definitions/MatchMaking.ts
var import_zod11 = require("zod");

// src/generated-definitions/MatchingAlly.ts
var import_zod10 = require("zod");

// src/generated-definitions/MatchingParty.ts
var import_zod9 = require("zod");

// src/generated-definitions/MatchAttributes.ts
var import_zod7 = require("zod");
var MatchAttributes = import_zod7.z.object({ first_ticket_created_at: import_zod7.z.number().int() });

// src/generated-definitions/PartyMember.ts
var import_zod8 = require("zod");
var PartyMember = import_zod8.z.object({ extra_attributes: import_zod8.z.record(import_zod8.z.any()).nullish(), user_id: import_zod8.z.string() });

// src/generated-definitions/MatchingParty.ts
var MatchingParty = import_zod9.z.object({
  match_attributes: MatchAttributes.nullish(),
  party_attributes: import_zod9.z.record(import_zod9.z.any()).nullish(),
  party_id: import_zod9.z.string(),
  party_members: import_zod9.z.array(PartyMember).nullish()
});

// src/generated-definitions/MatchingAlly.ts
var MatchingAlly = import_zod10.z.object({ matching_parties: import_zod10.z.array(MatchingParty).nullish() });

// src/generated-definitions/MatchMaking.ts
var MatchMaking = import_zod11.z.object({
  channel: import_zod11.z.string(),
  client_version: import_zod11.z.string(),
  created_at: import_zod11.z.string(),
  deployment: import_zod11.z.string(),
  event: import_zod11.z.string(),
  game_mode: import_zod11.z.string(),
  joinable: import_zod11.z.boolean().nullish(),
  match_id: import_zod11.z.string(),
  matching_allies: import_zod11.z.array(MatchingAlly).nullish(),
  namespace: import_zod11.z.string(),
  party_attributes: import_zod11.z.record(import_zod11.z.any()),
  party_id: import_zod11.z.string().nullish(),
  queued_at: import_zod11.z.number().int(),
  region: import_zod11.z.string(),
  server_name: import_zod11.z.string(),
  status: import_zod11.z.string(),
  sub_game_mode: import_zod11.z.array(import_zod11.z.string()).nullish()
});

// src/generated-definitions/GameSession.ts
var GameSession = import_zod12.z.object({
  all_players: import_zod12.z.array(import_zod12.z.string()).nullish(),
  created_at: import_zod12.z.string(),
  game_session_setting: GameSessionSetting.nullish(),
  game_version: import_zod12.z.string(),
  joinable: import_zod12.z.boolean(),
  match: MatchMaking.nullish(),
  namespace: import_zod12.z.string(),
  players: import_zod12.z.array(import_zod12.z.string()).nullish(),
  server: Server,
  session_id: import_zod12.z.string(),
  session_type: import_zod12.z.string(),
  spectators: import_zod12.z.array(import_zod12.z.string()).nullish(),
  user_id: import_zod12.z.string(),
  username: import_zod12.z.string()
});

// src/generated-definitions/ActiveMatchmakingGameResponse.ts
var ActiveMatchmakingGameResponse = import_zod13.z.object({ pagination: PagingCursor, sessions: import_zod13.z.array(GameSession).nullish() });

// src/generated-definitions/AdminSessionResponse.ts
var import_zod14 = require("zod");
var AdminSessionResponse = import_zod14.z.object({
  all_players: import_zod14.z.array(import_zod14.z.string()),
  created_at: import_zod14.z.string(),
  game_session_setting: GameSessionSetting.nullish(),
  game_version: import_zod14.z.string(),
  joinable: import_zod14.z.boolean(),
  match: MatchMaking.nullish(),
  namespace: import_zod14.z.string(),
  players: import_zod14.z.array(import_zod14.z.string()),
  server: Server,
  session_id: import_zod14.z.string(),
  session_type: import_zod14.z.string(),
  spectators: import_zod14.z.array(import_zod14.z.string()),
  user_id: import_zod14.z.string(),
  username: import_zod14.z.string()
});

// src/generated-definitions/CountActiveSessionResponse.ts
var import_zod15 = require("zod");
var CountActiveSessionResponse = import_zod15.z.object({
  custom_game: import_zod15.z.number().int(),
  matchmaking_game: import_zod15.z.number().int(),
  total: import_zod15.z.number().int()
});

// src/generated-definitions/GetSessionHistoryDetailedResponseItemArray.ts
var import_zod19 = require("zod");

// src/generated-definitions/GetSessionHistoryDetailedResponseItem.ts
var import_zod18 = require("zod");

// src/generated-definitions/SessionPlayerHistory.ts
var import_zod16 = require("zod");
var SessionPlayerHistory = import_zod16.z.object({ Action: import_zod16.z.string(), Date: import_zod16.z.string(), UserID: import_zod16.z.string() });

// src/generated-definitions/SessionPlayerJoining.ts
var import_zod17 = require("zod");
var SessionPlayerJoining = import_zod17.z.object({ Date: import_zod17.z.string(), State: import_zod17.z.string(), UserID: import_zod17.z.string() });

// src/generated-definitions/GetSessionHistoryDetailedResponseItem.ts
var GetSessionHistoryDetailedResponseItem = import_zod18.z.object({
  _id: import_zod18.z.string(),
  channel: import_zod18.z.string(),
  client_version: import_zod18.z.string(),
  created_at: import_zod18.z.string(),
  event_description: import_zod18.z.string(),
  event_name: import_zod18.z.string(),
  game_mode: import_zod18.z.string(),
  joinable: import_zod18.z.boolean(),
  joining: import_zod18.z.array(SessionPlayerJoining).nullish(),
  match_id: import_zod18.z.string(),
  matching_allies: import_zod18.z.array(MatchingAlly).nullish(),
  namespace: import_zod18.z.string(),
  party_id: import_zod18.z.string().nullish(),
  players: import_zod18.z.array(SessionPlayerHistory).nullish(),
  region: import_zod18.z.string(),
  removed_reason: import_zod18.z.string(),
  server_name: import_zod18.z.string(),
  session_type: import_zod18.z.string(),
  status: import_zod18.z.string(),
  user_id: import_zod18.z.string()
});

// src/generated-definitions/GetSessionHistoryDetailedResponseItemArray.ts
var GetSessionHistoryDetailedResponseItemArray = import_zod19.z.array(GetSessionHistoryDetailedResponseItem);

// src/generated-definitions/GetSessionHistorySearchResponseV2.ts
var import_zod22 = require("zod");

// src/generated-definitions/GetSessionHistorySearchResponseItemV2.ts
var import_zod20 = require("zod");
var GetSessionHistorySearchResponseItemV2 = import_zod20.z.object({
  _id: import_zod20.z.string(),
  created_at: import_zod20.z.string(),
  game_mode: import_zod20.z.string(),
  joinable: import_zod20.z.boolean(),
  joining: import_zod20.z.array(SessionPlayerJoining).nullish(),
  match_id: import_zod20.z.string(),
  namespace: import_zod20.z.string(),
  players: import_zod20.z.array(SessionPlayerHistory).nullish(),
  removed_reason: import_zod20.z.string(),
  session_type: import_zod20.z.string(),
  status: import_zod20.z.string(),
  sub_game_mode: import_zod20.z.array(import_zod20.z.string()).nullish(),
  user_id: import_zod20.z.string()
});

// src/generated-definitions/Pagination.ts
var import_zod21 = require("zod");
var Pagination = import_zod21.z.object({ first: import_zod21.z.string(), last: import_zod21.z.string(), next: import_zod21.z.string(), previous: import_zod21.z.string() });

// src/generated-definitions/GetSessionHistorySearchResponseV2.ts
var GetSessionHistorySearchResponseV2 = import_zod22.z.object({ data: import_zod22.z.array(GetSessionHistorySearchResponseItemV2), pagination: Pagination });

// src/generated-definitions/SessionQueryResponse.ts
var import_zod23 = require("zod");
var SessionQueryResponse = import_zod23.z.object({ pagination: PagingCursor, sessions: import_zod23.z.array(GameSession) });

// src/generated-admin/endpoints/SessionAdmin$.ts
var SessionAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Query to available game session
   */
  getGamesession(queryParams) {
    const params = { limit: 25, ...queryParams };
    const url = "/sessionbrowser/admin/namespaces/{namespace}/gamesession".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionQueryResponse, "SessionQueryResponse");
  }
  /**
   * Admin delete the session by session ID
   */
  deleteGamesession_BySessionId(sessionID) {
    const params = {};
    const url = "/sessionbrowser/admin/namespaces/{namespace}/gamesession/{sessionID}".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, AdminSessionResponse, "AdminSessionResponse");
  }
  /**
   * Get the session by session ID for admin user
   */
  getGamesession_BySessionId(sessionID) {
    const params = {};
    const url = "/sessionbrowser/admin/namespaces/{namespace}/gamesession/{sessionID}".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, AdminSessionResponse, "AdminSessionResponse");
  }
  /**
   * Search sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace &amp; other filter (partyID, userID, matchID). Query with filter namespace only will not group whole session data while query with filter namespace &amp; other filter will include session data.
   */
  getSessionsHistorySearch(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionbrowser/admin/namespaces/{namespace}/sessions/history/search".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      GetSessionHistorySearchResponseV2,
      "GetSessionHistorySearchResponseV2"
    );
  }
  /**
   * Get all active session
   */
  getGamesessionActiveCount(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionbrowser/admin/namespaces/{namespace}/gamesession/active/count".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      CountActiveSessionResponse,
      "CountActiveSessionResponse"
    );
  }
  /**
   * Get all active session for custom game, this return only dedicated session type
   */
  getGamesessionActiveCustomGame(queryParams) {
    const params = { limit: 25, ...queryParams };
    const url = "/sessionbrowser/admin/namespaces/{namespace}/gamesession/active/custom-game".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      ActiveCustomGameResponse,
      "ActiveCustomGameResponse"
    );
  }
  /**
   * Get all active session for matchmaking game, this return only dedicated session type
   */
  getGamesessionActiveMatchmakingGame(queryParams) {
    const params = { limit: 25, ...queryParams };
    const url = "/sessionbrowser/admin/namespaces/{namespace}/gamesession/active/matchmaking-game".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      ActiveMatchmakingGameResponse,
      "ActiveMatchmakingGameResponse"
    );
  }
  /**
   * Get session history detailed. if party_id value empty/null, field will not show in response body.
   */
  getHistoryDetailed_ByMatchId(matchID) {
    const params = {};
    const url = "/sessionbrowser/admin/namespaces/{namespace}/sessions/{matchID}/history/detailed".replace("{namespace}", this.namespace).replace("{matchID}", matchID);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      GetSessionHistoryDetailedResponseItemArray,
      "GetSessionHistoryDetailedResponseItemArray"
    );
  }
};

// src/generated-admin/SessionAdminApi.ts
function SessionAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk2.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk2.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getGamesession(queryParams) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesession(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteGamesession_BySessionId(sessionID) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteGamesession_BySessionId(sessionID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesession_BySessionId(sessionID) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesession_BySessionId(sessionID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getSessionsHistorySearch(queryParams) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getSessionsHistorySearch(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesessionActiveCount(queryParams) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesessionActiveCount(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesessionActiveCustomGame(queryParams) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesessionActiveCustomGame(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesessionActiveMatchmakingGame(queryParams) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesessionActiveMatchmakingGame(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getHistoryDetailed_ByMatchId(matchID) {
    const $ = new SessionAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getHistoryDetailed_ByMatchId(matchID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Query to available game session
     */
    getGamesession,
    /**
     * Admin delete the session by session ID
     */
    deleteGamesession_BySessionId,
    /**
     * Get the session by session ID for admin user
     */
    getGamesession_BySessionId,
    /**
     * Search sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace &amp; other filter (partyID, userID, matchID). Query with filter namespace only will not group whole session data while query with filter namespace &amp; other filter will include session data.
     */
    getSessionsHistorySearch,
    /**
     * Get all active session
     */
    getGamesessionActiveCount,
    /**
     * Get all active session for custom game, this return only dedicated session type
     */
    getGamesessionActiveCustomGame,
    /**
     * Get all active session for matchmaking game, this return only dedicated session type
     */
    getGamesessionActiveMatchmakingGame,
    /**
     * Get session history detailed. if party_id value empty/null, field will not show in response body.
     */
    getHistoryDetailed_ByMatchId
  };
}

// src/generated-admin/queries/SessionAdmin.query.ts
var Key_SessionAdmin = /* @__PURE__ */ ((Key_SessionAdmin2) => {
  Key_SessionAdmin2["Gamesession"] = "Sessionbrowser.SessionAdmin.Gamesession";
  Key_SessionAdmin2["Gamesession_BySessionId"] = "Sessionbrowser.SessionAdmin.Gamesession_BySessionId";
  Key_SessionAdmin2["SessionsHistorySearch"] = "Sessionbrowser.SessionAdmin.SessionsHistorySearch";
  Key_SessionAdmin2["GamesessionActiveCount"] = "Sessionbrowser.SessionAdmin.GamesessionActiveCount";
  Key_SessionAdmin2["GamesessionActiveCustomGame"] = "Sessionbrowser.SessionAdmin.GamesessionActiveCustomGame";
  Key_SessionAdmin2["GamesessionActiveMatchmakingGame"] = "Sessionbrowser.SessionAdmin.GamesessionActiveMatchmakingGame";
  Key_SessionAdmin2["HistoryDetailed_ByMatchId"] = "Sessionbrowser.SessionAdmin.HistoryDetailed_ByMatchId";
  return Key_SessionAdmin2;
})(Key_SessionAdmin || {});
var useSessionAdminApi_GetGamesession = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.Gamesession" /* Gamesession */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_DeleteGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteGamesession_BySessionId(input.sessionID);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query.useMutation)({
    mutationKey: ["Sessionbrowser.SessionAdmin.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionAdminApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesession_BySessionId(input2.sessionID);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetSessionsHistorySearch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSessionsHistorySearch(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.SessionsHistorySearch" /* SessionsHistorySearch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetGamesessionActiveCount = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessionActiveCount(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.GamesessionActiveCount" /* GamesessionActiveCount */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetGamesessionActiveCustomGame = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesessionActiveCustomGame(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.GamesessionActiveCustomGame" /* GamesessionActiveCustomGame */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetGamesessionActiveMatchmakingGame = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesessionActiveMatchmakingGame(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.GamesessionActiveMatchmakingGame" /* GamesessionActiveMatchmakingGame */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionAdminApi_GetHistoryDetailed_ByMatchId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistoryDetailed_ByMatchId(input2.matchID);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionbrowser.SessionAdmin.HistoryDetailed_ByMatchId" /* HistoryDetailed_ByMatchId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Session.query.ts
var import_react_query2 = require("@tanstack/react-query");

// src/generated-public/SessionApi.ts
var import_sdk4 = require("@accelbyte/sdk");

// src/generated-public/endpoints/Session$.ts
var import_sdk3 = require("@accelbyte/sdk");

// src/generated-definitions/AddPlayerResponse.ts
var import_zod24 = require("zod");
var AddPlayerResponse = import_zod24.z.object({ status: import_zod24.z.boolean() });

// src/generated-definitions/RecentPlayerQueryResponse.ts
var import_zod26 = require("zod");

// src/generated-definitions/RecentPlayerHistory.ts
var import_zod25 = require("zod");
var RecentPlayerHistory = import_zod25.z.object({
  created_at: import_zod25.z.string(),
  namespace: import_zod25.z.string(),
  other_display_name: import_zod25.z.string(),
  other_id: import_zod25.z.string(),
  updated_at: import_zod25.z.string(),
  user_id: import_zod25.z.string()
});

// src/generated-definitions/RecentPlayerQueryResponse.ts
var RecentPlayerQueryResponse = import_zod26.z.object({ data: import_zod26.z.array(RecentPlayerHistory) });

// src/generated-definitions/SessionByUserIDsResponse.ts
var import_zod27 = require("zod");
var SessionByUserIDsResponse = import_zod27.z.object({ data: import_zod27.z.array(GameSession) });

// src/generated-definitions/SessionResponse.ts
var import_zod28 = require("zod");
var SessionResponse = import_zod28.z.object({
  all_players: import_zod28.z.array(import_zod28.z.string()),
  created_at: import_zod28.z.string(),
  game_session_setting: GameSessionSetting,
  game_version: import_zod28.z.string(),
  joinable: import_zod28.z.boolean(),
  match: MatchMaking,
  namespace: import_zod28.z.string(),
  players: import_zod28.z.array(import_zod28.z.string()),
  server: Server,
  session_id: import_zod28.z.string(),
  session_type: import_zod28.z.string(),
  spectators: import_zod28.z.array(import_zod28.z.string()),
  user_id: import_zod28.z.string(),
  username: import_zod28.z.string()
});

// src/generated-public/endpoints/Session$.ts
var Session$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Query available game session
   */
  getGamesession(queryParams) {
    const params = { limit: 25, ...queryParams };
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionQueryResponse, "SessionQueryResponse");
  }
  /**
   * This end point intended to be called directly by P2P game client host or by DSMC
   */
  createGamesession(data) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Query game sessions by comma separated user ids
   */
  getGamesessionBulk(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/bulk".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      SessionByUserIDsResponse,
      "SessionByUserIDsResponse"
    );
  }
  /**
   * Query recent player by user ID
   */
  getRecentplayer_ByUserId(userID) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/recentplayer/{userID}".replace("{namespace}", this.namespace).replace("{userID}", userID);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      RecentPlayerQueryResponse,
      "RecentPlayerQueryResponse"
    );
  }
  /**
   * Delete the session (p2p) by session ID
   */
  deleteGamesession_BySessionId(sessionID) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Get the session by session ID
   */
  getGamesession_BySessionId(sessionID) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Update game session, used to update the current player
   */
  updateGamesession_BySessionId(sessionID, data) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Join the specified session by session ID. Possible the game required a password to join
   */
  fetchJoin_BySessionId(sessionID, data) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}/join".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Add player to game session
   */
  updatePlayer_BySessionId(sessionID, data) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}/player".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, AddPlayerResponse, "AddPlayerResponse");
  }
  /**
   * Only use for local DS entry, will error when calling non local DS entry
   */
  deleteLocald_BySessionId(sessionID) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}/localds".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Update game session, used to update OtherSettings
   */
  updateSetting_BySessionId(sessionID, data) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}/settings".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID);
    const resultPromise = this.axiosInstance.put(url, data, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, SessionResponse, "SessionResponse");
  }
  /**
   * Remove player from game session
   */
  deletePlayer_BySessionId_ByUserId(sessionID, userID) {
    const params = {};
    const url = "/sessionbrowser/namespaces/{namespace}/gamesession/{sessionID}/player/{userID}".replace("{namespace}", this.namespace).replace("{sessionID}", sessionID).replace("{userID}", userID);
    const resultPromise = this.axiosInstance.delete(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, AddPlayerResponse, "AddPlayerResponse");
  }
};

// src/generated-public/SessionApi.ts
function SessionApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk4.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk4.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getGamesession(queryParams) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesession(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createGamesession(data) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createGamesession(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesessionBulk(queryParams) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesessionBulk(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getRecentplayer_ByUserId(userID) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getRecentplayer_ByUserId(userID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteGamesession_BySessionId(sessionID) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteGamesession_BySessionId(sessionID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesession_BySessionId(sessionID) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesession_BySessionId(sessionID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateGamesession_BySessionId(sessionID, data) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateGamesession_BySessionId(sessionID, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function fetchJoin_BySessionId(sessionID, data) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.fetchJoin_BySessionId(sessionID, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updatePlayer_BySessionId(sessionID, data) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updatePlayer_BySessionId(sessionID, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deleteLocald_BySessionId(sessionID) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deleteLocald_BySessionId(sessionID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function updateSetting_BySessionId(sessionID, data) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.updateSetting_BySessionId(sessionID, data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function deletePlayer_BySessionId_ByUserId(sessionID, userID) {
    const $ = new Session$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.deletePlayer_BySessionId_ByUserId(sessionID, userID);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Query available game session
     */
    getGamesession,
    /**
     * This end point intended to be called directly by P2P game client host or by DSMC
     */
    createGamesession,
    /**
     * Query game sessions by comma separated user ids
     */
    getGamesessionBulk,
    /**
     * Query recent player by user ID
     */
    getRecentplayer_ByUserId,
    /**
     * Delete the session (p2p) by session ID
     */
    deleteGamesession_BySessionId,
    /**
     * Get the session by session ID
     */
    getGamesession_BySessionId,
    /**
     * Update game session, used to update the current player
     */
    updateGamesession_BySessionId,
    /**
     * Join the specified session by session ID. Possible the game required a password to join
     */
    fetchJoin_BySessionId,
    /**
     * Add player to game session
     */
    updatePlayer_BySessionId,
    /**
     * Only use for local DS entry, will error when calling non local DS entry
     */
    deleteLocald_BySessionId,
    /**
     * Update game session, used to update OtherSettings
     */
    updateSetting_BySessionId,
    /**
     * Remove player from game session
     */
    deletePlayer_BySessionId_ByUserId
  };
}

// src/generated-public/queries/Session.query.ts
var Key_Session = /* @__PURE__ */ ((Key_Session2) => {
  Key_Session2["Gamesession"] = "Sessionbrowser.Session.Gamesession";
  Key_Session2["GamesessionBulk"] = "Sessionbrowser.Session.GamesessionBulk";
  Key_Session2["Recentplayer_ByUserId"] = "Sessionbrowser.Session.Recentplayer_ByUserId";
  Key_Session2["Gamesession_BySessionId"] = "Sessionbrowser.Session.Gamesession_BySessionId";
  Key_Session2["Join_BySessionId"] = "Sessionbrowser.Session.Join_BySessionId";
  Key_Session2["Player_BySessionId"] = "Sessionbrowser.Session.Player_BySessionId";
  Key_Session2["Locald_BySessionId"] = "Sessionbrowser.Session.Locald_BySessionId";
  Key_Session2["Setting_BySessionId"] = "Sessionbrowser.Session.Setting_BySessionId";
  Key_Session2["Player_BySessionId_ByUserId"] = "Sessionbrowser.Session.Player_BySessionId_ByUserId";
  return Key_Session2;
})(Key_Session || {});
var useSessionApi_GetGamesession = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionbrowser.Session.Gamesession" /* Gamesession */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_CreateGamesessionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createGamesession(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Gamesession" /* Gamesession */],
    mutationFn,
    ...options
  });
};
var useSessionApi_GetGamesessionBulk = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessionBulk(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionbrowser.Session.GamesessionBulk" /* GamesessionBulk */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_GetRecentplayer_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecentplayer_ByUserId(
      input2.userID
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionbrowser.Session.Recentplayer_ByUserId" /* Recentplayer_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_DeleteGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteGamesession_BySessionId(
      input.sessionID
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession_BySessionId(
      input2.sessionID
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionbrowser.Session.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_UpdateGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateGamesession_BySessionId(
      input.sessionID,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_FetchJoin_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchJoin_BySessionId(
      input2.sessionID,
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionbrowser.Session.Join_BySessionId" /* Join_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionApi_UpdatePlayer_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePlayer_BySessionId(
      input.sessionID,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Player_BySessionId" /* Player_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_DeleteLocald_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteLocald_BySessionId(
      input.sessionID
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Locald_BySessionId" /* Locald_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_UpdateSetting_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateSetting_BySessionId(
      input.sessionID,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Setting_BySessionId" /* Setting_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePlayer_BySessionId_ByUserId(input.sessionID, input.userID);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query2.useMutation)({
    mutationKey: ["Sessionbrowser.Session.Player_BySessionId_ByUserId" /* Player_BySessionId_ByUserId */],
    mutationFn,
    ...options
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Key_Session,
  Key_SessionAdmin,
  useSessionAdminApi_DeleteGamesession_BySessionIdMutation,
  useSessionAdminApi_GetGamesession,
  useSessionAdminApi_GetGamesessionActiveCount,
  useSessionAdminApi_GetGamesessionActiveCustomGame,
  useSessionAdminApi_GetGamesessionActiveMatchmakingGame,
  useSessionAdminApi_GetGamesession_BySessionId,
  useSessionAdminApi_GetHistoryDetailed_ByMatchId,
  useSessionAdminApi_GetSessionsHistorySearch,
  useSessionApi_CreateGamesessionMutation,
  useSessionApi_DeleteGamesession_BySessionIdMutation,
  useSessionApi_DeleteLocald_BySessionIdMutation,
  useSessionApi_DeletePlayer_BySessionId_ByUserIdMutation,
  useSessionApi_FetchJoin_BySessionId,
  useSessionApi_GetGamesession,
  useSessionApi_GetGamesessionBulk,
  useSessionApi_GetGamesession_BySessionId,
  useSessionApi_GetRecentplayer_ByUserId,
  useSessionApi_UpdateGamesession_BySessionIdMutation,
  useSessionApi_UpdatePlayer_BySessionIdMutation,
  useSessionApi_UpdateSetting_BySessionIdMutation
});
