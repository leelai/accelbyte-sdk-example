import { z } from 'zod';

declare const ValidateUserNameErrorType: z.ZodEnum<["empty", "lessThanLengthLimit", "exceedLengthLimit", "invalidFormat", "containsBadWords"]>;
type ValidateUserNameErrorType = z.infer<typeof ValidateUserNameErrorType>;
declare const MIN_USERNAME_LENGTH = 3;
interface ValidateUserNameOptions {
    isRequired?: boolean;
    maxLength?: number;
    minLength?: number;
    isCustomRegex?: boolean;
    customRegex?: string;
    letterCase?: string;
    allowSpace?: boolean;
    allowAllSpecialCharacters?: boolean;
    specialCharacterLocation?: string;
    specialCharacters?: string[];
    validateBadWord?: boolean;
}
/**
 *
 * @param value
 * @param isRequired
 * @param maxLength
 * @param minLength
 * @param isCustomRegex
 * @param allowSpace
 * @param allowAllSpecialCharacters
 * @param specialCharacters
 * @param letterCase
 * @param validateBadWord validate bad word
 *
 * @default isRequired true
 * @default maxLength MAX_DISPLAY_NAME_LENGTH
 * @default minLength MIN_USERNAME_LENGTH
 * @default isCustomRegex false
 * @default allowSpace false
 * @default allowAllSpecialCharacters false
 * @default letterCase any
 * @default validateBadWord false
 */
declare const validateUserName: (value: string, { isRequired, maxLength, minLength, isCustomRegex, customRegex, specialCharacterLocation, allowSpace, allowAllSpecialCharacters, specialCharacters, letterCase, validateBadWord }?: ValidateUserNameOptions) => "empty" | "lessThanLengthLimit" | "exceedLengthLimit" | "invalidFormat" | "containsBadWords" | null;

export { MIN_USERNAME_LENGTH, ValidateUserNameErrorType, type ValidateUserNameOptions, validateUserName };
