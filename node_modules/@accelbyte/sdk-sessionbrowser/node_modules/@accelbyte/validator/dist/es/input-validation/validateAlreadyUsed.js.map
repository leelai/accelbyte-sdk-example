{"version":3,"sources":["../../../src/input-validation/validateAlreadyUsed.ts"],"names":[],"mappings":";;;AASO,MAAM,0BAA0B,CAAE,CAAA,IAAA,CAAK,CAAC,yBAA0B,CAAA,IAAA,CAAK,WAAW,CAAC,EAAA;AAG7E,MAAA,mBAAA,GAAsB,CAAC,IAAA,EAAgB,KAAkB,KAAA;AACpE,EAAA,IAAI,IAAK,CAAA,QAAA,CAAS,KAAK,CAAA,IAAK,KAAO,EAAA;AACjC,IAAA,OAAO,wBAAwB,IAAK,CAAA,WAAA,CAAA;AAAA,GACtC;AACA,EAAO,OAAA,IAAA,CAAA;AACT","file":"validateAlreadyUsed.js","sourcesContent":["/*\n * Copyright (c) 2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\n\nexport const ValidateAlreadyUsedType = z.enum([CommonValidationErrorType.enum.alreadyUsed])\nexport type ValidateAlreadyUsedType = z.infer<typeof ValidateAlreadyUsedType>\n\nexport const validateAlreadyUsed = (list: string[], value: string) => {\n  if (list.includes(value) && value) {\n    return ValidateAlreadyUsedType.enum.alreadyUsed\n  }\n  return null\n}\n"]}