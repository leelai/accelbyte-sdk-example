{"version":3,"sources":["../../../src/input-validation/validateAlphanumeric.ts"],"names":[],"mappings":";;;;;;AAYa,MAAA,6BAAA,GAAgC,CAAE,CAAA,IAAA,CAAK,CAAC,GAAG,wBAAwB,OAAS,EAAA,yBAAA,CAA0B,IAAK,CAAA,aAAa,CAAC,EAAA;AAQzH,MAAA,oBAAA,GAAuB,CAAC,KAAA,EAAe,EAAE,SAAA,GAAY,KAAK,UAAa,GAAA,IAAA,EAAsC,GAAA,EAAO,KAAA;AAC/H,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,8BAA8B,IAAK,CAAA,KAAA,CAAA;AAAA,GAC5C;AACA,EAAI,IAAA,CAAC,cAAe,CAAA,KAAK,CAAG,EAAA;AAC1B,IAAA,OAAO,8BAA8B,IAAK,CAAA,aAAA,CAAA;AAAA,GAC5C;AACA,EAAA,OAAO,cAAe,CAAA,KAAA,EAAO,EAAE,GAAA,EAAK,WAAW,CAAA,CAAA;AACjD","file":"validateAlphanumeric.js","sourcesContent":["/*\n * Copyright (c) 2019-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isAlphanumeric from 'validator/lib/isAlphanumeric.js'\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\n\nexport const ValidateAlphaNumericErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat])\nexport type ValidateAlphaNumericErrorType = z.infer<typeof ValidateAlphaNumericErrorType>\n\nexport interface ValidateAlphanumericOptions {\n  maxLength?: number\n  isRequired?: boolean\n}\n\nexport const validateAlphanumeric = (value: string, { maxLength = 256, isRequired = true }: ValidateAlphanumericOptions = {}) => {\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateAlphaNumericErrorType.enum.empty\n  }\n  if (!isAlphanumeric(value)) {\n    return ValidateAlphaNumericErrorType.enum.invalidFormat\n  }\n  return validateLength(value, { max: maxLength })\n}\n"]}