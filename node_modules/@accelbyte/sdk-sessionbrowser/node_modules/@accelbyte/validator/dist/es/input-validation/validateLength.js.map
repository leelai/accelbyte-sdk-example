{"version":3,"sources":["../../../src/input-validation/validateLength.ts"],"names":[],"mappings":";;;;;AAWa,MAAA,uBAAA,GAA0B,EAAE,IAAK,CAAA;AAAA,EAC5C,0BAA0B,IAAK,CAAA,KAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,mBAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,iBAAA;AACjC,CAAC,EAAA;AASM,MAAM,kCAAqC,GAAA,sBAAA;AAE3C,MAAM,cAAiB,GAAA,CAC5B,KACA,EAAA,EAAE,GAAM,GAAA,CAAA,EAAG,GAAM,GAAA,kCAAA,EAAoC,UAAa,GAAA,IAAA,EAA+B,GAAA,EAC9F,KAAA;AACH,EAAA,MAAM,mBAAmB,GAAM,GAAA,CAAA,CAAA;AAC/B,EAAA,MAAM,mBAAmB,GAAM,GAAA,CAAA,CAAA;AAC/B,EAAA,MAAM,kCAAkC,GAAM,GAAA,GAAA,CAAA;AAC9C,EAAI,IAAA,gBAAA,IAAoB,oBAAoB,+BAAiC,EAAA;AAC3E,IAAA,MAAM,IAAI,KAAA,CAAM,eAAgB,CAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAAA,GACpD;AACA,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,wBAAwB,IAAK,CAAA,KAAA,CAAA;AAAA,GACtC;AACA,EAAI,IAAA,KAAA,IAAS,KAAM,CAAA,MAAA,GAAS,GAAK,EAAA;AAC/B,IAAA,OAAO,wBAAwB,IAAK,CAAA,mBAAA,CAAA;AAAA,GACtC;AACA,EAAI,IAAA,KAAA,IAAS,KAAM,CAAA,MAAA,GAAS,GAAK,EAAA;AAC/B,IAAA,OAAO,wBAAwB,IAAK,CAAA,iBAAA,CAAA;AAAA,GACtC;AAEA,EAAO,OAAA,IAAA,CAAA;AACT","file":"validateLength.js","sourcesContent":["/*\n * Copyright (c) 2019-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType, ThrownErrorType } from './constant/errorType'\nimport { MAX_SHORT_TEXT_LENGTH } from './constant/numbers'\n\nexport const ValidateLengthErrorType = z.enum([\n  CommonValidationErrorType.enum.empty,\n  CommonValidationErrorType.enum.lessThanLengthLimit,\n  CommonValidationErrorType.enum.exceedLengthLimit\n])\nexport type ValidateLengthErrorType = z.infer<typeof ValidateLengthErrorType>\n\nexport interface ValidateLengthOption {\n  min?: number\n  max?: number\n  isRequired?: boolean\n}\n\nexport const VALIDATE_LENGTH_DEFAULT_MAX_LENGTH = MAX_SHORT_TEXT_LENGTH\n\nexport const validateLength = (\n  value: string,\n  { min = 1, max = VALIDATE_LENGTH_DEFAULT_MAX_LENGTH, isRequired = true }: ValidateLengthOption = {}\n) => {\n  const isMinOptionMinus = min < 0\n  const isMaxOptionMinus = max < 0\n  const isMaxOptionSmallerThanMinOption = max < min\n  if (isMinOptionMinus || isMaxOptionMinus || isMaxOptionSmallerThanMinOption) {\n    throw new Error(ThrownErrorType.enum.invalidOption)\n  }\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateLengthErrorType.enum.empty\n  }\n  if (value && value.length < min) {\n    return ValidateLengthErrorType.enum.lessThanLengthLimit\n  }\n  if (value && value.length > max) {\n    return ValidateLengthErrorType.enum.exceedLengthLimit\n  }\n\n  return null\n}\n"]}