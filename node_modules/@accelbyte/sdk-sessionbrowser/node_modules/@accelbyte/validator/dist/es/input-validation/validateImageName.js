import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import XRegExp from 'xregexp';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { ValidateAlphaErrorType } from './validateAlpha';

const ValidateImageNameErrorType = z.enum([
  CommonValidationErrorType.enum.nameIsNotAllowed,
  CommonValidationErrorType.enum.alreadyUsed
]);
const validateImageNameRegex = (value, regex, { allowUnicode = false } = {}) => {
  if (isEmpty(value)) return ValidateAlphaErrorType.enum.empty;
  if (allowUnicode && !XRegExp(regex).test(value)) {
    return ValidateImageNameErrorType.enum.nameIsNotAllowed;
  }
  if (!allowUnicode && !matches(value, regex)) {
    return ValidateImageNameErrorType.enum.nameIsNotAllowed;
  }
  return null;
};

export { ValidateImageNameErrorType, validateImageNameRegex };
//# sourceMappingURL=validateImageName.js.map
//# sourceMappingURL=validateImageName.js.map