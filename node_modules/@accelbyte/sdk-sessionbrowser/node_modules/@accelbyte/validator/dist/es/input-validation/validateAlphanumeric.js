import isAlphanumeric from 'validator/lib/isAlphanumeric.js';
import isEmpty from 'validator/lib/isEmpty.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateAlphaNumericErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validateAlphanumeric = (value, { maxLength = 256, isRequired = true } = {}) => {
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateAlphaNumericErrorType.enum.empty;
  }
  if (!isAlphanumeric(value)) {
    return ValidateAlphaNumericErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max: maxLength });
};

export { ValidateAlphaNumericErrorType, validateAlphanumeric };
//# sourceMappingURL=validateAlphanumeric.js.map
//# sourceMappingURL=validateAlphanumeric.js.map