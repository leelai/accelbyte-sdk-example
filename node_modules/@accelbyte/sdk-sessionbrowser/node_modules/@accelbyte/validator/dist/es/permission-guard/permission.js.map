{"version":3,"sources":["../../../src/permission-guard/permission.ts"],"names":["action"],"mappings":"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","file":"permission.js","sourcesContent":["/*\n * Copyright (c) 2021 AccelByte Inc. All Rights Reserved.\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport { RolePermission } from './models/role'\nimport { AdminUser } from './models/user'\nimport { CrudBitType, CrudRolePermission, CrudType, WILDCARD_SIGN } from './types'\n\nexport class PermissionGuard {\n  public permissionCheck: { [key: string]: boolean } = {}\n  private user: AdminUser | null\n  private currentNamespace: string\n  private clientId: string\n  private subscriber: Set<() => unknown> = new Set()\n\n  constructor(props: { user?: AdminUser | null; currentNamespace?: string; clientId?: string } = {}) {\n    this.user = props.user || null\n    this.currentNamespace = props.currentNamespace || ''\n    this.clientId = props.clientId || ''\n  }\n\n  public hasPermission = (permission: CrudRolePermission): boolean => {\n    const key = JSON.stringify(permission)\n    const currentUser = this.user\n\n    if (currentUser) {\n      const userPermissionExist = Array.isArray(currentUser.permissions) && currentUser.permissions.length > 0\n      if (!userPermissionExist) {\n        this.permissionCheck = {}\n        return this.permissionCheck[key]\n      }\n\n      this.permissionCheck[key] = this.checkHasPermission(currentUser.permissions, permission)\n    }\n\n    return this.permissionCheck[key]\n  }\n\n  public getCrudTypeByCrudBit = (action: number) => {\n    const actionBits = Object.keys(CrudBitType).map(Number).filter(Boolean)\n    // tslint:disable-next-line:no-bitwise\n    return actionBits.map(bit => (action & bit) === bit && CrudBitType[bit]).filter(Boolean) as CrudType[]\n  }\n\n  public hasPermissionByCrudBit = (permission: RolePermission, action: CrudType) => {\n    const isUserHasPermission = this.getCrudTypeByCrudBit(permission.action)\n      // tslint:disable-next-line:no-shadowed-variable\n      .map((action: string) => action.toUpperCase())\n      .find(permissionAction => permissionAction === action.toUpperCase())\n\n    if (!isUserHasPermission) {\n      return false\n    }\n    return this.hasPermission({ action, resource: permission.resource })\n  }\n\n  public reset = () => {\n    this.permissionCheck = {}\n  }\n\n  public setUser = (user: AdminUser | null) => {\n    this.user = user\n    this.notifySubscribers()\n  }\n\n  public setCurrentNamespace = (currentNamespace: string) => {\n    this.currentNamespace = currentNamespace\n    this.notifySubscribers()\n  }\n\n  public setClientId = (clientId: string) => {\n    this.clientId = clientId\n    this.notifySubscribers()\n  }\n\n  public listen(listener: () => unknown) {\n    this.subscriber.add(listener)\n  }\n\n  public unlisten(listener: () => unknown) {\n    this.subscriber.delete(listener)\n  }\n\n  private notifySubscribers() {\n    Array.from(this.subscriber).forEach(a => a())\n  }\n\n  private checkHasPermission = (userPermissions: RolePermission[], { resource, action }: CrudRolePermission): boolean => {\n    return (\n      Array.isArray(userPermissions) &&\n      userPermissions.some((permission: RolePermission) => {\n        return !!permission && this.isResourceIncluded(permission, resource) && this.isActionIncluded(permission, action)\n      })\n    )\n  }\n\n  private isResourceIncluded = (permission: RolePermission, resource: string): boolean => {\n    if (!permission.resource || !resource) {\n      return false\n    }\n    if (permission.resource === resource) {\n      return true\n    }\n    const hasAPairOfBracketsRegexp = /{[A-z]*}/\n    if (\n      !hasAPairOfBracketsRegexp.test(permission.resource) &&\n      !hasAPairOfBracketsRegexp.test(resource) &&\n      permission.resource === resource\n    ) {\n      return true\n    }\n    const requiredResourceArr = resource.split(':')\n    const testResourceArr = permission.resource.split(':')\n\n    const maxSectionLength = requiredResourceArr.length > testResourceArr.length ? testResourceArr.length : requiredResourceArr.length\n\n    const isDifferentSection = requiredResourceArr\n      .slice(0, maxSectionLength)\n      .some((_: string, index: number) => !this.isVariableCovered(testResourceArr[index], requiredResourceArr[index]))\n\n    if (isDifferentSection) {\n      return false\n    }\n    if (testResourceArr.length === requiredResourceArr.length) {\n      return true\n    }\n\n    const resourceSlice = testResourceArr.slice(requiredResourceArr.length, testResourceArr.length)\n    return resourceSlice.length > 0 && resourceSlice.every((section: string) => section === WILDCARD_SIGN)\n  }\n\n  private isActionIncluded = (permission: RolePermission, action: CrudType): boolean => {\n    const modeType = Object.keys(CrudType)\n    return Number(permission.action)\n      .toString(2)\n      .split('')\n      .reverse()\n      .some((item, index) => item === '1' && modeType[index] === action)\n  }\n\n  private isVariableCovered = (access: string, required: string): boolean => {\n    if (access === WILDCARD_SIGN) {\n      return true\n    }\n    const insideBracketRegexp = /^{[A-z]*}$/\n    const accessIsInsideBracket = insideBracketRegexp.test(access)\n    const requiredIsInsideBracket = insideBracketRegexp.test(required)\n\n    if ((!accessIsInsideBracket && !requiredIsInsideBracket) || !this.user) {\n      return access === required\n    }\n\n    const actualAccessVal = !accessIsInsideBracket\n      ? access\n      : this.replaceResourceVal(access, {\n          namespace: this.user.namespace,\n          userId: this.user.userId,\n          clientId: this.clientId\n        })\n\n    const actualRequiredVal = !requiredIsInsideBracket\n      ? required\n      : this.replaceResourceVal(required, {\n          namespace: this.currentNamespace,\n          userId: this.user.userId,\n          clientId: this.clientId\n        })\n\n    return actualAccessVal === actualRequiredVal\n  }\n\n  private replaceResourceVal = (value: string, replacement: { [key: string]: string }) => {\n    return Object.keys(replacement).reduce((val: string, key: string) => val.replace(`{${key}}`, replacement[key]), value)\n  }\n}\n"]}