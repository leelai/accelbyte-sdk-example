import {
  BansAdminApi,
  BansApi,
  ClientsAdminApi,
  ClientsApi,
  ClientsConfigV3AdminApi,
  ConfigAdminApi,
  ConfigApi,
  CountryAdminApi,
  CountryApi,
  DevicesV4AdminApi,
  InputValidationsAdminApi,
  InputValidationsApi,
  LoginAllowlistAdminApi,
  OAuth20AdminApi,
  OAuth20Api,
  OAuth20ExtensionApi,
  OAuth20V4Api,
  OAuthApi,
  OverrideRoleConfigV3AdminApi,
  ProfileUpdateStrategyAdminApi,
  ProfileUpdateStrategyApi,
  RolesAdminApi,
  RolesApi,
  SsoApi,
  SsoCredentialAdminApi,
  SsoSaml20Api,
  ThirdPartyCredentialAdminApi,
  ThirdPartyCredentialApi,
  UsersAdminApi,
  UsersApi,
  UsersV4AdminApi,
  UsersV4Api
} from "./chunk-BQJDLLOZ.js";

// src/generated-admin/queries/BansAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_BansAdmin = /* @__PURE__ */ ((Key_BansAdmin2) => {
  Key_BansAdmin2["Bans_v3"] = "Iam.BansAdmin.Bans_v3";
  Key_BansAdmin2["BansReasons_v3"] = "Iam.BansAdmin.BansReasons_v3";
  Key_BansAdmin2["Bantypes_v3"] = "Iam.BansAdmin.Bantypes_v3";
  Key_BansAdmin2["BansUsers_v3"] = "Iam.BansAdmin.BansUsers_v3";
  Key_BansAdmin2["BanUser_v3"] = "Iam.BansAdmin.BanUser_v3";
  Key_BansAdmin2["BanUserDisabled_v3"] = "Iam.BansAdmin.BanUserDisabled_v3";
  return Key_BansAdmin2;
})(Key_BansAdmin || {});
var useBansAdminApi_GetBans_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BansAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Iam.BansAdmin.Bans_v3" /* Bans_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBansAdminApi_GetBansReasons_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BansAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBansReasons_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Iam.BansAdmin.BansReasons_v3" /* BansReasons_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBansAdminApi_GetBantypes_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BansAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBantypes_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Iam.BansAdmin.Bantypes_v3" /* Bantypes_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBansAdminApi_GetBansUsers_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BansAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBansUsers_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Iam.BansAdmin.BansUsers_v3" /* BansUsers_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBansAdminApi_CreateBanUserMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BansAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBanUser_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Iam.BansAdmin.BanUser_v3" /* BanUser_v3 */],
    mutationFn,
    ...options
  });
};
var useBansAdminApi_PatchBanUserDisabledMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await BansAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchBanUserDisabled_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Iam.BansAdmin.BanUserDisabled_v3" /* BanUserDisabled_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ClientsAdmin.query.ts
import { useMutation as useMutation2, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_ClientsAdmin = /* @__PURE__ */ ((Key_ClientsAdmin2) => {
  Key_ClientsAdmin2["Clients_v3"] = "Iam.ClientsAdmin.Clients_v3";
  Key_ClientsAdmin2["Client_v3"] = "Iam.ClientsAdmin.Client_v3";
  Key_ClientsAdmin2["Secret_ByClientId_v3"] = "Iam.ClientsAdmin.Secret_ByClientId_v3";
  Key_ClientsAdmin2["Client_ByClientId_v3"] = "Iam.ClientsAdmin.Client_ByClientId_v3";
  Key_ClientsAdmin2["Permission_ByClientId_v3"] = "Iam.ClientsAdmin.Permission_ByClientId_v3";
  Key_ClientsAdmin2["Permission_ByClientId_ByNS_v3"] = "Iam.ClientsAdmin.Permission_ByClientId_ByNS_v3";
  Key_ClientsAdmin2["Permission_ByClientId_ByResource_ByAction_v3"] = "Iam.ClientsAdmin.Permission_ByClientId_ByResource_ByAction_v3";
  return Key_ClientsAdmin2;
})(Key_ClientsAdmin || {});
var useClientsAdminApi_GetClients_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getClients_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Iam.ClientsAdmin.Clients_v3" /* Clients_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsAdminApi_CreateClientMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createClient_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Client_v3" /* Client_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_UpdateClientMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateClient_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Client_v3" /* Client_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_UpdateSecret_ByClientIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateSecret_ByClientId_v3(input.clientId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Secret_ByClientId_v3" /* Secret_ByClientId_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_DeleteClient_ByClientIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteClient_ByClientId_v3(input.clientId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Client_ByClientId_v3" /* Client_ByClientId_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_GetClient_ByClientId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getClient_ByClientId_v3(
      input2.clientId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Iam.ClientsAdmin.Client_ByClientId_v3" /* Client_ByClientId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsAdminApi_PatchClient_ByClientIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchClient_ByClientId_v3(
      input.clientId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Client_ByClientId_v3" /* Client_ByClientId_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_UpdatePermission_ByClientIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByClientId_v3(input.clientId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Permission_ByClientId_v3" /* Permission_ByClientId_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_UpdatePermission_ByClientId_ByNSMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByClientId_ByNS_v3(input.clientId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Permission_ByClientId_ByNS_v3" /* Permission_ByClientId_ByNS_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsAdminApi_DeletePermission_ByClientId_ByResource_ByActionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByClientId_ByResource_ByAction_v3(input.clientId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Iam.ClientsAdmin.Permission_ByClientId_ByResource_ByAction_v3" /* Permission_ByClientId_ByResource_ByAction_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ClientsConfigV3Admin.query.ts
import { useMutation as useMutation3, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_ClientsConfigV3Admin = /* @__PURE__ */ ((Key_ClientsConfigV3Admin2) => {
  Key_ClientsConfigV3Admin2["ClientConfigTemplates_v3"] = "Iam.ClientsConfigV3Admin.ClientConfigTemplates_v3";
  Key_ClientsConfigV3Admin2["ClientConfigPermission_v3"] = "Iam.ClientsConfigV3Admin.ClientConfigPermission_v3";
  Key_ClientsConfigV3Admin2["ClientConfigPermissions_v3"] = "Iam.ClientsConfigV3Admin.ClientConfigPermissions_v3";
  return Key_ClientsConfigV3Admin2;
})(Key_ClientsConfigV3Admin || {});
var useClientsConfigV3AdminApi_GetClientConfigTemplates_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsConfigV3AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getClientConfigTemplates_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Iam.ClientsConfigV3Admin.ClientConfigTemplates_v3" /* ClientConfigTemplates_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsConfigV3AdminApi_DeleteClientConfigPermissionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsConfigV3AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteClientConfigPermission_v3(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Iam.ClientsConfigV3Admin.ClientConfigPermission_v3" /* ClientConfigPermission_v3 */],
    mutationFn,
    ...options
  });
};
var useClientsConfigV3AdminApi_GetClientConfigPermissions_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsConfigV3AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getClientConfigPermissions_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Iam.ClientsConfigV3Admin.ClientConfigPermissions_v3" /* ClientConfigPermissions_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsConfigV3AdminApi_UpdateClientConfigPermissionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsConfigV3AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateClientConfigPermission_v3(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Iam.ClientsConfigV3Admin.ClientConfigPermission_v3" /* ClientConfigPermission_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ConfigAdmin.query.ts
import { useQuery as useQuery4 } from "@tanstack/react-query";
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["Config_ByConfigKey_v3"] = "Iam.ConfigAdmin.Config_ByConfigKey_v3";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_GetConfig_ByConfigKey_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByConfigKey_v3(
      input2.configKey
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Iam.ConfigAdmin.Config_ByConfigKey_v3" /* Config_ByConfigKey_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/CountryAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery5 } from "@tanstack/react-query";
var Key_CountryAdmin = /* @__PURE__ */ ((Key_CountryAdmin2) => {
  Key_CountryAdmin2["Countries_v3"] = "Iam.CountryAdmin.Countries_v3";
  Key_CountryAdmin2["CountriesBlacklist_v3"] = "Iam.CountryAdmin.CountriesBlacklist_v3";
  Key_CountryAdmin2["CountryBlacklist_v3"] = "Iam.CountryAdmin.CountryBlacklist_v3";
  return Key_CountryAdmin2;
})(Key_CountryAdmin || {});
var useCountryAdminApi_GetCountries_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CountryAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCountries_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Iam.CountryAdmin.Countries_v3" /* Countries_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCountryAdminApi_GetCountriesBlacklist_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CountryAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCountriesBlacklist_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Iam.CountryAdmin.CountriesBlacklist_v3" /* CountriesBlacklist_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useCountryAdminApi_UpdateCountryBlacklistMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CountryAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateCountryBlacklist_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Iam.CountryAdmin.CountryBlacklist_v3" /* CountryBlacklist_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/DevicesV4Admin.query.ts
import { useMutation as useMutation5, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_DevicesV4Admin = /* @__PURE__ */ ((Key_DevicesV4Admin2) => {
  Key_DevicesV4Admin2["Devices_v4"] = "Iam.DevicesV4Admin.Devices_v4";
  Key_DevicesV4Admin2["DevicesBans_v4"] = "Iam.DevicesV4Admin.DevicesBans_v4";
  Key_DevicesV4Admin2["DeviceBan_v4"] = "Iam.DevicesV4Admin.DeviceBan_v4";
  Key_DevicesV4Admin2["DevicesTypes_v4"] = "Iam.DevicesV4Admin.DevicesTypes_v4";
  Key_DevicesV4Admin2["DevicesBanned_v4"] = "Iam.DevicesV4Admin.DevicesBanned_v4";
  Key_DevicesV4Admin2["DevicesReport_v4"] = "Iam.DevicesV4Admin.DevicesReport_v4";
  Key_DevicesV4Admin2["DeviceBan_ByBanId_v4"] = "Iam.DevicesV4Admin.DeviceBan_ByBanId_v4";
  Key_DevicesV4Admin2["Bans_ByDeviceId_v4"] = "Iam.DevicesV4Admin.Bans_ByDeviceId_v4";
  Key_DevicesV4Admin2["Unban_ByDeviceId_v4"] = "Iam.DevicesV4Admin.Unban_ByDeviceId_v4";
  Key_DevicesV4Admin2["Users_ByDeviceId_v4"] = "Iam.DevicesV4Admin.Users_ByDeviceId_v4";
  Key_DevicesV4Admin2["Decrypt_ByDeviceId_v4"] = "Iam.DevicesV4Admin.Decrypt_ByDeviceId_v4";
  return Key_DevicesV4Admin2;
})(Key_DevicesV4Admin || {});
var useDevicesV4AdminApi_GetDevices_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDevices_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.Devices_v4" /* Devices_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_GetDevicesBans_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDevicesBans_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.DevicesBans_v4" /* DevicesBans_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_CreateDeviceBanMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DevicesV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createDeviceBan_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Iam.DevicesV4Admin.DeviceBan_v4" /* DeviceBan_v4 */],
    mutationFn,
    ...options
  });
};
var useDevicesV4AdminApi_GetDevicesTypes_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDevicesTypes_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.DevicesTypes_v4" /* DevicesTypes_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_GetDevicesBanned_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDevicesBanned_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.DevicesBanned_v4" /* DevicesBanned_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_GetDevicesReport_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDevicesReport_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.DevicesReport_v4" /* DevicesReport_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_GetDeviceBan_ByBanId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDeviceBan_ByBanId_v4(
      input2.banId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.DeviceBan_ByBanId_v4" /* DeviceBan_ByBanId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_UpdateDeviceBan_ByBanIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DevicesV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateDeviceBan_ByBanId_v4(input.banId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Iam.DevicesV4Admin.DeviceBan_ByBanId_v4" /* DeviceBan_ByBanId_v4 */],
    mutationFn,
    ...options
  });
};
var useDevicesV4AdminApi_GetBans_ByDeviceId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_ByDeviceId_v4(
      input2.deviceId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.Bans_ByDeviceId_v4" /* Bans_ByDeviceId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_UpdateUnban_ByDeviceIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await DevicesV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateUnban_ByDeviceId_v4(input.deviceId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Iam.DevicesV4Admin.Unban_ByDeviceId_v4" /* Unban_ByDeviceId_v4 */],
    mutationFn,
    ...options
  });
};
var useDevicesV4AdminApi_GetUsers_ByDeviceId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsers_ByDeviceId_v4(
      input2.deviceId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.Users_ByDeviceId_v4" /* Users_ByDeviceId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useDevicesV4AdminApi_GetDecrypt_ByDeviceId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DevicesV4AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDecrypt_ByDeviceId_v4(input2.deviceId);
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Iam.DevicesV4Admin.Decrypt_ByDeviceId_v4" /* Decrypt_ByDeviceId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/InputValidationsAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_InputValidationsAdmin = /* @__PURE__ */ ((Key_InputValidationsAdmin2) => {
  Key_InputValidationsAdmin2["InputValidations_v3"] = "Iam.InputValidationsAdmin.InputValidations_v3";
  Key_InputValidationsAdmin2["InputValidation_v3"] = "Iam.InputValidationsAdmin.InputValidation_v3";
  Key_InputValidationsAdmin2["InputValidation_ByField_v3"] = "Iam.InputValidationsAdmin.InputValidation_ByField_v3";
  return Key_InputValidationsAdmin2;
})(Key_InputValidationsAdmin || {});
var useInputValidationsAdminApi_GetInputValidations_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await InputValidationsAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getInputValidations_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Iam.InputValidationsAdmin.InputValidations_v3" /* InputValidations_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useInputValidationsAdminApi_UpdateInputValidationMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await InputValidationsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateInputValidation_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Iam.InputValidationsAdmin.InputValidation_v3" /* InputValidation_v3 */],
    mutationFn,
    ...options
  });
};
var useInputValidationsAdminApi_DeleteInputValidation_ByFieldMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await InputValidationsAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteInputValidation_ByField_v3(input.field);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Iam.InputValidationsAdmin.InputValidation_ByField_v3" /* InputValidation_ByField_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/LoginAllowlistAdmin.query.ts
import { useMutation as useMutation7, useQuery as useQuery8 } from "@tanstack/react-query";
var Key_LoginAllowlistAdmin = /* @__PURE__ */ ((Key_LoginAllowlistAdmin2) => {
  Key_LoginAllowlistAdmin2["LoginAllowlist_v3"] = "Iam.LoginAllowlistAdmin.LoginAllowlist_v3";
  return Key_LoginAllowlistAdmin2;
})(Key_LoginAllowlistAdmin || {});
var useLoginAllowlistAdminApi_GetLoginAllowlist_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await LoginAllowlistAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLoginAllowlist_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Iam.LoginAllowlistAdmin.LoginAllowlist_v3" /* LoginAllowlist_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useLoginAllowlistAdminApi_UpdateLoginAllowlistMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await LoginAllowlistAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateLoginAllowlist_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Iam.LoginAllowlistAdmin.LoginAllowlist_v3" /* LoginAllowlist_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/OAuth20Admin.query.ts
import { useMutation as useMutation8, useQuery as useQuery9 } from "@tanstack/react-query";
var Key_OAuth20Admin = /* @__PURE__ */ ((Key_OAuth20Admin2) => {
  Key_OAuth20Admin2["RevokeOauth_ByUserId_v3"] = "Iam.OAuth20Admin.RevokeOauth_ByUserId_v3";
  Key_OAuth20Admin2["PlatformTokenOauth_ByUserId_ByPlatformId_v3"] = "Iam.OAuth20Admin.PlatformTokenOauth_ByUserId_ByPlatformId_v3";
  return Key_OAuth20Admin2;
})(Key_OAuth20Admin || {});
var useOAuth20AdminApi_UpdateRevokeOauth_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRevokeOauth_ByUserId_v3(input.userId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Iam.OAuth20Admin.RevokeOauth_ByUserId_v3" /* RevokeOauth_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20AdminApi_GetPlatformTokenOauth_ByUserId_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformTokenOauth_ByUserId_ByPlatformId_v3(input2.userId, input2.platformId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Iam.OAuth20Admin.PlatformTokenOauth_ByUserId_ByPlatformId_v3" /* PlatformTokenOauth_ByUserId_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/OverrideRoleConfigV3Admin.query.ts
import { useMutation as useMutation9, useQuery as useQuery10 } from "@tanstack/react-query";
var Key_OverrideRoleConfigV3Admin = /* @__PURE__ */ ((Key_OverrideRoleConfigV3Admin2) => {
  Key_OverrideRoleConfigV3Admin2["Roleoverride_v3"] = "Iam.OverrideRoleConfigV3Admin.Roleoverride_v3";
  Key_OverrideRoleConfigV3Admin2["RoleoverrideSource_v3"] = "Iam.OverrideRoleConfigV3Admin.RoleoverrideSource_v3";
  Key_OverrideRoleConfigV3Admin2["RoleoverrideStatus_v3"] = "Iam.OverrideRoleConfigV3Admin.RoleoverrideStatus_v3";
  Key_OverrideRoleConfigV3Admin2["Permissions_ByRoleId_v3"] = "Iam.OverrideRoleConfigV3Admin.Permissions_ByRoleId_v3";
  return Key_OverrideRoleConfigV3Admin2;
})(Key_OverrideRoleConfigV3Admin || {});
var useOverrideRoleConfigV3AdminApi_GetRoleoverride_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OverrideRoleConfigV3AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRoleoverride_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Iam.OverrideRoleConfigV3Admin.Roleoverride_v3" /* Roleoverride_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOverrideRoleConfigV3AdminApi_PatchRoleoverrideMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OverrideRoleConfigV3AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchRoleoverride_v3(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Iam.OverrideRoleConfigV3Admin.Roleoverride_v3" /* Roleoverride_v3 */],
    mutationFn,
    ...options
  });
};
var useOverrideRoleConfigV3AdminApi_GetRoleoverrideSource_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OverrideRoleConfigV3AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getRoleoverrideSource_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Iam.OverrideRoleConfigV3Admin.RoleoverrideSource_v3" /* RoleoverrideSource_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOverrideRoleConfigV3AdminApi_PatchRoleoverrideStatusMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OverrideRoleConfigV3AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchRoleoverrideStatus_v3(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Iam.OverrideRoleConfigV3Admin.RoleoverrideStatus_v3" /* RoleoverrideStatus_v3 */],
    mutationFn,
    ...options
  });
};
var useOverrideRoleConfigV3AdminApi_GetPermissions_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OverrideRoleConfigV3AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPermissions_ByRoleId_v3(input2.roleId);
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Iam.OverrideRoleConfigV3Admin.Permissions_ByRoleId_v3" /* Permissions_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/ProfileUpdateStrategyAdmin.query.ts
import { useMutation as useMutation10, useQuery as useQuery11 } from "@tanstack/react-query";
var Key_ProfileUpdateStrategyAdmin = /* @__PURE__ */ ((Key_ProfileUpdateStrategyAdmin2) => {
  Key_ProfileUpdateStrategyAdmin2["ProfileUpdateStrategies_v3"] = "Iam.ProfileUpdateStrategyAdmin.ProfileUpdateStrategies_v3";
  Key_ProfileUpdateStrategyAdmin2["ProfileUpdateStrategy_v3"] = "Iam.ProfileUpdateStrategyAdmin.ProfileUpdateStrategy_v3";
  return Key_ProfileUpdateStrategyAdmin2;
})(Key_ProfileUpdateStrategyAdmin || {});
var useProfileUpdateStrategyAdminApi_GetProfileUpdateStrategies_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfileUpdateStrategyAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfileUpdateStrategies_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Iam.ProfileUpdateStrategyAdmin.ProfileUpdateStrategies_v3" /* ProfileUpdateStrategies_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useProfileUpdateStrategyAdminApi_UpdateProfileUpdateStrategyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ProfileUpdateStrategyAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateProfileUpdateStrategy_v3(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Iam.ProfileUpdateStrategyAdmin.ProfileUpdateStrategy_v3" /* ProfileUpdateStrategy_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/RolesAdmin.query.ts
import { useMutation as useMutation11, useQuery as useQuery12 } from "@tanstack/react-query";
var Key_RolesAdmin = /* @__PURE__ */ ((Key_RolesAdmin2) => {
  Key_RolesAdmin2["Roles_v3"] = "Iam.RolesAdmin.Roles_v3";
  Key_RolesAdmin2["Role_v3"] = "Iam.RolesAdmin.Role_v3";
  Key_RolesAdmin2["Roles_v4"] = "Iam.RolesAdmin.Roles_v4";
  Key_RolesAdmin2["Role_v4"] = "Iam.RolesAdmin.Role_v4";
  Key_RolesAdmin2["Role_ByRoleId_v3"] = "Iam.RolesAdmin.Role_ByRoleId_v3";
  Key_RolesAdmin2["Role_ByRoleId_v4"] = "Iam.RolesAdmin.Role_ByRoleId_v4";
  Key_RolesAdmin2["Admin_ByRoleId_v3"] = "Iam.RolesAdmin.Admin_ByRoleId_v3";
  Key_RolesAdmin2["User_ByRoleId_v4"] = "Iam.RolesAdmin.User_ByRoleId_v4";
  Key_RolesAdmin2["Users_ByRoleId_v4"] = "Iam.RolesAdmin.Users_ByRoleId_v4";
  Key_RolesAdmin2["Member_ByRoleId_v3"] = "Iam.RolesAdmin.Member_ByRoleId_v3";
  Key_RolesAdmin2["Members_ByRoleId_v3"] = "Iam.RolesAdmin.Members_ByRoleId_v3";
  Key_RolesAdmin2["Manager_ByRoleId_v3"] = "Iam.RolesAdmin.Manager_ByRoleId_v3";
  Key_RolesAdmin2["Managers_ByRoleId_v3"] = "Iam.RolesAdmin.Managers_ByRoleId_v3";
  Key_RolesAdmin2["Permission_ByRoleId_v3"] = "Iam.RolesAdmin.Permission_ByRoleId_v3";
  Key_RolesAdmin2["Permission_ByRoleId_admin_v3"] = "Iam.RolesAdmin.Permission_ByRoleId_admin_v3";
  Key_RolesAdmin2["Permission_ByRoleId_v4"] = "Iam.RolesAdmin.Permission_ByRoleId_v4";
  Key_RolesAdmin2["Permission_ByRoleId_admin_v4"] = "Iam.RolesAdmin.Permission_ByRoleId_admin_v4";
  Key_RolesAdmin2["Permission_ByRoleId_ByResource_ByAction_v3"] = "Iam.RolesAdmin.Permission_ByRoleId_ByResource_ByAction_v3";
  return Key_RolesAdmin2;
})(Key_RolesAdmin || {});
var useRolesAdminApi_GetRoles_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRoles_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Roles_v3" /* Roles_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_CreateRoleMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRole_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Role_v3" /* Role_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetRoles_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRoles_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Roles_v4" /* Roles_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_CreateRoleMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRole_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Role_v4" /* Role_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeleteRole_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRole_ByRoleId_v3(
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Role_ByRoleId_v3" /* Role_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetRole_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRole_ByRoleId_v3(
      input2.roleId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Role_ByRoleId_v3" /* Role_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_PatchRole_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchRole_ByRoleId_v3(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Role_ByRoleId_v3" /* Role_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeleteRole_ByRoleIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRole_ByRoleId_v4(
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Role_ByRoleId_v4" /* Role_ByRoleId_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetRole_ByRoleId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRole_ByRoleId_v4(
      input2.roleId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Role_ByRoleId_v4" /* Role_ByRoleId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_PatchRole_ByRoleIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchRole_ByRoleId_v4(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Role_ByRoleId_v4" /* Role_ByRoleId_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeleteAdmin_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteAdmin_ByRoleId_v3(
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Admin_ByRoleId_v3" /* Admin_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetAdmin_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAdmin_ByRoleId_v3(
      input2.roleId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Admin_ByRoleId_v3" /* Admin_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_UpdateAdmin_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateAdmin_ByRoleId_v3(
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Admin_ByRoleId_v3" /* Admin_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeleteUser_ByRoleIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUser_ByRoleId_v4(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.User_ByRoleId_v4" /* User_ByRoleId_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetUsers_ByRoleId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsers_ByRoleId_v4(
      input2.roleId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Users_ByRoleId_v4" /* Users_ByRoleId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_UpdateUser_ByRoleIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUser_ByRoleId_v4(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.User_ByRoleId_v4" /* User_ByRoleId_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeleteMember_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteMember_ByRoleId_v3(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Member_ByRoleId_v3" /* Member_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetMembers_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMembers_ByRoleId_v3(
      input2.roleId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Members_ByRoleId_v3" /* Members_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_UpdateMember_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateMember_ByRoleId_v3(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Member_ByRoleId_v3" /* Member_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeleteManager_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteManager_ByRoleId_v3(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Manager_ByRoleId_v3" /* Manager_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_GetManagers_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getManagers_ByRoleId_v3(
      input2.roleId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Iam.RolesAdmin.Managers_ByRoleId_v3" /* Managers_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesAdminApi_UpdateManager_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateManager_ByRoleId_v3(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Manager_ByRoleId_v3" /* Manager_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeletePermission_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByRoleId_v3(input.roleId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_v3" /* Permission_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_UpdatePermission_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByRoleId_v3(input.roleId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_v3" /* Permission_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_UpdatePermission_ByRoleId_adminMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByRoleId_admin_v3(input.roleId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_admin_v3" /* Permission_ByRoleId_admin_v3 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeletePermission_ByRoleIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByRoleId_v4(input.roleId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_v4" /* Permission_ByRoleId_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_UpdatePermission_ByRoleIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByRoleId_v4(input.roleId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_v4" /* Permission_ByRoleId_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_UpdatePermission_ByRoleId_adminMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByRoleId_admin_v4(input.roleId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_admin_v4" /* Permission_ByRoleId_admin_v4 */],
    mutationFn,
    ...options
  });
};
var useRolesAdminApi_DeletePermission_ByRoleId_ByResource_ByActionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByRoleId_ByResource_ByAction_v3(input.roleId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Iam.RolesAdmin.Permission_ByRoleId_ByResource_ByAction_v3" /* Permission_ByRoleId_ByResource_ByAction_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/SsoCredentialAdmin.query.ts
import { useMutation as useMutation12, useQuery as useQuery13 } from "@tanstack/react-query";
var Key_SsoCredentialAdmin = /* @__PURE__ */ ((Key_SsoCredentialAdmin2) => {
  Key_SsoCredentialAdmin2["PlatformsSso_v3"] = "Iam.SsoCredentialAdmin.PlatformsSso_v3";
  Key_SsoCredentialAdmin2["Sso_ByPlatformId_v3"] = "Iam.SsoCredentialAdmin.Sso_ByPlatformId_v3";
  return Key_SsoCredentialAdmin2;
})(Key_SsoCredentialAdmin || {});
var useSsoCredentialAdminApi_GetPlatformsSso_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SsoCredentialAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlatformsSso_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Iam.SsoCredentialAdmin.PlatformsSso_v3" /* PlatformsSso_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSsoCredentialAdminApi_DeleteSso_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SsoCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteSso_ByPlatformId_v3(input.platformId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Iam.SsoCredentialAdmin.Sso_ByPlatformId_v3" /* Sso_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useSsoCredentialAdminApi_GetSso_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SsoCredentialAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getSso_ByPlatformId_v3(input2.platformId);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Iam.SsoCredentialAdmin.Sso_ByPlatformId_v3" /* Sso_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSsoCredentialAdminApi_PatchSso_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SsoCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchSso_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Iam.SsoCredentialAdmin.Sso_ByPlatformId_v3" /* Sso_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useSsoCredentialAdminApi_CreateSso_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SsoCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createSso_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Iam.SsoCredentialAdmin.Sso_ByPlatformId_v3" /* Sso_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ThirdPartyCredentialAdmin.query.ts
import { useMutation as useMutation13, useQuery as useQuery14 } from "@tanstack/react-query";
var Key_ThirdPartyCredentialAdmin = /* @__PURE__ */ ((Key_ThirdPartyCredentialAdmin2) => {
  Key_ThirdPartyCredentialAdmin2["Availability_ByPlatformId_v3"] = "Iam.ThirdPartyCredentialAdmin.Availability_ByPlatformId_v3";
  Key_ThirdPartyCredentialAdmin2["PlatformsAllClients_v3"] = "Iam.ThirdPartyCredentialAdmin.PlatformsAllClients_v3";
  Key_ThirdPartyCredentialAdmin2["PlatformsAllClientsActive_v3"] = "Iam.ThirdPartyCredentialAdmin.PlatformsAllClientsActive_v3";
  Key_ThirdPartyCredentialAdmin2["Client_ByPlatformId_v3"] = "Iam.ThirdPartyCredentialAdmin.Client_ByPlatformId_v3";
  Key_ThirdPartyCredentialAdmin2["Clients_ByPlatformId_v3"] = "Iam.ThirdPartyCredentialAdmin.Clients_ByPlatformId_v3";
  Key_ThirdPartyCredentialAdmin2["ClientDomain_ByPlatformId_v3"] = "Iam.ThirdPartyCredentialAdmin.ClientDomain_ByPlatformId_v3";
  return Key_ThirdPartyCredentialAdmin2;
})(Key_ThirdPartyCredentialAdmin || {});
var useThirdPartyCredentialAdminApi_GetAvailability_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyCredentialAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAvailability_ByPlatformId_v3(input2.platformId);
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Iam.ThirdPartyCredentialAdmin.Availability_ByPlatformId_v3" /* Availability_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useThirdPartyCredentialAdminApi_GetPlatformsAllClients_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyCredentialAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsAllClients_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Iam.ThirdPartyCredentialAdmin.PlatformsAllClients_v3" /* PlatformsAllClients_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useThirdPartyCredentialAdminApi_GetPlatformsAllClientsActive_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyCredentialAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsAllClientsActive_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Iam.ThirdPartyCredentialAdmin.PlatformsAllClientsActive_v3" /* PlatformsAllClientsActive_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useThirdPartyCredentialAdminApi_DeleteClient_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteClient_ByPlatformId_v3(input.platformId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Iam.ThirdPartyCredentialAdmin.Client_ByPlatformId_v3" /* Client_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useThirdPartyCredentialAdminApi_GetClients_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyCredentialAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getClients_ByPlatformId_v3(input2.platformId);
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Iam.ThirdPartyCredentialAdmin.Clients_ByPlatformId_v3" /* Clients_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useThirdPartyCredentialAdminApi_PatchClient_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchClient_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Iam.ThirdPartyCredentialAdmin.Client_ByPlatformId_v3" /* Client_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useThirdPartyCredentialAdminApi_CreateClient_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createClient_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Iam.ThirdPartyCredentialAdmin.Client_ByPlatformId_v3" /* Client_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useThirdPartyCredentialAdminApi_DeleteClientDomain_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteClientDomain_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Iam.ThirdPartyCredentialAdmin.ClientDomain_ByPlatformId_v3" /* ClientDomain_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useThirdPartyCredentialAdminApi_UpdateClientDomain_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ThirdPartyCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateClientDomain_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Iam.ThirdPartyCredentialAdmin.ClientDomain_ByPlatformId_v3" /* ClientDomain_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/UsersAdmin.query.ts
import { useMutation as useMutation14, useQuery as useQuery15 } from "@tanstack/react-query";
var Key_UsersAdmin = /* @__PURE__ */ ((Key_UsersAdmin2) => {
  Key_UsersAdmin2["UsersMe_v3"] = "Iam.UsersAdmin.UsersMe_v3";
  Key_UsersAdmin2["Users_v2"] = "Iam.UsersAdmin.Users_v2";
  Key_UsersAdmin2["Users_v3"] = "Iam.UsersAdmin.Users_v3";
  Key_UsersAdmin2["User_v3"] = "Iam.UsersAdmin.User_v3";
  Key_UsersAdmin2["Admins_v3"] = "Iam.UsersAdmin.Admins_v3";
  Key_UsersAdmin2["UserBan_v3"] = "Iam.UsersAdmin.UserBan_v3";
  Key_UsersAdmin2["UserBulk_v3"] = "Iam.UsersAdmin.UserBulk_v3";
  Key_UsersAdmin2["UserInvite_v3"] = "Iam.UsersAdmin.UserInvite_v3";
  Key_UsersAdmin2["UsersSearch_v3"] = "Iam.UsersAdmin.UsersSearch_v3";
  Key_UsersAdmin2["User_ByUserId_v2"] = "Iam.UsersAdmin.User_ByUserId_v2";
  Key_UsersAdmin2["User_ByUserId_v3"] = "Iam.UsersAdmin.User_ByUserId_v3";
  Key_UsersAdmin2["Agerestrictions_v2"] = "Iam.UsersAdmin.Agerestrictions_v2";
  Key_UsersAdmin2["Agerestriction_v2"] = "Iam.UsersAdmin.Agerestriction_v2";
  Key_UsersAdmin2["Agerestrictions_v3"] = "Iam.UsersAdmin.Agerestrictions_v3";
  Key_UsersAdmin2["Agerestriction_v3"] = "Iam.UsersAdmin.Agerestriction_v3";
  Key_UsersAdmin2["UserSearchBulk_v3"] = "Iam.UsersAdmin.UserSearchBulk_v3";
  Key_UsersAdmin2["Ban_ByUserId_v2"] = "Iam.UsersAdmin.Ban_ByUserId_v2";
  Key_UsersAdmin2["Bans_ByUserId_v2"] = "Iam.UsersAdmin.Bans_ByUserId_v2";
  Key_UsersAdmin2["Bans_ByUserId_v3"] = "Iam.UsersAdmin.Bans_ByUserId_v3";
  Key_UsersAdmin2["Ban_ByUserId_v3"] = "Iam.UsersAdmin.Ban_ByUserId_v3";
  Key_UsersAdmin2["UsersLinkhistories_v3"] = "Iam.UsersAdmin.UsersLinkhistories_v3";
  Key_UsersAdmin2["Role_ByUserId_v2"] = "Iam.UsersAdmin.Role_ByUserId_v2";
  Key_UsersAdmin2["Role_ByUserId_ByNS_v2"] = "Iam.UsersAdmin.Role_ByUserId_ByNS_v2";
  Key_UsersAdmin2["Users_ByRoleId_v3"] = "Iam.UsersAdmin.Users_ByRoleId_v3";
  Key_UsersAdmin2["Codes_ByUserId_v3"] = "Iam.UsersAdmin.Codes_ByUserId_v3";
  Key_UsersAdmin2["Role_ByUserId_v3"] = "Iam.UsersAdmin.Role_ByUserId_v3";
  Key_UsersAdmin2["UserBulkPlatform_v3"] = "Iam.UsersAdmin.UserBulkPlatform_v3";
  Key_UsersAdmin2["Enable_ByUserId_v2"] = "Iam.UsersAdmin.Enable_ByUserId_v2";
  Key_UsersAdmin2["Status_ByUserId_v3"] = "Iam.UsersAdmin.Status_ByUserId_v3";
  Key_UsersAdmin2["Verify_ByUserId_v3"] = "Iam.UsersAdmin.Verify_ByUserId_v3";
  Key_UsersAdmin2["Disable_ByUserId_v2"] = "Iam.UsersAdmin.Disable_ByUserId_v2";
  Key_UsersAdmin2["Country_ByCountryCode_v2"] = "Iam.UsersAdmin.Country_ByCountryCode_v2";
  Key_UsersAdmin2["Password_ByUserId_v2"] = "Iam.UsersAdmin.Password_ByUserId_v2";
  Key_UsersAdmin2["Password_ByUserId_v3"] = "Iam.UsersAdmin.Password_ByUserId_v3";
  Key_UsersAdmin2["UsersPlatformsJustice_v3"] = "Iam.UsersAdmin.UsersPlatformsJustice_v3";
  Key_UsersAdmin2["Platforms_ByUserId_v3"] = "Iam.UsersAdmin.Platforms_ByUserId_v3";
  Key_UsersAdmin2["CountriesAgerestrictions_v2"] = "Iam.UsersAdmin.CountriesAgerestrictions_v2";
  Key_UsersAdmin2["AgerestrictionsCountries_v3"] = "Iam.UsersAdmin.AgerestrictionsCountries_v3";
  Key_UsersAdmin2["CodeVerify_ByUserId_v3"] = "Iam.UsersAdmin.CodeVerify_ByUserId_v3";
  Key_UsersAdmin2["Information_ByUserId_v3"] = "Iam.UsersAdmin.Information_ByUserId_v3";
  Key_UsersAdmin2["Permission_ByUserId_v3"] = "Iam.UsersAdmin.Permission_ByUserId_v3";
  Key_UsersAdmin2["Ban_ByUserId_ByBanId_v3"] = "Iam.UsersAdmin.Ban_ByUserId_ByBanId_v3";
  Key_UsersAdmin2["BansSummary_ByUserId_v3"] = "Iam.UsersAdmin.BansSummary_ByUserId_v3";
  Key_UsersAdmin2["CodeRequest_ByUserId_v3"] = "Iam.UsersAdmin.CodeRequest_ByUserId_v3";
  Key_UsersAdmin2["User_ByPlatformId_v3"] = "Iam.UsersAdmin.User_ByPlatformId_v3";
  Key_UsersAdmin2["PlatformLink_ByUserId_v3"] = "Iam.UsersAdmin.PlatformLink_ByUserId_v3";
  Key_UsersAdmin2["Role_ByUserId_ByRoleId_v3"] = "Iam.UsersAdmin.Role_ByUserId_ByRoleId_v3";
  Key_UsersAdmin2["DeletionStatus_ByUserId_v3"] = "Iam.UsersAdmin.DeletionStatus_ByUserId_v3";
  Key_UsersAdmin2["LoginsHistories_ByUserId_v3"] = "Iam.UsersAdmin.LoginsHistories_ByUserId_v3";
  Key_UsersAdmin2["TrustlyIdentity_ByUserId_v3"] = "Iam.UsersAdmin.TrustlyIdentity_ByUserId_v3";
  Key_UsersAdmin2["DistinctPlatforms_ByUserId_v3"] = "Iam.UsersAdmin.DistinctPlatforms_ByUserId_v3";
  Key_UsersAdmin2["PlatformsJustice_ByUserId_v3"] = "Iam.UsersAdmin.PlatformsJustice_ByUserId_v3";
  Key_UsersAdmin2["PlatformsDistinct_ByUserId_v3"] = "Iam.UsersAdmin.PlatformsDistinct_ByUserId_v3";
  Key_UsersAdmin2["HeadlesCodeVerify_ByUserId_v3"] = "Iam.UsersAdmin.HeadlesCodeVerify_ByUserId_v3";
  Key_UsersAdmin2["Platform_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.Platform_ByUserId_ByPlatformId_v3";
  Key_UsersAdmin2["AgerestrictionCountry_ByCountryCode_v3"] = "Iam.UsersAdmin.AgerestrictionCountry_ByCountryCode_v3";
  Key_UsersAdmin2["PlatformsLinkHistories_ByUserId_v3"] = "Iam.UsersAdmin.PlatformsLinkHistories_ByUserId_v3";
  Key_UsersAdmin2["All_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.All_ByUserId_ByPlatformId_v3";
  Key_UsersAdmin2["Link_ByUserId_ByPlatformId_v2"] = "Iam.UsersAdmin.Link_ByUserId_ByPlatformId_v2";
  Key_UsersAdmin2["Link_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.Link_ByUserId_ByPlatformId_v3";
  Key_UsersAdmin2["User_ByPlatformId_ByPlatformUserId_v3"] = "Iam.UsersAdmin.User_ByPlatformId_ByPlatformUserId_v3";
  Key_UsersAdmin2["Permission_ByUserId_ByResource_ByAction_v3"] = "Iam.UsersAdmin.Permission_ByUserId_ByResource_ByAction_v3";
  Key_UsersAdmin2["Metadata_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.Metadata_ByUserId_ByPlatformId_v3";
  Key_UsersAdmin2["LinkStatu_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.LinkStatu_ByUserId_ByPlatformId_v3";
  Key_UsersAdmin2["PlatformJustice_ByUserId_ByTargetNamespace_v3"] = "Iam.UsersAdmin.PlatformJustice_ByUserId_ByTargetNamespace_v3";
  Key_UsersAdmin2["LinkHistory_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.LinkHistory_ByUserId_ByPlatformId_v3";
  Key_UsersAdmin2["LinkRestriction_ByUserId_ByPlatformId_v3"] = "Iam.UsersAdmin.LinkRestriction_ByUserId_ByPlatformId_v3";
  return Key_UsersAdmin2;
})(Key_UsersAdmin || {});
var useUsersAdminApi_GetUsersMe_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMe_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UsersMe_v3" /* UsersMe_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetUsers_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsers_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Users_v2" /* Users_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetUsers_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsers_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Users_v3" /* Users_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdateUserMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUser_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.User_v3" /* User_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetAdmins_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAdmins_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Admins_v3" /* Admins_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_FetchUserBan_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchUserBan_v3(
      input2.data,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UserBan_v3" /* UserBan_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_CreateUserBulkMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserBulk_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.UserBulk_v3" /* UserBulk_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_CreateUserInviteMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserInvite_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.UserInvite_v3" /* UserInvite_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetUsersSearch_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersSearch_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UsersSearch_v3" /* UsersSearch_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetUser_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUser_ByUserId_v2(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.User_ByUserId_v2" /* User_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PatchUser_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUser_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.User_ByUserId_v2" /* User_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetUser_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUser_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.User_ByUserId_v3" /* User_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PatchUser_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUser_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.User_ByUserId_v3" /* User_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetAgerestrictions_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAgerestrictions_v2();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Agerestrictions_v2" /* Agerestrictions_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PatchAgerestrictionMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchAgerestriction_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Agerestriction_v2" /* Agerestriction_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetAgerestrictions_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAgerestrictions_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Agerestrictions_v3" /* Agerestrictions_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PatchAgerestrictionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchAgerestriction_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Agerestriction_v3" /* Agerestriction_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_FetchUserSearchBulk_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchUserSearchBulk_v3(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UserSearchBulk_v3" /* UserSearchBulk_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_CreateBan_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBan_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Ban_ByUserId_v2" /* Ban_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetBans_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_ByUserId_v2(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Bans_ByUserId_v2" /* Bans_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetBans_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_ByUserId_v3(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Bans_ByUserId_v3" /* Bans_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_CreateBan_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBan_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Ban_ByUserId_v3" /* Ban_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetUsersLinkhistories_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersLinkhistories_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UsersLinkhistories_v3" /* UsersLinkhistories_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdateRole_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRole_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Role_ByUserId_v2" /* Role_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdateRole_ByUserId_ByNSMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRole_ByUserId_ByNS_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Role_ByUserId_ByNS_v2" /* Role_ByUserId_ByNS_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetUsers_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsers_ByRoleId_v3(
      input2.roleId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Users_ByRoleId_v3" /* Users_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetCodes_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCodes_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Codes_ByUserId_v3" /* Codes_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_DeleteRole_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRole_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Role_ByUserId_v3" /* Role_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_PatchRole_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchRole_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Role_ByUserId_v3" /* Role_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_FetchUserBulkPlatform_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchUserBulkPlatform_v3(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UserBulkPlatform_v3" /* UserBulkPlatform_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdateEnable_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateEnable_ByUserId_v2(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Enable_ByUserId_v2" /* Enable_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_PatchStatus_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchStatus_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Status_ByUserId_v3" /* Status_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdateVerify_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateVerify_ByUserId_v3(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Verify_ByUserId_v3" /* Verify_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdateDisable_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDisable_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Disable_ByUserId_v2" /* Disable_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_PatchCountry_ByCountryCodeMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchCountry_ByCountryCode_v2(input.countryCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Country_ByCountryCode_v2" /* Country_ByCountryCode_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdatePassword_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePassword_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Password_ByUserId_v2" /* Password_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdatePassword_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePassword_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Password_ByUserId_v3" /* Password_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetUsersPlatformsJustice_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersPlatformsJustice_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.UsersPlatformsJustice_v3" /* UsersPlatformsJustice_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetPlatforms_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlatforms_ByUserId_v3(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Platforms_ByUserId_v3" /* Platforms_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetCountriesAgerestrictions_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getCountriesAgerestrictions_v2();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.CountriesAgerestrictions_v2" /* CountriesAgerestrictions_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetAgerestrictionsCountries_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgerestrictionsCountries_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.AgerestrictionsCountries_v3" /* AgerestrictionsCountries_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdateCodeVerify_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCodeVerify_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.CodeVerify_ByUserId_v3" /* CodeVerify_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeleteInformation_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteInformation_ByUserId_v3(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Information_ByUserId_v3" /* Information_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeletePermission_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Permission_ByUserId_v3" /* Permission_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_CreatePermission_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPermission_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Permission_ByUserId_v3" /* Permission_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdatePermission_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Permission_ByUserId_v3" /* Permission_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_PatchBan_ByUserId_ByBanIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchBan_ByUserId_ByBanId_v3(input.userId, input.banId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Ban_ByUserId_ByBanId_v3" /* Ban_ByUserId_ByBanId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetBansSummary_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBansSummary_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.BansSummary_ByUserId_v3" /* BansSummary_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdateCodeRequest_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCodeRequest_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.CodeRequest_ByUserId_v3" /* CodeRequest_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_FetchUser_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchUser_ByPlatformId_v3(
      input2.platformId,
      input2.data,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.User_ByPlatformId_v3" /* User_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdatePlatformLink_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePlatformLink_ByUserId_v3(input.userId, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.PlatformLink_ByUserId_v3" /* PlatformLink_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeleteRole_ByUserId_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteRole_ByUserId_ByRoleId_v3(input.userId, input.roleId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Role_ByUserId_ByRoleId_v3" /* Role_ByUserId_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_UpdateRole_ByUserId_ByRoleIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRole_ByUserId_ByRoleId_v3(input.userId, input.roleId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Role_ByUserId_ByRoleId_v3" /* Role_ByUserId_ByRoleId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetDeletionStatus_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDeletionStatus_ByUserId_v3(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.DeletionStatus_ByUserId_v3" /* DeletionStatus_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PatchDeletionStatus_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchDeletionStatus_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.DeletionStatus_ByUserId_v3" /* DeletionStatus_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetLoginsHistories_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLoginsHistories_ByUserId_v3(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.LoginsHistories_ByUserId_v3" /* LoginsHistories_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PatchTrustlyIdentity_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchTrustlyIdentity_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.TrustlyIdentity_ByUserId_v3" /* TrustlyIdentity_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetDistinctPlatforms_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDistinctPlatforms_ByUserId_v3(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.DistinctPlatforms_ByUserId_v3" /* DistinctPlatforms_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetPlatformsJustice_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsJustice_ByUserId_v3(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.PlatformsJustice_ByUserId_v3" /* PlatformsJustice_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_GetPlatformsDistinct_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsDistinct_ByUserId_v3(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.PlatformsDistinct_ByUserId_v3" /* PlatformsDistinct_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_UpdateHeadlesCodeVerify_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateHeadlesCodeVerify_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.HeadlesCodeVerify_ByUserId_v3" /* HeadlesCodeVerify_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeletePlatform_ByUserId_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePlatform_ByUserId_ByPlatformId_v3(input.userId, input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Platform_ByUserId_ByPlatformId_v3" /* Platform_ByUserId_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_PatchAgerestrictionCountry_ByCountryCodeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchAgerestrictionCountry_ByCountryCode_v3(input.countryCode, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.AgerestrictionCountry_ByCountryCode_v3" /* AgerestrictionCountry_ByCountryCode_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetPlatformsLinkHistories_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsLinkHistories_ByUserId_v3(input2.userId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.PlatformsLinkHistories_ByUserId_v3" /* PlatformsLinkHistories_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_DeleteAll_ByUserId_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAll_ByUserId_ByPlatformId_v3(input.userId, input.platformId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.All_ByUserId_ByPlatformId_v3" /* All_ByUserId_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeleteLink_ByUserId_ByPlatformIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteLink_ByUserId_ByPlatformId_v2(input.userId, input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Link_ByUserId_ByPlatformId_v2" /* Link_ByUserId_ByPlatformId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_PostLink_ByUserId_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postLink_ByUserId_ByPlatformId_v3(input.userId, input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Link_ByUserId_ByPlatformId_v3" /* Link_ByUserId_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetUser_ByPlatformId_ByPlatformUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUser_ByPlatformId_ByPlatformUserId_v3(input2.platformId, input2.platformUserId);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.User_ByPlatformId_ByPlatformUserId_v3" /* User_ByPlatformId_ByPlatformUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_DeletePermission_ByUserId_ByResource_ByActionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByUserId_ByResource_ByAction_v3(input.userId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.Permission_ByUserId_ByResource_ByAction_v3" /* Permission_ByUserId_ByResource_ByAction_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetMetadata_ByUserId_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMetadata_ByUserId_ByPlatformId_v3(input2.userId, input2.platformId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.Metadata_ByUserId_ByPlatformId_v3" /* Metadata_ByUserId_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_PostLinkStatu_ByUserId_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postLinkStatu_ByUserId_ByPlatformId_v3(input.userId, input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.LinkStatu_ByUserId_ByPlatformId_v3" /* LinkStatu_ByUserId_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_GetPlatformJustice_ByUserId_ByTargetNamespace_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformJustice_ByUserId_ByTargetNamespace_v3(input2.userId, input2.targetNamespace);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Iam.UsersAdmin.PlatformJustice_ByUserId_ByTargetNamespace_v3" /* PlatformJustice_ByUserId_ByTargetNamespace_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersAdminApi_CreatePlatformJustice_ByUserId_ByTargetNamespaceMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPlatformJustice_ByUserId_ByTargetNamespace_v3(input.userId, input.targetNamespace);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.PlatformJustice_ByUserId_ByTargetNamespace_v3" /* PlatformJustice_ByUserId_ByTargetNamespace_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeleteLinkHistory_ByUserId_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteLinkHistory_ByUserId_ByPlatformId_v3(input.userId, input.platformId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.LinkHistory_ByUserId_ByPlatformId_v3" /* LinkHistory_ByUserId_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersAdminApi_DeleteLinkRestriction_ByUserId_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteLinkRestriction_ByUserId_ByPlatformId_v3(input.userId, input.platformId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation14({
    mutationKey: ["Iam.UsersAdmin.LinkRestriction_ByUserId_ByPlatformId_v3" /* LinkRestriction_ByUserId_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/UsersV4Admin.query.ts
import { useMutation as useMutation15, useQuery as useQuery16 } from "@tanstack/react-query";
var Key_UsersV4Admin = /* @__PURE__ */ ((Key_UsersV4Admin2) => {
  Key_UsersV4Admin2["UserMe_v4"] = "Iam.UsersV4Admin.UserMe_v4";
  Key_UsersV4Admin2["UserInvite_v4"] = "Iam.UsersV4Admin.UserInvite_v4";
  Key_UsersV4Admin2["UserUserInvite_v4"] = "Iam.UsersV4Admin.UserUserInvite_v4";
  Key_UsersV4Admin2["InvitationHistories_v4"] = "Iam.UsersV4Admin.InvitationHistories_v4";
  Key_UsersV4Admin2["UsersMeMfaFactor_v4"] = "Iam.UsersV4Admin.UsersMeMfaFactor_v4";
  Key_UsersV4Admin2["UserMeMfaFactor_v4"] = "Iam.UsersV4Admin.UserMeMfaFactor_v4";
  Key_UsersV4Admin2["UsersMeMfaStatus_v4"] = "Iam.UsersV4Admin.UsersMeMfaStatus_v4";
  Key_UsersV4Admin2["UserMeMfaStatus_v4"] = "Iam.UsersV4Admin.UserMeMfaStatus_v4";
  Key_UsersV4Admin2["UsersMeMfaBackupCode_v4"] = "Iam.UsersV4Admin.UsersMeMfaBackupCode_v4";
  Key_UsersV4Admin2["UserMeMfaBackupCode_v4"] = "Iam.UsersV4Admin.UserMeMfaBackupCode_v4";
  Key_UsersV4Admin2["UserMeMfaEmailCode_v4"] = "Iam.UsersV4Admin.UserMeMfaEmailCode_v4";
  Key_UsersV4Admin2["UsersMeMfaBackupCodes_v4"] = "Iam.UsersV4Admin.UsersMeMfaBackupCodes_v4";
  Key_UsersV4Admin2["UserMeMfaBackupCode_admin_v4"] = "Iam.UsersV4Admin.UserMeMfaBackupCode_admin_v4";
  Key_UsersV4Admin2["UserMeMfaEmailEnable_v4"] = "Iam.UsersV4Admin.UserMeMfaEmailEnable_v4";
  Key_UsersV4Admin2["UserMeMfaEmailDisable_v4"] = "Iam.UsersV4Admin.UserMeMfaEmailDisable_v4";
  Key_UsersV4Admin2["User_v4"] = "Iam.UsersV4Admin.User_v4";
  Key_UsersV4Admin2["UserMeMfaChallengeVerify_v4"] = "Iam.UsersV4Admin.UserMeMfaChallengeVerify_v4";
  Key_UsersV4Admin2["UserMeMfaAuthenticatorKey_v4"] = "Iam.UsersV4Admin.UserMeMfaAuthenticatorKey_v4";
  Key_UsersV4Admin2["UserMeMfaBackupCodeEnable_v4"] = "Iam.UsersV4Admin.UserMeMfaBackupCodeEnable_v4";
  Key_UsersV4Admin2["UserMeMfaBackupCodeDisable_v4"] = "Iam.UsersV4Admin.UserMeMfaBackupCodeDisable_v4";
  Key_UsersV4Admin2["UserMeMfaBackupCodeEnable_admin_v4"] = "Iam.UsersV4Admin.UserMeMfaBackupCodeEnable_admin_v4";
  Key_UsersV4Admin2["UsersMeMfaBackupCodeDownload_v4"] = "Iam.UsersV4Admin.UsersMeMfaBackupCodeDownload_v4";
  Key_UsersV4Admin2["TestUser_v4"] = "Iam.UsersV4Admin.TestUser_v4";
  Key_UsersV4Admin2["UserMeMfaAuthenticatorEnable_v4"] = "Iam.UsersV4Admin.UserMeMfaAuthenticatorEnable_v4";
  Key_UsersV4Admin2["UserMeMfaAuthenticatorDisable_v4"] = "Iam.UsersV4Admin.UserMeMfaAuthenticatorDisable_v4";
  Key_UsersV4Admin2["User_ByUserId_v4"] = "Iam.UsersV4Admin.User_ByUserId_v4";
  Key_UsersV4Admin2["InvitationHistories_ByNS_v4"] = "Iam.UsersV4Admin.InvitationHistories_ByNS_v4";
  Key_UsersV4Admin2["UserBulkValidate_v4"] = "Iam.UsersV4Admin.UserBulkValidate_v4";
  Key_UsersV4Admin2["Email_ByUserId_v4"] = "Iam.UsersV4Admin.Email_ByUserId_v4";
  Key_UsersV4Admin2["Role_ByUserId_v4"] = "Iam.UsersV4Admin.Role_ByUserId_v4";
  Key_UsersV4Admin2["Roles_ByUserId_v4"] = "Iam.UsersV4Admin.Roles_ByUserId_v4";
  Key_UsersV4Admin2["Role_ByUserId_ByNS_v4"] = "Iam.UsersV4Admin.Role_ByUserId_ByNS_v4";
  Key_UsersV4Admin2["UserBulkAccountType_v4"] = "Iam.UsersV4Admin.UserBulkAccountType_v4";
  Key_UsersV4Admin2["InvitationHistoriesUsers_v4"] = "Iam.UsersV4Admin.InvitationHistoriesUsers_v4";
  Key_UsersV4Admin2["MfaStatus_ByUserId_v4"] = "Iam.UsersV4Admin.MfaStatus_ByUserId_v4";
  Key_UsersV4Admin2["MfaDisable_ByUserId_v4"] = "Iam.UsersV4Admin.MfaDisable_ByUserId_v4";
  return Key_UsersV4Admin2;
})(Key_UsersV4Admin || {});
var useUsersV4AdminApi_PatchUserMeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUserMe_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMe_v4" /* UserMe_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserInviteMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserInvite_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserInvite_v4" /* UserInvite_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserUserInviteMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserUserInvite_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserUserInvite_v4" /* UserUserInvite_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetInvitationHistories_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getInvitationHistories_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.InvitationHistories_v4" /* InvitationHistories_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_GetUsersMeMfaFactor_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeMfaFactor_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.UsersMeMfaFactor_v4" /* UsersMeMfaFactor_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_PostUserMeMfaFactorMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postUserMeMfaFactor_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaFactor_v4" /* UserMeMfaFactor_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetUsersMeMfaStatus_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeMfaStatus_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.UsersMeMfaStatus_v4" /* UsersMeMfaStatus_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaStatusMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeMfaStatus_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaStatus_v4" /* UserMeMfaStatus_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetUsersMeMfaBackupCode_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeMfaBackupCode_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.UsersMeMfaBackupCode_v4" /* UsersMeMfaBackupCode_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaBackupCodeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCode_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaBackupCode_v4" /* UserMeMfaBackupCode_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_PostUserMeMfaEmailCodeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postUserMeMfaEmailCode_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaEmailCode_v4" /* UserMeMfaEmailCode_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetUsersMeMfaBackupCodes_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeMfaBackupCodes_v4(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.UsersMeMfaBackupCodes_v4" /* UsersMeMfaBackupCodes_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaBackupCode_adminMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCode_admin_v4(input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaBackupCode_admin_v4" /* UserMeMfaBackupCode_admin_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_PostUserMeMfaEmailEnableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postUserMeMfaEmailEnable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaEmailEnable_v4" /* UserMeMfaEmailEnable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaEmailDisableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaEmailDisable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaEmailDisable_v4" /* UserMeMfaEmailDisable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.User_v4" /* User_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_PostUserMeMfaChallengeVerifyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postUserMeMfaChallengeVerify_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaChallengeVerify_v4" /* UserMeMfaChallengeVerify_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaAuthenticatorKeyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaAuthenticatorKey_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaAuthenticatorKey_v4" /* UserMeMfaAuthenticatorKey_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaBackupCodeEnableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCodeEnable_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaBackupCodeEnable_v4" /* UserMeMfaBackupCodeEnable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_DeleteUserMeMfaBackupCodeDisableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteUserMeMfaBackupCodeDisable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaBackupCodeDisable_v4" /* UserMeMfaBackupCodeDisable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_CreateUserMeMfaBackupCodeEnable_adminMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCodeEnable_admin_v4(input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaBackupCodeEnable_admin_v4" /* UserMeMfaBackupCodeEnable_admin_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetUsersMeMfaBackupCodeDownload_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeMfaBackupCodeDownload_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.UsersMeMfaBackupCodeDownload_v4" /* UsersMeMfaBackupCodeDownload_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_CreateTestUserMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createTestUser_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.TestUser_v4" /* TestUser_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_PostUserMeMfaAuthenticatorEnableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postUserMeMfaAuthenticatorEnable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaAuthenticatorEnable_v4" /* UserMeMfaAuthenticatorEnable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_DeleteUserMeMfaAuthenticatorDisableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteUserMeMfaAuthenticatorDisable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserMeMfaAuthenticatorDisable_v4" /* UserMeMfaAuthenticatorDisable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_UpdateUser_ByUserIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUser_ByUserId_v4(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.User_ByUserId_v4" /* User_ByUserId_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetInvitationHistories_ByNS_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getInvitationHistories_ByNS_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.InvitationHistories_ByNS_v4" /* InvitationHistories_ByNS_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_FetchUserBulkValidate_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchUserBulkValidate_v4(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.UserBulkValidate_v4" /* UserBulkValidate_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_UpdateEmail_ByUserIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateEmail_ByUserId_v4(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.Email_ByUserId_v4" /* Email_ByUserId_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_DeleteRole_ByUserIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRole_ByUserId_v4(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.Role_ByUserId_v4" /* Role_ByUserId_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetRoles_ByUserId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRoles_ByUserId_v4(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.Roles_ByUserId_v4" /* Roles_ByUserId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_UpdateRole_ByUserIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRole_ByUserId_v4(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.Role_ByUserId_v4" /* Role_ByUserId_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_UpdateRole_ByUserId_ByNSMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateRole_ByUserId_ByNS_v4(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.Role_ByUserId_ByNS_v4" /* Role_ByUserId_ByNS_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_PatchUserBulkAccountTypeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchUserBulkAccountType_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.UserBulkAccountType_v4" /* UserBulkAccountType_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4AdminApi_GetInvitationHistoriesUsers_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getInvitationHistoriesUsers_v4(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.InvitationHistoriesUsers_v4" /* InvitationHistoriesUsers_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_GetMfaStatus_ByUserId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4AdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMfaStatus_ByUserId_v4(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Iam.UsersV4Admin.MfaStatus_ByUserId_v4" /* MfaStatus_ByUserId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4AdminApi_DeleteMfaDisable_ByUserIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4AdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteMfaDisable_ByUserId_v4(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation15({
    mutationKey: ["Iam.UsersV4Admin.MfaDisable_ByUserId_v4" /* MfaDisable_ByUserId_v4 */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Bans.query.ts
import { useQuery as useQuery17 } from "@tanstack/react-query";
var Key_Bans = /* @__PURE__ */ ((Key_Bans2) => {
  Key_Bans2["Bans"] = "Iam.Bans.Bans";
  Key_Bans2["BansReasons"] = "Iam.Bans.BansReasons";
  return Key_Bans2;
})(Key_Bans || {});
var useBansApi_GetBans = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BansApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans();
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Iam.Bans.Bans" /* Bans */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useBansApi_GetBansReasons = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await BansApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBansReasons();
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Iam.Bans.BansReasons" /* BansReasons */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Clients.query.ts
import { useMutation as useMutation16, useQuery as useQuery18 } from "@tanstack/react-query";
var Key_Clients = /* @__PURE__ */ ((Key_Clients2) => {
  Key_Clients2["Clients"] = "Iam.Clients.Clients";
  Key_Clients2["Client"] = "Iam.Clients.Client";
  Key_Clients2["Client_ByClientId"] = "Iam.Clients.Client_ByClientId";
  Key_Clients2["Secret_ByClientId"] = "Iam.Clients.Secret_ByClientId";
  Key_Clients2["Clients_ByNS"] = "Iam.Clients.Clients_ByNS";
  Key_Clients2["Client_ByNS"] = "Iam.Clients.Client_ByNS";
  Key_Clients2["Clientpermission_ByClientId"] = "Iam.Clients.Clientpermission_ByClientId";
  Key_Clients2["Client_ByClientId_ByNS"] = "Iam.Clients.Client_ByClientId_ByNS";
  Key_Clients2["Clientpermission_ByClientId_ByResource_ByAction"] = "Iam.Clients.Clientpermission_ByClientId_ByResource_ByAction";
  return Key_Clients2;
})(Key_Clients || {});
var useClientsApi_GetClients = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getClients();
    callback && callback(response);
    return response.data;
  };
  return useQuery18({
    queryKey: ["Iam.Clients.Clients" /* Clients */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsApi_CreateClientMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createClient(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Client" /* Client */],
    mutationFn,
    ...options
  });
};
var useClientsApi_DeleteClient_ByClientIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteClient_ByClientId(
      input.clientId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Client_ByClientId" /* Client_ByClientId */],
    mutationFn,
    ...options
  });
};
var useClientsApi_GetClient_ByClientId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getClient_ByClientId(
      input2.clientId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery18({
    queryKey: ["Iam.Clients.Client_ByClientId" /* Client_ByClientId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsApi_UpdateClient_ByClientIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateClient_ByClientId(
      input.clientId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Client_ByClientId" /* Client_ByClientId */],
    mutationFn,
    ...options
  });
};
var useClientsApi_UpdateSecret_ByClientIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateSecret_ByClientId(
      input.clientId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Secret_ByClientId" /* Secret_ByClientId */],
    mutationFn,
    ...options
  });
};
var useClientsApi_GetClients_ByNS = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ClientsApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getClients_ByNS();
    callback && callback(response);
    return response.data;
  };
  return useQuery18({
    queryKey: ["Iam.Clients.Clients_ByNS" /* Clients_ByNS */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useClientsApi_CreateClient_ByNSMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createClient_ByNS(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Client_ByNS" /* Client_ByNS */],
    mutationFn,
    ...options
  });
};
var useClientsApi_UpdateClientpermission_ByClientIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateClientpermission_ByClientId(input.clientId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Clientpermission_ByClientId" /* Clientpermission_ByClientId */],
    mutationFn,
    ...options
  });
};
var useClientsApi_DeleteClient_ByClientId_ByNSMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteClient_ByClientId_ByNS(
      input.clientId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Client_ByClientId_ByNS" /* Client_ByClientId_ByNS */],
    mutationFn,
    ...options
  });
};
var useClientsApi_DeleteClientpermission_ByClientId_ByResource_ByActionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteClientpermission_ByClientId_ByResource_ByAction(input.clientId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Clientpermission_ByClientId_ByResource_ByAction" /* Clientpermission_ByClientId_ByResource_ByAction */],
    mutationFn,
    ...options
  });
};
var useClientsApi_UpdateClientpermission_ByClientId_ByResource_ByActionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ClientsApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateClientpermission_ByClientId_ByResource_ByAction(input.clientId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation16({
    mutationKey: ["Iam.Clients.Clientpermission_ByClientId_ByResource_ByAction" /* Clientpermission_ByClientId_ByResource_ByAction */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Config.query.ts
import { useQuery as useQuery19 } from "@tanstack/react-query";
var Key_Config = /* @__PURE__ */ ((Key_Config2) => {
  Key_Config2["Config_ByConfigKey_v3"] = "Iam.Config.Config_ByConfigKey_v3";
  return Key_Config2;
})(Key_Config || {});
var useConfigApi_GetConfig_ByConfigKey_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfig_ByConfigKey_v3(
      input2.configKey
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery19({
    queryKey: ["Iam.Config.Config_ByConfigKey_v3" /* Config_ByConfigKey_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Country.query.ts
import { useQuery as useQuery20 } from "@tanstack/react-query";
var Key_Country = /* @__PURE__ */ ((Key_Country2) => {
  Key_Country2["Countries_v3"] = "Iam.Country.Countries_v3";
  return Key_Country2;
})(Key_Country || {});
var useCountryApi_GetCountries_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await CountryApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getCountries_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery20({
    queryKey: ["Iam.Country.Countries_v3" /* Countries_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/InputValidations.query.ts
import { useQuery as useQuery21 } from "@tanstack/react-query";
var Key_InputValidations = /* @__PURE__ */ ((Key_InputValidations2) => {
  Key_InputValidations2["InputValidations_v3"] = "Iam.InputValidations.InputValidations_v3";
  Key_InputValidations2["InputValidation_ByField_v3"] = "Iam.InputValidations.InputValidation_ByField_v3";
  return Key_InputValidations2;
})(Key_InputValidations || {});
var useInputValidationsApi_GetInputValidations_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await InputValidationsApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getInputValidations_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Iam.InputValidations.InputValidations_v3" /* InputValidations_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useInputValidationsApi_GetInputValidation_ByField_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await InputValidationsApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getInputValidation_ByField_v3(input2.field);
    callback && callback(response);
    return response.data;
  };
  return useQuery21({
    queryKey: ["Iam.InputValidations.InputValidation_ByField_v3" /* InputValidation_ByField_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/OAuth.query.ts
import { useMutation as useMutation17, useQuery as useQuery22 } from "@tanstack/react-query";
var Key_OAuth = /* @__PURE__ */ ((Key_OAuth2) => {
  Key_OAuth2["OauthJwks"] = "Iam.OAuth.OauthJwks";
  Key_OAuth2["OauthToken"] = "Iam.OAuth.OauthToken";
  Key_OAuth2["OauthVerify"] = "Iam.OAuth.OauthVerify";
  Key_OAuth2["OauthAuthorize"] = "Iam.OAuth.OauthAuthorize";
  Key_OAuth2["OauthRevokeUser"] = "Iam.OAuth.OauthRevokeUser";
  Key_OAuth2["OauthRevokeToken"] = "Iam.OAuth.OauthRevokeToken";
  Key_OAuth2["OauthRevocationlist"] = "Iam.OAuth.OauthRevocationlist";
  Key_OAuth2["RevokeOauth_ByUserId"] = "Iam.OAuth.RevokeOauth_ByUserId";
  Key_OAuth2["TokenOauth_ByPlatformId"] = "Iam.OAuth.TokenOauth_ByPlatformId";
  return Key_OAuth2;
})(Key_OAuth || {});
var useOAuthApi_GetOauthJwks = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuthApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOauthJwks();
    callback && callback(response);
    return response.data;
  };
  return useQuery22({
    queryKey: ["Iam.OAuth.OauthJwks" /* OauthJwks */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuthApi_PostOauthTokenMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthToken(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.OauthToken" /* OauthToken */],
    mutationFn,
    ...options
  });
};
var useOAuthApi_PostOauthVerifyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthVerify(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.OauthVerify" /* OauthVerify */],
    mutationFn,
    ...options
  });
};
var useOAuthApi_PostOauthAuthorizeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthAuthorize(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.OauthAuthorize" /* OauthAuthorize */],
    mutationFn,
    ...options
  });
};
var useOAuthApi_PostOauthRevokeUserMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthRevokeUser(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.OauthRevokeUser" /* OauthRevokeUser */],
    mutationFn,
    ...options
  });
};
var useOAuthApi_PostOauthRevokeTokenMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthRevokeToken(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.OauthRevokeToken" /* OauthRevokeToken */],
    mutationFn,
    ...options
  });
};
var useOAuthApi_GetOauthRevocationlist = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuthApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOauthRevocationlist();
    callback && callback(response);
    return response.data;
  };
  return useQuery22({
    queryKey: ["Iam.OAuth.OauthRevocationlist" /* OauthRevocationlist */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuthApi_UpdateRevokeOauth_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRevokeOauth_ByUserId(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.RevokeOauth_ByUserId" /* RevokeOauth_ByUserId */],
    mutationFn,
    ...options
  });
};
var useOAuthApi_PostTokenOauth_ByPlatformIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuthApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postTokenOauth_ByPlatformId(
      input.platformId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation17({
    mutationKey: ["Iam.OAuth.TokenOauth_ByPlatformId" /* TokenOauth_ByPlatformId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/OAuth20.query.ts
import { useMutation as useMutation18, useQuery as useQuery23 } from "@tanstack/react-query";
var Key_OAuth20 = /* @__PURE__ */ ((Key_OAuth202) => {
  Key_OAuth202["OauthJwks_v3"] = "Iam.OAuth20.OauthJwks_v3";
  Key_OAuth202["OauthToken_v3"] = "Iam.OAuth20.OauthToken_v3";
  Key_OAuth202["OauthRevoke_v3"] = "Iam.OAuth20.OauthRevoke_v3";
  Key_OAuth202["OauthVerify_v3"] = "Iam.OAuth20.OauthVerify_v3";
  Key_OAuth202["OauthMfaCode_v3"] = "Iam.OAuth20.OauthMfaCode_v3";
  Key_OAuth202["OauthAuthorize_v3"] = "Iam.OAuth20.OauthAuthorize_v3";
  Key_OAuth202["OauthIntrospect_v3"] = "Iam.OAuth20.OauthIntrospect_v3";
  Key_OAuth202["OauthMfaVerify_v3"] = "Iam.OAuth20.OauthMfaVerify_v3";
  Key_OAuth202["OauthRevocationlist_v3"] = "Iam.OAuth20.OauthRevocationlist_v3";
  Key_OAuth202["OauthMfaFactorChange_v3"] = "Iam.OAuth20.OauthMfaFactorChange_v3";
  Key_OAuth202["OauthSimultaneousLogin_v3"] = "Iam.OAuth20.OauthSimultaneousLogin_v3";
  Key_OAuth202["TokenOauth_ByPlatformId_v3"] = "Iam.OAuth20.TokenOauth_ByPlatformId_v3";
  Key_OAuth202["AuthorizeOauth_ByPlatformId_v3"] = "Iam.OAuth20.AuthorizeOauth_ByPlatformId_v3";
  Key_OAuth202["PlatformTokenOauth_ByUserId_ByPlatformId_v3"] = "Iam.OAuth20.PlatformTokenOauth_ByUserId_ByPlatformId_v3";
  return Key_OAuth202;
})(Key_OAuth20 || {});
var useOAuth20Api_GetOauthJwks_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOauthJwks_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery23({
    queryKey: ["Iam.OAuth20.OauthJwks_v3" /* OauthJwks_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuth20Api_PostOauthTokenMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthToken_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthToken_v3" /* OauthToken_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_PostOauthRevokeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthRevoke_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthRevoke_v3" /* OauthRevoke_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_PostOauthVerifyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthVerify_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthVerify_v3" /* OauthVerify_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_PostOauthMfaCodeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthMfaCode_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthMfaCode_v3" /* OauthMfaCode_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_GetOauthAuthorize_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOauthAuthorize_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery23({
    queryKey: ["Iam.OAuth20.OauthAuthorize_v3" /* OauthAuthorize_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuth20Api_PostOauthIntrospectMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthIntrospect_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthIntrospect_v3" /* OauthIntrospect_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_PostOauthMfaVerifyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthMfaVerify_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthMfaVerify_v3" /* OauthMfaVerify_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_GetOauthRevocationlist_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getOauthRevocationlist_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery23({
    queryKey: ["Iam.OAuth20.OauthRevocationlist_v3" /* OauthRevocationlist_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuth20Api_PostOauthMfaFactorChangeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthMfaFactorChange_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthMfaFactorChange_v3" /* OauthMfaFactorChange_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_PostOauthSimultaneousLoginMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthSimultaneousLogin_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.OauthSimultaneousLogin_v3" /* OauthSimultaneousLogin_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_PostTokenOauth_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postTokenOauth_ByPlatformId_v3(
      input.platformId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation18({
    mutationKey: ["Iam.OAuth20.TokenOauth_ByPlatformId_v3" /* TokenOauth_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20Api_GetAuthorizeOauth_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20Api(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAuthorizeOauth_ByPlatformId_v3(input2.platformId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery23({
    queryKey: ["Iam.OAuth20.AuthorizeOauth_ByPlatformId_v3" /* AuthorizeOauth_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuth20Api_GetPlatformTokenOauth_ByUserId_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20Api(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformTokenOauth_ByUserId_ByPlatformId_v3(input2.userId, input2.platformId);
    callback && callback(response);
    return response.data;
  };
  return useQuery23({
    queryKey: ["Iam.OAuth20.PlatformTokenOauth_ByUserId_ByPlatformId_v3" /* PlatformTokenOauth_ByUserId_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/OAuth20Extension.query.ts
import { useMutation as useMutation19, useQuery as useQuery24 } from "@tanstack/react-query";
var Key_OAuth20Extension = /* @__PURE__ */ ((Key_OAuth20Extension2) => {
  Key_OAuth20Extension2["Logout_v3"] = "Iam.OAuth20Extension.Logout_v3";
  Key_OAuth20Extension2["Authenticate_v3"] = "Iam.OAuth20Extension.Authenticate_v3";
  Key_OAuth20Extension2["HeadlesToken_v3"] = "Iam.OAuth20Extension.HeadlesToken_v3";
  Key_OAuth20Extension2["TokenExchange_v3"] = "Iam.OAuth20Extension.TokenExchange_v3";
  Key_OAuth20Extension2["LocationCountry_v3"] = "Iam.OAuth20Extension.LocationCountry_v3";
  Key_OAuth20Extension2["LinkCodeRequest_v3"] = "Iam.OAuth20Extension.LinkCodeRequest_v3";
  Key_OAuth20Extension2["LinkCodeValidate_v3"] = "Iam.OAuth20Extension.LinkCodeValidate_v3";
  Key_OAuth20Extension2["LinkTokenExchange_v3"] = "Iam.OAuth20Extension.LinkTokenExchange_v3";
  Key_OAuth20Extension2["AuthenticateWithLink_v3"] = "Iam.OAuth20Extension.AuthenticateWithLink_v3";
  Key_OAuth20Extension2["TokenRequest_v3"] = "Iam.OAuth20Extension.TokenRequest_v3";
  Key_OAuth20Extension2["Authenticate_ByPlatformId_v3"] = "Iam.OAuth20Extension.Authenticate_ByPlatformId_v3";
  Key_OAuth20Extension2["TokenVerify_ByPlatformId_v3"] = "Iam.OAuth20Extension.TokenVerify_ByPlatformId_v3";
  return Key_OAuth20Extension2;
})(Key_OAuth20Extension || {});
var useOAuth20ExtensionApi_CreateLogoutMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createLogout_v3();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.Logout_v3" /* Logout_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostAuthenticateMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postAuthenticate_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.Authenticate_v3" /* Authenticate_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostHeadlesTokenMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postHeadlesToken_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.HeadlesToken_v3" /* HeadlesToken_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostTokenExchangeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postTokenExchange_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.TokenExchange_v3" /* TokenExchange_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_GetLocationCountry_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20ExtensionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getLocationCountry_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery24({
    queryKey: ["Iam.OAuth20Extension.LocationCountry_v3" /* LocationCountry_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuth20ExtensionApi_PostLinkCodeRequestMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postLinkCodeRequest_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.LinkCodeRequest_v3" /* LinkCodeRequest_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostLinkCodeValidateMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postLinkCodeValidate_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.LinkCodeValidate_v3" /* LinkCodeValidate_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostLinkTokenExchangeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postLinkTokenExchange_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.LinkTokenExchange_v3" /* LinkTokenExchange_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostAuthenticateWithLinkMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postAuthenticateWithLink_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.AuthenticateWithLink_v3" /* AuthenticateWithLink_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_PostTokenRequestMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postTokenRequest_v3(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.TokenRequest_v3" /* TokenRequest_v3 */],
    mutationFn,
    ...options
  });
};
var useOAuth20ExtensionApi_GetAuthenticate_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await OAuth20ExtensionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAuthenticate_ByPlatformId_v3(input2.platformId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery24({
    queryKey: ["Iam.OAuth20Extension.Authenticate_ByPlatformId_v3" /* Authenticate_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useOAuth20ExtensionApi_PostTokenVerify_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20ExtensionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postTokenVerify_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation19({
    mutationKey: ["Iam.OAuth20Extension.TokenVerify_ByPlatformId_v3" /* TokenVerify_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/OAuth20V4.query.ts
import { useMutation as useMutation20 } from "@tanstack/react-query";
var Key_OAuth20V4 = /* @__PURE__ */ ((Key_OAuth20V42) => {
  Key_OAuth20V42["OauthToken_v4"] = "Iam.OAuth20V4.OauthToken_v4";
  Key_OAuth20V42["OauthMfaVerify_v4"] = "Iam.OAuth20V4.OauthMfaVerify_v4";
  Key_OAuth20V42["OauthHeadlesToken_v4"] = "Iam.OAuth20V4.OauthHeadlesToken_v4";
  Key_OAuth20V42["OauthTokenExchange_v4"] = "Iam.OAuth20V4.OauthTokenExchange_v4";
  Key_OAuth20V42["OauthSimultaneousLogin_v4"] = "Iam.OAuth20V4.OauthSimultaneousLogin_v4";
  Key_OAuth20V42["OauthAuthenticateWithLink_v4"] = "Iam.OAuth20V4.OauthAuthenticateWithLink_v4";
  Key_OAuth20V42["TokenOauth_ByPlatformId_v4"] = "Iam.OAuth20V4.TokenOauth_ByPlatformId_v4";
  return Key_OAuth20V42;
})(Key_OAuth20V4 || {});
var useOAuth20V4Api_PostOauthTokenMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthToken_v4(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.OauthToken_v4" /* OauthToken_v4 */],
    mutationFn,
    ...options
  });
};
var useOAuth20V4Api_PostOauthMfaVerifyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthMfaVerify_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.OauthMfaVerify_v4" /* OauthMfaVerify_v4 */],
    mutationFn,
    ...options
  });
};
var useOAuth20V4Api_PostOauthHeadlesTokenMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthHeadlesToken_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.OauthHeadlesToken_v4" /* OauthHeadlesToken_v4 */],
    mutationFn,
    ...options
  });
};
var useOAuth20V4Api_PostOauthTokenExchangeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postOauthTokenExchange_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.OauthTokenExchange_v4" /* OauthTokenExchange_v4 */],
    mutationFn,
    ...options
  });
};
var useOAuth20V4Api_PostOauthSimultaneousLoginMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postOauthSimultaneousLogin_v4(input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.OauthSimultaneousLogin_v4" /* OauthSimultaneousLogin_v4 */],
    mutationFn,
    ...options
  });
};
var useOAuth20V4Api_PostOauthAuthenticateWithLinkMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postOauthAuthenticateWithLink_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.OauthAuthenticateWithLink_v4" /* OauthAuthenticateWithLink_v4 */],
    mutationFn,
    ...options
  });
};
var useOAuth20V4Api_PostTokenOauth_ByPlatformIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await OAuth20V4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postTokenOauth_ByPlatformId_v4(input.platformId, input.data, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation20({
    mutationKey: ["Iam.OAuth20V4.TokenOauth_ByPlatformId_v4" /* TokenOauth_ByPlatformId_v4 */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/ProfileUpdateStrategy.query.ts
import { useQuery as useQuery25 } from "@tanstack/react-query";
var Key_ProfileUpdateStrategy = /* @__PURE__ */ ((Key_ProfileUpdateStrategy2) => {
  Key_ProfileUpdateStrategy2["ProfileUpdateStrategies_v3"] = "Iam.ProfileUpdateStrategy.ProfileUpdateStrategies_v3";
  return Key_ProfileUpdateStrategy2;
})(Key_ProfileUpdateStrategy || {});
var useProfileUpdateStrategyApi_GetProfileUpdateStrategies_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ProfileUpdateStrategyApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getProfileUpdateStrategies_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery25({
    queryKey: ["Iam.ProfileUpdateStrategy.ProfileUpdateStrategies_v3" /* ProfileUpdateStrategies_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Roles.query.ts
import { useMutation as useMutation21, useQuery as useQuery26 } from "@tanstack/react-query";
var Key_Roles = /* @__PURE__ */ ((Key_Roles2) => {
  Key_Roles2["Roles"] = "Iam.Roles.Roles";
  Key_Roles2["Role"] = "Iam.Roles.Role";
  Key_Roles2["Role_ByRoleId"] = "Iam.Roles.Role_ByRoleId";
  Key_Roles2["Roles_v3"] = "Iam.Roles.Roles_v3";
  Key_Roles2["Admin_ByRoleId"] = "Iam.Roles.Admin_ByRoleId";
  Key_Roles2["Member_ByRoleId"] = "Iam.Roles.Member_ByRoleId";
  Key_Roles2["Members_ByRoleId"] = "Iam.Roles.Members_ByRoleId";
  Key_Roles2["Manager_ByRoleId"] = "Iam.Roles.Manager_ByRoleId";
  Key_Roles2["Managers_ByRoleId"] = "Iam.Roles.Managers_ByRoleId";
  Key_Roles2["Role_ByRoleId_v3"] = "Iam.Roles.Role_ByRoleId_v3";
  Key_Roles2["Permission_ByRoleId"] = "Iam.Roles.Permission_ByRoleId";
  Key_Roles2["Permission_ByRoleId_ByResource_ByAction"] = "Iam.Roles.Permission_ByRoleId_ByResource_ByAction";
  return Key_Roles2;
})(Key_Roles || {});
var useRolesApi_GetRoles = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRoles(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Roles" /* Roles */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_CreateRoleMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createRole(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Role" /* Role */],
    mutationFn,
    ...options
  });
};
var useRolesApi_DeleteRole_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRole_ByRoleId(input.roleId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Role_ByRoleId" /* Role_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_GetRole_ByRoleId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRole_ByRoleId(input2.roleId);
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Role_ByRoleId" /* Role_ByRoleId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_UpdateRole_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRole_ByRoleId(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Role_ByRoleId" /* Role_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_GetRoles_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRoles_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Roles_v3" /* Roles_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_DeleteAdmin_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteAdmin_ByRoleId(
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Admin_ByRoleId" /* Admin_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_GetAdmin_ByRoleId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAdmin_ByRoleId(input2.roleId);
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Admin_ByRoleId" /* Admin_ByRoleId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_UpdateAdmin_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateAdmin_ByRoleId(
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Admin_ByRoleId" /* Admin_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_DeleteMember_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteMember_ByRoleId(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Member_ByRoleId" /* Member_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_GetMembers_ByRoleId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMembers_ByRoleId(input2.roleId);
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Members_ByRoleId" /* Members_ByRoleId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_UpdateMember_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateMember_ByRoleId(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Member_ByRoleId" /* Member_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_DeleteManager_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteManager_ByRoleId(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Manager_ByRoleId" /* Manager_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_GetManagers_ByRoleId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getManagers_ByRoleId(
      input2.roleId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Managers_ByRoleId" /* Managers_ByRoleId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_UpdateManager_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateManager_ByRoleId(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Manager_ByRoleId" /* Manager_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_GetRole_ByRoleId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RolesApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRole_ByRoleId_v3(input2.roleId);
    callback && callback(response);
    return response.data;
  };
  return useQuery26({
    queryKey: ["Iam.Roles.Role_ByRoleId_v3" /* Role_ByRoleId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRolesApi_UpdatePermission_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePermission_ByRoleId(
      input.roleId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Permission_ByRoleId" /* Permission_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useRolesApi_DeletePermission_ByRoleId_ByResource_ByActionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByRoleId_ByResource_ByAction(input.roleId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Permission_ByRoleId_ByResource_ByAction" /* Permission_ByRoleId_ByResource_ByAction */],
    mutationFn,
    ...options
  });
};
var useRolesApi_UpdatePermission_ByRoleId_ByResource_ByActionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await RolesApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByRoleId_ByResource_ByAction(input.roleId, input.resource, input.action, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation21({
    mutationKey: ["Iam.Roles.Permission_ByRoleId_ByResource_ByAction" /* Permission_ByRoleId_ByResource_ByAction */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Sso.query.ts
import { useMutation as useMutation22, useQuery as useQuery27 } from "@tanstack/react-query";
var Key_Sso = /* @__PURE__ */ ((Key_Sso2) => {
  Key_Sso2["Sso_ByPlatformId_v3"] = "Iam.Sso.Sso_ByPlatformId_v3";
  Key_Sso2["Logout_ByPlatformId_v3"] = "Iam.Sso.Logout_ByPlatformId_v3";
  return Key_Sso2;
})(Key_Sso || {});
var useSsoApi_GetSso_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SsoApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSso_ByPlatformId_v3(
      input2.platformId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery27({
    queryKey: ["Iam.Sso.Sso_ByPlatformId_v3" /* Sso_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSsoApi_CreateLogout_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SsoApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createLogout_ByPlatformId_v3(
      input.platformId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation22({
    mutationKey: ["Iam.Sso.Logout_ByPlatformId_v3" /* Logout_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/SsoSaml20.query.ts
import { useMutation as useMutation23 } from "@tanstack/react-query";
var Key_SsoSaml20 = /* @__PURE__ */ ((Key_SsoSaml202) => {
  Key_SsoSaml202["AuthenticateSamlSso_ByPlatformId_v3"] = "Iam.SsoSaml20.AuthenticateSamlSso_ByPlatformId_v3";
  return Key_SsoSaml202;
})(Key_SsoSaml20 || {});
var useSsoSaml20Api_PostAuthenticateSamlSso_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SsoSaml20Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postAuthenticateSamlSso_ByPlatformId_v3(input.platformId, input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation23({
    mutationKey: ["Iam.SsoSaml20.AuthenticateSamlSso_ByPlatformId_v3" /* AuthenticateSamlSso_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/ThirdPartyCredential.query.ts
import { useQuery as useQuery28 } from "@tanstack/react-query";
var Key_ThirdPartyCredential = /* @__PURE__ */ ((Key_ThirdPartyCredential2) => {
  Key_ThirdPartyCredential2["PlatformsClientsOidc_v3"] = "Iam.ThirdPartyCredential.PlatformsClientsOidc_v3";
  Key_ThirdPartyCredential2["PlatformsClientsActive_v3"] = "Iam.ThirdPartyCredential.PlatformsClientsActive_v3";
  return Key_ThirdPartyCredential2;
})(Key_ThirdPartyCredential || {});
var useThirdPartyCredentialApi_GetPlatformsClientsOidc_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyCredentialApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsClientsOidc_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Iam.ThirdPartyCredential.PlatformsClientsOidc_v3" /* PlatformsClientsOidc_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useThirdPartyCredentialApi_GetPlatformsClientsActive_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ThirdPartyCredentialApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformsClientsActive_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery28({
    queryKey: ["Iam.ThirdPartyCredential.PlatformsClientsActive_v3" /* PlatformsClientsActive_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/Users.query.ts
import { useMutation as useMutation24, useQuery as useQuery29 } from "@tanstack/react-query";
var Key_Users = /* @__PURE__ */ ((Key_Users2) => {
  Key_Users2["UsersMe_v3"] = "Iam.Users.UsersMe_v3";
  Key_Users2["User"] = "Iam.Users.User";
  Key_Users2["UsersMeProfileStatus_v3"] = "Iam.Users.UsersMeProfileStatus_v3";
  Key_Users2["UsersAdmin"] = "Iam.Users.UsersAdmin";
  Key_Users2["UsersVerifyLinkVerify_v3"] = "Iam.Users.UsersVerifyLinkVerify_v3";
  Key_Users2["UsersSearch"] = "Iam.Users.UsersSearch";
  Key_Users2["User_ByUserId"] = "Iam.Users.User_ByUserId";
  Key_Users2["UsersByLoginId"] = "Iam.Users.UsersByLoginId";
  Key_Users2["User_v2"] = "Iam.Users.User_v2";
  Key_Users2["Users_v3"] = "Iam.Users.Users_v3";
  Key_Users2["User_v3"] = "Iam.Users.User_v3";
  Key_Users2["UserMeVerifyLinkRequest_v3"] = "Iam.Users.UserMeVerifyLinkRequest_v3";
  Key_Users2["Ban_ByUserId"] = "Iam.Users.Ban_ByUserId";
  Key_Users2["UserMe_v3"] = "Iam.Users.UserMe_v3";
  Key_Users2["UsersMeHeadlessLinkConflict_v3"] = "Iam.Users.UsersMeHeadlessLinkConflict_v3";
  Key_Users2["Bans_ByUserId"] = "Iam.Users.Bans_ByUserId";
  Key_Users2["UserResetPassword"] = "Iam.Users.UserResetPassword";
  Key_Users2["Role_ByUserId"] = "Iam.Users.Role_ByUserId";
  Key_Users2["UserForgotPassword"] = "Iam.Users.UserForgotPassword";
  Key_Users2["UsersListByLoginIds"] = "Iam.Users.UsersListByLoginIds";
  Key_Users2["Enable_ByUserId"] = "Iam.Users.Enable_ByUserId";
  Key_Users2["UserReset_v3"] = "Iam.Users.UserReset_v3";
  Key_Users2["Disable_ByUserId"] = "Iam.Users.Disable_ByUserId";
  Key_Users2["UsersByPlatformUserId"] = "Iam.Users.UsersByPlatformUserId";
  Key_Users2["UserForgot_v3"] = "Iam.Users.UserForgot_v3";
  Key_Users2["Password_ByUserId"] = "Iam.Users.Password_ByUserId";
  Key_Users2["Crosslink_ByUserId"] = "Iam.Users.Crosslink_ByUserId";
  Key_Users2["Platforms_ByUserId"] = "Iam.Users.Platforms_ByUserId";
  Key_Users2["Publisher_ByUserId"] = "Iam.Users.Publisher_ByUserId";
  Key_Users2["User_ByUserId_v2"] = "Iam.Users.User_ByUserId_v2";
  Key_Users2["User_ByUserId_v3"] = "Iam.Users.User_ByUserId_v3";
  Key_Users2["UserMeHeadlesLinkWithProgression_v3"] = "Iam.Users.UserMeHeadlesLinkWithProgression_v3";
  Key_Users2["UserPlatform_v3"] = "Iam.Users.UserPlatform_v3";
  Key_Users2["Information_ByUserId"] = "Iam.Users.Information_ByUserId";
  Key_Users2["Permission_ByUserId"] = "Iam.Users.Permission_ByUserId";
  Key_Users2["UserBulkBasic_v3"] = "Iam.Users.UserBulkBasic_v3";
  Key_Users2["Verification_ByUserId"] = "Iam.Users.Verification_ByUserId";
  Key_Users2["UserCodeVerify_v3"] = "Iam.Users.UserCodeVerify_v3";
  Key_Users2["UserMePassword_v3"] = "Iam.Users.UserMePassword_v3";
  Key_Users2["UsersAvailability_v3"] = "Iam.Users.UsersAvailability_v3";
  Key_Users2["UserCodeRequest_v3"] = "Iam.Users.UserCodeRequest_v3";
  Key_Users2["Role_ByUserId_ByRoleId"] = "Iam.Users.Role_ByUserId_ByRoleId";
  Key_Users2["Bans_ByUserId_v2"] = "Iam.Users.Bans_ByUserId_v2";
  Key_Users2["UserResetPassword_v2"] = "Iam.Users.UserResetPassword_v2";
  Key_Users2["Bans_ByUserId_v3"] = "Iam.Users.Bans_ByUserId_v3";
  Key_Users2["UserForgotPassword_v2"] = "Iam.Users.UserForgotPassword_v2";
  Key_Users2["UserMeCodeVerify_v3"] = "Iam.Users.UserMeCodeVerify_v3";
  Key_Users2["LoginsHistories_ByUserId"] = "Iam.Users.LoginsHistories_ByUserId";
  Key_Users2["Verificationcode_ByUserId"] = "Iam.Users.Verificationcode_ByUserId";
  Key_Users2["UserMeCodeRequest_v3"] = "Iam.Users.UserMeCodeRequest_v3";
  Key_Users2["UserInputValidation_v3"] = "Iam.Users.UserInputValidation_v3";
  Key_Users2["Password_ByUserId_v2"] = "Iam.Users.Password_ByUserId_v2";
  Key_Users2["Validate_ByUserId_v3"] = "Iam.Users.Validate_ByUserId_v3";
  Key_Users2["Enable_ByUserId_ByBanId"] = "Iam.Users.Enable_ByUserId_ByBanId";
  Key_Users2["Platforms_ByUserId_v3"] = "Iam.Users.Platforms_ByUserId_v3";
  Key_Users2["Publisher_ByUserId_v3"] = "Iam.Users.Publisher_ByUserId_v3";
  Key_Users2["UserMeHeadlesVerify_v3"] = "Iam.Users.UserMeHeadlesVerify_v3";
  Key_Users2["Disable_ByUserId_ByBanId"] = "Iam.Users.Disable_ByUserId_ByBanId";
  Key_Users2["Information_ByUserId_v3"] = "Iam.Users.Information_ByUserId_v3";
  Key_Users2["UpgradeHeadlessAccount_ByUserId"] = "Iam.Users.UpgradeHeadlessAccount_ByUserId";
  Key_Users2["UserInvite_ByInvitationId_v3"] = "Iam.Users.UserInvite_ByInvitationId_v3";
  Key_Users2["User_ByPlatformId_v3"] = "Iam.Users.User_ByPlatformId_v3";
  Key_Users2["PlatformLink_ByUserId_v3"] = "Iam.Users.PlatformLink_ByUserId_v3";
  Key_Users2["UserMeHeadlesCodeVerify_v3"] = "Iam.Users.UserMeHeadlesCodeVerify_v3";
  Key_Users2["LoginsHistories_ByUserId_v3"] = "Iam.Users.LoginsHistories_ByUserId_v3";
  Key_Users2["UserMePlatform_ByPlatformId_v3"] = "Iam.Users.UserMePlatform_ByPlatformId_v3";
  Key_Users2["Link_ByUserId_ByPlatformId"] = "Iam.Users.Link_ByUserId_ByPlatformId";
  Key_Users2["PlatformsJustice_ByUserId_v2"] = "Iam.Users.PlatformsJustice_ByUserId_v2";
  Key_Users2["DistinctPlatforms_ByUserId_v3"] = "Iam.Users.DistinctPlatforms_ByUserId_v3";
  Key_Users2["PlatformsJustice_ByUserId_v3"] = "Iam.Users.PlatformsJustice_ByUserId_v3";
  Key_Users2["AsyncStatus_ByRequestId_v3"] = "Iam.Users.AsyncStatus_ByRequestId_v3";
  Key_Users2["Unlink_ByUserId_ByPlatformId"] = "Iam.Users.Unlink_ByUserId_ByPlatformId";
  Key_Users2["AllMeUser_ByPlatformId_v3"] = "Iam.Users.AllMeUser_ByPlatformId_v3";
  Key_Users2["Permission_ByUserId_ByResource_ByAction"] = "Iam.Users.Permission_ByUserId_ByResource_ByAction";
  Key_Users2["ForceMeUser_ByPlatformId_v3"] = "Iam.Users.ForceMeUser_ByPlatformId_v3";
  Key_Users2["Agerestrictions_ByCountryCode_v2"] = "Iam.Users.Agerestrictions_ByCountryCode_v2";
  Key_Users2["AgerestrictionCountry_ByCountryCode_v3"] = "Iam.Users.AgerestrictionCountry_ByCountryCode_v3";
  Key_Users2["PlatformJustice_ByUserId_ByTargetNamespace"] = "Iam.Users.PlatformJustice_ByUserId_ByTargetNamespace";
  Key_Users2["WebLinkMeUsers_ByPlatformId_v3"] = "Iam.Users.WebLinkMeUsers_ByPlatformId_v3";
  Key_Users2["Link_ByUserId_ByPlatformId_v2"] = "Iam.Users.Link_ByUserId_ByPlatformId_v2";
  Key_Users2["PlatformLinkWithProgression_ByUserId_v3"] = "Iam.Users.PlatformLinkWithProgression_ByUserId_v3";
  Key_Users2["UserMePlatformJustice_ByTargetNamespace_v3"] = "Iam.Users.UserMePlatformJustice_ByTargetNamespace_v3";
  Key_Users2["User_ByPlatformId_ByPlatformUserId_v3"] = "Iam.Users.User_ByPlatformId_ByPlatformUserId_v3";
  Key_Users2["UpgradeHeadlessAccountWithVerificationCode_ByUserId"] = "Iam.Users.UpgradeHeadlessAccountWithVerificationCode_ByUserId";
  Key_Users2["WebLinkProcesMeUser_ByPlatformId_v3"] = "Iam.Users.WebLinkProcesMeUser_ByPlatformId_v3";
  Key_Users2["WebLinkEstablishMeUsers_ByPlatformId_v3"] = "Iam.Users.WebLinkEstablishMeUsers_ByPlatformId_v3";
  return Key_Users2;
})(Key_Users || {});
var useUsersApi_GetUsersMe_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMe_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersMe_v3" /* UsersMe_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User" /* User */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsersMeProfileStatus_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeProfileStatus_v3();
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersMeProfileStatus_v3" /* UsersMeProfileStatus_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetUsersAdmin = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersAdmin(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersAdmin" /* UsersAdmin */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetUsersVerifyLinkVerify_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersVerifyLinkVerify_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersVerifyLinkVerify_v3" /* UsersVerifyLinkVerify_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetUsersSearch = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersSearch(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersSearch" /* UsersSearch */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_DeleteUser_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUser_ByUserId(input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User_ByUserId" /* User_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUser_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUser_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.User_ByUserId" /* User_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdateUser_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUser_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User_ByUserId" /* User_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsersByLoginId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersByLoginId(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersByLoginId" /* UsersByLoginId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser_v2(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User_v2" /* User_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsers_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsers_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Users_v3" /* Users_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User_v3" /* User_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserMeVerifyLinkRequestMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeVerifyLinkRequest_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMeVerifyLinkRequest_v3" /* UserMeVerifyLinkRequest_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateBan_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createBan_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Ban_ByUserId" /* Ban_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PatchUserMeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUserMe_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMe_v3" /* UserMe_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateUserMeMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserMe_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMe_v3" /* UserMe_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsersMeHeadlessLinkConflict_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeHeadlessLinkConflict_v3(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersMeHeadlessLinkConflict_v3" /* UsersMeHeadlessLinkConflict_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetBans_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_ByUserId(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Bans_ByUserId" /* Bans_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserResetPasswordMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserResetPassword(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserResetPassword" /* UserResetPassword */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateRole_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRole_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Role_ByUserId" /* Role_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserForgotPasswordMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserForgotPassword(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserForgotPassword" /* UserForgotPassword */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsersListByLoginIds = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersListByLoginIds(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersListByLoginIds" /* UsersListByLoginIds */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdateEnable_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateEnable_ByUserId(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Enable_ByUserId" /* Enable_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserResetMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserReset_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserReset_v3" /* UserReset_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateDisable_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDisable_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Disable_ByUserId" /* Disable_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsersByPlatformUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersByPlatformUserId(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersByPlatformUserId" /* UsersByPlatformUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserForgotMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserForgot_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserForgot_v3" /* UserForgot_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdatePassword_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePassword_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Password_ByUserId" /* Password_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostCrosslink_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postCrosslink_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Crosslink_ByUserId" /* Crosslink_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetPlatforms_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlatforms_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Platforms_ByUserId" /* Platforms_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetPublisher_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPublisher_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Publisher_ByUserId" /* Publisher_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetUser_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUser_ByUserId_v2(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.User_ByUserId_v2" /* User_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_PatchUser_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUser_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User_ByUserId_v2" /* User_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUser_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUser_ByUserId_v3(input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.User_ByUserId_v3" /* User_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserMeHeadlesLinkWithProgressionMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeHeadlesLinkWithProgression_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMeHeadlesLinkWithProgression_v3" /* UserMeHeadlesLinkWithProgression_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserPlatformMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserPlatform_v3(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserPlatform_v3" /* UserPlatform_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_DeleteInformation_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteInformation_ByUserId(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Information_ByUserId" /* Information_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetInformation_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getInformation_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Information_ByUserId" /* Information_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdatePermission_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePermission_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Permission_ByUserId" /* Permission_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserBulkBasicMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserBulkBasic_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserBulkBasic_v3" /* UserBulkBasic_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateVerification_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateVerification_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Verification_ByUserId" /* Verification_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserCodeVerifyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserCodeVerify_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserCodeVerify_v3" /* UserCodeVerify_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateUserMePasswordMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserMePassword_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMePassword_v3" /* UserMePassword_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUsersAvailability_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersAvailability_v3(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UsersAvailability_v3" /* UsersAvailability_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserCodeRequestMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserCodeRequest_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserCodeRequest_v3" /* UserCodeRequest_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_DeleteRole_ByUserId_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteRole_ByUserId_ByRoleId(
      input.userId,
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Role_ByUserId_ByRoleId" /* Role_ByUserId_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateRole_ByUserId_ByRoleIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateRole_ByUserId_ByRoleId(
      input.userId,
      input.roleId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Role_ByUserId_ByRoleId" /* Role_ByUserId_ByRoleId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetBans_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_ByUserId_v2(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Bans_ByUserId_v2" /* Bans_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserResetPasswordMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserResetPassword_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserResetPassword_v2" /* UserResetPassword_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetBans_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getBans_ByUserId_v3(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Bans_ByUserId_v3" /* Bans_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserForgotPasswordMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserForgotPassword_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserForgotPassword_v2" /* UserForgotPassword_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserMeCodeVerifyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeCodeVerify_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMeCodeVerify_v3" /* UserMeCodeVerify_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetLoginsHistories_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getLoginsHistories_ByUserId(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.LoginsHistories_ByUserId" /* LoginsHistories_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdateVerificationcode_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateVerificationcode_ByUserId(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Verificationcode_ByUserId" /* Verificationcode_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserMeCodeRequestMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeCodeRequest_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMeCodeRequest_v3" /* UserMeCodeRequest_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserInputValidationMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserInputValidation_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserInputValidation_v3" /* UserInputValidation_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdatePassword_ByUserIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updatePassword_ByUserId_v2(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Password_ByUserId_v2" /* Password_ByUserId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostValidate_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postValidate_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Validate_ByUserId_v3" /* Validate_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateEnable_ByUserId_ByBanIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateEnable_ByUserId_ByBanId(
      input.userId,
      input.banId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Enable_ByUserId_ByBanId" /* Enable_ByUserId_ByBanId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetPlatforms_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlatforms_ByUserId_v3(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Platforms_ByUserId_v3" /* Platforms_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetPublisher_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPublisher_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Publisher_ByUserId_v3" /* Publisher_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserMeHeadlesVerifyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeHeadlesVerify_v3(
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMeHeadlesVerify_v3" /* UserMeHeadlesVerify_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdateDisable_ByUserId_ByBanIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateDisable_ByUserId_ByBanId(
      input.userId,
      input.banId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Disable_ByUserId_ByBanId" /* Disable_ByUserId_ByBanId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetInformation_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getInformation_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Information_ByUserId_v3" /* Information_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdateUpgradeHeadlessAccount_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateUpgradeHeadlessAccount_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UpgradeHeadlessAccount_ByUserId" /* UpgradeHeadlessAccount_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUserInvite_ByInvitationId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUserInvite_ByInvitationId_v3(
      input2.invitationId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.UserInvite_ByInvitationId_v3" /* UserInvite_ByInvitationId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_CreateUserInvite_ByInvitationIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserInvite_ByInvitationId_v3(input.invitationId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserInvite_ByInvitationId_v3" /* UserInvite_ByInvitationId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUser_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser_ByPlatformId_v3(
      input.platformId,
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.User_ByPlatformId_v3" /* User_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreatePlatformLink_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPlatformLink_ByUserId_v3(
      input.userId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.PlatformLink_ByUserId_v3" /* PlatformLink_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserMeHeadlesCodeVerifyMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeHeadlesCodeVerify_v3(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMeHeadlesCodeVerify_v3" /* UserMeHeadlesCodeVerify_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetLoginsHistories_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getLoginsHistories_ByUserId_v3(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.LoginsHistories_ByUserId_v3" /* LoginsHistories_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_DeleteUserMePlatform_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteUserMePlatform_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMePlatform_ByPlatformId_v3" /* UserMePlatform_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostUserMePlatform_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postUserMePlatform_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMePlatform_ByPlatformId_v3" /* UserMePlatform_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostLink_ByUserId_ByPlatformIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postLink_ByUserId_ByPlatformId(
      input.userId,
      input.platformId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Link_ByUserId_ByPlatformId" /* Link_ByUserId_ByPlatformId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetPlatformsJustice_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlatformsJustice_ByUserId_v2(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.PlatformsJustice_ByUserId_v2" /* PlatformsJustice_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetDistinctPlatforms_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getDistinctPlatforms_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.DistinctPlatforms_ByUserId_v3" /* DistinctPlatforms_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetPlatformsJustice_ByUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getPlatformsJustice_ByUserId_v3(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.PlatformsJustice_ByUserId_v3" /* PlatformsJustice_ByUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetAsyncStatus_ByRequestId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAsyncStatus_ByRequestId_v3(
      input2.requestId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.AsyncStatus_ByRequestId_v3" /* AsyncStatus_ByRequestId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_PostUnlink_ByUserId_ByPlatformIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postUnlink_ByUserId_ByPlatformId(
      input.userId,
      input.platformId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Unlink_ByUserId_ByPlatformId" /* Unlink_ByUserId_ByPlatformId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_DeleteAllMeUser_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteAllMeUser_ByPlatformId_v3(
      input.platformId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.AllMeUser_ByPlatformId_v3" /* AllMeUser_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_DeletePermission_ByUserId_ByResource_ByActionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePermission_ByUserId_ByResource_ByAction(input.userId, input.resource, input.action);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Permission_ByUserId_ByResource_ByAction" /* Permission_ByUserId_ByResource_ByAction */],
    mutationFn,
    ...options
  });
};
var useUsersApi_UpdatePermission_ByUserId_ByResource_ByActionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePermission_ByUserId_ByResource_ByAction(input.userId, input.resource, input.action, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Permission_ByUserId_ByResource_ByAction" /* Permission_ByUserId_ByResource_ByAction */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostForceMeUser_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postForceMeUser_ByPlatformId_v3(
      input.platformId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.ForceMeUser_ByPlatformId_v3" /* ForceMeUser_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetAgerestrictions_ByCountryCode_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgerestrictions_ByCountryCode_v2(input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.Agerestrictions_ByCountryCode_v2" /* Agerestrictions_ByCountryCode_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetAgerestrictionCountry_ByCountryCode_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAgerestrictionCountry_ByCountryCode_v3(input2.countryCode);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.AgerestrictionCountry_ByCountryCode_v3" /* AgerestrictionCountry_ByCountryCode_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_GetPlatformJustice_ByUserId_ByTargetNamespace = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformJustice_ByUserId_ByTargetNamespace(input2.userId, input2.targetNamespace);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.PlatformJustice_ByUserId_ByTargetNamespace" /* PlatformJustice_ByUserId_ByTargetNamespace */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdatePlatformJustice_ByUserId_ByTargetNamespaceMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePlatformJustice_ByUserId_ByTargetNamespace(input.userId, input.targetNamespace);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.PlatformJustice_ByUserId_ByTargetNamespace" /* PlatformJustice_ByUserId_ByTargetNamespace */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetWebLinkMeUsers_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getWebLinkMeUsers_ByPlatformId_v3(input2.platformId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.WebLinkMeUsers_ByPlatformId_v3" /* WebLinkMeUsers_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_DeleteLink_ByUserId_ByPlatformIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteLink_ByUserId_ByPlatformId_v2(input.userId, input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Link_ByUserId_ByPlatformId_v2" /* Link_ByUserId_ByPlatformId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostLink_ByUserId_ByPlatformIdMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postLink_ByUserId_ByPlatformId_v2(input.userId, input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.Link_ByUserId_ByPlatformId_v2" /* Link_ByUserId_ByPlatformId_v2 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreatePlatformLinkWithProgression_ByUserIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createPlatformLinkWithProgression_ByUserId_v3(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.PlatformLinkWithProgression_ByUserId_v3" /* PlatformLinkWithProgression_ByUserId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_CreateUserMePlatformJustice_ByTargetNamespaceMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMePlatformJustice_ByTargetNamespace_v3(input.targetNamespace);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UserMePlatformJustice_ByTargetNamespace_v3" /* UserMePlatformJustice_ByTargetNamespace_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetUser_ByPlatformId_ByPlatformUserId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUser_ByPlatformId_ByPlatformUserId_v3(input2.platformId, input2.platformUserId);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.User_ByPlatformId_ByPlatformUserId_v3" /* User_ByPlatformId_ByPlatformUserId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersApi_UpdateUpgradeHeadlessAccountWithVerificationCode_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateUpgradeHeadlessAccountWithVerificationCode_ByUserId(input.userId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.UpgradeHeadlessAccountWithVerificationCode_ByUserId" /* UpgradeHeadlessAccountWithVerificationCode_ByUserId */],
    mutationFn,
    ...options
  });
};
var useUsersApi_PostWebLinkProcesMeUser_ByPlatformIdMutation_v3 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postWebLinkProcesMeUser_ByPlatformId_v3(input.platformId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation24({
    mutationKey: ["Iam.Users.WebLinkProcesMeUser_ByPlatformId_v3" /* WebLinkProcesMeUser_ByPlatformId_v3 */],
    mutationFn,
    ...options
  });
};
var useUsersApi_GetWebLinkEstablishMeUsers_ByPlatformId_v3 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getWebLinkEstablishMeUsers_ByPlatformId_v3(input2.platformId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery29({
    queryKey: ["Iam.Users.WebLinkEstablishMeUsers_ByPlatformId_v3" /* WebLinkEstablishMeUsers_ByPlatformId_v3 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/UsersV4.query.ts
import { useMutation as useMutation25, useQuery as useQuery30 } from "@tanstack/react-query";
var Key_UsersV4 = /* @__PURE__ */ ((Key_UsersV42) => {
  Key_UsersV42["UserInvite_v4"] = "Iam.UsersV4.UserInvite_v4";
  Key_UsersV42["User_v4"] = "Iam.UsersV4.User_v4";
  Key_UsersV42["UserMe_v4"] = "Iam.UsersV4.UserMe_v4";
  Key_UsersV42["TestUser_v4"] = "Iam.UsersV4.TestUser_v4";
  Key_UsersV42["User_ByUserId_v4"] = "Iam.UsersV4.User_ByUserId_v4";
  Key_UsersV42["UserMeEmail_v4"] = "Iam.UsersV4.UserMeEmail_v4";
  Key_UsersV42["UserMeMfaDevice_v4"] = "Iam.UsersV4.UserMeMfaDevice_v4";
  Key_UsersV42["UsersMeMfaFactor_v4"] = "Iam.UsersV4.UsersMeMfaFactor_v4";
  Key_UsersV42["UserMeMfaFactor_v4"] = "Iam.UsersV4.UserMeMfaFactor_v4";
  Key_UsersV42["UsersMeMfaStatus_v4"] = "Iam.UsersV4.UsersMeMfaStatus_v4";
  Key_UsersV42["UserMeMfaStatus_v4"] = "Iam.UsersV4.UserMeMfaStatus_v4";
  Key_UsersV42["UsersMeMfaBackupCode_v4"] = "Iam.UsersV4.UsersMeMfaBackupCode_v4";
  Key_UsersV42["UserMeMfaBackupCode_v4"] = "Iam.UsersV4.UserMeMfaBackupCode_v4";
  Key_UsersV42["UserMeMfaEmailCode_v4"] = "Iam.UsersV4.UserMeMfaEmailCode_v4";
  Key_UsersV42["UserMeHeadlesVerify_v4"] = "Iam.UsersV4.UserMeHeadlesVerify_v4";
  Key_UsersV42["UsersMeMfaBackupCodes_v4"] = "Iam.UsersV4.UsersMeMfaBackupCodes_v4";
  Key_UsersV42["UserMeMfaBackupCode_ByNS_v4"] = "Iam.UsersV4.UserMeMfaBackupCode_ByNS_v4";
  Key_UsersV42["UserMeMfaEmailEnable_v4"] = "Iam.UsersV4.UserMeMfaEmailEnable_v4";
  Key_UsersV42["UserMeMfaEmailDisable_v4"] = "Iam.UsersV4.UserMeMfaEmailDisable_v4";
  Key_UsersV42["UserInvite_ByInvitationId_v4"] = "Iam.UsersV4.UserInvite_ByInvitationId_v4";
  Key_UsersV42["User_ByPlatformId_v4"] = "Iam.UsersV4.User_ByPlatformId_v4";
  Key_UsersV42["UserMeHeadlesCodeVerify_v4"] = "Iam.UsersV4.UserMeHeadlesCodeVerify_v4";
  Key_UsersV42["UserMeMfaChallengeVerify_v4"] = "Iam.UsersV4.UserMeMfaChallengeVerify_v4";
  Key_UsersV42["UserMeMfaAuthenticatorKey_v4"] = "Iam.UsersV4.UserMeMfaAuthenticatorKey_v4";
  Key_UsersV42["UserMeMfaBackupCodeEnable_v4"] = "Iam.UsersV4.UserMeMfaBackupCodeEnable_v4";
  Key_UsersV42["UserMeMfaBackupCodeDisable_v4"] = "Iam.UsersV4.UserMeMfaBackupCodeDisable_v4";
  Key_UsersV42["UserMeMfaBackupCodeEnable_ByNS_v4"] = "Iam.UsersV4.UserMeMfaBackupCodeEnable_ByNS_v4";
  Key_UsersV42["UsersMeMfaBackupCodeDownload_v4"] = "Iam.UsersV4.UsersMeMfaBackupCodeDownload_v4";
  Key_UsersV42["UserMeMfaAuthenticatorEnable_v4"] = "Iam.UsersV4.UserMeMfaAuthenticatorEnable_v4";
  Key_UsersV42["UserMeMfaAuthenticatorDisable_v4"] = "Iam.UsersV4.UserMeMfaAuthenticatorDisable_v4";
  return Key_UsersV42;
})(Key_UsersV4 || {});
var useUsersV4Api_CreateUserInviteMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserInvite_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserInvite_v4" /* UserInvite_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.User_v4" /* User_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_PatchUserMeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchUserMe_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMe_v4" /* UserMe_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateTestUserMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createTestUser_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.TestUser_v4" /* TestUser_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_GetUser_ByUserId_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUser_ByUserId_v4(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Iam.UsersV4.User_ByUserId_v4" /* User_ByUserId_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4Api_UpdateUserMeEmailMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateUserMeEmail_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeEmail_v4" /* UserMeEmail_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_DeleteUserMeMfaDeviceMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUserMeMfaDevice_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaDevice_v4" /* UserMeMfaDevice_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_GetUsersMeMfaFactor_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeMfaFactor_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Iam.UsersV4.UsersMeMfaFactor_v4" /* UsersMeMfaFactor_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4Api_PostUserMeMfaFactorMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postUserMeMfaFactor_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaFactor_v4" /* UserMeMfaFactor_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_GetUsersMeMfaStatus_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeMfaStatus_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Iam.UsersV4.UsersMeMfaStatus_v4" /* UsersMeMfaStatus_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaStatusMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeMfaStatus_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaStatus_v4" /* UserMeMfaStatus_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_GetUsersMeMfaBackupCode_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeMfaBackupCode_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Iam.UsersV4.UsersMeMfaBackupCode_v4" /* UsersMeMfaBackupCode_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaBackupCodeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeMfaBackupCode_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaBackupCode_v4" /* UserMeMfaBackupCode_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_PostUserMeMfaEmailCodeMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postUserMeMfaEmailCode_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaEmailCode_v4" /* UserMeMfaEmailCode_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMeHeadlesVerifyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeHeadlesVerify_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeHeadlesVerify_v4" /* UserMeHeadlesVerify_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_GetUsersMeMfaBackupCodes_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4Api(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeMfaBackupCodes_v4(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Iam.UsersV4.UsersMeMfaBackupCodes_v4" /* UsersMeMfaBackupCodes_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaBackupCode_ByNSMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCode_ByNS_v4(input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaBackupCode_ByNS_v4" /* UserMeMfaBackupCode_ByNS_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_PostUserMeMfaEmailEnableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).postUserMeMfaEmailEnable_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaEmailEnable_v4" /* UserMeMfaEmailEnable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaEmailDisableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeMfaEmailDisable_v4(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaEmailDisable_v4" /* UserMeMfaEmailDisable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserInvite_ByInvitationIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserInvite_ByInvitationId_v4(input.invitationId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserInvite_ByInvitationId_v4" /* UserInvite_ByInvitationId_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUser_ByPlatformIdMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUser_ByPlatformId_v4(
      input.platformId,
      input.data,
      input.queryParams
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.User_ByPlatformId_v4" /* User_ByPlatformId_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMeHeadlesCodeVerifyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeHeadlesCodeVerify_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeHeadlesCodeVerify_v4" /* UserMeHeadlesCodeVerify_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_PostUserMeMfaChallengeVerifyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postUserMeMfaChallengeVerify_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaChallengeVerify_v4" /* UserMeMfaChallengeVerify_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaAuthenticatorKeyMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaAuthenticatorKey_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaAuthenticatorKey_v4" /* UserMeMfaAuthenticatorKey_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaBackupCodeEnableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCodeEnable_v4();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaBackupCodeEnable_v4" /* UserMeMfaBackupCodeEnable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_DeleteUserMeMfaBackupCodeDisableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteUserMeMfaBackupCodeDisable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaBackupCodeDisable_v4" /* UserMeMfaBackupCodeDisable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_CreateUserMeMfaBackupCodeEnable_ByNSMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createUserMeMfaBackupCodeEnable_ByNS_v4(input.queryParams);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaBackupCodeEnable_ByNS_v4" /* UserMeMfaBackupCodeEnable_ByNS_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_GetUsersMeMfaBackupCodeDownload_v4 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await UsersV4Api(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeMfaBackupCodeDownload_v4();
    callback && callback(response);
    return response.data;
  };
  return useQuery30({
    queryKey: ["Iam.UsersV4.UsersMeMfaBackupCodeDownload_v4" /* UsersMeMfaBackupCodeDownload_v4 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useUsersV4Api_PostUserMeMfaAuthenticatorEnableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).postUserMeMfaAuthenticatorEnable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaAuthenticatorEnable_v4" /* UserMeMfaAuthenticatorEnable_v4 */],
    mutationFn,
    ...options
  });
};
var useUsersV4Api_DeleteUserMeMfaAuthenticatorDisableMutation_v4 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await UsersV4Api(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteUserMeMfaAuthenticatorDisable_v4(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation25({
    mutationKey: ["Iam.UsersV4.UserMeMfaAuthenticatorDisable_v4" /* UserMeMfaAuthenticatorDisable_v4 */],
    mutationFn,
    ...options
  });
};
export {
  Key_Bans,
  Key_BansAdmin,
  Key_Clients,
  Key_ClientsAdmin,
  Key_ClientsConfigV3Admin,
  Key_Config,
  Key_ConfigAdmin,
  Key_Country,
  Key_CountryAdmin,
  Key_DevicesV4Admin,
  Key_InputValidations,
  Key_InputValidationsAdmin,
  Key_LoginAllowlistAdmin,
  Key_OAuth,
  Key_OAuth20,
  Key_OAuth20Admin,
  Key_OAuth20Extension,
  Key_OAuth20V4,
  Key_OverrideRoleConfigV3Admin,
  Key_ProfileUpdateStrategy,
  Key_ProfileUpdateStrategyAdmin,
  Key_Roles,
  Key_RolesAdmin,
  Key_Sso,
  Key_SsoCredentialAdmin,
  Key_SsoSaml20,
  Key_ThirdPartyCredential,
  Key_ThirdPartyCredentialAdmin,
  Key_Users,
  Key_UsersAdmin,
  Key_UsersV4,
  Key_UsersV4Admin,
  useBansAdminApi_CreateBanUserMutation_v3,
  useBansAdminApi_GetBansReasons_v3,
  useBansAdminApi_GetBansUsers_v3,
  useBansAdminApi_GetBans_v3,
  useBansAdminApi_GetBantypes_v3,
  useBansAdminApi_PatchBanUserDisabledMutation_v3,
  useBansApi_GetBans,
  useBansApi_GetBansReasons,
  useClientsAdminApi_CreateClientMutation_v3,
  useClientsAdminApi_DeleteClient_ByClientIdMutation_v3,
  useClientsAdminApi_DeletePermission_ByClientId_ByResource_ByActionMutation_v3,
  useClientsAdminApi_GetClient_ByClientId_v3,
  useClientsAdminApi_GetClients_v3,
  useClientsAdminApi_PatchClient_ByClientIdMutation_v3,
  useClientsAdminApi_UpdateClientMutation_v3,
  useClientsAdminApi_UpdatePermission_ByClientIdMutation_v3,
  useClientsAdminApi_UpdatePermission_ByClientId_ByNSMutation_v3,
  useClientsAdminApi_UpdateSecret_ByClientIdMutation_v3,
  useClientsApi_CreateClientMutation,
  useClientsApi_CreateClient_ByNSMutation,
  useClientsApi_DeleteClient_ByClientIdMutation,
  useClientsApi_DeleteClient_ByClientId_ByNSMutation,
  useClientsApi_DeleteClientpermission_ByClientId_ByResource_ByActionMutation,
  useClientsApi_GetClient_ByClientId,
  useClientsApi_GetClients,
  useClientsApi_GetClients_ByNS,
  useClientsApi_UpdateClient_ByClientIdMutation,
  useClientsApi_UpdateClientpermission_ByClientIdMutation,
  useClientsApi_UpdateClientpermission_ByClientId_ByResource_ByActionMutation,
  useClientsApi_UpdateSecret_ByClientIdMutation,
  useClientsConfigV3AdminApi_DeleteClientConfigPermissionMutation_v3,
  useClientsConfigV3AdminApi_GetClientConfigPermissions_v3,
  useClientsConfigV3AdminApi_GetClientConfigTemplates_v3,
  useClientsConfigV3AdminApi_UpdateClientConfigPermissionMutation_v3,
  useConfigAdminApi_GetConfig_ByConfigKey_v3,
  useConfigApi_GetConfig_ByConfigKey_v3,
  useCountryAdminApi_GetCountriesBlacklist_v3,
  useCountryAdminApi_GetCountries_v3,
  useCountryAdminApi_UpdateCountryBlacklistMutation_v3,
  useCountryApi_GetCountries_v3,
  useDevicesV4AdminApi_CreateDeviceBanMutation_v4,
  useDevicesV4AdminApi_GetBans_ByDeviceId_v4,
  useDevicesV4AdminApi_GetDecrypt_ByDeviceId_v4,
  useDevicesV4AdminApi_GetDeviceBan_ByBanId_v4,
  useDevicesV4AdminApi_GetDevicesBanned_v4,
  useDevicesV4AdminApi_GetDevicesBans_v4,
  useDevicesV4AdminApi_GetDevicesReport_v4,
  useDevicesV4AdminApi_GetDevicesTypes_v4,
  useDevicesV4AdminApi_GetDevices_v4,
  useDevicesV4AdminApi_GetUsers_ByDeviceId_v4,
  useDevicesV4AdminApi_UpdateDeviceBan_ByBanIdMutation_v4,
  useDevicesV4AdminApi_UpdateUnban_ByDeviceIdMutation_v4,
  useInputValidationsAdminApi_DeleteInputValidation_ByFieldMutation_v3,
  useInputValidationsAdminApi_GetInputValidations_v3,
  useInputValidationsAdminApi_UpdateInputValidationMutation_v3,
  useInputValidationsApi_GetInputValidation_ByField_v3,
  useInputValidationsApi_GetInputValidations_v3,
  useLoginAllowlistAdminApi_GetLoginAllowlist_v3,
  useLoginAllowlistAdminApi_UpdateLoginAllowlistMutation_v3,
  useOAuth20AdminApi_GetPlatformTokenOauth_ByUserId_ByPlatformId_v3,
  useOAuth20AdminApi_UpdateRevokeOauth_ByUserIdMutation_v3,
  useOAuth20Api_GetAuthorizeOauth_ByPlatformId_v3,
  useOAuth20Api_GetOauthAuthorize_v3,
  useOAuth20Api_GetOauthJwks_v3,
  useOAuth20Api_GetOauthRevocationlist_v3,
  useOAuth20Api_GetPlatformTokenOauth_ByUserId_ByPlatformId_v3,
  useOAuth20Api_PostOauthIntrospectMutation_v3,
  useOAuth20Api_PostOauthMfaCodeMutation_v3,
  useOAuth20Api_PostOauthMfaFactorChangeMutation_v3,
  useOAuth20Api_PostOauthMfaVerifyMutation_v3,
  useOAuth20Api_PostOauthRevokeMutation_v3,
  useOAuth20Api_PostOauthSimultaneousLoginMutation_v3,
  useOAuth20Api_PostOauthTokenMutation_v3,
  useOAuth20Api_PostOauthVerifyMutation_v3,
  useOAuth20Api_PostTokenOauth_ByPlatformIdMutation_v3,
  useOAuth20ExtensionApi_CreateLogoutMutation_v3,
  useOAuth20ExtensionApi_GetAuthenticate_ByPlatformId_v3,
  useOAuth20ExtensionApi_GetLocationCountry_v3,
  useOAuth20ExtensionApi_PostAuthenticateMutation_v3,
  useOAuth20ExtensionApi_PostAuthenticateWithLinkMutation_v3,
  useOAuth20ExtensionApi_PostHeadlesTokenMutation_v3,
  useOAuth20ExtensionApi_PostLinkCodeRequestMutation_v3,
  useOAuth20ExtensionApi_PostLinkCodeValidateMutation_v3,
  useOAuth20ExtensionApi_PostLinkTokenExchangeMutation_v3,
  useOAuth20ExtensionApi_PostTokenExchangeMutation_v3,
  useOAuth20ExtensionApi_PostTokenRequestMutation_v3,
  useOAuth20ExtensionApi_PostTokenVerify_ByPlatformIdMutation_v3,
  useOAuth20V4Api_PostOauthAuthenticateWithLinkMutation_v4,
  useOAuth20V4Api_PostOauthHeadlesTokenMutation_v4,
  useOAuth20V4Api_PostOauthMfaVerifyMutation_v4,
  useOAuth20V4Api_PostOauthSimultaneousLoginMutation_v4,
  useOAuth20V4Api_PostOauthTokenExchangeMutation_v4,
  useOAuth20V4Api_PostOauthTokenMutation_v4,
  useOAuth20V4Api_PostTokenOauth_ByPlatformIdMutation_v4,
  useOAuthApi_GetOauthJwks,
  useOAuthApi_GetOauthRevocationlist,
  useOAuthApi_PostOauthAuthorizeMutation,
  useOAuthApi_PostOauthRevokeTokenMutation,
  useOAuthApi_PostOauthRevokeUserMutation,
  useOAuthApi_PostOauthTokenMutation,
  useOAuthApi_PostOauthVerifyMutation,
  useOAuthApi_PostTokenOauth_ByPlatformIdMutation,
  useOAuthApi_UpdateRevokeOauth_ByUserIdMutation,
  useOverrideRoleConfigV3AdminApi_GetPermissions_ByRoleId_v3,
  useOverrideRoleConfigV3AdminApi_GetRoleoverrideSource_v3,
  useOverrideRoleConfigV3AdminApi_GetRoleoverride_v3,
  useOverrideRoleConfigV3AdminApi_PatchRoleoverrideMutation_v3,
  useOverrideRoleConfigV3AdminApi_PatchRoleoverrideStatusMutation_v3,
  useProfileUpdateStrategyAdminApi_GetProfileUpdateStrategies_v3,
  useProfileUpdateStrategyAdminApi_UpdateProfileUpdateStrategyMutation_v3,
  useProfileUpdateStrategyApi_GetProfileUpdateStrategies_v3,
  useRolesAdminApi_CreateRoleMutation_v3,
  useRolesAdminApi_CreateRoleMutation_v4,
  useRolesAdminApi_DeleteAdmin_ByRoleIdMutation_v3,
  useRolesAdminApi_DeleteManager_ByRoleIdMutation_v3,
  useRolesAdminApi_DeleteMember_ByRoleIdMutation_v3,
  useRolesAdminApi_DeletePermission_ByRoleIdMutation_v3,
  useRolesAdminApi_DeletePermission_ByRoleIdMutation_v4,
  useRolesAdminApi_DeletePermission_ByRoleId_ByResource_ByActionMutation_v3,
  useRolesAdminApi_DeleteRole_ByRoleIdMutation_v3,
  useRolesAdminApi_DeleteRole_ByRoleIdMutation_v4,
  useRolesAdminApi_DeleteUser_ByRoleIdMutation_v4,
  useRolesAdminApi_GetAdmin_ByRoleId_v3,
  useRolesAdminApi_GetManagers_ByRoleId_v3,
  useRolesAdminApi_GetMembers_ByRoleId_v3,
  useRolesAdminApi_GetRole_ByRoleId_v3,
  useRolesAdminApi_GetRole_ByRoleId_v4,
  useRolesAdminApi_GetRoles_v3,
  useRolesAdminApi_GetRoles_v4,
  useRolesAdminApi_GetUsers_ByRoleId_v4,
  useRolesAdminApi_PatchRole_ByRoleIdMutation_v3,
  useRolesAdminApi_PatchRole_ByRoleIdMutation_v4,
  useRolesAdminApi_UpdateAdmin_ByRoleIdMutation_v3,
  useRolesAdminApi_UpdateManager_ByRoleIdMutation_v3,
  useRolesAdminApi_UpdateMember_ByRoleIdMutation_v3,
  useRolesAdminApi_UpdatePermission_ByRoleIdMutation_v3,
  useRolesAdminApi_UpdatePermission_ByRoleIdMutation_v4,
  useRolesAdminApi_UpdatePermission_ByRoleId_adminMutation_v3,
  useRolesAdminApi_UpdatePermission_ByRoleId_adminMutation_v4,
  useRolesAdminApi_UpdateUser_ByRoleIdMutation_v4,
  useRolesApi_CreateRoleMutation,
  useRolesApi_DeleteAdmin_ByRoleIdMutation,
  useRolesApi_DeleteManager_ByRoleIdMutation,
  useRolesApi_DeleteMember_ByRoleIdMutation,
  useRolesApi_DeletePermission_ByRoleId_ByResource_ByActionMutation,
  useRolesApi_DeleteRole_ByRoleIdMutation,
  useRolesApi_GetAdmin_ByRoleId,
  useRolesApi_GetManagers_ByRoleId,
  useRolesApi_GetMembers_ByRoleId,
  useRolesApi_GetRole_ByRoleId,
  useRolesApi_GetRole_ByRoleId_v3,
  useRolesApi_GetRoles,
  useRolesApi_GetRoles_v3,
  useRolesApi_UpdateAdmin_ByRoleIdMutation,
  useRolesApi_UpdateManager_ByRoleIdMutation,
  useRolesApi_UpdateMember_ByRoleIdMutation,
  useRolesApi_UpdatePermission_ByRoleIdMutation,
  useRolesApi_UpdatePermission_ByRoleId_ByResource_ByActionMutation,
  useRolesApi_UpdateRole_ByRoleIdMutation,
  useSsoApi_CreateLogout_ByPlatformIdMutation_v3,
  useSsoApi_GetSso_ByPlatformId_v3,
  useSsoCredentialAdminApi_CreateSso_ByPlatformIdMutation_v3,
  useSsoCredentialAdminApi_DeleteSso_ByPlatformIdMutation_v3,
  useSsoCredentialAdminApi_GetPlatformsSso_v3,
  useSsoCredentialAdminApi_GetSso_ByPlatformId_v3,
  useSsoCredentialAdminApi_PatchSso_ByPlatformIdMutation_v3,
  useSsoSaml20Api_PostAuthenticateSamlSso_ByPlatformIdMutation_v3,
  useThirdPartyCredentialAdminApi_CreateClient_ByPlatformIdMutation_v3,
  useThirdPartyCredentialAdminApi_DeleteClientDomain_ByPlatformIdMutation_v3,
  useThirdPartyCredentialAdminApi_DeleteClient_ByPlatformIdMutation_v3,
  useThirdPartyCredentialAdminApi_GetAvailability_ByPlatformId_v3,
  useThirdPartyCredentialAdminApi_GetClients_ByPlatformId_v3,
  useThirdPartyCredentialAdminApi_GetPlatformsAllClientsActive_v3,
  useThirdPartyCredentialAdminApi_GetPlatformsAllClients_v3,
  useThirdPartyCredentialAdminApi_PatchClient_ByPlatformIdMutation_v3,
  useThirdPartyCredentialAdminApi_UpdateClientDomain_ByPlatformIdMutation_v3,
  useThirdPartyCredentialApi_GetPlatformsClientsActive_v3,
  useThirdPartyCredentialApi_GetPlatformsClientsOidc_v3,
  useUsersAdminApi_CreateBan_ByUserIdMutation_v2,
  useUsersAdminApi_CreateBan_ByUserIdMutation_v3,
  useUsersAdminApi_CreatePermission_ByUserIdMutation_v3,
  useUsersAdminApi_CreatePlatformJustice_ByUserId_ByTargetNamespaceMutation_v3,
  useUsersAdminApi_CreateUserBulkMutation_v3,
  useUsersAdminApi_CreateUserInviteMutation_v3,
  useUsersAdminApi_DeleteAll_ByUserId_ByPlatformIdMutation_v3,
  useUsersAdminApi_DeleteInformation_ByUserIdMutation_v3,
  useUsersAdminApi_DeleteLinkHistory_ByUserId_ByPlatformIdMutation_v3,
  useUsersAdminApi_DeleteLinkRestriction_ByUserId_ByPlatformIdMutation_v3,
  useUsersAdminApi_DeleteLink_ByUserId_ByPlatformIdMutation_v2,
  useUsersAdminApi_DeletePermission_ByUserIdMutation_v3,
  useUsersAdminApi_DeletePermission_ByUserId_ByResource_ByActionMutation_v3,
  useUsersAdminApi_DeletePlatform_ByUserId_ByPlatformIdMutation_v3,
  useUsersAdminApi_DeleteRole_ByUserIdMutation_v3,
  useUsersAdminApi_DeleteRole_ByUserId_ByRoleIdMutation_v3,
  useUsersAdminApi_FetchUserBan_v3,
  useUsersAdminApi_FetchUserBulkPlatform_v3,
  useUsersAdminApi_FetchUserSearchBulk_v3,
  useUsersAdminApi_FetchUser_ByPlatformId_v3,
  useUsersAdminApi_GetAdmins_v3,
  useUsersAdminApi_GetAgerestrictionsCountries_v3,
  useUsersAdminApi_GetAgerestrictions_v2,
  useUsersAdminApi_GetAgerestrictions_v3,
  useUsersAdminApi_GetBansSummary_ByUserId_v3,
  useUsersAdminApi_GetBans_ByUserId_v2,
  useUsersAdminApi_GetBans_ByUserId_v3,
  useUsersAdminApi_GetCodes_ByUserId_v3,
  useUsersAdminApi_GetCountriesAgerestrictions_v2,
  useUsersAdminApi_GetDeletionStatus_ByUserId_v3,
  useUsersAdminApi_GetDistinctPlatforms_ByUserId_v3,
  useUsersAdminApi_GetLoginsHistories_ByUserId_v3,
  useUsersAdminApi_GetMetadata_ByUserId_ByPlatformId_v3,
  useUsersAdminApi_GetPlatformJustice_ByUserId_ByTargetNamespace_v3,
  useUsersAdminApi_GetPlatformsDistinct_ByUserId_v3,
  useUsersAdminApi_GetPlatformsJustice_ByUserId_v3,
  useUsersAdminApi_GetPlatformsLinkHistories_ByUserId_v3,
  useUsersAdminApi_GetPlatforms_ByUserId_v3,
  useUsersAdminApi_GetUser_ByPlatformId_ByPlatformUserId_v3,
  useUsersAdminApi_GetUser_ByUserId_v2,
  useUsersAdminApi_GetUser_ByUserId_v3,
  useUsersAdminApi_GetUsersLinkhistories_v3,
  useUsersAdminApi_GetUsersMe_v3,
  useUsersAdminApi_GetUsersPlatformsJustice_v3,
  useUsersAdminApi_GetUsersSearch_v3,
  useUsersAdminApi_GetUsers_ByRoleId_v3,
  useUsersAdminApi_GetUsers_v2,
  useUsersAdminApi_GetUsers_v3,
  useUsersAdminApi_PatchAgerestrictionCountry_ByCountryCodeMutation_v3,
  useUsersAdminApi_PatchAgerestrictionMutation_v2,
  useUsersAdminApi_PatchAgerestrictionMutation_v3,
  useUsersAdminApi_PatchBan_ByUserId_ByBanIdMutation_v3,
  useUsersAdminApi_PatchCountry_ByCountryCodeMutation_v2,
  useUsersAdminApi_PatchDeletionStatus_ByUserIdMutation_v3,
  useUsersAdminApi_PatchRole_ByUserIdMutation_v3,
  useUsersAdminApi_PatchStatus_ByUserIdMutation_v3,
  useUsersAdminApi_PatchTrustlyIdentity_ByUserIdMutation_v3,
  useUsersAdminApi_PatchUser_ByUserIdMutation_v2,
  useUsersAdminApi_PatchUser_ByUserIdMutation_v3,
  useUsersAdminApi_PostLinkStatu_ByUserId_ByPlatformIdMutation_v3,
  useUsersAdminApi_PostLink_ByUserId_ByPlatformIdMutation_v3,
  useUsersAdminApi_UpdateCodeRequest_ByUserIdMutation_v3,
  useUsersAdminApi_UpdateCodeVerify_ByUserIdMutation_v3,
  useUsersAdminApi_UpdateDisable_ByUserIdMutation_v2,
  useUsersAdminApi_UpdateEnable_ByUserIdMutation_v2,
  useUsersAdminApi_UpdateHeadlesCodeVerify_ByUserIdMutation_v3,
  useUsersAdminApi_UpdatePassword_ByUserIdMutation_v2,
  useUsersAdminApi_UpdatePassword_ByUserIdMutation_v3,
  useUsersAdminApi_UpdatePermission_ByUserIdMutation_v3,
  useUsersAdminApi_UpdatePlatformLink_ByUserIdMutation_v3,
  useUsersAdminApi_UpdateRole_ByUserIdMutation_v2,
  useUsersAdminApi_UpdateRole_ByUserId_ByNSMutation_v2,
  useUsersAdminApi_UpdateRole_ByUserId_ByRoleIdMutation_v3,
  useUsersAdminApi_UpdateUserMutation_v3,
  useUsersAdminApi_UpdateVerify_ByUserIdMutation_v3,
  useUsersApi_CreateBan_ByUserIdMutation,
  useUsersApi_CreatePlatformLinkWithProgression_ByUserIdMutation_v3,
  useUsersApi_CreatePlatformLink_ByUserIdMutation_v3,
  useUsersApi_CreateUserBulkBasicMutation_v3,
  useUsersApi_CreateUserCodeRequestMutation_v3,
  useUsersApi_CreateUserCodeVerifyMutation_v3,
  useUsersApi_CreateUserForgotMutation_v3,
  useUsersApi_CreateUserForgotPasswordMutation,
  useUsersApi_CreateUserForgotPasswordMutation_v2,
  useUsersApi_CreateUserInputValidationMutation_v3,
  useUsersApi_CreateUserInvite_ByInvitationIdMutation_v3,
  useUsersApi_CreateUserMeCodeRequestMutation_v3,
  useUsersApi_CreateUserMeCodeVerifyMutation_v3,
  useUsersApi_CreateUserMeHeadlesCodeVerifyMutation_v3,
  useUsersApi_CreateUserMeHeadlesLinkWithProgressionMutation_v3,
  useUsersApi_CreateUserMeHeadlesVerifyMutation_v3,
  useUsersApi_CreateUserMePlatformJustice_ByTargetNamespaceMutation_v3,
  useUsersApi_CreateUserMeVerifyLinkRequestMutation_v3,
  useUsersApi_CreateUserMutation,
  useUsersApi_CreateUserMutation_v2,
  useUsersApi_CreateUserMutation_v3,
  useUsersApi_CreateUserPlatformMutation_v3,
  useUsersApi_CreateUserResetMutation_v3,
  useUsersApi_CreateUserResetPasswordMutation,
  useUsersApi_CreateUserResetPasswordMutation_v2,
  useUsersApi_CreateUser_ByPlatformIdMutation_v3,
  useUsersApi_DeleteAllMeUser_ByPlatformIdMutation_v3,
  useUsersApi_DeleteInformation_ByUserIdMutation,
  useUsersApi_DeleteLink_ByUserId_ByPlatformIdMutation_v2,
  useUsersApi_DeletePermission_ByUserId_ByResource_ByActionMutation,
  useUsersApi_DeleteRole_ByUserId_ByRoleIdMutation,
  useUsersApi_DeleteUserMePlatform_ByPlatformIdMutation_v3,
  useUsersApi_DeleteUser_ByUserIdMutation,
  useUsersApi_GetAgerestrictionCountry_ByCountryCode_v3,
  useUsersApi_GetAgerestrictions_ByCountryCode_v2,
  useUsersApi_GetAsyncStatus_ByRequestId_v3,
  useUsersApi_GetBans_ByUserId,
  useUsersApi_GetBans_ByUserId_v2,
  useUsersApi_GetBans_ByUserId_v3,
  useUsersApi_GetDistinctPlatforms_ByUserId_v3,
  useUsersApi_GetInformation_ByUserId,
  useUsersApi_GetInformation_ByUserId_v3,
  useUsersApi_GetLoginsHistories_ByUserId,
  useUsersApi_GetLoginsHistories_ByUserId_v3,
  useUsersApi_GetPlatformJustice_ByUserId_ByTargetNamespace,
  useUsersApi_GetPlatformsJustice_ByUserId_v2,
  useUsersApi_GetPlatformsJustice_ByUserId_v3,
  useUsersApi_GetPlatforms_ByUserId,
  useUsersApi_GetPlatforms_ByUserId_v3,
  useUsersApi_GetPublisher_ByUserId,
  useUsersApi_GetPublisher_ByUserId_v3,
  useUsersApi_GetUserInvite_ByInvitationId_v3,
  useUsersApi_GetUser_ByPlatformId_ByPlatformUserId_v3,
  useUsersApi_GetUser_ByUserId,
  useUsersApi_GetUser_ByUserId_v2,
  useUsersApi_GetUser_ByUserId_v3,
  useUsersApi_GetUsersAdmin,
  useUsersApi_GetUsersAvailability_v3,
  useUsersApi_GetUsersByLoginId,
  useUsersApi_GetUsersByPlatformUserId,
  useUsersApi_GetUsersListByLoginIds,
  useUsersApi_GetUsersMeHeadlessLinkConflict_v3,
  useUsersApi_GetUsersMeProfileStatus_v3,
  useUsersApi_GetUsersMe_v3,
  useUsersApi_GetUsersSearch,
  useUsersApi_GetUsersVerifyLinkVerify_v3,
  useUsersApi_GetUsers_v3,
  useUsersApi_GetWebLinkEstablishMeUsers_ByPlatformId_v3,
  useUsersApi_GetWebLinkMeUsers_ByPlatformId_v3,
  useUsersApi_PatchUserMeMutation_v3,
  useUsersApi_PatchUser_ByUserIdMutation_v2,
  useUsersApi_PostCrosslink_ByUserIdMutation,
  useUsersApi_PostForceMeUser_ByPlatformIdMutation_v3,
  useUsersApi_PostLink_ByUserId_ByPlatformIdMutation,
  useUsersApi_PostLink_ByUserId_ByPlatformIdMutation_v2,
  useUsersApi_PostUnlink_ByUserId_ByPlatformIdMutation,
  useUsersApi_PostUserMePlatform_ByPlatformIdMutation_v3,
  useUsersApi_PostValidate_ByUserIdMutation_v3,
  useUsersApi_PostWebLinkProcesMeUser_ByPlatformIdMutation_v3,
  useUsersApi_UpdateDisable_ByUserIdMutation,
  useUsersApi_UpdateDisable_ByUserId_ByBanIdMutation,
  useUsersApi_UpdateEnable_ByUserIdMutation,
  useUsersApi_UpdateEnable_ByUserId_ByBanIdMutation,
  useUsersApi_UpdatePassword_ByUserIdMutation,
  useUsersApi_UpdatePassword_ByUserIdMutation_v2,
  useUsersApi_UpdatePermission_ByUserIdMutation,
  useUsersApi_UpdatePermission_ByUserId_ByResource_ByActionMutation,
  useUsersApi_UpdatePlatformJustice_ByUserId_ByTargetNamespaceMutation,
  useUsersApi_UpdateRole_ByUserIdMutation,
  useUsersApi_UpdateRole_ByUserId_ByRoleIdMutation,
  useUsersApi_UpdateUpgradeHeadlessAccountWithVerificationCode_ByUserIdMutation,
  useUsersApi_UpdateUpgradeHeadlessAccount_ByUserIdMutation,
  useUsersApi_UpdateUserMeMutation_v3,
  useUsersApi_UpdateUserMePasswordMutation_v3,
  useUsersApi_UpdateUser_ByUserIdMutation,
  useUsersApi_UpdateVerification_ByUserIdMutation,
  useUsersApi_UpdateVerificationcode_ByUserIdMutation,
  useUsersV4AdminApi_CreateTestUserMutation_v4,
  useUsersV4AdminApi_CreateUserInviteMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaAuthenticatorKeyMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaBackupCodeEnableMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaBackupCodeEnable_adminMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaBackupCodeMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaBackupCode_adminMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaEmailDisableMutation_v4,
  useUsersV4AdminApi_CreateUserMeMfaStatusMutation_v4,
  useUsersV4AdminApi_CreateUserMutation_v4,
  useUsersV4AdminApi_CreateUserUserInviteMutation_v4,
  useUsersV4AdminApi_DeleteMfaDisable_ByUserIdMutation_v4,
  useUsersV4AdminApi_DeleteRole_ByUserIdMutation_v4,
  useUsersV4AdminApi_DeleteUserMeMfaAuthenticatorDisableMutation_v4,
  useUsersV4AdminApi_DeleteUserMeMfaBackupCodeDisableMutation_v4,
  useUsersV4AdminApi_FetchUserBulkValidate_v4,
  useUsersV4AdminApi_GetInvitationHistoriesUsers_v4,
  useUsersV4AdminApi_GetInvitationHistories_ByNS_v4,
  useUsersV4AdminApi_GetInvitationHistories_v4,
  useUsersV4AdminApi_GetMfaStatus_ByUserId_v4,
  useUsersV4AdminApi_GetRoles_ByUserId_v4,
  useUsersV4AdminApi_GetUsersMeMfaBackupCodeDownload_v4,
  useUsersV4AdminApi_GetUsersMeMfaBackupCode_v4,
  useUsersV4AdminApi_GetUsersMeMfaBackupCodes_v4,
  useUsersV4AdminApi_GetUsersMeMfaFactor_v4,
  useUsersV4AdminApi_GetUsersMeMfaStatus_v4,
  useUsersV4AdminApi_PatchUserBulkAccountTypeMutation_v4,
  useUsersV4AdminApi_PatchUserMeMutation_v4,
  useUsersV4AdminApi_PostUserMeMfaAuthenticatorEnableMutation_v4,
  useUsersV4AdminApi_PostUserMeMfaChallengeVerifyMutation_v4,
  useUsersV4AdminApi_PostUserMeMfaEmailCodeMutation_v4,
  useUsersV4AdminApi_PostUserMeMfaEmailEnableMutation_v4,
  useUsersV4AdminApi_PostUserMeMfaFactorMutation_v4,
  useUsersV4AdminApi_UpdateEmail_ByUserIdMutation_v4,
  useUsersV4AdminApi_UpdateRole_ByUserIdMutation_v4,
  useUsersV4AdminApi_UpdateRole_ByUserId_ByNSMutation_v4,
  useUsersV4AdminApi_UpdateUser_ByUserIdMutation_v4,
  useUsersV4Api_CreateTestUserMutation_v4,
  useUsersV4Api_CreateUserInviteMutation_v4,
  useUsersV4Api_CreateUserInvite_ByInvitationIdMutation_v4,
  useUsersV4Api_CreateUserMeHeadlesCodeVerifyMutation_v4,
  useUsersV4Api_CreateUserMeHeadlesVerifyMutation_v4,
  useUsersV4Api_CreateUserMeMfaAuthenticatorKeyMutation_v4,
  useUsersV4Api_CreateUserMeMfaBackupCodeEnableMutation_v4,
  useUsersV4Api_CreateUserMeMfaBackupCodeEnable_ByNSMutation_v4,
  useUsersV4Api_CreateUserMeMfaBackupCodeMutation_v4,
  useUsersV4Api_CreateUserMeMfaBackupCode_ByNSMutation_v4,
  useUsersV4Api_CreateUserMeMfaEmailDisableMutation_v4,
  useUsersV4Api_CreateUserMeMfaStatusMutation_v4,
  useUsersV4Api_CreateUserMutation_v4,
  useUsersV4Api_CreateUser_ByPlatformIdMutation_v4,
  useUsersV4Api_DeleteUserMeMfaAuthenticatorDisableMutation_v4,
  useUsersV4Api_DeleteUserMeMfaBackupCodeDisableMutation_v4,
  useUsersV4Api_DeleteUserMeMfaDeviceMutation_v4,
  useUsersV4Api_GetUser_ByUserId_v4,
  useUsersV4Api_GetUsersMeMfaBackupCodeDownload_v4,
  useUsersV4Api_GetUsersMeMfaBackupCode_v4,
  useUsersV4Api_GetUsersMeMfaBackupCodes_v4,
  useUsersV4Api_GetUsersMeMfaFactor_v4,
  useUsersV4Api_GetUsersMeMfaStatus_v4,
  useUsersV4Api_PatchUserMeMutation_v4,
  useUsersV4Api_PostUserMeMfaAuthenticatorEnableMutation_v4,
  useUsersV4Api_PostUserMeMfaChallengeVerifyMutation_v4,
  useUsersV4Api_PostUserMeMfaEmailCodeMutation_v4,
  useUsersV4Api_PostUserMeMfaEmailEnableMutation_v4,
  useUsersV4Api_PostUserMeMfaFactorMutation_v4,
  useUsersV4Api_UpdateUserMeEmailMutation_v4
};
