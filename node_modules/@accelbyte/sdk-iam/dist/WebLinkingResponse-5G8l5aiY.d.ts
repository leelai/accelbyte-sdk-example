import { z } from 'zod';

declare const BanReasonsV3: z.ZodObject<{
    reasons: z.ZodArray<z.ZodObject<{
        description: z.ZodString;
        reason: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        description: string;
        reason: string;
    }, {
        description: string;
        reason: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    reasons: {
        description: string;
        reason: string;
    }[];
}, {
    reasons: {
        description: string;
        reason: string;
    }[];
}>;
interface BanReasonsV3 extends z.TypeOf<typeof BanReasonsV3> {
}

declare const BansV3: z.ZodObject<{
    bans: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        descriptions: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            'en-US': z.ZodString;
            'zh-CN': z.ZodString;
        }, "strip", z.ZodTypeAny, {
            'en-US': string;
            'zh-CN': string;
        }, {
            'en-US': string;
            'zh-CN': string;
        }>>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        ban: string;
        description?: string | null | undefined;
        descriptions?: {
            'en-US': string;
            'zh-CN': string;
        } | null | undefined;
    }, {
        type: string;
        ban: string;
        description?: string | null | undefined;
        descriptions?: {
            'en-US': string;
            'zh-CN': string;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    bans: {
        type: string;
        ban: string;
        description?: string | null | undefined;
        descriptions?: {
            'en-US': string;
            'zh-CN': string;
        } | null | undefined;
    }[];
}, {
    bans: {
        type: string;
        ban: string;
        description?: string | null | undefined;
        descriptions?: {
            'en-US': string;
            'zh-CN': string;
        } | null | undefined;
    }[];
}>;
interface BansV3 extends z.TypeOf<typeof BansV3> {
}

declare const BulkBanCreateRequestV3: z.ZodObject<{
    ban: z.ZodString;
    comment: z.ZodString;
    endDate: z.ZodString;
    reason: z.ZodString;
    skipNotif: z.ZodBoolean;
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    ban: string;
    endDate: string;
    reason: string;
    comment: string;
    skipNotif: boolean;
    userIds: string[];
}, {
    ban: string;
    endDate: string;
    reason: string;
    comment: string;
    skipNotif: boolean;
    userIds: string[];
}>;
interface BulkBanCreateRequestV3 extends z.TypeOf<typeof BulkBanCreateRequestV3> {
}

declare const BulkUnbanCreateRequestV3: z.ZodObject<{
    bans: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        banId: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        banId: string;
        userId: string;
    }, {
        banId: string;
        userId: string;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    bans?: {
        banId: string;
        userId: string;
    }[] | null | undefined;
}, {
    bans?: {
        banId: string;
        userId: string;
    }[] | null | undefined;
}>;
interface BulkUnbanCreateRequestV3 extends z.TypeOf<typeof BulkUnbanCreateRequestV3> {
}

declare const GetUserBanV3Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        banId: z.ZodString;
        bannedBy: z.ZodObject<{
            displayName: z.ZodString;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userId: string;
            displayName: string;
        }, {
            userId: string;
            displayName: string;
        }>;
        comment: z.ZodString;
        createdAt: z.ZodString;
        disabledDate: z.ZodString;
        enabled: z.ZodBoolean;
        endDate: z.ZodString;
        namespace: z.ZodString;
        reason: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }, {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface GetUserBanV3Response extends z.TypeOf<typeof GetUserBanV3Response> {
}

declare const ListBulkUserBanResponseV3: z.ZodObject<{
    failedBans: z.ZodArray<z.ZodObject<{
        reason: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        reason: string;
        userId: string;
    }, {
        reason: string;
        userId: string;
    }>, "many">;
    successBans: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        banId: z.ZodString;
        bannedBy: z.ZodObject<{
            displayName: z.ZodString;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userId: string;
            displayName: string;
        }, {
            userId: string;
            displayName: string;
        }>;
        comment: z.ZodString;
        createdAt: z.ZodString;
        disabledDate: z.ZodString;
        enabled: z.ZodBoolean;
        endDate: z.ZodString;
        namespace: z.ZodString;
        reason: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }, {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    failedBans: {
        reason: string;
        userId: string;
    }[];
    successBans: {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }[];
}, {
    failedBans: {
        reason: string;
        userId: string;
    }[];
    successBans: {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
    }[];
}>;
interface ListBulkUserBanResponseV3 extends z.TypeOf<typeof ListBulkUserBanResponseV3> {
}

declare const ClientCreationV3Request: z.ZodObject<{
    audiences: z.ZodArray<z.ZodString, "many">;
    baseUri: z.ZodString;
    clientId: z.ZodString;
    clientName: z.ZodString;
    clientPermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">>>;
    clientPlatform: z.ZodString;
    deletable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    description: z.ZodString;
    modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        moduleId: z.ZodString;
        selectedGroups: z.ZodArray<z.ZodObject<{
            groupId: z.ZodString;
            selectedActions: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            groupId: string;
            selectedActions: number[];
        }, {
            groupId: string;
            selectedActions: number[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }>, "many">>>;
    namespace: z.ZodString;
    oauthAccessTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    oauthAccessTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    oauthClientType: z.ZodString;
    oauthRefreshTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    oauthRefreshTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parentNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    redirectUri: z.ZodString;
    scopes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    secret: z.ZodString;
    skipLoginQueue: z.ZodBoolean;
    twoFactorEnabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    clientId: string;
    namespace: string;
    description: string;
    audiences: string[];
    baseUri: string;
    clientName: string;
    clientPlatform: string;
    oauthClientType: string;
    redirectUri: string;
    secret: string;
    skipLoginQueue: boolean;
    clientPermissions?: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[] | null | undefined;
    deletable?: boolean | null | undefined;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
    oauthAccessTokenExpiration?: number | null | undefined;
    oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
    oauthRefreshTokenExpiration?: number | null | undefined;
    oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
    parentNamespace?: string | null | undefined;
    scopes?: string[] | null | undefined;
    twoFactorEnabled?: boolean | null | undefined;
}, {
    clientId: string;
    namespace: string;
    description: string;
    audiences: string[];
    baseUri: string;
    clientName: string;
    clientPlatform: string;
    oauthClientType: string;
    redirectUri: string;
    secret: string;
    skipLoginQueue: boolean;
    clientPermissions?: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[] | null | undefined;
    deletable?: boolean | null | undefined;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
    oauthAccessTokenExpiration?: number | null | undefined;
    oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
    oauthRefreshTokenExpiration?: number | null | undefined;
    oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
    parentNamespace?: string | null | undefined;
    scopes?: string[] | null | undefined;
    twoFactorEnabled?: boolean | null | undefined;
}>;
interface ClientCreationV3Request extends z.TypeOf<typeof ClientCreationV3Request> {
}

declare const ClientPermissionsV3: z.ZodObject<{
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    permissions: {
        action: number;
        resource: string;
    }[];
}, {
    permissions: {
        action: number;
        resource: string;
    }[];
}>;
interface ClientPermissionsV3 extends z.TypeOf<typeof ClientPermissionsV3> {
}

declare const ClientUpdateV3Request: z.ZodObject<{
    audiences: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    baseUri: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    clientName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    clientPermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">>>;
    clientPlatform: z.ZodString;
    deletable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    description: z.ZodString;
    modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        moduleId: z.ZodString;
        selectedGroups: z.ZodArray<z.ZodObject<{
            groupId: z.ZodString;
            selectedActions: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            groupId: string;
            selectedActions: number[];
        }, {
            groupId: string;
            selectedActions: number[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }>, "many">>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    oauthAccessTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    oauthAccessTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    oauthRefreshTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    oauthRefreshTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    redirectUri: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    scopes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    twoFactorEnabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    description: string;
    clientPlatform: string;
    namespace?: string | null | undefined;
    audiences?: string[] | null | undefined;
    baseUri?: string | null | undefined;
    clientName?: string | null | undefined;
    clientPermissions?: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[] | null | undefined;
    deletable?: boolean | null | undefined;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
    oauthAccessTokenExpiration?: number | null | undefined;
    oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
    oauthRefreshTokenExpiration?: number | null | undefined;
    oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
    redirectUri?: string | null | undefined;
    scopes?: string[] | null | undefined;
    skipLoginQueue?: boolean | null | undefined;
    twoFactorEnabled?: boolean | null | undefined;
}, {
    description: string;
    clientPlatform: string;
    namespace?: string | null | undefined;
    audiences?: string[] | null | undefined;
    baseUri?: string | null | undefined;
    clientName?: string | null | undefined;
    clientPermissions?: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[] | null | undefined;
    deletable?: boolean | null | undefined;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
    oauthAccessTokenExpiration?: number | null | undefined;
    oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
    oauthRefreshTokenExpiration?: number | null | undefined;
    oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
    redirectUri?: string | null | undefined;
    scopes?: string[] | null | undefined;
    skipLoginQueue?: boolean | null | undefined;
    twoFactorEnabled?: boolean | null | undefined;
}>;
interface ClientUpdateV3Request extends z.TypeOf<typeof ClientUpdateV3Request> {
}

declare const ClientV3Response: z.ZodObject<{
    audiences: z.ZodArray<z.ZodString, "many">;
    baseUri: z.ZodString;
    clientId: z.ZodString;
    clientName: z.ZodString;
    clientPermissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    clientPlatform: z.ZodString;
    createdAt: z.ZodString;
    description: z.ZodString;
    modifiedAt: z.ZodString;
    modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        moduleId: z.ZodString;
        selectedGroups: z.ZodArray<z.ZodObject<{
            groupId: z.ZodString;
            selectedActions: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            groupId: string;
            selectedActions: number[];
        }, {
            groupId: string;
            selectedActions: number[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }>, "many">>>;
    namespace: z.ZodString;
    oauthAccessTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    oauthAccessTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    oauthClientType: z.ZodString;
    oauthRefreshTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    oauthRefreshTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parentNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    redirectUri: z.ZodString;
    roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    scopes: z.ZodArray<z.ZodString, "many">;
    skipLoginQueue: z.ZodBoolean;
    twoFactorEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    clientId: string;
    namespace: string;
    description: string;
    createdAt: string;
    audiences: string[];
    baseUri: string;
    clientName: string;
    clientPermissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    clientPlatform: string;
    oauthClientType: string;
    redirectUri: string;
    scopes: string[];
    skipLoginQueue: boolean;
    twoFactorEnabled: boolean;
    modifiedAt: string;
    roles?: string[] | null | undefined;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
    oauthAccessTokenExpiration?: number | null | undefined;
    oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
    oauthRefreshTokenExpiration?: number | null | undefined;
    oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
    parentNamespace?: string | null | undefined;
}, {
    clientId: string;
    namespace: string;
    description: string;
    createdAt: string;
    audiences: string[];
    baseUri: string;
    clientName: string;
    clientPermissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    clientPlatform: string;
    oauthClientType: string;
    redirectUri: string;
    scopes: string[];
    skipLoginQueue: boolean;
    twoFactorEnabled: boolean;
    modifiedAt: string;
    roles?: string[] | null | undefined;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
    oauthAccessTokenExpiration?: number | null | undefined;
    oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
    oauthRefreshTokenExpiration?: number | null | undefined;
    oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
    parentNamespace?: string | null | undefined;
}>;
interface ClientV3Response extends z.TypeOf<typeof ClientV3Response> {
}

declare const ClientsUpdateRequestV3: z.ZodObject<{
    clientIds: z.ZodArray<z.ZodString, "many">;
    clientUpdateRequest: z.ZodObject<{
        audiences: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        baseUri: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        clientName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        clientPermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">>>;
        clientPlatform: z.ZodString;
        deletable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        description: z.ZodString;
        modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            moduleId: z.ZodString;
            selectedGroups: z.ZodArray<z.ZodObject<{
                groupId: z.ZodString;
                selectedActions: z.ZodArray<z.ZodNumber, "many">;
            }, "strip", z.ZodTypeAny, {
                groupId: string;
                selectedActions: number[];
            }, {
                groupId: string;
                selectedActions: number[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }, {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }>, "many">>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        oauthAccessTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        oauthAccessTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        oauthRefreshTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        oauthRefreshTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        redirectUri: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        scopes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        twoFactorEnabled: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        description: string;
        clientPlatform: string;
        namespace?: string | null | undefined;
        audiences?: string[] | null | undefined;
        baseUri?: string | null | undefined;
        clientName?: string | null | undefined;
        clientPermissions?: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[] | null | undefined;
        deletable?: boolean | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        redirectUri?: string | null | undefined;
        scopes?: string[] | null | undefined;
        skipLoginQueue?: boolean | null | undefined;
        twoFactorEnabled?: boolean | null | undefined;
    }, {
        description: string;
        clientPlatform: string;
        namespace?: string | null | undefined;
        audiences?: string[] | null | undefined;
        baseUri?: string | null | undefined;
        clientName?: string | null | undefined;
        clientPermissions?: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[] | null | undefined;
        deletable?: boolean | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        redirectUri?: string | null | undefined;
        scopes?: string[] | null | undefined;
        skipLoginQueue?: boolean | null | undefined;
        twoFactorEnabled?: boolean | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    clientIds: string[];
    clientUpdateRequest: {
        description: string;
        clientPlatform: string;
        namespace?: string | null | undefined;
        audiences?: string[] | null | undefined;
        baseUri?: string | null | undefined;
        clientName?: string | null | undefined;
        clientPermissions?: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[] | null | undefined;
        deletable?: boolean | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        redirectUri?: string | null | undefined;
        scopes?: string[] | null | undefined;
        skipLoginQueue?: boolean | null | undefined;
        twoFactorEnabled?: boolean | null | undefined;
    };
}, {
    clientIds: string[];
    clientUpdateRequest: {
        description: string;
        clientPlatform: string;
        namespace?: string | null | undefined;
        audiences?: string[] | null | undefined;
        baseUri?: string | null | undefined;
        clientName?: string | null | undefined;
        clientPermissions?: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[] | null | undefined;
        deletable?: boolean | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        redirectUri?: string | null | undefined;
        scopes?: string[] | null | undefined;
        skipLoginQueue?: boolean | null | undefined;
        twoFactorEnabled?: boolean | null | undefined;
    };
}>;
interface ClientsUpdateRequestV3 extends z.TypeOf<typeof ClientsUpdateRequestV3> {
}

declare const ClientsV3Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        audiences: z.ZodArray<z.ZodString, "many">;
        baseUri: z.ZodString;
        clientId: z.ZodString;
        clientName: z.ZodString;
        clientPermissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">;
        clientPlatform: z.ZodString;
        createdAt: z.ZodString;
        description: z.ZodString;
        modifiedAt: z.ZodString;
        modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            moduleId: z.ZodString;
            selectedGroups: z.ZodArray<z.ZodObject<{
                groupId: z.ZodString;
                selectedActions: z.ZodArray<z.ZodNumber, "many">;
            }, "strip", z.ZodTypeAny, {
                groupId: string;
                selectedActions: number[];
            }, {
                groupId: string;
                selectedActions: number[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }, {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }>, "many">>>;
        namespace: z.ZodString;
        oauthAccessTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        oauthAccessTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        oauthClientType: z.ZodString;
        oauthRefreshTokenExpiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        oauthRefreshTokenExpirationTimeUnit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        parentNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        redirectUri: z.ZodString;
        roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        scopes: z.ZodArray<z.ZodString, "many">;
        skipLoginQueue: z.ZodBoolean;
        twoFactorEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        clientId: string;
        namespace: string;
        description: string;
        createdAt: string;
        audiences: string[];
        baseUri: string;
        clientName: string;
        clientPermissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        clientPlatform: string;
        oauthClientType: string;
        redirectUri: string;
        scopes: string[];
        skipLoginQueue: boolean;
        twoFactorEnabled: boolean;
        modifiedAt: string;
        roles?: string[] | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        parentNamespace?: string | null | undefined;
    }, {
        clientId: string;
        namespace: string;
        description: string;
        createdAt: string;
        audiences: string[];
        baseUri: string;
        clientName: string;
        clientPermissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        clientPlatform: string;
        oauthClientType: string;
        redirectUri: string;
        scopes: string[];
        skipLoginQueue: boolean;
        twoFactorEnabled: boolean;
        modifiedAt: string;
        roles?: string[] | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        parentNamespace?: string | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        clientId: string;
        namespace: string;
        description: string;
        createdAt: string;
        audiences: string[];
        baseUri: string;
        clientName: string;
        clientPermissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        clientPlatform: string;
        oauthClientType: string;
        redirectUri: string;
        scopes: string[];
        skipLoginQueue: boolean;
        twoFactorEnabled: boolean;
        modifiedAt: string;
        roles?: string[] | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        parentNamespace?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        clientId: string;
        namespace: string;
        description: string;
        createdAt: string;
        audiences: string[];
        baseUri: string;
        clientName: string;
        clientPermissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        clientPlatform: string;
        oauthClientType: string;
        redirectUri: string;
        scopes: string[];
        skipLoginQueue: boolean;
        twoFactorEnabled: boolean;
        modifiedAt: string;
        roles?: string[] | null | undefined;
        modulePermissions?: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[] | null | undefined;
        oauthAccessTokenExpiration?: number | null | undefined;
        oauthAccessTokenExpirationTimeUnit?: string | null | undefined;
        oauthRefreshTokenExpiration?: number | null | undefined;
        oauthRefreshTokenExpirationTimeUnit?: string | null | undefined;
        parentNamespace?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ClientsV3Response extends z.TypeOf<typeof ClientsV3Response> {
}

declare const V3ClientUpdateSecretRequest: z.ZodObject<{
    newSecret: z.ZodString;
}, "strip", z.ZodTypeAny, {
    newSecret: string;
}, {
    newSecret: string;
}>;
interface V3ClientUpdateSecretRequest extends z.TypeOf<typeof V3ClientUpdateSecretRequest> {
}

declare const ListClientPermissionSet: z.ZodObject<{
    clientPermissions: z.ZodArray<z.ZodObject<{
        docLink: z.ZodString;
        groups: z.ZodArray<z.ZodObject<{
            group: z.ZodString;
            groupId: z.ZodString;
            permissions: z.ZodArray<z.ZodObject<{
                allowedActions: z.ZodArray<z.ZodNumber, "many">;
                resource: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                resource: string;
                allowedActions: number[];
            }, {
                resource: string;
                allowedActions: number[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }, {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }>, "many">;
        module: z.ZodString;
        moduleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }, {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    clientPermissions: {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }[];
}, {
    clientPermissions: {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }[];
}>;
interface ListClientPermissionSet extends z.TypeOf<typeof ListClientPermissionSet> {
}

declare const ListTemplatesResponse: z.ZodObject<{
    clientTemplates: z.ZodArray<z.ZodObject<{
        basicRequiredPermissions: z.ZodArray<z.ZodObject<{
            moduleId: z.ZodString;
            selectedGroups: z.ZodArray<z.ZodObject<{
                groupId: z.ZodString;
                selectedActions: z.ZodArray<z.ZodNumber, "many">;
            }, "strip", z.ZodTypeAny, {
                groupId: string;
                selectedActions: number[];
            }, {
                groupId: string;
                selectedActions: number[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }, {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }>, "many">;
        defaultValues: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            field: string;
            value?: any;
        }, {
            field: string;
            value?: any;
        }>, "many">;
        description: z.ZodString;
        id: z.ZodString;
        requiredFields: z.ZodArray<z.ZodString, "many">;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        description: string;
        basicRequiredPermissions: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[];
        defaultValues: {
            field: string;
            value?: any;
        }[];
        id: string;
        requiredFields: string[];
    }, {
        type: string;
        description: string;
        basicRequiredPermissions: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[];
        defaultValues: {
            field: string;
            value?: any;
        }[];
        id: string;
        requiredFields: string[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    clientTemplates: {
        type: string;
        description: string;
        basicRequiredPermissions: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[];
        defaultValues: {
            field: string;
            value?: any;
        }[];
        id: string;
        requiredFields: string[];
    }[];
}, {
    clientTemplates: {
        type: string;
        description: string;
        basicRequiredPermissions: {
            moduleId: string;
            selectedGroups: {
                groupId: string;
                selectedActions: number[];
            }[];
        }[];
        defaultValues: {
            field: string;
            value?: any;
        }[];
        id: string;
        requiredFields: string[];
    }[];
}>;
interface ListTemplatesResponse extends z.TypeOf<typeof ListTemplatesResponse> {
}

declare const ListUpsertModulesRequest: z.ZodObject<{
    modules: z.ZodArray<z.ZodObject<{
        docLink: z.ZodString;
        groups: z.ZodArray<z.ZodObject<{
            group: z.ZodString;
            groupId: z.ZodString;
            permissions: z.ZodArray<z.ZodObject<{
                allowedActions: z.ZodArray<z.ZodNumber, "many">;
                resource: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                resource: string;
                allowedActions: number[];
            }, {
                resource: string;
                allowedActions: number[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }, {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }>, "many">;
        module: z.ZodString;
        moduleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }, {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    modules: {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }[];
}, {
    modules: {
        moduleId: string;
        docLink: string;
        groups: {
            permissions: {
                resource: string;
                allowedActions: number[];
            }[];
            groupId: string;
            group: string;
        }[];
        module: string;
    }[];
}>;
interface ListUpsertModulesRequest extends z.TypeOf<typeof ListUpsertModulesRequest> {
}

declare const PermissionSetDeleteGroupRequest: z.ZodObject<{
    groupId: z.ZodString;
    moduleId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    groupId: string;
    moduleId: string;
}, {
    groupId: string;
    moduleId: string;
}>;
interface PermissionSetDeleteGroupRequest extends z.TypeOf<typeof PermissionSetDeleteGroupRequest> {
}

declare const ConfigValueResponseV3: z.ZodObject<{
    result: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    result: Record<string, any>;
}, {
    result: Record<string, any>;
}>;
interface ConfigValueResponseV3 extends z.TypeOf<typeof ConfigValueResponseV3> {
}

declare const CountryBlacklistRequest: z.ZodObject<{
    blacklist: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    blacklist: string[];
}, {
    blacklist: string[];
}>;
interface CountryBlacklistRequest extends z.TypeOf<typeof CountryBlacklistRequest> {
}

declare const CountryBlacklistResponse: z.ZodObject<{
    blacklist: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    blacklist: string[];
}, {
    blacklist: string[];
}>;
interface CountryBlacklistResponse extends z.TypeOf<typeof CountryBlacklistResponse> {
}

declare const CountryResponseArray: z.ZodArray<z.ZodObject<{
    code: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
    name: string;
}, {
    code: string;
    name: string;
}>, "many">;
interface CountryResponseArray extends z.TypeOf<typeof CountryResponseArray> {
}

declare const DeviceBanRequestV4: z.ZodObject<{
    comment: z.ZodString;
    deviceId: z.ZodString;
    deviceType: z.ZodString;
    enabled: z.ZodBoolean;
    endDate: z.ZodString;
    ext: z.ZodRecord<z.ZodString, z.ZodAny>;
    reason: z.ZodString;
}, "strip", z.ZodTypeAny, {
    deviceId: string;
    enabled: boolean;
    endDate: string;
    reason: string;
    comment: string;
    deviceType: string;
    ext: Record<string, any>;
}, {
    deviceId: string;
    enabled: boolean;
    endDate: string;
    reason: string;
    comment: string;
    deviceType: string;
    ext: Record<string, any>;
}>;
interface DeviceBanRequestV4 extends z.TypeOf<typeof DeviceBanRequestV4> {
}

declare const DeviceBanResponseV4: z.ZodObject<{
    bannedAt: z.ZodNumber;
    bannedBy: z.ZodString;
    comment: z.ZodString;
    deviceId: z.ZodString;
    deviceType: z.ZodString;
    disabledAt: z.ZodNumber;
    enabled: z.ZodBoolean;
    endDate: z.ZodNumber;
    id: z.ZodString;
    namespace: z.ZodString;
    reason: z.ZodString;
    targetNamespace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    deviceId: string;
    enabled: boolean;
    endDate: number;
    reason: string;
    comment: string;
    bannedBy: string;
    id: string;
    deviceType: string;
    bannedAt: number;
    disabledAt: number;
    targetNamespace: string;
}, {
    namespace: string;
    deviceId: string;
    enabled: boolean;
    endDate: number;
    reason: string;
    comment: string;
    bannedBy: string;
    id: string;
    deviceType: string;
    bannedAt: number;
    disabledAt: number;
    targetNamespace: string;
}>;
interface DeviceBanResponseV4 extends z.TypeOf<typeof DeviceBanResponseV4> {
}

declare const DeviceBanUpdateRequestV4: z.ZodObject<{
    enabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
}, {
    enabled: boolean;
}>;
interface DeviceBanUpdateRequestV4 extends z.TypeOf<typeof DeviceBanUpdateRequestV4> {
}

declare const DeviceBannedResponseV4: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        bannedAt: z.ZodNumber;
        bannedBy: z.ZodString;
        comment: z.ZodString;
        deviceId: z.ZodString;
        deviceType: z.ZodString;
        disabledAt: z.ZodNumber;
        enabled: z.ZodBoolean;
        endDate: z.ZodNumber;
        id: z.ZodString;
        namespace: z.ZodString;
        reason: z.ZodString;
        targetNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }, {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }>, "many">;
    paging: z.ZodObject<{
        First: z.ZodString;
        Last: z.ZodString;
        Next: z.ZodString;
        Previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }[];
    paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}, {
    data: {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }[];
    paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}>;
interface DeviceBannedResponseV4 extends z.TypeOf<typeof DeviceBannedResponseV4> {
}

declare const DeviceBansResponseV4: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        bannedAt: z.ZodNumber;
        bannedBy: z.ZodString;
        comment: z.ZodString;
        deviceId: z.ZodString;
        deviceType: z.ZodString;
        disabledAt: z.ZodNumber;
        enabled: z.ZodBoolean;
        endDate: z.ZodNumber;
        id: z.ZodString;
        namespace: z.ZodString;
        reason: z.ZodString;
        targetNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }, {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }[];
}, {
    data: {
        namespace: string;
        deviceId: string;
        enabled: boolean;
        endDate: number;
        reason: string;
        comment: string;
        bannedBy: string;
        id: string;
        deviceType: string;
        bannedAt: number;
        disabledAt: number;
        targetNamespace: string;
    }[];
}>;
interface DeviceBansResponseV4 extends z.TypeOf<typeof DeviceBansResponseV4> {
}

declare const DeviceIdDecryptResponseV4: z.ZodObject<{
    deviceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    deviceId: string;
}, {
    deviceId: string;
}>;
interface DeviceIdDecryptResponseV4 extends z.TypeOf<typeof DeviceIdDecryptResponseV4> {
}

declare const DeviceTypesResponseV4: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        deviceType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        deviceType: string;
    }, {
        deviceType: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        deviceType: string;
    }[];
}, {
    data: {
        deviceType: string;
    }[];
}>;
interface DeviceTypesResponseV4 extends z.TypeOf<typeof DeviceTypesResponseV4> {
}

declare const DeviceUsersResponseV4: z.ZodObject<{
    users: z.ZodArray<z.ZodObject<{
        ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        ip: z.ZodString;
        lastLoginTime: z.ZodNumber;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        ip: string;
        lastLoginTime: number;
        ext?: Record<string, any> | null | undefined;
    }, {
        namespace: string;
        userId: string;
        ip: string;
        lastLoginTime: number;
        ext?: Record<string, any> | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    users: {
        namespace: string;
        userId: string;
        ip: string;
        lastLoginTime: number;
        ext?: Record<string, any> | null | undefined;
    }[];
}, {
    users: {
        namespace: string;
        userId: string;
        ip: string;
        lastLoginTime: number;
        ext?: Record<string, any> | null | undefined;
    }[];
}>;
interface DeviceUsersResponseV4 extends z.TypeOf<typeof DeviceUsersResponseV4> {
}

declare const DevicesResponseV4: z.ZodObject<{
    devices: z.ZodArray<z.ZodObject<{
        ban: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            bannedAt: z.ZodNumber;
            bannedBy: z.ZodString;
            comment: z.ZodString;
            deviceId: z.ZodString;
            deviceType: z.ZodString;
            disabledAt: z.ZodNumber;
            enabled: z.ZodBoolean;
            endDate: z.ZodNumber;
            id: z.ZodString;
            namespace: z.ZodString;
            reason: z.ZodString;
            targetNamespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            deviceId: string;
            enabled: boolean;
            endDate: number;
            reason: string;
            comment: string;
            bannedBy: string;
            id: string;
            deviceType: string;
            bannedAt: number;
            disabledAt: number;
            targetNamespace: string;
        }, {
            namespace: string;
            deviceId: string;
            enabled: boolean;
            endDate: number;
            reason: string;
            comment: string;
            bannedBy: string;
            id: string;
            deviceType: string;
            bannedAt: number;
            disabledAt: number;
            targetNamespace: string;
        }>>>;
        deviceId: z.ZodString;
        deviceType: z.ZodString;
        ext: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        ip: z.ZodString;
        lastLoginTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        deviceId: string;
        deviceType: string;
        ip: string;
        lastLoginTime: number;
        ban?: {
            namespace: string;
            deviceId: string;
            enabled: boolean;
            endDate: number;
            reason: string;
            comment: string;
            bannedBy: string;
            id: string;
            deviceType: string;
            bannedAt: number;
            disabledAt: number;
            targetNamespace: string;
        } | null | undefined;
        ext?: Record<string, any> | null | undefined;
    }, {
        deviceId: string;
        deviceType: string;
        ip: string;
        lastLoginTime: number;
        ban?: {
            namespace: string;
            deviceId: string;
            enabled: boolean;
            endDate: number;
            reason: string;
            comment: string;
            bannedBy: string;
            id: string;
            deviceType: string;
            bannedAt: number;
            disabledAt: number;
            targetNamespace: string;
        } | null | undefined;
        ext?: Record<string, any> | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    devices: {
        deviceId: string;
        deviceType: string;
        ip: string;
        lastLoginTime: number;
        ban?: {
            namespace: string;
            deviceId: string;
            enabled: boolean;
            endDate: number;
            reason: string;
            comment: string;
            bannedBy: string;
            id: string;
            deviceType: string;
            bannedAt: number;
            disabledAt: number;
            targetNamespace: string;
        } | null | undefined;
        ext?: Record<string, any> | null | undefined;
    }[];
}, {
    devices: {
        deviceId: string;
        deviceType: string;
        ip: string;
        lastLoginTime: number;
        ban?: {
            namespace: string;
            deviceId: string;
            enabled: boolean;
            endDate: number;
            reason: string;
            comment: string;
            bannedBy: string;
            id: string;
            deviceType: string;
            bannedAt: number;
            disabledAt: number;
            targetNamespace: string;
        } | null | undefined;
        ext?: Record<string, any> | null | undefined;
    }[];
}>;
interface DevicesResponseV4 extends z.TypeOf<typeof DevicesResponseV4> {
}

declare const InputValidationUpdatePayload: z.ZodObject<{
    field: z.ZodString;
    validation: z.ZodObject<{
        allowAllSpecialCharacters: z.ZodBoolean;
        allowDigit: z.ZodBoolean;
        allowLetter: z.ZodBoolean;
        allowSpace: z.ZodBoolean;
        allowUnicode: z.ZodBoolean;
        avatarConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            allowedPrefixes: z.ZodArray<z.ZodString, "many">;
            preferRegex: z.ZodBoolean;
            regex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            allowedPrefixes: string[];
            preferRegex: boolean;
            regex: string;
        }, {
            allowedPrefixes: string[];
            preferRegex: boolean;
            regex: string;
        }>>>;
        blockedWord: z.ZodArray<z.ZodString, "many">;
        description: z.ZodArray<z.ZodObject<{
            language: z.ZodString;
            message: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            message: string[];
            language: string;
        }, {
            message: string[];
            language: string;
        }>, "many">;
        isCustomRegex: z.ZodBoolean;
        letterCase: z.ZodString;
        maxLength: z.ZodNumber;
        maxRepeatingAlphaNum: z.ZodNumber;
        maxRepeatingSpecialCharacter: z.ZodNumber;
        minCharType: z.ZodNumber;
        minLength: z.ZodNumber;
        profanityFilter: z.ZodString;
        regex: z.ZodString;
        specialCharacterLocation: z.ZodString;
        specialCharacters: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        description: {
            message: string[];
            language: string;
        }[];
        minLength: number;
        maxLength: number;
        regex: string;
        allowAllSpecialCharacters: boolean;
        allowDigit: boolean;
        allowLetter: boolean;
        allowSpace: boolean;
        allowUnicode: boolean;
        blockedWord: string[];
        isCustomRegex: boolean;
        letterCase: string;
        maxRepeatingAlphaNum: number;
        maxRepeatingSpecialCharacter: number;
        minCharType: number;
        profanityFilter: string;
        specialCharacterLocation: string;
        specialCharacters: string[];
        avatarConfig?: {
            allowedPrefixes: string[];
            preferRegex: boolean;
            regex: string;
        } | null | undefined;
    }, {
        description: {
            message: string[];
            language: string;
        }[];
        minLength: number;
        maxLength: number;
        regex: string;
        allowAllSpecialCharacters: boolean;
        allowDigit: boolean;
        allowLetter: boolean;
        allowSpace: boolean;
        allowUnicode: boolean;
        blockedWord: string[];
        isCustomRegex: boolean;
        letterCase: string;
        maxRepeatingAlphaNum: number;
        maxRepeatingSpecialCharacter: number;
        minCharType: number;
        profanityFilter: string;
        specialCharacterLocation: string;
        specialCharacters: string[];
        avatarConfig?: {
            allowedPrefixes: string[];
            preferRegex: boolean;
            regex: string;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    validation: {
        description: {
            message: string[];
            language: string;
        }[];
        minLength: number;
        maxLength: number;
        regex: string;
        allowAllSpecialCharacters: boolean;
        allowDigit: boolean;
        allowLetter: boolean;
        allowSpace: boolean;
        allowUnicode: boolean;
        blockedWord: string[];
        isCustomRegex: boolean;
        letterCase: string;
        maxRepeatingAlphaNum: number;
        maxRepeatingSpecialCharacter: number;
        minCharType: number;
        profanityFilter: string;
        specialCharacterLocation: string;
        specialCharacters: string[];
        avatarConfig?: {
            allowedPrefixes: string[];
            preferRegex: boolean;
            regex: string;
        } | null | undefined;
    };
    field: string;
}, {
    validation: {
        description: {
            message: string[];
            language: string;
        }[];
        minLength: number;
        maxLength: number;
        regex: string;
        allowAllSpecialCharacters: boolean;
        allowDigit: boolean;
        allowLetter: boolean;
        allowSpace: boolean;
        allowUnicode: boolean;
        blockedWord: string[];
        isCustomRegex: boolean;
        letterCase: string;
        maxRepeatingAlphaNum: number;
        maxRepeatingSpecialCharacter: number;
        minCharType: number;
        profanityFilter: string;
        specialCharacterLocation: string;
        specialCharacters: string[];
        avatarConfig?: {
            allowedPrefixes: string[];
            preferRegex: boolean;
            regex: string;
        } | null | undefined;
    };
    field: string;
}>;
interface InputValidationUpdatePayload extends z.TypeOf<typeof InputValidationUpdatePayload> {
}

declare const InputValidationsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        validation: z.ZodObject<{
            allowAllSpecialCharacters: z.ZodBoolean;
            allowDigit: z.ZodBoolean;
            allowLetter: z.ZodBoolean;
            allowSpace: z.ZodBoolean;
            allowUnicode: z.ZodBoolean;
            avatarConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                allowedPrefixes: z.ZodArray<z.ZodString, "many">;
                preferRegex: z.ZodBoolean;
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            }, {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            }>>>;
            blockedWord: z.ZodArray<z.ZodString, "many">;
            description: z.ZodArray<z.ZodObject<{
                language: z.ZodString;
                message: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                message: string[];
                language: string;
            }, {
                message: string[];
                language: string;
            }>, "many">;
            isCustomRegex: z.ZodBoolean;
            letterCase: z.ZodString;
            maxLength: z.ZodNumber;
            maxRepeatingAlphaNum: z.ZodNumber;
            maxRepeatingSpecialCharacter: z.ZodNumber;
            minCharType: z.ZodNumber;
            minLength: z.ZodNumber;
            profanityFilter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            regex: z.ZodString;
            specialCharacterLocation: z.ZodString;
            specialCharacters: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            description: {
                message: string[];
                language: string;
            }[];
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        }, {
            description: {
                message: string[];
                language: string;
            }[];
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        validation: {
            description: {
                message: string[];
                language: string;
            }[];
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }, {
        validation: {
            description: {
                message: string[];
                language: string;
            }[];
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }>, "many">;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        validation: {
            description: {
                message: string[];
                language: string;
            }[];
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }[];
    version: number;
}, {
    data: {
        validation: {
            description: {
                message: string[];
                language: string;
            }[];
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }[];
    version: number;
}>;
interface InputValidationsResponse extends z.TypeOf<typeof InputValidationsResponse> {
}

declare const LoginAllowlistRequest: z.ZodObject<{
    active: z.ZodBoolean;
    roleIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    roleIds: string[];
}, {
    active: boolean;
    roleIds: string[];
}>;
interface LoginAllowlistRequest extends z.TypeOf<typeof LoginAllowlistRequest> {
}

declare const LoginAllowlistResponse: z.ZodObject<{
    active: z.ZodBoolean;
    namespace: z.ZodString;
    roleIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    active: boolean;
    roleIds: string[];
}, {
    namespace: string;
    active: boolean;
    roleIds: string[];
}>;
interface LoginAllowlistResponse extends z.TypeOf<typeof LoginAllowlistResponse> {
}

declare const TokenThirdPartyResponse: z.ZodObject<{
    platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform_token: z.ZodString;
    platform_token_expires_at: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sand_box_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    platform_token: string;
    platformUserId?: string | null | undefined;
    platform_token_expires_at?: number | null | undefined;
    sand_box_id?: string | null | undefined;
}, {
    platform_token: string;
    platformUserId?: string | null | undefined;
    platform_token_expires_at?: number | null | undefined;
    sand_box_id?: string | null | undefined;
}>;
interface TokenThirdPartyResponse extends z.TypeOf<typeof TokenThirdPartyResponse> {
}

declare const RoleOverrideResponse: z.ZodObject<{
    active: z.ZodBoolean;
    additions: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    exclusions: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
    identity: z.ZodString;
    namespace: z.ZodString;
    overrides: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
    replacements: z.ZodArray<z.ZodObject<{
        replacement: z.ZodObject<{
            actions: z.ZodArray<z.ZodNumber, "many">;
            resource: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            resource: string;
            actions: number[];
        }, {
            resource: string;
            actions: number[];
        }>;
        target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }, {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }>, "many">;
    updatedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    active: boolean;
    additions: {
        resource: string;
        actions: number[];
    }[];
    exclusions: {
        resource: string;
        actions: number[];
    }[];
    identity: string;
    overrides: {
        resource: string;
        actions: number[];
    }[];
    replacements: {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }[];
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
}, {
    namespace: string;
    active: boolean;
    additions: {
        resource: string;
        actions: number[];
    }[];
    exclusions: {
        resource: string;
        actions: number[];
    }[];
    identity: string;
    overrides: {
        resource: string;
        actions: number[];
    }[];
    replacements: {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }[];
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
}>;
interface RoleOverrideResponse extends z.TypeOf<typeof RoleOverrideResponse> {
}

declare const RoleOverrideSourceResponse: z.ZodObject<{
    permissions: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    permissions: {
        resource: string;
        actions: number[];
    }[];
}, {
    permissions: {
        resource: string;
        actions: number[];
    }[];
}>;
interface RoleOverrideSourceResponse extends z.TypeOf<typeof RoleOverrideSourceResponse> {
}

declare const RoleOverrideStatsUpdateRequest: z.ZodObject<{
    active: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    active: boolean;
}, {
    active: boolean;
}>;
interface RoleOverrideStatsUpdateRequest extends z.TypeOf<typeof RoleOverrideStatsUpdateRequest> {
}

declare const RoleOverrideUpdateRequest: z.ZodObject<{
    additions: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
    exclusions: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
    overrides: z.ZodArray<z.ZodObject<{
        actions: z.ZodArray<z.ZodNumber, "many">;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        actions: number[];
    }, {
        resource: string;
        actions: number[];
    }>, "many">;
    replacements: z.ZodArray<z.ZodObject<{
        replacement: z.ZodObject<{
            actions: z.ZodArray<z.ZodNumber, "many">;
            resource: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            resource: string;
            actions: number[];
        }, {
            resource: string;
            actions: number[];
        }>;
        target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }, {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    additions: {
        resource: string;
        actions: number[];
    }[];
    exclusions: {
        resource: string;
        actions: number[];
    }[];
    overrides: {
        resource: string;
        actions: number[];
    }[];
    replacements: {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }[];
}, {
    additions: {
        resource: string;
        actions: number[];
    }[];
    exclusions: {
        resource: string;
        actions: number[];
    }[];
    overrides: {
        resource: string;
        actions: number[];
    }[];
    replacements: {
        replacement: {
            resource: string;
            actions: number[];
        };
        target: string;
    }[];
}>;
interface RoleOverrideUpdateRequest extends z.TypeOf<typeof RoleOverrideUpdateRequest> {
}

declare const RolePermissionResponseV3: z.ZodObject<{
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    permissions: {
        action: number;
        resource: string;
    }[];
}, {
    permissions: {
        action: number;
        resource: string;
    }[];
}>;
interface RolePermissionResponseV3 extends z.TypeOf<typeof RolePermissionResponseV3> {
}

declare const GetProfileUpdateStrategyConfigResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            minimumAllowedInterval: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            minimumAllowedInterval?: number | null | undefined;
        }, {
            minimumAllowedInterval?: number | null | undefined;
        }>>>;
        createdAt: z.ZodString;
        field: z.ZodString;
        type: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        createdAt: string;
        field: string;
        updatedAt: string;
        config?: {
            minimumAllowedInterval?: number | null | undefined;
        } | null | undefined;
    }, {
        type: string;
        createdAt: string;
        field: string;
        updatedAt: string;
        config?: {
            minimumAllowedInterval?: number | null | undefined;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        type: string;
        createdAt: string;
        field: string;
        updatedAt: string;
        config?: {
            minimumAllowedInterval?: number | null | undefined;
        } | null | undefined;
    }[];
}, {
    data: {
        type: string;
        createdAt: string;
        field: string;
        updatedAt: string;
        config?: {
            minimumAllowedInterval?: number | null | undefined;
        } | null | undefined;
    }[];
}>;
interface GetProfileUpdateStrategyConfigResponse extends z.TypeOf<typeof GetProfileUpdateStrategyConfigResponse> {
}

declare const SimpleProfileUpdateStrategyConfigs: z.ZodObject<{
    config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        minimumAllowedInterval: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        minimumAllowedInterval?: number | null | undefined;
    }, {
        minimumAllowedInterval?: number | null | undefined;
    }>>>;
    createdAt: z.ZodString;
    field: z.ZodString;
    type: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    createdAt: string;
    field: string;
    updatedAt: string;
    config?: {
        minimumAllowedInterval?: number | null | undefined;
    } | null | undefined;
}, {
    type: string;
    createdAt: string;
    field: string;
    updatedAt: string;
    config?: {
        minimumAllowedInterval?: number | null | undefined;
    } | null | undefined;
}>;
interface SimpleProfileUpdateStrategyConfigs extends z.TypeOf<typeof SimpleProfileUpdateStrategyConfigs> {
}

declare const UpdateProfileUpdateStrategyConfigRequest: z.ZodObject<{
    config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        minimumAllowedInterval: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        minimumAllowedInterval?: number | null | undefined;
    }, {
        minimumAllowedInterval?: number | null | undefined;
    }>>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type?: string | null | undefined;
    config?: {
        minimumAllowedInterval?: number | null | undefined;
    } | null | undefined;
}, {
    type?: string | null | undefined;
    config?: {
        minimumAllowedInterval?: number | null | undefined;
    } | null | undefined;
}>;
interface UpdateProfileUpdateStrategyConfigRequest extends z.TypeOf<typeof UpdateProfileUpdateStrategyConfigRequest> {
}

declare const AssignUserV4Request: z.ZodObject<{
    assignedNamespaces: z.ZodArray<z.ZodString, "many">;
    namespace: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
    assignedNamespaces: string[];
}, {
    namespace: string;
    userId: string;
    assignedNamespaces: string[];
}>;
interface AssignUserV4Request extends z.TypeOf<typeof AssignUserV4Request> {
}

declare const AssignedUserV4Response: z.ZodObject<{
    assignedNamespaces: z.ZodArray<z.ZodString, "many">;
    displayName: z.ZodString;
    email: z.ZodString;
    roleId: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    userId: string;
    displayName: string;
    assignedNamespaces: string[];
    email: string;
}, {
    roleId: string;
    userId: string;
    displayName: string;
    assignedNamespaces: string[];
    email: string;
}>;
interface AssignedUserV4Response extends z.TypeOf<typeof AssignedUserV4Response> {
}

declare const ListAssignedUsersV4Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        assignedNamespaces: z.ZodArray<z.ZodString, "many">;
        displayName: z.ZodString;
        email: z.ZodString;
        roleId: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        userId: string;
        displayName: string;
        assignedNamespaces: string[];
        email: string;
    }, {
        roleId: string;
        userId: string;
        displayName: string;
        assignedNamespaces: string[];
        email: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        roleId: string;
        userId: string;
        displayName: string;
        assignedNamespaces: string[];
        email: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        roleId: string;
        userId: string;
        displayName: string;
        assignedNamespaces: string[];
        email: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListAssignedUsersV4Response extends z.TypeOf<typeof ListAssignedUsersV4Response> {
}

declare const ListRoleV4Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        adminRole: z.ZodBoolean;
        isWildcard: z.ZodBoolean;
        permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">;
        roleId: z.ZodString;
        roleName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
    }, {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListRoleV4Response extends z.TypeOf<typeof ListRoleV4Response> {
}

declare const PermissionsV3: z.ZodObject<{
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
}, {
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
}>;
interface PermissionsV3 extends z.TypeOf<typeof PermissionsV3> {
}

declare const RevokeUserV4Request: z.ZodObject<{
    namespace: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
}, {
    namespace: string;
    userId: string;
}>;
interface RevokeUserV4Request extends z.TypeOf<typeof RevokeUserV4Request> {
}

declare const RoleAdminStatusResponseV3: z.ZodObject<{
    adminRole: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    adminRole: boolean;
}, {
    adminRole: boolean;
}>;
interface RoleAdminStatusResponseV3 extends z.TypeOf<typeof RoleAdminStatusResponseV3> {
}

declare const RoleCreateV3Request: z.ZodObject<{
    adminRole: z.ZodBoolean;
    deletable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    isWildcard: z.ZodBoolean;
    managers: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
    members: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    roleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
    managers: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    members: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    deletable?: boolean | null | undefined;
}, {
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
    managers: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    members: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    deletable?: boolean | null | undefined;
}>;
interface RoleCreateV3Request extends z.TypeOf<typeof RoleCreateV3Request> {
}

declare const RoleManagersRequestV3: z.ZodObject<{
    managers: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    managers: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
}, {
    managers: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
}>;
interface RoleManagersRequestV3 extends z.TypeOf<typeof RoleManagersRequestV3> {
}

declare const RoleManagersResponsesV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface RoleManagersResponsesV3 extends z.TypeOf<typeof RoleManagersResponsesV3> {
}

declare const RoleMembersRequestV3: z.ZodObject<{
    members: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    members: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
}, {
    members: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
}>;
interface RoleMembersRequestV3 extends z.TypeOf<typeof RoleMembersRequestV3> {
}

declare const RoleMembersResponseV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface RoleMembersResponseV3 extends z.TypeOf<typeof RoleMembersResponseV3> {
}

declare const RoleResponseV3: z.ZodObject<{
    adminRole: z.ZodBoolean;
    isWildcard: z.ZodBoolean;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    roleId: z.ZodString;
    roleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
}, {
    roleId: string;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
}>;
interface RoleResponseV3 extends z.TypeOf<typeof RoleResponseV3> {
}

declare const RoleResponseWithManagersAndPaginationV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        adminRole: z.ZodBoolean;
        isWildcard: z.ZodBoolean;
        managers: z.ZodArray<z.ZodObject<{
            displayName: z.ZodString;
            namespace: z.ZodString;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            userId: string;
            displayName: string;
        }, {
            namespace: string;
            userId: string;
            displayName: string;
        }>, "many">;
        permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">;
        roleId: z.ZodString;
        roleName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
        managers: {
            namespace: string;
            userId: string;
            displayName: string;
        }[];
    }, {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
        managers: {
            namespace: string;
            userId: string;
            displayName: string;
        }[];
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
        managers: {
            namespace: string;
            userId: string;
            displayName: string;
        }[];
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        roleId: string;
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        adminRole: boolean;
        isWildcard: boolean;
        roleName: string;
        managers: {
            namespace: string;
            userId: string;
            displayName: string;
        }[];
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface RoleResponseWithManagersAndPaginationV3 extends z.TypeOf<typeof RoleResponseWithManagersAndPaginationV3> {
}

declare const RoleUpdateRequestV3: z.ZodObject<{
    deletable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    isWildcard: z.ZodBoolean;
    roleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    isWildcard: boolean;
    roleName: string;
    deletable?: boolean | null | undefined;
}, {
    isWildcard: boolean;
    roleName: string;
    deletable?: boolean | null | undefined;
}>;
interface RoleUpdateRequestV3 extends z.TypeOf<typeof RoleUpdateRequestV3> {
}

declare const RoleV3: z.ZodObject<{
    adminRole: z.ZodBoolean;
    isWildcard: z.ZodBoolean;
    managers: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
    members: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
    }>, "many">;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    roleId: z.ZodString;
    roleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
    managers: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    members: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
}, {
    roleId: string;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
    managers: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
    members: {
        namespace: string;
        userId: string;
        displayName: string;
    }[];
}>;
interface RoleV3 extends z.TypeOf<typeof RoleV3> {
}

declare const RoleV4Request: z.ZodObject<{
    adminRole: z.ZodBoolean;
    deletable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    isWildcard: z.ZodBoolean;
    roleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
    deletable?: boolean | null | undefined;
}, {
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
    deletable?: boolean | null | undefined;
}>;
interface RoleV4Request extends z.TypeOf<typeof RoleV4Request> {
}

declare const RoleV4Response: z.ZodObject<{
    adminRole: z.ZodBoolean;
    isWildcard: z.ZodBoolean;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    roleId: z.ZodString;
    roleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
}, {
    roleId: string;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    adminRole: boolean;
    isWildcard: boolean;
    roleName: string;
}>;
interface RoleV4Response extends z.TypeOf<typeof RoleV4Response> {
}

declare const SsoPlatformCredentialRequest: z.ZodObject<{
    acsUrl: z.ZodString;
    apiKey: z.ZodString;
    appId: z.ZodString;
    federationMetadataUrl: z.ZodString;
    isActive: z.ZodBoolean;
    redirectUri: z.ZodString;
    secret: z.ZodString;
    ssoUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    redirectUri: string;
    secret: string;
    acsUrl: string;
    apiKey: string;
    appId: string;
    federationMetadataUrl: string;
    isActive: boolean;
    ssoUrl: string;
}, {
    redirectUri: string;
    secret: string;
    acsUrl: string;
    apiKey: string;
    appId: string;
    federationMetadataUrl: string;
    isActive: boolean;
    ssoUrl: string;
}>;
interface SsoPlatformCredentialRequest extends z.TypeOf<typeof SsoPlatformCredentialRequest> {
}

declare const SsoPlatformCredentialResponse: z.ZodObject<{
    acsUrl: z.ZodString;
    appId: z.ZodString;
    federationMetadataUrl: z.ZodString;
    isActive: z.ZodBoolean;
    namespace: z.ZodString;
    platformId: z.ZodString;
    redirectUri: z.ZodString;
    secret: z.ZodString;
    ssoUrl: z.ZodString;
    truncatedApiKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    redirectUri: string;
    secret: string;
    acsUrl: string;
    appId: string;
    federationMetadataUrl: string;
    isActive: boolean;
    ssoUrl: string;
    platformId: string;
    truncatedApiKey: string;
}, {
    namespace: string;
    redirectUri: string;
    secret: string;
    acsUrl: string;
    appId: string;
    federationMetadataUrl: string;
    isActive: boolean;
    ssoUrl: string;
    platformId: string;
    truncatedApiKey: string;
}>;
interface SsoPlatformCredentialResponse extends z.TypeOf<typeof SsoPlatformCredentialResponse> {
}

declare const SsoPlatformCredentialResponseArray: z.ZodArray<z.ZodObject<{
    acsUrl: z.ZodString;
    appId: z.ZodString;
    federationMetadataUrl: z.ZodString;
    isActive: z.ZodBoolean;
    namespace: z.ZodString;
    platformId: z.ZodString;
    redirectUri: z.ZodString;
    secret: z.ZodString;
    ssoUrl: z.ZodString;
    truncatedApiKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    redirectUri: string;
    secret: string;
    acsUrl: string;
    appId: string;
    federationMetadataUrl: string;
    isActive: boolean;
    ssoUrl: string;
    platformId: string;
    truncatedApiKey: string;
}, {
    namespace: string;
    redirectUri: string;
    secret: string;
    acsUrl: string;
    appId: string;
    federationMetadataUrl: string;
    isActive: boolean;
    ssoUrl: string;
    platformId: string;
    truncatedApiKey: string;
}>, "many">;
interface SsoPlatformCredentialResponseArray extends z.TypeOf<typeof SsoPlatformCredentialResponseArray> {
}

declare const CheckAvailabilityResponse: z.ZodObject<{
    Accessible: z.ZodBoolean;
    PlatformErrorMessage: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    Accessible: boolean;
    PlatformErrorMessage: Record<string, string>;
}, {
    Accessible: boolean;
    PlatformErrorMessage: Record<string, string>;
}>;
interface CheckAvailabilityResponse extends z.TypeOf<typeof CheckAvailabilityResponse> {
}

declare const PlatformDomainDeleteRequest: z.ZodObject<{
    domain: z.ZodString;
}, "strip", z.ZodTypeAny, {
    domain: string;
}, {
    domain: string;
}>;
interface PlatformDomainDeleteRequest extends z.TypeOf<typeof PlatformDomainDeleteRequest> {
}

declare const PlatformDomainResponse: z.ZodObject<{
    registeredDomains: z.ZodArray<z.ZodObject<{
        affectedClientIDs: z.ZodArray<z.ZodString, "many">;
        domain: z.ZodString;
        namespaces: z.ZodArray<z.ZodString, "many">;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    registeredDomains: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[];
}, {
    registeredDomains: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[];
}>;
interface PlatformDomainResponse extends z.TypeOf<typeof PlatformDomainResponse> {
}

declare const PlatformDomainUpdateRequest: z.ZodObject<{
    affectedClientIDs: z.ZodArray<z.ZodString, "many">;
    assignedNamespaces: z.ZodArray<z.ZodString, "many">;
    domain: z.ZodString;
    roleId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    assignedNamespaces: string[];
    domain: string;
    affectedClientIDs: string[];
}, {
    roleId: string;
    assignedNamespaces: string[];
    domain: string;
    affectedClientIDs: string[];
}>;
interface PlatformDomainUpdateRequest extends z.TypeOf<typeof PlatformDomainUpdateRequest> {
}

declare const ThirdPartyLoginPlatformCredentialRequest: z.ZodObject<{
    ACSURL: z.ZodString;
    AWSCognitoRegion: z.ZodString;
    AWSCognitoUserPool: z.ZodString;
    AllowedClients: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    AppId: z.ZodString;
    AuthorizationEndpoint: z.ZodString;
    ClientId: z.ZodString;
    EmptyStrFieldList: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    EnableServerLicenseValidation: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    Environment: z.ZodString;
    FederationMetadataURL: z.ZodString;
    GenericOauthFlow: z.ZodBoolean;
    IncludePUID: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    IsActive: z.ZodBoolean;
    Issuer: z.ZodString;
    JWKSEndpoint: z.ZodString;
    KeyID: z.ZodString;
    LogoURL: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    NetflixCertificates: z.ZodObject<{
        encryptedPrivateKey: z.ZodString;
        encryptedPrivateKeyName: z.ZodString;
        publicCertificate: z.ZodString;
        publicCertificateName: z.ZodString;
        rootCertificate: z.ZodString;
        rootCertificateName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    }, {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    }>;
    OrganizationId: z.ZodString;
    PlatformName: z.ZodString;
    RedirectUri: z.ZodString;
    RegisteredDomains: z.ZodArray<z.ZodObject<{
        affectedClientIDs: z.ZodArray<z.ZodString, "many">;
        domain: z.ZodString;
        namespaces: z.ZodArray<z.ZodString, "many">;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }>, "many">;
    Secret: z.ZodString;
    TeamID: z.ZodString;
    TokenAuthenticationType: z.ZodString;
    TokenClaimsMapping: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    TokenEndpoint: z.ZodString;
    UserInfoEndpoint: z.ZodString;
    UserInfoHTTPMethod: z.ZodString;
    scopes: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    scopes: string[];
    ACSURL: string;
    AWSCognitoRegion: string;
    AWSCognitoUserPool: string;
    AppId: string;
    AuthorizationEndpoint: string;
    ClientId: string;
    Environment: string;
    FederationMetadataURL: string;
    GenericOauthFlow: boolean;
    IsActive: boolean;
    Issuer: string;
    JWKSEndpoint: string;
    KeyID: string;
    NetflixCertificates: {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    };
    OrganizationId: string;
    PlatformName: string;
    RedirectUri: string;
    RegisteredDomains: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[];
    Secret: string;
    TeamID: string;
    TokenAuthenticationType: string;
    TokenEndpoint: string;
    UserInfoEndpoint: string;
    UserInfoHTTPMethod: string;
    AllowedClients?: string[] | null | undefined;
    EmptyStrFieldList?: string[] | null | undefined;
    EnableServerLicenseValidation?: boolean | null | undefined;
    IncludePUID?: boolean | null | undefined;
    LogoURL?: string | null | undefined;
    TokenClaimsMapping?: Record<string, string> | null | undefined;
}, {
    scopes: string[];
    ACSURL: string;
    AWSCognitoRegion: string;
    AWSCognitoUserPool: string;
    AppId: string;
    AuthorizationEndpoint: string;
    ClientId: string;
    Environment: string;
    FederationMetadataURL: string;
    GenericOauthFlow: boolean;
    IsActive: boolean;
    Issuer: string;
    JWKSEndpoint: string;
    KeyID: string;
    NetflixCertificates: {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    };
    OrganizationId: string;
    PlatformName: string;
    RedirectUri: string;
    RegisteredDomains: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[];
    Secret: string;
    TeamID: string;
    TokenAuthenticationType: string;
    TokenEndpoint: string;
    UserInfoEndpoint: string;
    UserInfoHTTPMethod: string;
    AllowedClients?: string[] | null | undefined;
    EmptyStrFieldList?: string[] | null | undefined;
    EnableServerLicenseValidation?: boolean | null | undefined;
    IncludePUID?: boolean | null | undefined;
    LogoURL?: string | null | undefined;
    TokenClaimsMapping?: Record<string, string> | null | undefined;
}>;
interface ThirdPartyLoginPlatformCredentialRequest extends z.TypeOf<typeof ThirdPartyLoginPlatformCredentialRequest> {
}

declare const ThirdPartyLoginPlatformCredentialResponse: z.ZodObject<{
    ACSURL: z.ZodString;
    AWSCognitoRegion: z.ZodString;
    AWSCognitoUserPool: z.ZodString;
    AllowedClients: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    AppId: z.ZodString;
    AuthorizationEndpoint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ClientId: z.ZodString;
    EnableServerLicenseValidation: z.ZodBoolean;
    Environment: z.ZodString;
    FederationMetadataURL: z.ZodString;
    GenericOauthFlow: z.ZodBoolean;
    IncludePUID: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    IsActive: z.ZodBoolean;
    Issuer: z.ZodString;
    JWKSEndpoint: z.ZodString;
    KeyID: z.ZodString;
    LogoURL: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Namespace: z.ZodString;
    NetflixCertificates: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        encryptedPrivateKey: z.ZodString;
        encryptedPrivateKeyName: z.ZodString;
        publicCertificate: z.ZodString;
        publicCertificateName: z.ZodString;
        rootCertificate: z.ZodString;
        rootCertificateName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    }, {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    }>>>;
    OrganizationId: z.ZodString;
    PlatformId: z.ZodString;
    PlatformName: z.ZodString;
    RedirectUri: z.ZodString;
    Secret: z.ZodString;
    TeamID: z.ZodString;
    TokenAuthenticationType: z.ZodString;
    TokenClaimsMapping: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    TokenEndpoint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    UserInfoEndpoint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    UserInfoHTTPMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    registeredDomains: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        affectedClientIDs: z.ZodArray<z.ZodString, "many">;
        domain: z.ZodString;
        namespaces: z.ZodArray<z.ZodString, "many">;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }>, "many">>>;
    scopes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    ACSURL: string;
    AWSCognitoRegion: string;
    AWSCognitoUserPool: string;
    AppId: string;
    ClientId: string;
    EnableServerLicenseValidation: boolean;
    Environment: string;
    FederationMetadataURL: string;
    GenericOauthFlow: boolean;
    IsActive: boolean;
    Issuer: string;
    JWKSEndpoint: string;
    KeyID: string;
    OrganizationId: string;
    PlatformName: string;
    RedirectUri: string;
    Secret: string;
    TeamID: string;
    TokenAuthenticationType: string;
    Namespace: string;
    PlatformId: string;
    scopes?: string[] | null | undefined;
    registeredDomains?: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[] | null | undefined;
    AllowedClients?: string[] | null | undefined;
    AuthorizationEndpoint?: string | null | undefined;
    IncludePUID?: boolean | null | undefined;
    LogoURL?: string | null | undefined;
    NetflixCertificates?: {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    } | null | undefined;
    TokenClaimsMapping?: Record<string, string> | null | undefined;
    TokenEndpoint?: string | null | undefined;
    UserInfoEndpoint?: string | null | undefined;
    UserInfoHTTPMethod?: string | null | undefined;
}, {
    ACSURL: string;
    AWSCognitoRegion: string;
    AWSCognitoUserPool: string;
    AppId: string;
    ClientId: string;
    EnableServerLicenseValidation: boolean;
    Environment: string;
    FederationMetadataURL: string;
    GenericOauthFlow: boolean;
    IsActive: boolean;
    Issuer: string;
    JWKSEndpoint: string;
    KeyID: string;
    OrganizationId: string;
    PlatformName: string;
    RedirectUri: string;
    Secret: string;
    TeamID: string;
    TokenAuthenticationType: string;
    Namespace: string;
    PlatformId: string;
    scopes?: string[] | null | undefined;
    registeredDomains?: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[] | null | undefined;
    AllowedClients?: string[] | null | undefined;
    AuthorizationEndpoint?: string | null | undefined;
    IncludePUID?: boolean | null | undefined;
    LogoURL?: string | null | undefined;
    NetflixCertificates?: {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    } | null | undefined;
    TokenClaimsMapping?: Record<string, string> | null | undefined;
    TokenEndpoint?: string | null | undefined;
    UserInfoEndpoint?: string | null | undefined;
    UserInfoHTTPMethod?: string | null | undefined;
}>;
interface ThirdPartyLoginPlatformCredentialResponse extends z.TypeOf<typeof ThirdPartyLoginPlatformCredentialResponse> {
}

declare const ThirdPartyLoginPlatformCredentialResponseArray: z.ZodArray<z.ZodObject<{
    ACSURL: z.ZodString;
    AWSCognitoRegion: z.ZodString;
    AWSCognitoUserPool: z.ZodString;
    AllowedClients: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    AppId: z.ZodString;
    AuthorizationEndpoint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ClientId: z.ZodString;
    EnableServerLicenseValidation: z.ZodBoolean;
    Environment: z.ZodString;
    FederationMetadataURL: z.ZodString;
    GenericOauthFlow: z.ZodBoolean;
    IncludePUID: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    IsActive: z.ZodBoolean;
    Issuer: z.ZodString;
    JWKSEndpoint: z.ZodString;
    KeyID: z.ZodString;
    LogoURL: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Namespace: z.ZodString;
    NetflixCertificates: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        encryptedPrivateKey: z.ZodString;
        encryptedPrivateKeyName: z.ZodString;
        publicCertificate: z.ZodString;
        publicCertificateName: z.ZodString;
        rootCertificate: z.ZodString;
        rootCertificateName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    }, {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    }>>>;
    OrganizationId: z.ZodString;
    PlatformId: z.ZodString;
    PlatformName: z.ZodString;
    RedirectUri: z.ZodString;
    Secret: z.ZodString;
    TeamID: z.ZodString;
    TokenAuthenticationType: z.ZodString;
    TokenClaimsMapping: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>>;
    TokenEndpoint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    UserInfoEndpoint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    UserInfoHTTPMethod: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    registeredDomains: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        affectedClientIDs: z.ZodArray<z.ZodString, "many">;
        domain: z.ZodString;
        namespaces: z.ZodArray<z.ZodString, "many">;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }, {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }>, "many">>>;
    scopes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    ACSURL: string;
    AWSCognitoRegion: string;
    AWSCognitoUserPool: string;
    AppId: string;
    ClientId: string;
    EnableServerLicenseValidation: boolean;
    Environment: string;
    FederationMetadataURL: string;
    GenericOauthFlow: boolean;
    IsActive: boolean;
    Issuer: string;
    JWKSEndpoint: string;
    KeyID: string;
    OrganizationId: string;
    PlatformName: string;
    RedirectUri: string;
    Secret: string;
    TeamID: string;
    TokenAuthenticationType: string;
    Namespace: string;
    PlatformId: string;
    scopes?: string[] | null | undefined;
    registeredDomains?: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[] | null | undefined;
    AllowedClients?: string[] | null | undefined;
    AuthorizationEndpoint?: string | null | undefined;
    IncludePUID?: boolean | null | undefined;
    LogoURL?: string | null | undefined;
    NetflixCertificates?: {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    } | null | undefined;
    TokenClaimsMapping?: Record<string, string> | null | undefined;
    TokenEndpoint?: string | null | undefined;
    UserInfoEndpoint?: string | null | undefined;
    UserInfoHTTPMethod?: string | null | undefined;
}, {
    ACSURL: string;
    AWSCognitoRegion: string;
    AWSCognitoUserPool: string;
    AppId: string;
    ClientId: string;
    EnableServerLicenseValidation: boolean;
    Environment: string;
    FederationMetadataURL: string;
    GenericOauthFlow: boolean;
    IsActive: boolean;
    Issuer: string;
    JWKSEndpoint: string;
    KeyID: string;
    OrganizationId: string;
    PlatformName: string;
    RedirectUri: string;
    Secret: string;
    TeamID: string;
    TokenAuthenticationType: string;
    Namespace: string;
    PlatformId: string;
    scopes?: string[] | null | undefined;
    registeredDomains?: {
        roleId: string;
        domain: string;
        affectedClientIDs: string[];
        namespaces: string[];
    }[] | null | undefined;
    AllowedClients?: string[] | null | undefined;
    AuthorizationEndpoint?: string | null | undefined;
    IncludePUID?: boolean | null | undefined;
    LogoURL?: string | null | undefined;
    NetflixCertificates?: {
        encryptedPrivateKey: string;
        encryptedPrivateKeyName: string;
        publicCertificate: string;
        publicCertificateName: string;
        rootCertificate: string;
        rootCertificateName: string;
    } | null | undefined;
    TokenClaimsMapping?: Record<string, string> | null | undefined;
    TokenEndpoint?: string | null | undefined;
    UserInfoEndpoint?: string | null | undefined;
    UserInfoHTTPMethod?: string | null | undefined;
}>, "many">;
interface ThirdPartyLoginPlatformCredentialResponseArray extends z.TypeOf<typeof ThirdPartyLoginPlatformCredentialResponseArray> {
}

declare const AgeRestrictionRequest: z.ZodObject<{
    AgeRestriction: z.ZodNumber;
    Enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    AgeRestriction: number;
    Enable: boolean;
}, {
    AgeRestriction: number;
    Enable: boolean;
}>;
interface AgeRestrictionRequest extends z.TypeOf<typeof AgeRestrictionRequest> {
}

declare const AgeRestrictionRequestV3: z.ZodObject<{
    ageRestriction: z.ZodNumber;
    enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ageRestriction: number;
    enable: boolean;
}, {
    ageRestriction: number;
    enable: boolean;
}>;
interface AgeRestrictionRequestV3 extends z.TypeOf<typeof AgeRestrictionRequestV3> {
}

declare const AgeRestrictionResponse: z.ZodObject<{
    AgeRestriction: z.ZodNumber;
    Enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    AgeRestriction: number;
    Enable: boolean;
}, {
    AgeRestriction: number;
    Enable: boolean;
}>;
interface AgeRestrictionResponse extends z.TypeOf<typeof AgeRestrictionResponse> {
}

declare const AgeRestrictionResponseV3: z.ZodObject<{
    ageRestriction: z.ZodNumber;
    enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ageRestriction: number;
    enable: boolean;
}, {
    ageRestriction: number;
    enable: boolean;
}>;
interface AgeRestrictionResponseV3 extends z.TypeOf<typeof AgeRestrictionResponseV3> {
}

declare const BanCreateRequest: z.ZodObject<{
    ban: z.ZodString;
    comment: z.ZodString;
    endDate: z.ZodString;
    reason: z.ZodString;
    skipNotif: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ban: string;
    endDate: string;
    reason: string;
    comment: string;
    skipNotif: boolean;
}, {
    ban: string;
    endDate: string;
    reason: string;
    comment: string;
    skipNotif: boolean;
}>;
interface BanCreateRequest extends z.TypeOf<typeof BanCreateRequest> {
}

declare const BanUpdateRequest: z.ZodObject<{
    enabled: z.ZodBoolean;
    skipNotif: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    skipNotif: boolean;
}, {
    enabled: boolean;
    skipNotif: boolean;
}>;
interface BanUpdateRequest extends z.TypeOf<typeof BanUpdateRequest> {
}

declare const Country: z.ZodObject<{
    AgeRestriction: z.ZodNumber;
    CountryCode: z.ZodString;
    CountryName: z.ZodString;
    Enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    AgeRestriction: number;
    Enable: boolean;
    CountryCode: string;
    CountryName: string;
}, {
    AgeRestriction: number;
    Enable: boolean;
    CountryCode: string;
    CountryName: string;
}>;
interface Country extends z.TypeOf<typeof Country> {
}

declare const CountryAgeRestrictionArray: z.ZodArray<z.ZodObject<{
    AgeRestriction: z.ZodNumber;
    CountryCode: z.ZodString;
    CountryName: z.ZodString;
    Enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    AgeRestriction: number;
    Enable: boolean;
    CountryCode: string;
    CountryName: string;
}, {
    AgeRestriction: number;
    Enable: boolean;
    CountryCode: string;
    CountryName: string;
}>, "many">;
interface CountryAgeRestrictionArray extends z.TypeOf<typeof CountryAgeRestrictionArray> {
}

declare const CountryAgeRestrictionRequest: z.ZodObject<{
    AgeRestriction: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    AgeRestriction: number;
}, {
    AgeRestriction: number;
}>;
interface CountryAgeRestrictionRequest extends z.TypeOf<typeof CountryAgeRestrictionRequest> {
}

declare const CountryAgeRestrictionV3Request: z.ZodObject<{
    ageRestriction: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    ageRestriction: number;
}, {
    ageRestriction: number;
}>;
interface CountryAgeRestrictionV3Request extends z.TypeOf<typeof CountryAgeRestrictionV3Request> {
}

declare const CountryV3Response: z.ZodObject<{
    ageRestriction: z.ZodNumber;
    countryCode: z.ZodString;
    countryName: z.ZodString;
    enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ageRestriction: number;
    enable: boolean;
    countryCode: string;
    countryName: string;
}, {
    ageRestriction: number;
    enable: boolean;
    countryCode: string;
    countryName: string;
}>;
interface CountryV3Response extends z.TypeOf<typeof CountryV3Response> {
}

declare const CountryV3ResponseArray: z.ZodArray<z.ZodObject<{
    ageRestriction: z.ZodNumber;
    countryCode: z.ZodString;
    countryName: z.ZodString;
    enable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ageRestriction: number;
    enable: boolean;
    countryCode: string;
    countryName: string;
}, {
    ageRestriction: number;
    enable: boolean;
    countryCode: string;
    countryName: string;
}>, "many">;
interface CountryV3ResponseArray extends z.TypeOf<typeof CountryV3ResponseArray> {
}

declare const CreateJusticeUserResponse: z.ZodObject<{
    namespace: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
}, {
    namespace: string;
    userId: string;
}>;
interface CreateJusticeUserResponse extends z.TypeOf<typeof CreateJusticeUserResponse> {
}

declare const DisableUserRequest: z.ZodObject<{
    Reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Reason?: string | null | undefined;
}, {
    Reason?: string | null | undefined;
}>;
interface DisableUserRequest extends z.TypeOf<typeof DisableUserRequest> {
}

declare const DistinctPlatformResponseV3: z.ZodObject<{
    platforms: z.ZodArray<z.ZodObject<{
        details: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            linkedAt: z.ZodString;
            namespace: z.ZodString;
            originNamespace: z.ZodString;
            platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            linkedAt: string;
            originNamespace: string;
            displayName?: string | null | undefined;
            platformId?: string | null | undefined;
        }, {
            namespace: string;
            linkedAt: string;
            originNamespace: string;
            displayName?: string | null | undefined;
            platformId?: string | null | undefined;
        }>, "many">>>;
        linkedAt: z.ZodString;
        logoURL: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformGroup: z.ZodString;
        platformName: z.ZodString;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: string;
        linkedAt: string;
        platformGroup: string;
        platformName: string;
        platformUserId?: string | null | undefined;
        details?: {
            namespace: string;
            linkedAt: string;
            originNamespace: string;
            displayName?: string | null | undefined;
            platformId?: string | null | undefined;
        }[] | null | undefined;
        logoURL?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
    }, {
        status: string;
        linkedAt: string;
        platformGroup: string;
        platformName: string;
        platformUserId?: string | null | undefined;
        details?: {
            namespace: string;
            linkedAt: string;
            originNamespace: string;
            displayName?: string | null | undefined;
            platformId?: string | null | undefined;
        }[] | null | undefined;
        logoURL?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    platforms: {
        status: string;
        linkedAt: string;
        platformGroup: string;
        platformName: string;
        platformUserId?: string | null | undefined;
        details?: {
            namespace: string;
            linkedAt: string;
            originNamespace: string;
            displayName?: string | null | undefined;
            platformId?: string | null | undefined;
        }[] | null | undefined;
        logoURL?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
    }[];
}, {
    platforms: {
        status: string;
        linkedAt: string;
        platformGroup: string;
        platformName: string;
        platformUserId?: string | null | undefined;
        details?: {
            namespace: string;
            linkedAt: string;
            originNamespace: string;
            displayName?: string | null | undefined;
            platformId?: string | null | undefined;
        }[] | null | undefined;
        logoURL?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
    }[];
}>;
interface DistinctPlatformResponseV3 extends z.TypeOf<typeof DistinctPlatformResponseV3> {
}

declare const GetBulkUserBansRequest: z.ZodObject<{
    bulkUserId: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    bulkUserId: string[];
}, {
    bulkUserId: string[];
}>;
interface GetBulkUserBansRequest extends z.TypeOf<typeof GetBulkUserBansRequest> {
}

declare const GetUserBanSummaryV3: z.ZodObject<{
    activeCount: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        active: z.ZodBoolean;
        ban: z.ZodString;
        banId: z.ZodString;
        bannedBy: z.ZodObject<{
            displayName: z.ZodString;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userId: string;
            displayName: string;
        }, {
            userId: string;
            displayName: string;
        }>;
        comment: z.ZodString;
        createdAt: z.ZodString;
        disabledDate: z.ZodString;
        enabled: z.ZodBoolean;
        endDate: z.ZodString;
        namespace: z.ZodString;
        reason: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
        active: boolean;
    }, {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
        active: boolean;
    }>, "many">;
    inactiveCount: z.ZodNumber;
    totalCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
        active: boolean;
    }[];
    activeCount: number;
    inactiveCount: number;
    totalCount: number;
}, {
    data: {
        namespace: string;
        ban: string;
        disabledDate: string;
        enabled: boolean;
        endDate: string;
        reason: string;
        comment: string;
        banId: string;
        userId: string;
        bannedBy: {
            userId: string;
            displayName: string;
        };
        createdAt: string;
        active: boolean;
    }[];
    activeCount: number;
    inactiveCount: number;
    totalCount: number;
}>;
interface GetUserBanSummaryV3 extends z.TypeOf<typeof GetUserBanSummaryV3> {
}

declare const GetUserMappingArray: z.ZodArray<z.ZodObject<{
    Namespace: z.ZodString;
    UserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
}, {
    Namespace: string;
    UserId: string;
}>, "many">;
interface GetUserMappingArray extends z.TypeOf<typeof GetUserMappingArray> {
}

declare const GetUserMappingV3: z.ZodObject<{
    namespace: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
}, {
    namespace: string;
    userId: string;
}>;
interface GetUserMappingV3 extends z.TypeOf<typeof GetUserMappingV3> {
}

declare const GetUsersResponseWithPaginationV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        authType: z.ZodString;
        avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        bans: z.ZodArray<z.ZodObject<{
            ban: z.ZodString;
            banId: z.ZodString;
            endDate: z.ZodString;
            targetedNamespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }, {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }>, "many">;
        country: z.ZodString;
        createdAt: z.ZodString;
        dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deletionDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deletionStatus: z.ZodBoolean;
        displayName: z.ZodString;
        emailAddress: z.ZodString;
        emailVerified: z.ZodBoolean;
        enabled: z.ZodBoolean;
        lastDateOfBirthChangedTime: z.ZodString;
        lastEnabledChangedTime: z.ZodString;
        namespace: z.ZodString;
        namespaceRoles: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            roleId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            roleId: string;
        }, {
            namespace: string;
            roleId: string;
        }>, "many">;
        newEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        oldEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">;
        phoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        phoneVerified: z.ZodBoolean;
        platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformId: z.ZodString;
            platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }>, "many">>>;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        roles: z.ZodArray<z.ZodString, "many">;
        skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        testAccount: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }, {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface GetUsersResponseWithPaginationV3 extends z.TypeOf<typeof GetUsersResponseWithPaginationV3> {
}

declare const InviteUserRequestV3: z.ZodObject<{
    emailAddresses: z.ZodArray<z.ZodString, "many">;
    isAdmin: z.ZodBoolean;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    roles: string[];
    emailAddresses: string[];
    isAdmin: boolean;
    namespace?: string | null | undefined;
    languageTag?: string | null | undefined;
}, {
    roles: string[];
    emailAddresses: string[];
    isAdmin: boolean;
    namespace?: string | null | undefined;
    languageTag?: string | null | undefined;
}>;
interface InviteUserRequestV3 extends z.TypeOf<typeof InviteUserRequestV3> {
}

declare const InviteUserResponseV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        additionalData: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodString;
        expiredAt: z.ZodString;
        id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        isNewStudio: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        namespaceDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        roles: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            roleId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            roleId: string;
        }, {
            namespace: string;
            roleId: string;
        }>, "many">;
        studioNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        roles: {
            namespace: string;
            roleId: string;
        }[];
        email: string;
        expiredAt: string;
        namespace?: string | null | undefined;
        id?: string | null | undefined;
        additionalData?: string | null | undefined;
        isNewStudio?: boolean | null | undefined;
        namespaceDisplayName?: string | null | undefined;
        studioNamespace?: string | null | undefined;
    }, {
        roles: {
            namespace: string;
            roleId: string;
        }[];
        email: string;
        expiredAt: string;
        namespace?: string | null | undefined;
        id?: string | null | undefined;
        additionalData?: string | null | undefined;
        isNewStudio?: boolean | null | undefined;
        namespaceDisplayName?: string | null | undefined;
        studioNamespace?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        roles: {
            namespace: string;
            roleId: string;
        }[];
        email: string;
        expiredAt: string;
        namespace?: string | null | undefined;
        id?: string | null | undefined;
        additionalData?: string | null | undefined;
        isNewStudio?: boolean | null | undefined;
        namespaceDisplayName?: string | null | undefined;
        studioNamespace?: string | null | undefined;
    }[];
}, {
    data: {
        roles: {
            namespace: string;
            roleId: string;
        }[];
        email: string;
        expiredAt: string;
        namespace?: string | null | undefined;
        id?: string | null | undefined;
        additionalData?: string | null | undefined;
        isNewStudio?: boolean | null | undefined;
        namespaceDisplayName?: string | null | undefined;
        studioNamespace?: string | null | undefined;
    }[];
}>;
interface InviteUserResponseV3 extends z.TypeOf<typeof InviteUserResponseV3> {
}

declare const LinkPlatformAccountRequest: z.ZodObject<{
    platformId: z.ZodString;
    platformUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    platformUserId: string;
    platformId: string;
}, {
    platformUserId: string;
    platformId: string;
}>;
interface LinkPlatformAccountRequest extends z.TypeOf<typeof LinkPlatformAccountRequest> {
}

declare const LinkingHistoryResponseWithPaginationV3: z.ZodObject<{
    data: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
    totalData: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    totalData: number;
}, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    totalData: number;
}>;
interface LinkingHistoryResponseWithPaginationV3 extends z.TypeOf<typeof LinkingHistoryResponseWithPaginationV3> {
}

declare const ListBulkUserPlatformsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformInfos: z.ZodArray<z.ZodObject<{
            platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformId: z.ZodString;
            platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }>, "many">;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        xuid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        username?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }, {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        username?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        username?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }[];
}, {
    data: {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        username?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }[];
}>;
interface ListBulkUserPlatformsResponse extends z.TypeOf<typeof ListBulkUserPlatformsResponse> {
}

declare const ListEmailAddressRequest: z.ZodObject<{
    listEmailAddressRequest: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    listEmailAddressRequest: string[];
}, {
    listEmailAddressRequest: string[];
}>;
interface ListEmailAddressRequest extends z.TypeOf<typeof ListEmailAddressRequest> {
}

declare const ListUserInformationResult: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        displayName: z.ZodString;
        emailAddress: z.ZodString;
        namespace: z.ZodString;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
        emailAddress: string;
        uniqueDisplayName?: string | null | undefined;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
        emailAddress: string;
        uniqueDisplayName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
        emailAddress: string;
        uniqueDisplayName?: string | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
        emailAddress: string;
        uniqueDisplayName?: string | null | undefined;
    }[];
}>;
interface ListUserInformationResult extends z.TypeOf<typeof ListUserInformationResult> {
}

declare const ListUserResponseV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        authType: z.ZodString;
        avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        bans: z.ZodArray<z.ZodObject<{
            ban: z.ZodString;
            banId: z.ZodString;
            endDate: z.ZodString;
            targetedNamespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }, {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }>, "many">;
        country: z.ZodString;
        createdAt: z.ZodString;
        dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deletionDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deletionStatus: z.ZodBoolean;
        displayName: z.ZodString;
        emailAddress: z.ZodString;
        emailVerified: z.ZodBoolean;
        enabled: z.ZodBoolean;
        lastDateOfBirthChangedTime: z.ZodString;
        lastEnabledChangedTime: z.ZodString;
        namespace: z.ZodString;
        namespaceRoles: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            roleId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            roleId: string;
        }, {
            namespace: string;
            roleId: string;
        }>, "many">;
        newEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        oldEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">;
        phoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        phoneVerified: z.ZodBoolean;
        platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformId: z.ZodString;
            platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }>, "many">>>;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        roles: z.ZodArray<z.ZodString, "many">;
        skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        testAccount: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }, {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }[];
}>;
interface ListUserResponseV3 extends z.TypeOf<typeof ListUserResponseV3> {
}

declare const ListUsersWithPlatformAccountsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        linkedPlatforms: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformUserId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            platformUserId: string;
            platformId?: string | null | undefined;
        }, {
            namespace: string;
            platformUserId: string;
            platformId?: string | null | undefined;
        }>, "many">;
        namespace: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        linkedPlatforms: {
            namespace: string;
            platformUserId: string;
            platformId?: string | null | undefined;
        }[];
    }, {
        namespace: string;
        userId: string;
        linkedPlatforms: {
            namespace: string;
            platformUserId: string;
            platformId?: string | null | undefined;
        }[];
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
    totalData: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        userId: string;
        linkedPlatforms: {
            namespace: string;
            platformUserId: string;
            platformId?: string | null | undefined;
        }[];
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    totalData: number;
}, {
    data: {
        namespace: string;
        userId: string;
        linkedPlatforms: {
            namespace: string;
            platformUserId: string;
            platformId?: string | null | undefined;
        }[];
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    totalData: number;
}>;
interface ListUsersWithPlatformAccountsResponse extends z.TypeOf<typeof ListUsersWithPlatformAccountsResponse> {
}

declare const LoginHistoriesResponse: z.ZodObject<{
    Data: z.ZodArray<z.ZodObject<{
        ApplicationName: z.ZodString;
        City: z.ZodString;
        Country: z.ZodString;
        DeviceId: z.ZodString;
        State: z.ZodString;
        Timestamp: z.ZodNumber;
        deviceName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ApplicationName: string;
        City: string;
        Country: string;
        DeviceId: string;
        State: string;
        Timestamp: number;
        deviceName: string;
    }, {
        ApplicationName: string;
        City: string;
        Country: string;
        DeviceId: string;
        State: string;
        Timestamp: number;
        deviceName: string;
    }>, "many">;
    Paging: z.ZodObject<{
        First: z.ZodString;
        Last: z.ZodString;
        Next: z.ZodString;
        Previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    Data: {
        ApplicationName: string;
        City: string;
        Country: string;
        DeviceId: string;
        State: string;
        Timestamp: number;
        deviceName: string;
    }[];
    Paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}, {
    Data: {
        ApplicationName: string;
        City: string;
        Country: string;
        DeviceId: string;
        State: string;
        Timestamp: number;
        deviceName: string;
    }[];
    Paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}>;
interface LoginHistoriesResponse extends z.TypeOf<typeof LoginHistoriesResponse> {
}

declare const NamespaceRoleRequest: z.ZodObject<{
    namespace: z.ZodString;
    roleId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    roleId: string;
}, {
    namespace: string;
    roleId: string;
}>;
interface NamespaceRoleRequest extends z.TypeOf<typeof NamespaceRoleRequest> {
}

declare const PermissionDeleteRequest: z.ZodObject<{
    Action: z.ZodNumber;
    Resource: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Action: number;
    Resource: string;
}, {
    Action: number;
    Resource: string;
}>;
interface PermissionDeleteRequest extends z.TypeOf<typeof PermissionDeleteRequest> {
}

declare const Permissions: z.ZodObject<{
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Permissions: {
        action: number;
        resource: string;
    }[];
}, {
    Permissions: {
        action: number;
        resource: string;
    }[];
}>;
interface Permissions extends z.TypeOf<typeof Permissions> {
}

declare const PlatformUserIdRequest: z.ZodObject<{
    platformUserIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    platformUserIds: string[];
}, {
    platformUserIds: string[];
}>;
interface PlatformUserIdRequest extends z.TypeOf<typeof PlatformUserIdRequest> {
}

declare const SearchUsersByPlatformIdResponse: z.ZodObject<{
    Data: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        EmailAddress: z.ZodString;
        LinkedPlatforms: z.ZodArray<z.ZodObject<{
            DisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            LinkedAt: z.ZodString;
            Namespace: z.ZodString;
            OriginNamespace: z.ZodString;
            PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            UserId: z.ZodString;
            XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }, {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }>, "many">;
        PhoneNumber: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }, {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }>, "many">;
    Paging: z.ZodObject<{
        First: z.ZodString;
        Last: z.ZodString;
        Next: z.ZodString;
        Previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    Data: {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }[];
    Paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}, {
    Data: {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }[];
    Paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}>;
interface SearchUsersByPlatformIdResponse extends z.TypeOf<typeof SearchUsersByPlatformIdResponse> {
}

declare const SearchUsersResponseWithPaginationV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        authType: z.ZodString;
        avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        bans: z.ZodArray<z.ZodObject<{
            ban: z.ZodString;
            banId: z.ZodString;
            endDate: z.ZodString;
            targetedNamespace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }, {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }>, "many">;
        country: z.ZodString;
        createdAt: z.ZodString;
        dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deletionDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        deletionStatus: z.ZodBoolean;
        displayName: z.ZodString;
        emailAddress: z.ZodString;
        emailVerified: z.ZodBoolean;
        enabled: z.ZodBoolean;
        lastDateOfBirthChangedTime: z.ZodString;
        lastEnabledChangedTime: z.ZodString;
        namespace: z.ZodString;
        namespaceRoles: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            roleId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            roleId: string;
        }, {
            namespace: string;
            roleId: string;
        }>, "many">;
        newEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        oldEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
            schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }, {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }>, "many">;
        phoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        phoneVerified: z.ZodBoolean;
        platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformId: z.ZodString;
            platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }>, "many">>>;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        roles: z.ZodArray<z.ZodString, "many">;
        skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        testAccount: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }, {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
    totalData: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    totalData: number;
}, {
    data: {
        namespace: string;
        enabled: boolean;
        bans: {
            ban: string;
            endDate: string;
            targetedNamespace: string;
            banId: string;
        }[];
        permissions: {
            action: number;
            resource: string;
            schedAction?: number | null | undefined;
            schedCron?: string | null | undefined;
            schedRange?: string[] | null | undefined;
        }[];
        roles: string[];
        userId: string;
        displayName: string;
        createdAt: string;
        country: string;
        authType: string;
        deletionStatus: boolean;
        emailAddress: string;
        emailVerified: boolean;
        lastDateOfBirthChangedTime: string;
        lastEnabledChangedTime: string;
        namespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        phoneVerified: boolean;
        skipLoginQueue?: boolean | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        dateOfBirth?: string | null | undefined;
        deletionDate?: string | null | undefined;
        newEmailAddress?: string | null | undefined;
        oldEmailAddress?: string | null | undefined;
        phoneNumber?: string | null | undefined;
        platformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
        testAccount?: boolean | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        userName?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
    totalData: number;
}>;
interface SearchUsersResponseWithPaginationV3 extends z.TypeOf<typeof SearchUsersResponseWithPaginationV3> {
}

declare const SendVerificationCodeRequestV3: z.ZodObject<{
    context: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    emailAddress: z.ZodString;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    emailAddress: string;
    languageTag?: string | null | undefined;
    context?: string | null | undefined;
}, {
    emailAddress: string;
    languageTag?: string | null | undefined;
    context?: string | null | undefined;
}>;
interface SendVerificationCodeRequestV3 extends z.TypeOf<typeof SendVerificationCodeRequestV3> {
}

declare const TokenThirdPartyLinkStatusResponse: z.ZodObject<{
    linked: z.ZodBoolean;
    platformToken: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sandboxId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    linked: boolean;
    platformToken?: string | null | undefined;
    sandboxId?: string | null | undefined;
}, {
    linked: boolean;
    platformToken?: string | null | undefined;
    sandboxId?: string | null | undefined;
}>;
interface TokenThirdPartyLinkStatusResponse extends z.TypeOf<typeof TokenThirdPartyLinkStatusResponse> {
}

declare const UnlinkUserPlatformRequest: z.ZodObject<{
    platformNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    platformNamespace?: string | null | undefined;
}, {
    platformNamespace?: string | null | undefined;
}>;
interface UnlinkUserPlatformRequest extends z.TypeOf<typeof UnlinkUserPlatformRequest> {
}

declare const UpdateUserDeletionStatusRequest: z.ZodObject<{
    deletionDate: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    enabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    deletionDate?: number | null | undefined;
}, {
    enabled: boolean;
    deletionDate?: number | null | undefined;
}>;
interface UpdateUserDeletionStatusRequest extends z.TypeOf<typeof UpdateUserDeletionStatusRequest> {
}

declare const UpdateUserStatusRequest: z.ZodObject<{
    enabled: z.ZodBoolean;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    reason?: string | null | undefined;
}, {
    enabled: boolean;
    reason?: string | null | undefined;
}>;
interface UpdateUserStatusRequest extends z.TypeOf<typeof UpdateUserStatusRequest> {
}

declare const UpgradeHeadlessAccountWithVerificationCodeRequestV3: z.ZodObject<{
    code: z.ZodString;
    country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    emailAddress: z.ZodString;
    password: z.ZodString;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    validateOnly: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    password: string;
    emailAddress: string;
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    validateOnly?: boolean | null | undefined;
}, {
    code: string;
    password: string;
    emailAddress: string;
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    validateOnly?: boolean | null | undefined;
}>;
interface UpgradeHeadlessAccountWithVerificationCodeRequestV3 extends z.TypeOf<typeof UpgradeHeadlessAccountWithVerificationCodeRequestV3> {
}

declare const UserBanResponse: z.ZodObject<{
    Ban: z.ZodString;
    BanId: z.ZodString;
    BannedBy: z.ZodObject<{
        DisplayName: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        DisplayName: string;
    }, {
        userId: string;
        DisplayName: string;
    }>;
    Comment: z.ZodString;
    CreatedAt: z.ZodString;
    DisabledDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Enabled: z.ZodBoolean;
    EndDate: z.ZodString;
    Namespace: z.ZodString;
    Reason: z.ZodString;
    UserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    Reason: string;
    UserId: string;
    Ban: string;
    BanId: string;
    BannedBy: {
        userId: string;
        DisplayName: string;
    };
    Comment: string;
    CreatedAt: string;
    Enabled: boolean;
    EndDate: string;
    DisabledDate?: string | null | undefined;
}, {
    Namespace: string;
    Reason: string;
    UserId: string;
    Ban: string;
    BanId: string;
    BannedBy: {
        userId: string;
        DisplayName: string;
    };
    Comment: string;
    CreatedAt: string;
    Enabled: boolean;
    EndDate: string;
    DisabledDate?: string | null | undefined;
}>;
interface UserBanResponse extends z.TypeOf<typeof UserBanResponse> {
}

declare const UserBanResponseArray: z.ZodArray<z.ZodObject<{
    Ban: z.ZodString;
    BanId: z.ZodString;
    BannedBy: z.ZodObject<{
        DisplayName: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        DisplayName: string;
    }, {
        userId: string;
        DisplayName: string;
    }>;
    Comment: z.ZodString;
    CreatedAt: z.ZodString;
    DisabledDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Enabled: z.ZodBoolean;
    EndDate: z.ZodString;
    Namespace: z.ZodString;
    Reason: z.ZodString;
    UserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    Reason: string;
    UserId: string;
    Ban: string;
    BanId: string;
    BannedBy: {
        userId: string;
        DisplayName: string;
    };
    Comment: string;
    CreatedAt: string;
    Enabled: boolean;
    EndDate: string;
    DisabledDate?: string | null | undefined;
}, {
    Namespace: string;
    Reason: string;
    UserId: string;
    Ban: string;
    BanId: string;
    BannedBy: {
        userId: string;
        DisplayName: string;
    };
    Comment: string;
    CreatedAt: string;
    Enabled: boolean;
    EndDate: string;
    DisabledDate?: string | null | undefined;
}>, "many">;
interface UserBanResponseArray extends z.TypeOf<typeof UserBanResponseArray> {
}

declare const UserBanResponseV3: z.ZodObject<{
    ban: z.ZodString;
    banId: z.ZodString;
    bannedBy: z.ZodObject<{
        displayName: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        displayName: string;
    }, {
        userId: string;
        displayName: string;
    }>;
    comment: z.ZodString;
    createdAt: z.ZodString;
    disabledDate: z.ZodString;
    enabled: z.ZodBoolean;
    endDate: z.ZodString;
    namespace: z.ZodString;
    reason: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    ban: string;
    disabledDate: string;
    enabled: boolean;
    endDate: string;
    reason: string;
    comment: string;
    banId: string;
    userId: string;
    bannedBy: {
        userId: string;
        displayName: string;
    };
    createdAt: string;
}, {
    namespace: string;
    ban: string;
    disabledDate: string;
    enabled: boolean;
    endDate: string;
    reason: string;
    comment: string;
    banId: string;
    userId: string;
    bannedBy: {
        userId: string;
        displayName: string;
    };
    createdAt: string;
}>;
interface UserBanResponseV3 extends z.TypeOf<typeof UserBanResponseV3> {
}

declare const UserDeletionStatusResponse: z.ZodObject<{
    deletionStatus: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    deletionStatus: boolean;
}, {
    deletionStatus: boolean;
}>;
interface UserDeletionStatusResponse extends z.TypeOf<typeof UserDeletionStatusResponse> {
}

declare const UserIDsRequest: z.ZodObject<{
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
}, {
    userIds: string[];
}>;
interface UserIDsRequest extends z.TypeOf<typeof UserIDsRequest> {
}

declare const UserIdentityUpdateRequestV3: z.ZodObject<{
    emailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    password?: string | null | undefined;
    emailAddress?: string | null | undefined;
}, {
    password?: string | null | undefined;
    emailAddress?: string | null | undefined;
}>;
interface UserIdentityUpdateRequestV3 extends z.TypeOf<typeof UserIdentityUpdateRequestV3> {
}

declare const UserLinkedPlatformsResponseV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        accountGroup: z.ZodString;
        displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        emailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        linkedAt: z.ZodString;
        namespace: z.ZodString;
        originNamespace: z.ZodString;
        platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        xuid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        linkedAt: string;
        originNamespace: string;
        accountGroup: string;
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        emailAddress?: string | null | undefined;
    }, {
        namespace: string;
        userId: string;
        linkedAt: string;
        originNamespace: string;
        accountGroup: string;
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        emailAddress?: string | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        userId: string;
        linkedAt: string;
        originNamespace: string;
        accountGroup: string;
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        emailAddress?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        userId: string;
        linkedAt: string;
        originNamespace: string;
        accountGroup: string;
        xuid?: string | null | undefined;
        displayName?: string | null | undefined;
        platformUserId?: string | null | undefined;
        platformId?: string | null | undefined;
        emailAddress?: string | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface UserLinkedPlatformsResponseV3 extends z.TypeOf<typeof UserLinkedPlatformsResponseV3> {
}

declare const UserPasswordUpdateRequest: z.ZodObject<{
    LanguageTag: z.ZodString;
    NewPassword: z.ZodString;
    OldPassword: z.ZodString;
}, "strip", z.ZodTypeAny, {
    LanguageTag: string;
    NewPassword: string;
    OldPassword: string;
}, {
    LanguageTag: string;
    NewPassword: string;
    OldPassword: string;
}>;
interface UserPasswordUpdateRequest extends z.TypeOf<typeof UserPasswordUpdateRequest> {
}

declare const UserPasswordUpdateV3Request: z.ZodObject<{
    languageTag: z.ZodString;
    mfaToken: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    newPassword: z.ZodString;
    oldPassword: z.ZodString;
}, "strip", z.ZodTypeAny, {
    languageTag: string;
    newPassword: string;
    oldPassword: string;
    mfaToken?: string | null | undefined;
}, {
    languageTag: string;
    newPassword: string;
    oldPassword: string;
    mfaToken?: string | null | undefined;
}>;
interface UserPasswordUpdateV3Request extends z.TypeOf<typeof UserPasswordUpdateV3Request> {
}

declare const UserPlatformLinkHistories: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        action: z.ZodString;
        actor: z.ZodString;
        actorType: z.ZodString;
        createdAt: z.ZodNumber;
        namespace: z.ZodString;
        platform: z.ZodString;
        platformDisplayName: z.ZodString;
        platformId: z.ZodString;
        platformUserId: z.ZodString;
        publisherUserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        action: string;
        createdAt: number;
        platformUserId: string;
        platformId: string;
        platformDisplayName: string;
        actor: string;
        actorType: string;
        platform: string;
        publisherUserId: string;
    }, {
        namespace: string;
        action: string;
        createdAt: number;
        platformUserId: string;
        platformId: string;
        platformDisplayName: string;
        actor: string;
        actorType: string;
        platform: string;
        publisherUserId: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        action: string;
        createdAt: number;
        platformUserId: string;
        platformId: string;
        platformDisplayName: string;
        actor: string;
        actorType: string;
        platform: string;
        publisherUserId: string;
    }[];
}, {
    data: {
        namespace: string;
        action: string;
        createdAt: number;
        platformUserId: string;
        platformId: string;
        platformDisplayName: string;
        actor: string;
        actorType: string;
        platform: string;
        publisherUserId: string;
    }[];
}>;
interface UserPlatformLinkHistories extends z.TypeOf<typeof UserPlatformLinkHistories> {
}

declare const UserPlatformMetadata: z.ZodObject<{
    metadata: z.ZodRecord<z.ZodString, z.ZodAny>;
    namespace: z.ZodString;
    platformUserId: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
    platformUserId: string;
    metadata: Record<string, any>;
}, {
    namespace: string;
    userId: string;
    platformUserId: string;
    metadata: Record<string, any>;
}>;
interface UserPlatformMetadata extends z.TypeOf<typeof UserPlatformMetadata> {
}

declare const UserPlatforms: z.ZodObject<{
    userIdPlatforms: z.ZodArray<z.ZodObject<{
        platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformId: z.ZodString;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }, {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    userIdPlatforms: {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }[];
}, {
    userIdPlatforms: {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }[];
}>;
interface UserPlatforms extends z.TypeOf<typeof UserPlatforms> {
}

declare const UserResponse: z.ZodObject<{
    AuthType: z.ZodString;
    AvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Bans: z.ZodArray<z.ZodObject<{
        Ban: z.ZodString;
        BanId: z.ZodString;
        EndDate: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Ban: string;
        BanId: string;
        EndDate: string;
    }, {
        Ban: string;
        BanId: string;
        EndDate: string;
    }>, "many">;
    Country: z.ZodString;
    CreatedAt: z.ZodString;
    DateOfBirth: z.ZodString;
    DeletionStatus: z.ZodBoolean;
    DisplayName: z.ZodString;
    EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    EmailVerified: z.ZodBoolean;
    Enabled: z.ZodBoolean;
    LastDateOfBirthChangedTime: z.ZodString;
    LastEnabledChangedTime: z.ZodString;
    LoginId: z.ZodString;
    Namespace: z.ZodString;
    NamespaceRoles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    NewEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    OldEmailAddress: z.ZodString;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    PhoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PhoneVerified: z.ZodBoolean;
    PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Roles: z.ZodArray<z.ZodString, "many">;
    UserId: z.ZodString;
    Username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
    Country: string;
    Permissions: {
        action: number;
        resource: string;
    }[];
    DisplayName: string;
    CreatedAt: string;
    Enabled: boolean;
    AuthType: string;
    Bans: {
        Ban: string;
        BanId: string;
        EndDate: string;
    }[];
    DateOfBirth: string;
    DeletionStatus: boolean;
    EmailVerified: boolean;
    LastDateOfBirthChangedTime: string;
    LastEnabledChangedTime: string;
    LoginId: string;
    NamespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    OldEmailAddress: string;
    PhoneVerified: boolean;
    Roles: string[];
    PlatformId?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    EmailAddress?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
    PhoneNumber?: string | null | undefined;
    AvatarUrl?: string | null | undefined;
    NewEmailAddress?: string | null | undefined;
    Username?: string | null | undefined;
}, {
    Namespace: string;
    UserId: string;
    Country: string;
    Permissions: {
        action: number;
        resource: string;
    }[];
    DisplayName: string;
    CreatedAt: string;
    Enabled: boolean;
    AuthType: string;
    Bans: {
        Ban: string;
        BanId: string;
        EndDate: string;
    }[];
    DateOfBirth: string;
    DeletionStatus: boolean;
    EmailVerified: boolean;
    LastDateOfBirthChangedTime: string;
    LastEnabledChangedTime: string;
    LoginId: string;
    NamespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    OldEmailAddress: string;
    PhoneVerified: boolean;
    Roles: string[];
    PlatformId?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    EmailAddress?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
    PhoneNumber?: string | null | undefined;
    AvatarUrl?: string | null | undefined;
    NewEmailAddress?: string | null | undefined;
    Username?: string | null | undefined;
}>;
interface UserResponse extends z.TypeOf<typeof UserResponse> {
}

declare const UserResponseV3: z.ZodObject<{
    authType: z.ZodString;
    avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bans: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        banId: z.ZodString;
        endDate: z.ZodString;
        targetedNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }, {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }>, "many">;
    country: z.ZodString;
    createdAt: z.ZodString;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deletionDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deletionStatus: z.ZodBoolean;
    displayName: z.ZodString;
    emailAddress: z.ZodString;
    emailVerified: z.ZodBoolean;
    enabled: z.ZodBoolean;
    lastDateOfBirthChangedTime: z.ZodString;
    lastEnabledChangedTime: z.ZodString;
    namespace: z.ZodString;
    namespaceRoles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    newEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    oldEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    phoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    phoneVerified: z.ZodBoolean;
    platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformId: z.ZodString;
        platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }, {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }>, "many">>>;
    platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodArray<z.ZodString, "many">;
    skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    testAccount: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodString;
    userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    enabled: boolean;
    bans: {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    roles: string[];
    userId: string;
    displayName: string;
    createdAt: string;
    country: string;
    authType: string;
    deletionStatus: boolean;
    emailAddress: string;
    emailVerified: boolean;
    lastDateOfBirthChangedTime: string;
    lastEnabledChangedTime: string;
    namespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    phoneVerified: boolean;
    skipLoginQueue?: boolean | null | undefined;
    platformUserId?: string | null | undefined;
    platformId?: string | null | undefined;
    platformDisplayName?: string | null | undefined;
    platformAvatarUrl?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    deletionDate?: string | null | undefined;
    newEmailAddress?: string | null | undefined;
    oldEmailAddress?: string | null | undefined;
    phoneNumber?: string | null | undefined;
    platformInfos?: {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }[] | null | undefined;
    testAccount?: boolean | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    userName?: string | null | undefined;
}, {
    namespace: string;
    enabled: boolean;
    bans: {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    roles: string[];
    userId: string;
    displayName: string;
    createdAt: string;
    country: string;
    authType: string;
    deletionStatus: boolean;
    emailAddress: string;
    emailVerified: boolean;
    lastDateOfBirthChangedTime: string;
    lastEnabledChangedTime: string;
    namespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    phoneVerified: boolean;
    skipLoginQueue?: boolean | null | undefined;
    platformUserId?: string | null | undefined;
    platformId?: string | null | undefined;
    platformDisplayName?: string | null | undefined;
    platformAvatarUrl?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    deletionDate?: string | null | undefined;
    newEmailAddress?: string | null | undefined;
    oldEmailAddress?: string | null | undefined;
    phoneNumber?: string | null | undefined;
    platformInfos?: {
        platformId: string;
        platformUserId?: string | null | undefined;
        platformDisplayName?: string | null | undefined;
        platformGroup?: string | null | undefined;
        platformAvatarUrl?: string | null | undefined;
    }[] | null | undefined;
    testAccount?: boolean | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    userName?: string | null | undefined;
}>;
interface UserResponseV3 extends z.TypeOf<typeof UserResponseV3> {
}

declare const UserUpdateRequest: z.ZodObject<{
    Country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    DateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    DisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    LanguageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Country?: string | null | undefined;
    DisplayName?: string | null | undefined;
    LanguageTag?: string | null | undefined;
    DateOfBirth?: string | null | undefined;
}, {
    Country?: string | null | undefined;
    DisplayName?: string | null | undefined;
    LanguageTag?: string | null | undefined;
    DateOfBirth?: string | null | undefined;
}>;
interface UserUpdateRequest extends z.TypeOf<typeof UserUpdateRequest> {
}

declare const UserUpdateRequestV3: z.ZodObject<{
    avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    skipLoginQueue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    displayName?: string | null | undefined;
    skipLoginQueue?: boolean | null | undefined;
    country?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    userName?: string | null | undefined;
    languageTag?: string | null | undefined;
}, {
    displayName?: string | null | undefined;
    skipLoginQueue?: boolean | null | undefined;
    country?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    userName?: string | null | undefined;
    languageTag?: string | null | undefined;
}>;
interface UserUpdateRequestV3 extends z.TypeOf<typeof UserUpdateRequestV3> {
}

declare const UserVerificationRequest: z.ZodObject<{
    Code: z.ZodString;
    ContactType: z.ZodString;
    LanguageTag: z.ZodString;
    validateOnly: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    validateOnly: boolean;
    LanguageTag: string;
    Code: string;
    ContactType: string;
}, {
    validateOnly: boolean;
    LanguageTag: string;
    Code: string;
    ContactType: string;
}>;
interface UserVerificationRequest extends z.TypeOf<typeof UserVerificationRequest> {
}

declare const UsersUpdateRequestV3: z.ZodObject<{
    updateRequest: z.ZodObject<{
        skipLoginQueue: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        skipLoginQueue: boolean;
    }, {
        skipLoginQueue: boolean;
    }>;
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
    updateRequest: {
        skipLoginQueue: boolean;
    };
}, {
    userIds: string[];
    updateRequest: {
        skipLoginQueue: boolean;
    };
}>;
interface UsersUpdateRequestV3 extends z.TypeOf<typeof UsersUpdateRequestV3> {
}

declare const VerificationCodeResponse: z.ZodObject<{
    accountRegistration: z.ZodString;
    accountUpgrade: z.ZodString;
    passwordReset: z.ZodString;
    updateEmail: z.ZodString;
}, "strip", z.ZodTypeAny, {
    accountRegistration: string;
    accountUpgrade: string;
    passwordReset: string;
    updateEmail: string;
}, {
    accountRegistration: string;
    accountUpgrade: string;
    passwordReset: string;
    updateEmail: string;
}>;
interface VerificationCodeResponse extends z.TypeOf<typeof VerificationCodeResponse> {
}

declare const AddUserRoleV4Request: z.ZodObject<{
    assignedNamespaces: z.ZodArray<z.ZodString, "many">;
    roleId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    assignedNamespaces: string[];
}, {
    roleId: string;
    assignedNamespaces: string[];
}>;
interface AddUserRoleV4Request extends z.TypeOf<typeof AddUserRoleV4Request> {
}

declare const AuthenticatorKeyResponseV4: z.ZodObject<{
    secretKey: z.ZodString;
    uri: z.ZodString;
}, "strip", z.ZodTypeAny, {
    secretKey: string;
    uri: string;
}, {
    secretKey: string;
    uri: string;
}>;
interface AuthenticatorKeyResponseV4 extends z.TypeOf<typeof AuthenticatorKeyResponseV4> {
}

declare const BackupCodesResponseV4: z.ZodObject<{
    generatedAt: z.ZodNumber;
    invalidCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    validCodes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    generatedAt: number;
    invalidCodes?: string[] | null | undefined;
    validCodes?: string[] | null | undefined;
}, {
    generatedAt: number;
    invalidCodes?: string[] | null | undefined;
    validCodes?: string[] | null | undefined;
}>;
interface BackupCodesResponseV4 extends z.TypeOf<typeof BackupCodesResponseV4> {
}

declare const BulkAccountTypeUpdateRequestV4: z.ZodObject<{
    testAccount: z.ZodBoolean;
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
    testAccount: boolean;
}, {
    userIds: string[];
    testAccount: boolean;
}>;
interface BulkAccountTypeUpdateRequestV4 extends z.TypeOf<typeof BulkAccountTypeUpdateRequestV4> {
}

declare const CheckValidUserIdRequestV4: z.ZodObject<{
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
}, {
    userIds: string[];
}>;
interface CheckValidUserIdRequestV4 extends z.TypeOf<typeof CheckValidUserIdRequestV4> {
}

declare const CreateTestUsersRequestV4: z.ZodObject<{
    count: z.ZodNumber;
    userInfo: z.ZodObject<{
        country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        country?: string | null | undefined;
    }, {
        country?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    count: number;
    userInfo: {
        country?: string | null | undefined;
    };
}, {
    count: number;
    userInfo: {
        country?: string | null | undefined;
    };
}>;
interface CreateTestUsersRequestV4 extends z.TypeOf<typeof CreateTestUsersRequestV4> {
}

declare const CreateTestUsersResponseV4: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        authType: z.ZodString;
        country: z.ZodString;
        dateOfBirth: z.ZodString;
        displayName: z.ZodString;
        emailAddress: z.ZodString;
        namespace: z.ZodString;
        password: z.ZodString;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        username: z.ZodString;
        verified: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        password: string;
        userId: string;
        displayName: string;
        country: string;
        username: string;
        authType: string;
        dateOfBirth: string;
        emailAddress: string;
        verified: boolean;
        uniqueDisplayName?: string | null | undefined;
    }, {
        namespace: string;
        password: string;
        userId: string;
        displayName: string;
        country: string;
        username: string;
        authType: string;
        dateOfBirth: string;
        emailAddress: string;
        verified: boolean;
        uniqueDisplayName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        password: string;
        userId: string;
        displayName: string;
        country: string;
        username: string;
        authType: string;
        dateOfBirth: string;
        emailAddress: string;
        verified: boolean;
        uniqueDisplayName?: string | null | undefined;
    }[];
}, {
    data: {
        namespace: string;
        password: string;
        userId: string;
        displayName: string;
        country: string;
        username: string;
        authType: string;
        dateOfBirth: string;
        emailAddress: string;
        verified: boolean;
        uniqueDisplayName?: string | null | undefined;
    }[];
}>;
interface CreateTestUsersResponseV4 extends z.TypeOf<typeof CreateTestUsersResponseV4> {
}

declare const CreateUserRequestV4: z.ZodObject<{
    acceptedPolicies: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        isAccepted: z.ZodBoolean;
        localizedPolicyVersionId: z.ZodString;
        policyId: z.ZodString;
        policyVersionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }, {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }>, "many">>>;
    authType: z.ZodEnum<["EMAILPASSWD"]>;
    code: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    country: z.ZodString;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    emailAddress: z.ZodString;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    passwordMD5Sum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reachMinimumAge: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodString;
}, "strip", z.ZodTypeAny, {
    country: string;
    username: string;
    authType: "EMAILPASSWD";
    emailAddress: string;
    code?: string | null | undefined;
    password?: string | null | undefined;
    displayName?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    acceptedPolicies?: {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }[] | null | undefined;
    passwordMD5Sum?: string | null | undefined;
    reachMinimumAge?: boolean | null | undefined;
}, {
    country: string;
    username: string;
    authType: "EMAILPASSWD";
    emailAddress: string;
    code?: string | null | undefined;
    password?: string | null | undefined;
    displayName?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    acceptedPolicies?: {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }[] | null | undefined;
    passwordMD5Sum?: string | null | undefined;
    reachMinimumAge?: boolean | null | undefined;
}>;
interface CreateUserRequestV4 extends z.TypeOf<typeof CreateUserRequestV4> {
}

declare const CreateUserResponseV4: z.ZodObject<{
    authType: z.ZodString;
    country: z.ZodString;
    dateOfBirth: z.ZodString;
    displayName: z.ZodString;
    emailAddress: z.ZodString;
    namespace: z.ZodString;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodString;
    username: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
    displayName: string;
    country: string;
    username: string;
    authType: string;
    dateOfBirth: string;
    emailAddress: string;
    uniqueDisplayName?: string | null | undefined;
}, {
    namespace: string;
    userId: string;
    displayName: string;
    country: string;
    username: string;
    authType: string;
    dateOfBirth: string;
    emailAddress: string;
    uniqueDisplayName?: string | null | undefined;
}>;
interface CreateUserResponseV4 extends z.TypeOf<typeof CreateUserResponseV4> {
}

declare const DisableMfaRequest: z.ZodObject<{
    factor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    mfaToken: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    mfaToken?: string | null | undefined;
    factor?: string | null | undefined;
}, {
    mfaToken?: string | null | undefined;
    factor?: string | null | undefined;
}>;
interface DisableMfaRequest extends z.TypeOf<typeof DisableMfaRequest> {
}

declare const EmailUpdateRequestV4: z.ZodObject<{
    code: z.ZodString;
    emailAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
    emailAddress: string;
}, {
    code: string;
    emailAddress: string;
}>;
interface EmailUpdateRequestV4 extends z.TypeOf<typeof EmailUpdateRequestV4> {
}

declare const EnabledFactorsResponseV4: z.ZodObject<{
    default: z.ZodString;
    enabled: z.ZodArray<z.ZodString, "many">;
    remainingBackupCodeCount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    enabled: string[];
    default: string;
    remainingBackupCodeCount?: number | null | undefined;
}, {
    enabled: string[];
    default: string;
    remainingBackupCodeCount?: number | null | undefined;
}>;
interface EnabledFactorsResponseV4 extends z.TypeOf<typeof EnabledFactorsResponseV4> {
}

declare const InvitationHistoryResponse: z.ZodObject<{
    accepted: z.ZodBoolean;
    createdAt: z.ZodString;
    inviter: z.ZodString;
    namespace: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    createdAt: string;
    updatedAt: string;
    accepted: boolean;
    inviter: string;
}, {
    namespace: string;
    createdAt: string;
    updatedAt: string;
    accepted: boolean;
    inviter: string;
}>;
interface InvitationHistoryResponse extends z.TypeOf<typeof InvitationHistoryResponse> {
}

declare const InviteUserRequestV4: z.ZodObject<{
    assignedNamespaces: z.ZodArray<z.ZodString, "many">;
    emailAddresses: z.ZodArray<z.ZodString, "many">;
    isAdmin: z.ZodBoolean;
    isNewStudio: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roleId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    assignedNamespaces: string[];
    emailAddresses: string[];
    isAdmin: boolean;
    namespace?: string | null | undefined;
    roleId?: string | null | undefined;
    languageTag?: string | null | undefined;
    isNewStudio?: boolean | null | undefined;
}, {
    assignedNamespaces: string[];
    emailAddresses: string[];
    isAdmin: boolean;
    namespace?: string | null | undefined;
    roleId?: string | null | undefined;
    languageTag?: string | null | undefined;
    isNewStudio?: boolean | null | undefined;
}>;
interface InviteUserRequestV4 extends z.TypeOf<typeof InviteUserRequestV4> {
}

declare const ListInvitationHistoriesV4Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        accepted: z.ZodBoolean;
        createdAt: z.ZodString;
        inviter: z.ZodString;
        namespace: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        createdAt: string;
        updatedAt: string;
        accepted: boolean;
        inviter: string;
    }, {
        namespace: string;
        createdAt: string;
        updatedAt: string;
        accepted: boolean;
        inviter: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        createdAt: string;
        updatedAt: string;
        accepted: boolean;
        inviter: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        createdAt: string;
        updatedAt: string;
        accepted: boolean;
        inviter: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListInvitationHistoriesV4Response extends z.TypeOf<typeof ListInvitationHistoriesV4Response> {
}

declare const ListUserRolesV4Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        assignedNamespaces: z.ZodArray<z.ZodString, "many">;
        roleId: z.ZodString;
        roleName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
        assignedNamespaces: string[];
        roleName: string;
    }, {
        roleId: string;
        assignedNamespaces: string[];
        roleName: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        roleId: string;
        assignedNamespaces: string[];
        roleName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        roleId: string;
        assignedNamespaces: string[];
        roleName: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface ListUserRolesV4Response extends z.TypeOf<typeof ListUserRolesV4Response> {
}

declare const ListValidUserIdResponseV4: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        exists: z.ZodBoolean;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        exists: boolean;
    }, {
        userId: string;
        exists: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        userId: string;
        exists: boolean;
    }[];
}, {
    data: {
        userId: string;
        exists: boolean;
    }[];
}>;
interface ListValidUserIdResponseV4 extends z.TypeOf<typeof ListValidUserIdResponseV4> {
}

declare const NamespaceInvitationHistoryUserV4Response: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        accepted: z.ZodBoolean;
        invitee: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        updatedAt: string;
        accepted: boolean;
        invitee: string;
    }, {
        updatedAt: string;
        accepted: boolean;
        invitee: string;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        updatedAt: string;
        accepted: boolean;
        invitee: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        updatedAt: string;
        accepted: boolean;
        invitee: string;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface NamespaceInvitationHistoryUserV4Response extends z.TypeOf<typeof NamespaceInvitationHistoryUserV4Response> {
}

declare const RemoveUserRoleV4Request: z.ZodObject<{
    assignedNamespaces: z.ZodArray<z.ZodString, "many">;
    roleId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
    assignedNamespaces: string[];
}, {
    roleId: string;
    assignedNamespaces: string[];
}>;
interface RemoveUserRoleV4Request extends z.TypeOf<typeof RemoveUserRoleV4Request> {
}

declare const UserMfaStatusResponseV4: z.ZodObject<{
    defaultFactor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    enabled: z.ZodBoolean;
    enabledFactors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    defaultFactor?: string | null | undefined;
    enabledFactors?: string[] | null | undefined;
}, {
    enabled: boolean;
    defaultFactor?: string | null | undefined;
    enabledFactors?: string[] | null | undefined;
}>;
interface UserMfaStatusResponseV4 extends z.TypeOf<typeof UserMfaStatusResponseV4> {
}

declare const UserMfaTokenResponseV4: z.ZodObject<{
    mfaToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mfaToken: string;
}, {
    mfaToken: string;
}>;
interface UserMfaTokenResponseV4 extends z.TypeOf<typeof UserMfaTokenResponseV4> {
}

declare const BanReasons: z.ZodObject<{
    Reasons: z.ZodArray<z.ZodObject<{
        Description: z.ZodString;
        Reason: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Reason: string;
        Description: string;
    }, {
        Reason: string;
        Description: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Reasons: {
        Reason: string;
        Description: string;
    }[];
}, {
    Reasons: {
        Reason: string;
        Description: string;
    }[];
}>;
interface BanReasons extends z.TypeOf<typeof BanReasons> {
}

declare const Bans: z.ZodObject<{
    Bans: z.ZodArray<z.ZodObject<{
        Ban: z.ZodString;
        Description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Ban: string;
        Description: string;
    }, {
        Ban: string;
        Description: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Bans: {
        Ban: string;
        Description: string;
    }[];
}, {
    Bans: {
        Ban: string;
        Description: string;
    }[];
}>;
interface Bans extends z.TypeOf<typeof Bans> {
}

declare const ClientCreateRequest: z.ZodObject<{
    ClientId: z.ZodString;
    ClientName: z.ZodString;
    ClientPermissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    Namespace: z.ZodString;
    RedirectUri: z.ZodString;
    Secret: z.ZodString;
    TwoFactorEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ClientId: string;
    RedirectUri: string;
    Secret: string;
    Namespace: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
}, {
    ClientId: string;
    RedirectUri: string;
    Secret: string;
    Namespace: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
}>;
interface ClientCreateRequest extends z.TypeOf<typeof ClientCreateRequest> {
}

declare const ClientCreationResponse: z.ZodObject<{
    ClientId: z.ZodString;
    ClientName: z.ZodString;
    ClientPermissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    Namespace: z.ZodString;
    RedirectUri: z.ZodString;
    TwoFactorEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    ClientId: string;
    RedirectUri: string;
    Namespace: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
}, {
    ClientId: string;
    RedirectUri: string;
    Namespace: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
}>;
interface ClientCreationResponse extends z.TypeOf<typeof ClientCreationResponse> {
}

declare const ClientPermissions: z.ZodObject<{
    Permissions: z.ZodArray<z.ZodObject<{
        Action: z.ZodNumber;
        Resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Action: number;
        Resource: string;
    }, {
        Action: number;
        Resource: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Permissions: {
        Action: number;
        Resource: string;
    }[];
}, {
    Permissions: {
        Action: number;
        Resource: string;
    }[];
}>;
interface ClientPermissions extends z.TypeOf<typeof ClientPermissions> {
}

declare const ClientResponse: z.ZodObject<{
    ClientId: z.ZodString;
    ClientName: z.ZodString;
    ClientPermissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    CreatedAt: z.ZodString;
    Namespace: z.ZodString;
    RedirectUri: z.ZodString;
    TwoFactorEnabled: z.ZodBoolean;
    modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        moduleId: z.ZodString;
        selectedGroups: z.ZodArray<z.ZodObject<{
            groupId: z.ZodString;
            selectedActions: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            groupId: string;
            selectedActions: number[];
        }, {
            groupId: string;
            selectedActions: number[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    ClientId: string;
    RedirectUri: string;
    Namespace: string;
    CreatedAt: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
}, {
    ClientId: string;
    RedirectUri: string;
    Namespace: string;
    CreatedAt: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
}>;
interface ClientResponse extends z.TypeOf<typeof ClientResponse> {
}

declare const ClientResponseArray: z.ZodArray<z.ZodObject<{
    ClientId: z.ZodString;
    ClientName: z.ZodString;
    ClientPermissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    CreatedAt: z.ZodString;
    Namespace: z.ZodString;
    RedirectUri: z.ZodString;
    TwoFactorEnabled: z.ZodBoolean;
    modulePermissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        moduleId: z.ZodString;
        selectedGroups: z.ZodArray<z.ZodObject<{
            groupId: z.ZodString;
            selectedActions: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            groupId: string;
            selectedActions: number[];
        }, {
            groupId: string;
            selectedActions: number[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }, {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    ClientId: string;
    RedirectUri: string;
    Namespace: string;
    CreatedAt: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
}, {
    ClientId: string;
    RedirectUri: string;
    Namespace: string;
    CreatedAt: string;
    ClientName: string;
    ClientPermissions: {
        action: number;
        resource: string;
    }[];
    TwoFactorEnabled: boolean;
    modulePermissions?: {
        moduleId: string;
        selectedGroups: {
            groupId: string;
            selectedActions: number[];
        }[];
    }[] | null | undefined;
}>, "many">;
interface ClientResponseArray extends z.TypeOf<typeof ClientResponseArray> {
}

declare const ClientUpdateRequest: z.ZodObject<{
    ClientName: z.ZodString;
    RedirectUri: z.ZodString;
    TwoFactorEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    RedirectUri: string;
    ClientName: string;
    TwoFactorEnabled: boolean;
}, {
    RedirectUri: string;
    ClientName: string;
    TwoFactorEnabled: boolean;
}>;
interface ClientUpdateRequest extends z.TypeOf<typeof ClientUpdateRequest> {
}

declare const ClientUpdateSecretRequest: z.ZodObject<{
    NewSecret: z.ZodString;
}, "strip", z.ZodTypeAny, {
    NewSecret: string;
}, {
    NewSecret: string;
}>;
interface ClientUpdateSecretRequest extends z.TypeOf<typeof ClientUpdateSecretRequest> {
}

declare const CountryLocationResponse: z.ZodObject<{
    city: z.ZodString;
    countryCode: z.ZodString;
    countryName: z.ZodString;
    state: z.ZodString;
}, "strip", z.ZodTypeAny, {
    countryCode: string;
    countryName: string;
    city: string;
    state: string;
}, {
    countryCode: string;
    countryName: string;
    city: string;
    state: string;
}>;
interface CountryLocationResponse extends z.TypeOf<typeof CountryLocationResponse> {
}

declare const CreateTestUserRequestV4: z.ZodObject<{
    acceptedPolicies: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        isAccepted: z.ZodBoolean;
        localizedPolicyVersionId: z.ZodString;
        policyId: z.ZodString;
        policyVersionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }, {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }>, "many">>>;
    authType: z.ZodEnum<["EMAILPASSWD"]>;
    country: z.ZodString;
    dateOfBirth: z.ZodString;
    displayName: z.ZodString;
    emailAddress: z.ZodString;
    password: z.ZodString;
    passwordMD5Sum: z.ZodString;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodString;
    verified: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    password: string;
    displayName: string;
    country: string;
    username: string;
    authType: "EMAILPASSWD";
    dateOfBirth: string;
    emailAddress: string;
    verified: boolean;
    passwordMD5Sum: string;
    uniqueDisplayName?: string | null | undefined;
    acceptedPolicies?: {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }[] | null | undefined;
}, {
    password: string;
    displayName: string;
    country: string;
    username: string;
    authType: "EMAILPASSWD";
    dateOfBirth: string;
    emailAddress: string;
    verified: boolean;
    passwordMD5Sum: string;
    uniqueDisplayName?: string | null | undefined;
    acceptedPolicies?: {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }[] | null | undefined;
}>;
interface CreateTestUserRequestV4 extends z.TypeOf<typeof CreateTestUserRequestV4> {
}

declare const ForgotPasswordRequestV3: z.ZodObject<{
    emailAddress: z.ZodString;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    emailAddress: string;
    languageTag?: string | null | undefined;
}, {
    emailAddress: string;
    languageTag?: string | null | undefined;
}>;
interface ForgotPasswordRequestV3 extends z.TypeOf<typeof ForgotPasswordRequestV3> {
}

declare const GetAdminUsersResponse: z.ZodObject<{
    Data: z.ZodArray<z.ZodObject<{
        AuthType: z.ZodString;
        AvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        Bans: z.ZodArray<z.ZodObject<{
            Ban: z.ZodString;
            BanId: z.ZodString;
            EndDate: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            Ban: string;
            BanId: string;
            EndDate: string;
        }, {
            Ban: string;
            BanId: string;
            EndDate: string;
        }>, "many">;
        Country: z.ZodString;
        CreatedAt: z.ZodString;
        DateOfBirth: z.ZodString;
        DeletionStatus: z.ZodBoolean;
        DisplayName: z.ZodString;
        EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        EmailVerified: z.ZodBoolean;
        Enabled: z.ZodBoolean;
        LastDateOfBirthChangedTime: z.ZodString;
        LastEnabledChangedTime: z.ZodString;
        LoginId: z.ZodString;
        Namespace: z.ZodString;
        NamespaceRoles: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            roleId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            roleId: string;
        }, {
            namespace: string;
            roleId: string;
        }>, "many">;
        NewEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        OldEmailAddress: z.ZodString;
        Permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
        }, {
            action: number;
            resource: string;
        }>, "many">;
        PhoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PhoneVerified: z.ZodBoolean;
        PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        Roles: z.ZodArray<z.ZodString, "many">;
        UserId: z.ZodString;
        Username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        Country: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DateOfBirth: string;
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastDateOfBirthChangedTime: string;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        OldEmailAddress: string;
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        EmailAddress?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        PhoneNumber?: string | null | undefined;
        AvatarUrl?: string | null | undefined;
        NewEmailAddress?: string | null | undefined;
        Username?: string | null | undefined;
    }, {
        Namespace: string;
        UserId: string;
        Country: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DateOfBirth: string;
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastDateOfBirthChangedTime: string;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        OldEmailAddress: string;
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        EmailAddress?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        PhoneNumber?: string | null | undefined;
        AvatarUrl?: string | null | undefined;
        NewEmailAddress?: string | null | undefined;
        Username?: string | null | undefined;
    }>, "many">;
    Paging: z.ZodObject<{
        First: z.ZodString;
        Last: z.ZodString;
        Next: z.ZodString;
        Previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }, {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    Data: {
        Namespace: string;
        UserId: string;
        Country: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DateOfBirth: string;
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastDateOfBirthChangedTime: string;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        OldEmailAddress: string;
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        EmailAddress?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        PhoneNumber?: string | null | undefined;
        AvatarUrl?: string | null | undefined;
        NewEmailAddress?: string | null | undefined;
        Username?: string | null | undefined;
    }[];
    Paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}, {
    Data: {
        Namespace: string;
        UserId: string;
        Country: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DateOfBirth: string;
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastDateOfBirthChangedTime: string;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        OldEmailAddress: string;
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
        EmailAddress?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        PhoneNumber?: string | null | undefined;
        AvatarUrl?: string | null | undefined;
        NewEmailAddress?: string | null | undefined;
        Username?: string | null | undefined;
    }[];
    Paging: {
        First: string;
        Last: string;
        Next: string;
        Previous: string;
    };
}>;
interface GetAdminUsersResponse extends z.TypeOf<typeof GetAdminUsersResponse> {
}

declare const GetLinkHeadlessAccountConflictResponse: z.ZodObject<{
    currentAccount: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        linkedGames: z.ZodArray<z.ZodString, "many">;
        userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    }, {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    }>>>;
    headlessAccount: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        linkedGames: z.ZodArray<z.ZodString, "many">;
        userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    }, {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    }>>>;
    platformAlreadyLinked: z.ZodBoolean;
    platformId: z.ZodString;
    platformLinkConflict: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    platformId: string;
    platformAlreadyLinked: boolean;
    platformLinkConflict: boolean;
    currentAccount?: {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    } | null | undefined;
    headlessAccount?: {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    } | null | undefined;
}, {
    platformId: string;
    platformAlreadyLinked: boolean;
    platformLinkConflict: boolean;
    currentAccount?: {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    } | null | undefined;
    headlessAccount?: {
        linkedGames: string[];
        displayName?: string | null | undefined;
        email?: string | null | undefined;
        userName?: string | null | undefined;
    } | null | undefined;
}>;
interface GetLinkHeadlessAccountConflictResponse extends z.TypeOf<typeof GetLinkHeadlessAccountConflictResponse> {
}

declare const GetPublisherUserResponse: z.ZodObject<{
    Namespace: z.ZodString;
    UserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
}, {
    Namespace: string;
    UserId: string;
}>;
interface GetPublisherUserResponse extends z.TypeOf<typeof GetPublisherUserResponse> {
}

declare const GetUserJusticePlatformAccountResponse: z.ZodObject<{
    DesignatedNamespace: z.ZodString;
    UserID: z.ZodString;
}, "strip", z.ZodTypeAny, {
    DesignatedNamespace: string;
    UserID: string;
}, {
    DesignatedNamespace: string;
    UserID: string;
}>;
interface GetUserJusticePlatformAccountResponse extends z.TypeOf<typeof GetUserJusticePlatformAccountResponse> {
}

declare const GetUserMapping: z.ZodObject<{
    Namespace: z.ZodString;
    UserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
}, {
    Namespace: string;
    UserId: string;
}>;
interface GetUserMapping extends z.TypeOf<typeof GetUserMapping> {
}

declare const GetUserMappingV3Array: z.ZodArray<z.ZodObject<{
    namespace: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
}, {
    namespace: string;
    userId: string;
}>, "many">;
interface GetUserMappingV3Array extends z.TypeOf<typeof GetUserMappingV3Array> {
}

declare const InputValidationConfigVersion: z.ZodObject<{
    allowAllSpecialCharacters: z.ZodBoolean;
    allowDigit: z.ZodBoolean;
    allowLetter: z.ZodBoolean;
    allowSpace: z.ZodBoolean;
    allowUnicode: z.ZodBoolean;
    avatarConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        allowedPrefixes: z.ZodArray<z.ZodString, "many">;
        preferRegex: z.ZodBoolean;
        regex: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        allowedPrefixes: string[];
        preferRegex: boolean;
        regex: string;
    }, {
        allowedPrefixes: string[];
        preferRegex: boolean;
        regex: string;
    }>>>;
    blockedWord: z.ZodArray<z.ZodString, "many">;
    isCustomRegex: z.ZodBoolean;
    letterCase: z.ZodString;
    maxLength: z.ZodNumber;
    maxRepeatingAlphaNum: z.ZodNumber;
    maxRepeatingSpecialCharacter: z.ZodNumber;
    minCharType: z.ZodNumber;
    minLength: z.ZodNumber;
    profanityFilter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    regex: z.ZodString;
    specialCharacterLocation: z.ZodString;
    specialCharacters: z.ZodArray<z.ZodString, "many">;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    minLength: number;
    maxLength: number;
    regex: string;
    allowAllSpecialCharacters: boolean;
    allowDigit: boolean;
    allowLetter: boolean;
    allowSpace: boolean;
    allowUnicode: boolean;
    blockedWord: string[];
    isCustomRegex: boolean;
    letterCase: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    specialCharacterLocation: string;
    specialCharacters: string[];
    version: number;
    avatarConfig?: {
        allowedPrefixes: string[];
        preferRegex: boolean;
        regex: string;
    } | null | undefined;
    profanityFilter?: string | null | undefined;
}, {
    minLength: number;
    maxLength: number;
    regex: string;
    allowAllSpecialCharacters: boolean;
    allowDigit: boolean;
    allowLetter: boolean;
    allowSpace: boolean;
    allowUnicode: boolean;
    blockedWord: string[];
    isCustomRegex: boolean;
    letterCase: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    specialCharacterLocation: string;
    specialCharacters: string[];
    version: number;
    avatarConfig?: {
        allowedPrefixes: string[];
        preferRegex: boolean;
        regex: string;
    } | null | undefined;
    profanityFilter?: string | null | undefined;
}>;
interface InputValidationConfigVersion extends z.TypeOf<typeof InputValidationConfigVersion> {
}

declare const InputValidationsPublicResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        validation: z.ZodObject<{
            allowAllSpecialCharacters: z.ZodBoolean;
            allowDigit: z.ZodBoolean;
            allowLetter: z.ZodBoolean;
            allowSpace: z.ZodBoolean;
            allowUnicode: z.ZodBoolean;
            avatarConfig: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                allowedPrefixes: z.ZodArray<z.ZodString, "many">;
                preferRegex: z.ZodBoolean;
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            }, {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            }>>>;
            blockedWord: z.ZodArray<z.ZodString, "many">;
            description: z.ZodObject<{
                language: z.ZodString;
                message: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                message: string[];
                language: string;
            }, {
                message: string[];
                language: string;
            }>;
            isCustomRegex: z.ZodBoolean;
            letterCase: z.ZodString;
            maxLength: z.ZodNumber;
            maxRepeatingAlphaNum: z.ZodNumber;
            maxRepeatingSpecialCharacter: z.ZodNumber;
            minCharType: z.ZodNumber;
            minLength: z.ZodNumber;
            profanityFilter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            regex: z.ZodString;
            specialCharacterLocation: z.ZodString;
            specialCharacters: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            description: {
                message: string[];
                language: string;
            };
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        }, {
            description: {
                message: string[];
                language: string;
            };
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        validation: {
            description: {
                message: string[];
                language: string;
            };
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }, {
        validation: {
            description: {
                message: string[];
                language: string;
            };
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }>, "many">;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        validation: {
            description: {
                message: string[];
                language: string;
            };
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }[];
    version: number;
}, {
    data: {
        validation: {
            description: {
                message: string[];
                language: string;
            };
            minLength: number;
            maxLength: number;
            regex: string;
            allowAllSpecialCharacters: boolean;
            allowDigit: boolean;
            allowLetter: boolean;
            allowSpace: boolean;
            allowUnicode: boolean;
            blockedWord: string[];
            isCustomRegex: boolean;
            letterCase: string;
            maxRepeatingAlphaNum: number;
            maxRepeatingSpecialCharacter: number;
            minCharType: number;
            specialCharacterLocation: string;
            specialCharacters: string[];
            avatarConfig?: {
                allowedPrefixes: string[];
                preferRegex: boolean;
                regex: string;
            } | null | undefined;
            profanityFilter?: string | null | undefined;
        };
        field: string;
    }[];
    version: number;
}>;
interface InputValidationsPublicResponse extends z.TypeOf<typeof InputValidationsPublicResponse> {
}

declare const JwkSet: z.ZodObject<{
    keys: z.ZodArray<z.ZodObject<{
        alg: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        e: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        kid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        kty: z.ZodString;
        n: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        use: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        kty: string;
        alg?: string | null | undefined;
        e?: string | null | undefined;
        kid?: string | null | undefined;
        n?: string | null | undefined;
        use?: string | null | undefined;
    }, {
        kty: string;
        alg?: string | null | undefined;
        e?: string | null | undefined;
        kid?: string | null | undefined;
        n?: string | null | undefined;
        use?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    keys: {
        kty: string;
        alg?: string | null | undefined;
        e?: string | null | undefined;
        kid?: string | null | undefined;
        n?: string | null | undefined;
        use?: string | null | undefined;
    }[];
}, {
    keys: {
        kty: string;
        alg?: string | null | undefined;
        e?: string | null | undefined;
        kid?: string | null | undefined;
        n?: string | null | undefined;
        use?: string | null | undefined;
    }[];
}>;
interface JwkSet extends z.TypeOf<typeof JwkSet> {
}

declare const LinkHeadlessAccountRequest: z.ZodObject<{
    chosenNamespaces: z.ZodArray<z.ZodString, "many">;
    oneTimeLinkCode: z.ZodString;
}, "strip", z.ZodTypeAny, {
    chosenNamespaces: string[];
    oneTimeLinkCode: string;
}, {
    chosenNamespaces: string[];
    oneTimeLinkCode: string;
}>;
interface LinkHeadlessAccountRequest extends z.TypeOf<typeof LinkHeadlessAccountRequest> {
}

declare const LinkPlatformAccountWithProgressionRequest: z.ZodObject<{
    chosenNamespaces: z.ZodArray<z.ZodString, "many">;
    requestId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    chosenNamespaces: string[];
    requestId: string;
}, {
    chosenNamespaces: string[];
    requestId: string;
}>;
interface LinkPlatformAccountWithProgressionRequest extends z.TypeOf<typeof LinkPlatformAccountWithProgressionRequest> {
}

declare const LinkRequest: z.ZodObject<{
    client_id: z.ZodString;
    conflict_publisher_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    conflict_user_linked_games: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    current_user_linked_games: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    error: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        errorCode: z.ZodNumber;
        errorMessage: z.ZodString;
        messageVariables: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            platformUserID: z.ZodString;
            publisherAccounts: z.ZodArray<z.ZodObject<{
                displayName: z.ZodString;
                emailAddress: z.ZodString;
                linkedPlatforms: z.ZodArray<z.ZodObject<{
                    namespace: z.ZodString;
                    platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    platformUserId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }, {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }>, "many">;
                namespace: z.ZodString;
                uniqueDisplayName: z.ZodString;
                userId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }, {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            platformUserID: string;
            publisherAccounts: {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }[];
        }, {
            platformUserID: string;
            publisherAccounts: {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }[];
        }>>>;
        previousLinkedPlatformAccount: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            platformDisplayName: z.ZodString;
            platformID: z.ZodString;
            platformUserID: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            platformDisplayName: string;
            platformUserID: string;
            platformID: string;
        }, {
            platformDisplayName: string;
            platformUserID: string;
            platformID: string;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        errorCode: number;
        errorMessage: string;
        messageVariables?: {
            platformUserID: string;
            publisherAccounts: {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }[];
        } | null | undefined;
        previousLinkedPlatformAccount?: {
            platformDisplayName: string;
            platformUserID: string;
            platformID: string;
        } | null | undefined;
    }, {
        errorCode: number;
        errorMessage: string;
        messageVariables?: {
            platformUserID: string;
            publisherAccounts: {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }[];
        } | null | undefined;
        previousLinkedPlatformAccount?: {
            platformDisplayName: string;
            platformUserID: string;
            platformID: string;
        } | null | undefined;
    }>>>;
    expiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    namespace: z.ZodString;
    operation_name: z.ZodString;
    payload: z.ZodRecord<z.ZodString, z.ZodAny>;
    platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    redirect_uri: z.ZodString;
    refreshToken: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    request_id: z.ZodString;
    status: z.ZodString;
    userID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    status: string;
    client_id: string;
    operation_name: string;
    payload: Record<string, any>;
    redirect_uri: string;
    request_id: string;
    platform_user_id?: string | null | undefined;
    error?: {
        errorCode: number;
        errorMessage: string;
        messageVariables?: {
            platformUserID: string;
            publisherAccounts: {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }[];
        } | null | undefined;
        previousLinkedPlatformAccount?: {
            platformDisplayName: string;
            platformUserID: string;
            platformID: string;
        } | null | undefined;
    } | null | undefined;
    refreshToken?: string | null | undefined;
    platformDisplayName?: string | null | undefined;
    platformID?: string | null | undefined;
    conflict_publisher_user_id?: string | null | undefined;
    conflict_user_linked_games?: string[] | null | undefined;
    current_user_linked_games?: string[] | null | undefined;
    expiration?: number | null | undefined;
    userID?: string | null | undefined;
}, {
    namespace: string;
    status: string;
    client_id: string;
    operation_name: string;
    payload: Record<string, any>;
    redirect_uri: string;
    request_id: string;
    platform_user_id?: string | null | undefined;
    error?: {
        errorCode: number;
        errorMessage: string;
        messageVariables?: {
            platformUserID: string;
            publisherAccounts: {
                namespace: string;
                userId: string;
                displayName: string;
                emailAddress: string;
                uniqueDisplayName: string;
                linkedPlatforms: {
                    namespace: string;
                    platformUserId: string;
                    platformId?: string | null | undefined;
                }[];
            }[];
        } | null | undefined;
        previousLinkedPlatformAccount?: {
            platformDisplayName: string;
            platformUserID: string;
            platformID: string;
        } | null | undefined;
    } | null | undefined;
    refreshToken?: string | null | undefined;
    platformDisplayName?: string | null | undefined;
    platformID?: string | null | undefined;
    conflict_publisher_user_id?: string | null | undefined;
    conflict_user_linked_games?: string[] | null | undefined;
    current_user_linked_games?: string[] | null | undefined;
    expiration?: number | null | undefined;
    userID?: string | null | undefined;
}>;
interface LinkRequest extends z.TypeOf<typeof LinkRequest> {
}

declare const ListBulkUserResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        avatarUrl: z.ZodString;
        displayName: z.ZodString;
        platformUserIds: z.ZodRecord<z.ZodString, z.ZodString>;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        displayName: string;
        avatarUrl: string;
        platformUserIds: Record<string, string>;
        username?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }, {
        userId: string;
        displayName: string;
        avatarUrl: string;
        platformUserIds: Record<string, string>;
        username?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        userId: string;
        displayName: string;
        avatarUrl: string;
        platformUserIds: Record<string, string>;
        username?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }[];
}, {
    data: {
        userId: string;
        displayName: string;
        avatarUrl: string;
        platformUserIds: Record<string, string>;
        username?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }[];
}>;
interface ListBulkUserResponse extends z.TypeOf<typeof ListBulkUserResponse> {
}

declare const OneTimeLinkingCodeResponse: z.ZodObject<{
    exp: z.ZodNumber;
    oneTimeLinkCode: z.ZodString;
    oneTimeLinkUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    oneTimeLinkCode: string;
    exp: number;
    oneTimeLinkUrl: string;
}, {
    oneTimeLinkCode: string;
    exp: number;
    oneTimeLinkUrl: string;
}>;
interface OneTimeLinkingCodeResponse extends z.TypeOf<typeof OneTimeLinkingCodeResponse> {
}

declare const OneTimeLinkingCodeValidationResponse: z.ZodObject<{
    expired: z.ZodBoolean;
    valid: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    valid: boolean;
    expired: boolean;
}, {
    valid: boolean;
    expired: boolean;
}>;
interface OneTimeLinkingCodeValidationResponse extends z.TypeOf<typeof OneTimeLinkingCodeValidationResponse> {
}

declare const PlatformTokenRefreshResponseV3: z.ZodObject<{
    avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformTokenExpiresAt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    displayName?: string | null | undefined;
    platformUserId?: string | null | undefined;
    country?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    platformTokenExpiresAt?: number | null | undefined;
}, {
    displayName?: string | null | undefined;
    platformUserId?: string | null | undefined;
    country?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    platformTokenExpiresAt?: number | null | undefined;
}>;
interface PlatformTokenRefreshResponseV3 extends z.TypeOf<typeof PlatformTokenRefreshResponseV3> {
}

declare const PlatformUserIdRequestV4: z.ZodObject<{
    platformUserIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    platformUserIds: string[];
}, {
    platformUserIds: string[];
}>;
interface PlatformUserIdRequestV4 extends z.TypeOf<typeof PlatformUserIdRequestV4> {
}

declare const PublicInviteUserRequestV4: z.ZodObject<{
    additionalData: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    emailAddress: z.ZodString;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespace: z.ZodString;
    namespaceDisplayName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    emailAddress: string;
    namespaceDisplayName: string;
    languageTag?: string | null | undefined;
    additionalData?: string | null | undefined;
}, {
    namespace: string;
    emailAddress: string;
    namespaceDisplayName: string;
    languageTag?: string | null | undefined;
    additionalData?: string | null | undefined;
}>;
interface PublicInviteUserRequestV4 extends z.TypeOf<typeof PublicInviteUserRequestV4> {
}

declare const PublicThirdPartyPlatformInfoArray: z.ZodArray<z.ZodObject<{
    AppId: z.ZodString;
    ClientId: z.ZodString;
    Environment: z.ZodString;
    IsActive: z.ZodBoolean;
    LogoURL: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PlatformId: z.ZodString;
    PlatformName: z.ZodString;
    TokenAuthenticationType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    AppId: string;
    ClientId: string;
    Environment: string;
    IsActive: boolean;
    PlatformName: string;
    TokenAuthenticationType: string;
    PlatformId: string;
    LogoURL?: string | null | undefined;
}, {
    AppId: string;
    ClientId: string;
    Environment: string;
    IsActive: boolean;
    PlatformName: string;
    TokenAuthenticationType: string;
    PlatformId: string;
    LogoURL?: string | null | undefined;
}>, "many">;
interface PublicThirdPartyPlatformInfoArray extends z.TypeOf<typeof PublicThirdPartyPlatformInfoArray> {
}

declare const PublicUserInformationResponseV3: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        createdAt: z.ZodString;
        displayName: z.ZodString;
        namespace: z.ZodString;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
        userName: z.ZodString;
        userPlatformInfos: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformId: z.ZodString;
            platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        userId: string;
        displayName: string;
        createdAt: string;
        userName: string;
        uniqueDisplayName?: string | null | undefined;
        userPlatformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
    }, {
        namespace: string;
        userId: string;
        displayName: string;
        createdAt: string;
        userName: string;
        uniqueDisplayName?: string | null | undefined;
        userPlatformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
    }>, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
        createdAt: string;
        userName: string;
        uniqueDisplayName?: string | null | undefined;
        userPlatformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: {
        namespace: string;
        userId: string;
        displayName: string;
        createdAt: string;
        userName: string;
        uniqueDisplayName?: string | null | undefined;
        userPlatformInfos?: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[] | null | undefined;
    }[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface PublicUserInformationResponseV3 extends z.TypeOf<typeof PublicUserInformationResponseV3> {
}

declare const PublicUserResponse: z.ZodObject<{
    AuthType: z.ZodString;
    Bans: z.ZodArray<z.ZodObject<{
        Ban: z.ZodString;
        BanId: z.ZodString;
        EndDate: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Ban: string;
        BanId: string;
        EndDate: string;
    }, {
        Ban: string;
        BanId: string;
        EndDate: string;
    }>, "many">;
    CreatedAt: z.ZodString;
    DeletionStatus: z.ZodBoolean;
    DisplayName: z.ZodString;
    EmailVerified: z.ZodBoolean;
    Enabled: z.ZodBoolean;
    LastEnabledChangedTime: z.ZodString;
    LoginId: z.ZodString;
    Namespace: z.ZodString;
    NamespaceRoles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    PhoneVerified: z.ZodBoolean;
    PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Roles: z.ZodArray<z.ZodString, "many">;
    UserId: z.ZodString;
    Username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
    Permissions: {
        action: number;
        resource: string;
    }[];
    DisplayName: string;
    CreatedAt: string;
    Enabled: boolean;
    AuthType: string;
    Bans: {
        Ban: string;
        BanId: string;
        EndDate: string;
    }[];
    DeletionStatus: boolean;
    EmailVerified: boolean;
    LastEnabledChangedTime: string;
    LoginId: string;
    NamespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    PhoneVerified: boolean;
    Roles: string[];
    PlatformId?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
    Username?: string | null | undefined;
}, {
    Namespace: string;
    UserId: string;
    Permissions: {
        action: number;
        resource: string;
    }[];
    DisplayName: string;
    CreatedAt: string;
    Enabled: boolean;
    AuthType: string;
    Bans: {
        Ban: string;
        BanId: string;
        EndDate: string;
    }[];
    DeletionStatus: boolean;
    EmailVerified: boolean;
    LastEnabledChangedTime: string;
    LoginId: string;
    NamespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    PhoneVerified: boolean;
    Roles: string[];
    PlatformId?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
    Username?: string | null | undefined;
}>;
interface PublicUserResponse extends z.TypeOf<typeof PublicUserResponse> {
}

declare const PublicUserResponseV3: z.ZodObject<{
    authType: z.ZodString;
    avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bans: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        banId: z.ZodString;
        endDate: z.ZodString;
        targetedNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }, {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }>, "many">;
    createdAt: z.ZodString;
    deletionStatus: z.ZodBoolean;
    displayName: z.ZodString;
    emailVerified: z.ZodBoolean;
    enabled: z.ZodBoolean;
    lastDateOfBirthChangedTime: z.ZodString;
    lastEnabledChangedTime: z.ZodString;
    namespace: z.ZodString;
    namespaceRoles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    phoneVerified: z.ZodBoolean;
    platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodArray<z.ZodString, "many">;
    uniqueDisplayName: z.ZodString;
    userId: z.ZodString;
    userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    enabled: boolean;
    bans: {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    roles: string[];
    userId: string;
    displayName: string;
    createdAt: string;
    authType: string;
    deletionStatus: boolean;
    emailVerified: boolean;
    lastDateOfBirthChangedTime: string;
    lastEnabledChangedTime: string;
    namespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    phoneVerified: boolean;
    uniqueDisplayName: string;
    platformUserId?: string | null | undefined;
    platformId?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    userName?: string | null | undefined;
}, {
    namespace: string;
    enabled: boolean;
    bans: {
        ban: string;
        endDate: string;
        targetedNamespace: string;
        banId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    roles: string[];
    userId: string;
    displayName: string;
    createdAt: string;
    authType: string;
    deletionStatus: boolean;
    emailVerified: boolean;
    lastDateOfBirthChangedTime: string;
    lastEnabledChangedTime: string;
    namespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    phoneVerified: boolean;
    uniqueDisplayName: string;
    platformUserId?: string | null | undefined;
    platformId?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    userName?: string | null | undefined;
}>;
interface PublicUserResponseV3 extends z.TypeOf<typeof PublicUserResponseV3> {
}

declare const PublicUsersResponse: z.ZodObject<{
    Users: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        AuthType: z.ZodString;
        Bans: z.ZodArray<z.ZodObject<{
            Ban: z.ZodString;
            BanId: z.ZodString;
            EndDate: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            Ban: string;
            BanId: string;
            EndDate: string;
        }, {
            Ban: string;
            BanId: string;
            EndDate: string;
        }>, "many">;
        CreatedAt: z.ZodString;
        DeletionStatus: z.ZodBoolean;
        DisplayName: z.ZodString;
        EmailVerified: z.ZodBoolean;
        Enabled: z.ZodBoolean;
        LastEnabledChangedTime: z.ZodString;
        LoginId: z.ZodString;
        Namespace: z.ZodString;
        NamespaceRoles: z.ZodArray<z.ZodObject<{
            namespace: z.ZodString;
            roleId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            namespace: string;
            roleId: string;
        }, {
            namespace: string;
            roleId: string;
        }>, "many">;
        Permissions: z.ZodArray<z.ZodObject<{
            action: z.ZodNumber;
            resource: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            action: number;
            resource: string;
        }, {
            action: number;
            resource: string;
        }>, "many">;
        PhoneVerified: z.ZodBoolean;
        PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        Roles: z.ZodArray<z.ZodString, "many">;
        UserId: z.ZodString;
        Username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        Username?: string | null | undefined;
    }, {
        Namespace: string;
        UserId: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        Username?: string | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    Users?: {
        Namespace: string;
        UserId: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        Username?: string | null | undefined;
    }[] | null | undefined;
}, {
    Users?: {
        Namespace: string;
        UserId: string;
        Permissions: {
            action: number;
            resource: string;
        }[];
        DisplayName: string;
        CreatedAt: string;
        Enabled: boolean;
        AuthType: string;
        Bans: {
            Ban: string;
            BanId: string;
            EndDate: string;
        }[];
        DeletionStatus: boolean;
        EmailVerified: boolean;
        LastEnabledChangedTime: string;
        LoginId: string;
        NamespaceRoles: {
            namespace: string;
            roleId: string;
        }[];
        PhoneVerified: boolean;
        Roles: string[];
        PlatformId?: string | null | undefined;
        PlatformUserId?: string | null | undefined;
        XUID?: string | null | undefined;
        Username?: string | null | undefined;
    }[] | null | undefined;
}>;
interface PublicUsersResponse extends z.TypeOf<typeof PublicUsersResponse> {
}

declare const PublicUserUpdateRequestV3: z.ZodObject<{
    avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    userName?: string | null | undefined;
    languageTag?: string | null | undefined;
}, {
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    avatarUrl?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    userName?: string | null | undefined;
    languageTag?: string | null | undefined;
}>;
interface PublicUserUpdateRequestV3 extends z.TypeOf<typeof PublicUserUpdateRequestV3> {
}

declare const ResetPasswordRequest: z.ZodObject<{
    Code: z.ZodString;
    LoginID: z.ZodString;
    NewPassword: z.ZodString;
}, "strip", z.ZodTypeAny, {
    NewPassword: string;
    Code: string;
    LoginID: string;
}, {
    NewPassword: string;
    Code: string;
    LoginID: string;
}>;
interface ResetPasswordRequest extends z.TypeOf<typeof ResetPasswordRequest> {
}

declare const ResetPasswordRequestV3: z.ZodObject<{
    clientId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    code: z.ZodString;
    emailAddress: z.ZodString;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    newPassword: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
    emailAddress: string;
    newPassword: string;
    clientId?: string | null | undefined;
    languageTag?: string | null | undefined;
}, {
    code: string;
    emailAddress: string;
    newPassword: string;
    clientId?: string | null | undefined;
    languageTag?: string | null | undefined;
}>;
interface ResetPasswordRequestV3 extends z.TypeOf<typeof ResetPasswordRequestV3> {
}

declare const RevocationList: z.ZodObject<{
    revoked_tokens: z.ZodObject<{
        bits: z.ZodArray<z.ZodNumber, "many">;
        k: z.ZodNumber;
        m: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        bits: number[];
        k: number;
        m: number;
    }, {
        bits: number[];
        k: number;
        m: number;
    }>;
    revoked_users: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        revoked_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        revoked_at: string;
    }, {
        id: string;
        revoked_at: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    revoked_tokens: {
        bits: number[];
        k: number;
        m: number;
    };
    revoked_users: {
        id: string;
        revoked_at: string;
    }[];
}, {
    revoked_tokens: {
        bits: number[];
        k: number;
        m: number;
    };
    revoked_users: {
        id: string;
        revoked_at: string;
    }[];
}>;
interface RevocationList extends z.TypeOf<typeof RevocationList> {
}

declare const Role: z.ZodObject<{
    AdminRole: z.ZodBoolean;
    Deletable: z.ZodBoolean;
    IsWildcard: z.ZodBoolean;
    Managers: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
    Members: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    RoleId: z.ZodString;
    RoleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    AdminRole: boolean;
    Deletable: boolean;
    IsWildcard: boolean;
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    RoleId: string;
    RoleName: string;
}, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    AdminRole: boolean;
    Deletable: boolean;
    IsWildcard: boolean;
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    RoleId: string;
    RoleName: string;
}>;
interface Role extends z.TypeOf<typeof Role> {
}

declare const RoleAdminStatusResponse: z.ZodObject<{
    AdminRole: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    AdminRole: boolean;
}, {
    AdminRole: boolean;
}>;
interface RoleAdminStatusResponse extends z.TypeOf<typeof RoleAdminStatusResponse> {
}

declare const RoleCreateRequest: z.ZodObject<{
    AdminRole: z.ZodBoolean;
    Managers: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
    Members: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    RoleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    AdminRole: boolean;
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    RoleName: string;
}, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    AdminRole: boolean;
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    RoleName: string;
}>;
interface RoleCreateRequest extends z.TypeOf<typeof RoleCreateRequest> {
}

declare const RoleManagersRequest: z.ZodObject<{
    Managers: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}, {
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}>;
interface RoleManagersRequest extends z.TypeOf<typeof RoleManagersRequest> {
}

declare const RoleManagersResponse: z.ZodObject<{
    Managers: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}, {
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}>;
interface RoleManagersResponse extends z.TypeOf<typeof RoleManagersResponse> {
}

declare const RoleMembersRequest: z.ZodObject<{
    Members: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}, {
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}>;
interface RoleMembersRequest extends z.TypeOf<typeof RoleMembersRequest> {
}

declare const RoleMembersResponse: z.ZodObject<{
    Members: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}, {
    Members: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
}>;
interface RoleMembersResponse extends z.TypeOf<typeof RoleMembersResponse> {
}

declare const RoleNamesResponseV3: z.ZodObject<{
    data: z.ZodArray<z.ZodString, "many">;
    paging: z.ZodObject<{
        first: z.ZodString;
        last: z.ZodString;
        next: z.ZodString;
        previous: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }, {
        first: string;
        last: string;
        next: string;
        previous: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}, {
    data: string[];
    paging: {
        first: string;
        last: string;
        next: string;
        previous: string;
    };
}>;
interface RoleNamesResponseV3 extends z.TypeOf<typeof RoleNamesResponseV3> {
}

declare const RoleResponse: z.ZodObject<{
    IsWildcard: z.ZodBoolean;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    RoleId: z.ZodString;
    RoleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    IsWildcard: boolean;
    RoleId: string;
    RoleName: string;
}, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    IsWildcard: boolean;
    RoleId: string;
    RoleName: string;
}>;
interface RoleResponse extends z.TypeOf<typeof RoleResponse> {
}

declare const RoleResponseWithManagersArray: z.ZodArray<z.ZodObject<{
    IsWildcard: z.ZodBoolean;
    Managers: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        Namespace: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }, {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }>, "many">;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    RoleId: z.ZodString;
    RoleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    IsWildcard: boolean;
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    RoleId: string;
    RoleName: string;
}, {
    Permissions: {
        action: number;
        resource: string;
    }[];
    IsWildcard: boolean;
    Managers: {
        Namespace: string;
        UserId: string;
        DisplayName: string;
    }[];
    RoleId: string;
    RoleName: string;
}>, "many">;
interface RoleResponseWithManagersArray extends z.TypeOf<typeof RoleResponseWithManagersArray> {
}

declare const RoleUpdateRequest: z.ZodObject<{
    RoleName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    RoleName: string;
}, {
    RoleName: string;
}>;
interface RoleUpdateRequest extends z.TypeOf<typeof RoleUpdateRequest> {
}

declare const SearchUsersResponse: z.ZodObject<{
    Data: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        EmailAddress: z.ZodString;
        LinkedPlatforms: z.ZodArray<z.ZodObject<{
            DisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            LinkedAt: z.ZodString;
            Namespace: z.ZodString;
            OriginNamespace: z.ZodString;
            PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            UserId: z.ZodString;
            XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }, {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }>, "many">;
        PhoneNumber: z.ZodString;
        UserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }, {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Data: {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }[];
}, {
    Data: {
        UserId: string;
        DisplayName: string;
        EmailAddress: string;
        LinkedPlatforms: {
            Namespace: string;
            UserId: string;
            LinkedAt: string;
            OriginNamespace: string;
            PlatformId?: string | null | undefined;
            DisplayName?: string | null | undefined;
            EmailAddress?: string | null | undefined;
            PlatformUserId?: string | null | undefined;
            XUID?: string | null | undefined;
        }[];
        PhoneNumber: string;
    }[];
}>;
interface SearchUsersResponse extends z.TypeOf<typeof SearchUsersResponse> {
}

declare const SendRegisterVerificationCodeRequest: z.ZodObject<{
    emailAddress: z.ZodString;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    emailAddress: string;
    languageTag?: string | null | undefined;
}, {
    emailAddress: string;
    languageTag?: string | null | undefined;
}>;
interface SendRegisterVerificationCodeRequest extends z.TypeOf<typeof SendRegisterVerificationCodeRequest> {
}

declare const SendVerificationCodeRequest: z.ZodObject<{
    Context: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    LanguageTag: z.ZodString;
    LoginID: z.ZodString;
}, "strip", z.ZodTypeAny, {
    LanguageTag: string;
    LoginID: string;
    Context?: string | null | undefined;
}, {
    LanguageTag: string;
    LoginID: string;
    Context?: string | null | undefined;
}>;
interface SendVerificationCodeRequest extends z.TypeOf<typeof SendVerificationCodeRequest> {
}

declare const SendVerificationLinkRequest: z.ZodObject<{
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    languageTag?: string | null | undefined;
}, {
    languageTag?: string | null | undefined;
}>;
interface SendVerificationLinkRequest extends z.TypeOf<typeof SendVerificationLinkRequest> {
}

declare const TargetTokenCodeResponse: z.ZodObject<{
    code: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
}, {
    code: string;
}>;
interface TargetTokenCodeResponse extends z.TypeOf<typeof TargetTokenCodeResponse> {
}

declare const TokenIntrospectResponse: z.ZodObject<{
    active: z.ZodBoolean;
    aud: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    client_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    exp: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    iat: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    scope: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sub: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    scope?: string | null | undefined;
    client_id?: string | null | undefined;
    exp?: number | null | undefined;
    aud?: string | null | undefined;
    iat?: number | null | undefined;
    sub?: string | null | undefined;
}, {
    active: boolean;
    scope?: string | null | undefined;
    client_id?: string | null | undefined;
    exp?: number | null | undefined;
    aud?: string | null | undefined;
    iat?: number | null | undefined;
    sub?: string | null | undefined;
}>;
interface TokenIntrospectResponse extends z.TypeOf<typeof TokenIntrospectResponse> {
}

declare const TokenResponse: z.ZodObject<{
    access_token: z.ZodString;
    bans: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        disabledDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        enabled: z.ZodBoolean;
        endDate: z.ZodString;
        targetedNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }, {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }>, "many">;
    device_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    display_name: z.ZodString;
    expires_in: z.ZodNumber;
    is_comply: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    jflgs: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    namespace: z.ZodString;
    namespace_roles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    platform_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    refresh_token: z.ZodString;
    roles: z.ZodArray<z.ZodString, "many">;
    token_type: z.ZodString;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    access_token: string;
    bans: {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }[];
    display_name: string;
    expires_in: number;
    namespace_roles: {
        namespace: string;
        roleId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
    }[];
    refresh_token: string;
    roles: string[];
    token_type: string;
    user_id: string;
    is_comply?: boolean | null | undefined;
    jflgs?: number | null | undefined;
    platform_id?: string | null | undefined;
    platform_user_id?: string | null | undefined;
    refresh_expires_in?: number | null | undefined;
    device_id?: string | null | undefined;
}, {
    namespace: string;
    access_token: string;
    bans: {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }[];
    display_name: string;
    expires_in: number;
    namespace_roles: {
        namespace: string;
        roleId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
    }[];
    refresh_token: string;
    roles: string[];
    token_type: string;
    user_id: string;
    is_comply?: boolean | null | undefined;
    jflgs?: number | null | undefined;
    platform_id?: string | null | undefined;
    platform_user_id?: string | null | undefined;
    refresh_expires_in?: number | null | undefined;
    device_id?: string | null | undefined;
}>;
interface TokenResponse extends z.TypeOf<typeof TokenResponse> {
}

declare const TokenResponseV3: z.ZodObject<{
    access_token: z.ZodString;
    bans: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        disabledDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        enabled: z.ZodBoolean;
        endDate: z.ZodString;
        targetedNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }, {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }>, "many">>>;
    display_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_in: z.ZodNumber;
    is_comply: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    jflgs: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    namespace: z.ZodString;
    namespace_roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">>>;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    platform_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    scope: z.ZodString;
    simultaneous_platform_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    simultaneous_platform_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    token_type: z.ZodString;
    unique_display_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    xuid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    access_token: string;
    expires_in: number;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    scope: string;
    token_type: string;
    bans?: {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }[] | null | undefined;
    display_name?: string | null | undefined;
    is_comply?: boolean | null | undefined;
    jflgs?: number | null | undefined;
    namespace_roles?: {
        namespace: string;
        roleId: string;
    }[] | null | undefined;
    platform_id?: string | null | undefined;
    platform_user_id?: string | null | undefined;
    refresh_expires_in?: number | null | undefined;
    refresh_token?: string | null | undefined;
    roles?: string[] | null | undefined;
    simultaneous_platform_id?: string | null | undefined;
    simultaneous_platform_user_id?: string | null | undefined;
    unique_display_name?: string | null | undefined;
    user_id?: string | null | undefined;
    xuid?: string | null | undefined;
}, {
    namespace: string;
    access_token: string;
    expires_in: number;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    scope: string;
    token_type: string;
    bans?: {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }[] | null | undefined;
    display_name?: string | null | undefined;
    is_comply?: boolean | null | undefined;
    jflgs?: number | null | undefined;
    namespace_roles?: {
        namespace: string;
        roleId: string;
    }[] | null | undefined;
    platform_id?: string | null | undefined;
    platform_user_id?: string | null | undefined;
    refresh_expires_in?: number | null | undefined;
    refresh_token?: string | null | undefined;
    roles?: string[] | null | undefined;
    simultaneous_platform_id?: string | null | undefined;
    simultaneous_platform_user_id?: string | null | undefined;
    unique_display_name?: string | null | undefined;
    user_id?: string | null | undefined;
    xuid?: string | null | undefined;
}>;
interface TokenResponseV3 extends z.TypeOf<typeof TokenResponseV3> {
}

declare const TokenWithDeviceCookieResponseV3: z.ZodObject<{
    access_token: z.ZodString;
    auth_trust_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bans: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        disabledDate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        enabled: z.ZodBoolean;
        endDate: z.ZodString;
        targetedNamespace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }, {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }>, "many">>>;
    display_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_in: z.ZodNumber;
    is_comply: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    jflgs: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    namespace: z.ZodString;
    namespace_roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">>>;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    platform_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    scope: z.ZodString;
    simultaneous_platform_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    simultaneous_platform_user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    token_type: z.ZodString;
    unique_display_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    xuid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    access_token: string;
    expires_in: number;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    scope: string;
    token_type: string;
    auth_trust_id?: string | null | undefined;
    bans?: {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }[] | null | undefined;
    display_name?: string | null | undefined;
    is_comply?: boolean | null | undefined;
    jflgs?: number | null | undefined;
    namespace_roles?: {
        namespace: string;
        roleId: string;
    }[] | null | undefined;
    platform_id?: string | null | undefined;
    platform_user_id?: string | null | undefined;
    refresh_expires_in?: number | null | undefined;
    refresh_token?: string | null | undefined;
    roles?: string[] | null | undefined;
    simultaneous_platform_id?: string | null | undefined;
    simultaneous_platform_user_id?: string | null | undefined;
    unique_display_name?: string | null | undefined;
    user_id?: string | null | undefined;
    xuid?: string | null | undefined;
}, {
    namespace: string;
    access_token: string;
    expires_in: number;
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    scope: string;
    token_type: string;
    auth_trust_id?: string | null | undefined;
    bans?: {
        ban: string;
        enabled: boolean;
        endDate: string;
        targetedNamespace: string;
        disabledDate?: string | null | undefined;
    }[] | null | undefined;
    display_name?: string | null | undefined;
    is_comply?: boolean | null | undefined;
    jflgs?: number | null | undefined;
    namespace_roles?: {
        namespace: string;
        roleId: string;
    }[] | null | undefined;
    platform_id?: string | null | undefined;
    platform_user_id?: string | null | undefined;
    refresh_expires_in?: number | null | undefined;
    refresh_token?: string | null | undefined;
    roles?: string[] | null | undefined;
    simultaneous_platform_id?: string | null | undefined;
    simultaneous_platform_user_id?: string | null | undefined;
    unique_display_name?: string | null | undefined;
    user_id?: string | null | undefined;
    xuid?: string | null | undefined;
}>;
interface TokenWithDeviceCookieResponseV3 extends z.TypeOf<typeof TokenWithDeviceCookieResponseV3> {
}

declare const UpdatePermissionScheduleRequest: z.ZodObject<{
    SchedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    SchedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    SchedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    SchedAction?: number | null | undefined;
    SchedCron?: string | null | undefined;
    SchedRange?: string[] | null | undefined;
}, {
    SchedAction?: number | null | undefined;
    SchedCron?: string | null | undefined;
    SchedRange?: string[] | null | undefined;
}>;
interface UpdatePermissionScheduleRequest extends z.TypeOf<typeof UpdatePermissionScheduleRequest> {
}

declare const UpgradeHeadlessAccountRequest: z.ZodObject<{
    LoginID: z.ZodString;
    Password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    LoginID: string;
    Password: string;
}, {
    LoginID: string;
    Password: string;
}>;
interface UpgradeHeadlessAccountRequest extends z.TypeOf<typeof UpgradeHeadlessAccountRequest> {
}

declare const UpgradeHeadlessAccountRequestV4: z.ZodObject<{
    emailAddress: z.ZodString;
    password: z.ZodString;
    username: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    username: string;
    emailAddress: string;
}, {
    password: string;
    username: string;
    emailAddress: string;
}>;
interface UpgradeHeadlessAccountRequestV4 extends z.TypeOf<typeof UpgradeHeadlessAccountRequestV4> {
}

declare const UpgradeHeadlessAccountV3Request: z.ZodObject<{
    emailAddress: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    emailAddress: string;
}, {
    password: string;
    emailAddress: string;
}>;
interface UpgradeHeadlessAccountV3Request extends z.TypeOf<typeof UpgradeHeadlessAccountV3Request> {
}

declare const UpgradeHeadlessAccountWithVerificationCodeRequest: z.ZodObject<{
    Code: z.ZodString;
    Password: z.ZodString;
    loginId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Code: string;
    Password: string;
    loginId: string;
}, {
    Code: string;
    Password: string;
    loginId: string;
}>;
interface UpgradeHeadlessAccountWithVerificationCodeRequest extends z.TypeOf<typeof UpgradeHeadlessAccountWithVerificationCodeRequest> {
}

declare const UpgradeHeadlessAccountWithVerificationCodeRequestV4: z.ZodObject<{
    code: z.ZodString;
    country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    emailAddress: z.ZodString;
    password: z.ZodString;
    reachMinimumAge: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodString;
    validateOnly: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    password: string;
    username: string;
    emailAddress: string;
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    validateOnly?: boolean | null | undefined;
    reachMinimumAge?: boolean | null | undefined;
}, {
    code: string;
    password: string;
    username: string;
    emailAddress: string;
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    validateOnly?: boolean | null | undefined;
    reachMinimumAge?: boolean | null | undefined;
}>;
interface UpgradeHeadlessAccountWithVerificationCodeRequestV4 extends z.TypeOf<typeof UpgradeHeadlessAccountWithVerificationCodeRequestV4> {
}

declare const UserCreateRequest: z.ZodObject<{
    AuthType: z.ZodString;
    Country: z.ZodString;
    DisplayName: z.ZodString;
    LoginId: z.ZodString;
    Password: z.ZodString;
    PasswordMD5Sum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Country: string;
    DisplayName: string;
    AuthType: string;
    LoginId: string;
    Password: string;
    PasswordMD5Sum?: string | null | undefined;
}, {
    Country: string;
    DisplayName: string;
    AuthType: string;
    LoginId: string;
    Password: string;
    PasswordMD5Sum?: string | null | undefined;
}>;
interface UserCreateRequest extends z.TypeOf<typeof UserCreateRequest> {
}

declare const UserCreateRequestV3: z.ZodObject<{
    PasswordMD5Sum: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    acceptedPolicies: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        isAccepted: z.ZodBoolean;
        localizedPolicyVersionId: z.ZodString;
        policyId: z.ZodString;
        policyVersionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }, {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }>, "many">>>;
    authType: z.ZodString;
    code: z.ZodString;
    country: z.ZodString;
    dateOfBirth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodString;
    emailAddress: z.ZodString;
    password: z.ZodString;
    reachMinimumAge: z.ZodBoolean;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    password: string;
    displayName: string;
    country: string;
    authType: string;
    emailAddress: string;
    reachMinimumAge: boolean;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    acceptedPolicies?: {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }[] | null | undefined;
    PasswordMD5Sum?: string | null | undefined;
}, {
    code: string;
    password: string;
    displayName: string;
    country: string;
    authType: string;
    emailAddress: string;
    reachMinimumAge: boolean;
    dateOfBirth?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    acceptedPolicies?: {
        isAccepted: boolean;
        localizedPolicyVersionId: string;
        policyId: string;
        policyVersionId: string;
    }[] | null | undefined;
    PasswordMD5Sum?: string | null | undefined;
}>;
interface UserCreateRequestV3 extends z.TypeOf<typeof UserCreateRequestV3> {
}

declare const UserCreateResponse: z.ZodObject<{
    AuthType: z.ZodString;
    Country: z.ZodString;
    DateOfBirth: z.ZodString;
    DisplayName: z.ZodString;
    LoginId: z.ZodString;
    Namespace: z.ZodString;
    UserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
    Country: string;
    DisplayName: string;
    AuthType: string;
    DateOfBirth: string;
    LoginId: string;
}, {
    Namespace: string;
    UserId: string;
    Country: string;
    DisplayName: string;
    AuthType: string;
    DateOfBirth: string;
    LoginId: string;
}>;
interface UserCreateResponse extends z.TypeOf<typeof UserCreateResponse> {
}

declare const UserCreateResponseV3: z.ZodObject<{
    authType: z.ZodString;
    country: z.ZodString;
    dateOfBirth: z.ZodString;
    displayName: z.ZodString;
    emailAddress: z.ZodString;
    namespace: z.ZodString;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    userId: string;
    displayName: string;
    country: string;
    authType: string;
    dateOfBirth: string;
    emailAddress: string;
    uniqueDisplayName?: string | null | undefined;
}, {
    namespace: string;
    userId: string;
    displayName: string;
    country: string;
    authType: string;
    dateOfBirth: string;
    emailAddress: string;
    uniqueDisplayName?: string | null | undefined;
}>;
interface UserCreateResponseV3 extends z.TypeOf<typeof UserCreateResponseV3> {
}

declare const UserInformation: z.ZodObject<{
    Country: z.ZodString;
    DisplayName: z.ZodString;
    EmailAddresses: z.ZodArray<z.ZodString, "many">;
    LinkedPlatformAccounts: z.ZodArray<z.ZodObject<{
        DisplayName: z.ZodString;
        EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        LinkedAt: z.ZodString;
        Namespace: z.ZodString;
        PlatformID: z.ZodString;
        PlatformUserID: z.ZodString;
        XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        Namespace: string;
        DisplayName: string;
        LinkedAt: string;
        PlatformID: string;
        PlatformUserID: string;
        EmailAddress?: string | null | undefined;
        XUID?: string | null | undefined;
    }, {
        Namespace: string;
        DisplayName: string;
        LinkedAt: string;
        PlatformID: string;
        PlatformUserID: string;
        EmailAddress?: string | null | undefined;
        XUID?: string | null | undefined;
    }>, "many">;
    PhoneNumber: z.ZodString;
    Username: z.ZodString;
    XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Country: string;
    DisplayName: string;
    PhoneNumber: string;
    Username: string;
    EmailAddresses: string[];
    LinkedPlatformAccounts: {
        Namespace: string;
        DisplayName: string;
        LinkedAt: string;
        PlatformID: string;
        PlatformUserID: string;
        EmailAddress?: string | null | undefined;
        XUID?: string | null | undefined;
    }[];
    XUID?: string | null | undefined;
}, {
    Country: string;
    DisplayName: string;
    PhoneNumber: string;
    Username: string;
    EmailAddresses: string[];
    LinkedPlatformAccounts: {
        Namespace: string;
        DisplayName: string;
        LinkedAt: string;
        PlatformID: string;
        PlatformUserID: string;
        EmailAddress?: string | null | undefined;
        XUID?: string | null | undefined;
    }[];
    XUID?: string | null | undefined;
}>;
interface UserInformation extends z.TypeOf<typeof UserInformation> {
}

declare const UserInformationV3: z.ZodObject<{
    country: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    emailAddresses: z.ZodArray<z.ZodString, "many">;
    phoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformUsers: z.ZodArray<z.ZodObject<{
        displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        emailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        linkedAt: z.ZodString;
        namespace: z.ZodString;
        platformId: z.ZodString;
        platformUserId: z.ZodString;
        xboxUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        platformUserId: string;
        platformId: string;
        linkedAt: string;
        displayName?: string | null | undefined;
        emailAddress?: string | null | undefined;
        xboxUserId?: string | null | undefined;
    }, {
        namespace: string;
        platformUserId: string;
        platformId: string;
        linkedAt: string;
        displayName?: string | null | undefined;
        emailAddress?: string | null | undefined;
        xboxUserId?: string | null | undefined;
    }>, "many">;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    xboxUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    emailAddresses: string[];
    platformUsers: {
        namespace: string;
        platformUserId: string;
        platformId: string;
        linkedAt: string;
        displayName?: string | null | undefined;
        emailAddress?: string | null | undefined;
        xboxUserId?: string | null | undefined;
    }[];
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    username?: string | null | undefined;
    phoneNumber?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    xboxUserId?: string | null | undefined;
}, {
    emailAddresses: string[];
    platformUsers: {
        namespace: string;
        platformUserId: string;
        platformId: string;
        linkedAt: string;
        displayName?: string | null | undefined;
        emailAddress?: string | null | undefined;
        xboxUserId?: string | null | undefined;
    }[];
    displayName?: string | null | undefined;
    country?: string | null | undefined;
    username?: string | null | undefined;
    phoneNumber?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    xboxUserId?: string | null | undefined;
}>;
interface UserInformationV3 extends z.TypeOf<typeof UserInformationV3> {
}

declare const UserInputValidationRequest: z.ZodObject<{
    displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    password?: string | null | undefined;
    displayName?: string | null | undefined;
    username?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
}, {
    password?: string | null | undefined;
    displayName?: string | null | undefined;
    username?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
}>;
interface UserInputValidationRequest extends z.TypeOf<typeof UserInputValidationRequest> {
}

declare const UserInputValidationResponse: z.ZodObject<{
    message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    valid: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    valid: boolean;
    message?: string | null | undefined;
}, {
    valid: boolean;
    message?: string | null | undefined;
}>;
interface UserInputValidationResponse extends z.TypeOf<typeof UserInputValidationResponse> {
}

declare const UserInvitationV3: z.ZodObject<{
    additionalData: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodString;
    expiredAt: z.ZodString;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    isNewStudio: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    namespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    namespaceDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    studioNamespace: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    roles: {
        namespace: string;
        roleId: string;
    }[];
    email: string;
    expiredAt: string;
    namespace?: string | null | undefined;
    id?: string | null | undefined;
    additionalData?: string | null | undefined;
    isNewStudio?: boolean | null | undefined;
    namespaceDisplayName?: string | null | undefined;
    studioNamespace?: string | null | undefined;
}, {
    roles: {
        namespace: string;
        roleId: string;
    }[];
    email: string;
    expiredAt: string;
    namespace?: string | null | undefined;
    id?: string | null | undefined;
    additionalData?: string | null | undefined;
    isNewStudio?: boolean | null | undefined;
    namespaceDisplayName?: string | null | undefined;
    studioNamespace?: string | null | undefined;
}>;
interface UserInvitationV3 extends z.TypeOf<typeof UserInvitationV3> {
}

declare const UserLinkedPlatformArray: z.ZodArray<z.ZodObject<{
    DisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    LinkedAt: z.ZodString;
    Namespace: z.ZodString;
    OriginNamespace: z.ZodString;
    PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    UserId: z.ZodString;
    XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
    LinkedAt: string;
    OriginNamespace: string;
    PlatformId?: string | null | undefined;
    DisplayName?: string | null | undefined;
    EmailAddress?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
}, {
    Namespace: string;
    UserId: string;
    LinkedAt: string;
    OriginNamespace: string;
    PlatformId?: string | null | undefined;
    DisplayName?: string | null | undefined;
    EmailAddress?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
}>, "many">;
interface UserLinkedPlatformArray extends z.TypeOf<typeof UserLinkedPlatformArray> {
}

declare const UserProfileUpdateAllowStatus: z.ZodObject<{
    status: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        nextAvailableEditTime: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        remainingTimeInSeconds: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        field: string;
        nextAvailableEditTime?: number | null | undefined;
        remainingTimeInSeconds?: number | null | undefined;
    }, {
        type: string;
        field: string;
        nextAvailableEditTime?: number | null | undefined;
        remainingTimeInSeconds?: number | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: {
        type: string;
        field: string;
        nextAvailableEditTime?: number | null | undefined;
        remainingTimeInSeconds?: number | null | undefined;
    }[];
}, {
    status: {
        type: string;
        field: string;
        nextAvailableEditTime?: number | null | undefined;
        remainingTimeInSeconds?: number | null | undefined;
    }[];
}>;
interface UserProfileUpdateAllowStatus extends z.TypeOf<typeof UserProfileUpdateAllowStatus> {
}

declare const UserPublicInfoResponseV4: z.ZodObject<{
    displayName: z.ZodString;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userId: string;
    displayName: string;
    uniqueDisplayName?: string | null | undefined;
}, {
    userId: string;
    displayName: string;
    uniqueDisplayName?: string | null | undefined;
}>;
interface UserPublicInfoResponseV4 extends z.TypeOf<typeof UserPublicInfoResponseV4> {
}

declare const UserResponseArray: z.ZodArray<z.ZodObject<{
    AuthType: z.ZodString;
    AvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Bans: z.ZodArray<z.ZodObject<{
        Ban: z.ZodString;
        BanId: z.ZodString;
        EndDate: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        Ban: string;
        BanId: string;
        EndDate: string;
    }, {
        Ban: string;
        BanId: string;
        EndDate: string;
    }>, "many">;
    Country: z.ZodString;
    CreatedAt: z.ZodString;
    DateOfBirth: z.ZodString;
    DeletionStatus: z.ZodBoolean;
    DisplayName: z.ZodString;
    EmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    EmailVerified: z.ZodBoolean;
    Enabled: z.ZodBoolean;
    LastDateOfBirthChangedTime: z.ZodString;
    LastEnabledChangedTime: z.ZodString;
    LoginId: z.ZodString;
    Namespace: z.ZodString;
    NamespaceRoles: z.ZodArray<z.ZodObject<{
        namespace: z.ZodString;
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        namespace: string;
        roleId: string;
    }, {
        namespace: string;
        roleId: string;
    }>, "many">;
    NewEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    OldEmailAddress: z.ZodString;
    Permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
    }, {
        action: number;
        resource: string;
    }>, "many">;
    PhoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PhoneVerified: z.ZodBoolean;
    PlatformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    PlatformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    Roles: z.ZodArray<z.ZodString, "many">;
    UserId: z.ZodString;
    Username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    XUID: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    Namespace: string;
    UserId: string;
    Country: string;
    Permissions: {
        action: number;
        resource: string;
    }[];
    DisplayName: string;
    CreatedAt: string;
    Enabled: boolean;
    AuthType: string;
    Bans: {
        Ban: string;
        BanId: string;
        EndDate: string;
    }[];
    DateOfBirth: string;
    DeletionStatus: boolean;
    EmailVerified: boolean;
    LastDateOfBirthChangedTime: string;
    LastEnabledChangedTime: string;
    LoginId: string;
    NamespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    OldEmailAddress: string;
    PhoneVerified: boolean;
    Roles: string[];
    PlatformId?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    EmailAddress?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
    PhoneNumber?: string | null | undefined;
    AvatarUrl?: string | null | undefined;
    NewEmailAddress?: string | null | undefined;
    Username?: string | null | undefined;
}, {
    Namespace: string;
    UserId: string;
    Country: string;
    Permissions: {
        action: number;
        resource: string;
    }[];
    DisplayName: string;
    CreatedAt: string;
    Enabled: boolean;
    AuthType: string;
    Bans: {
        Ban: string;
        BanId: string;
        EndDate: string;
    }[];
    DateOfBirth: string;
    DeletionStatus: boolean;
    EmailVerified: boolean;
    LastDateOfBirthChangedTime: string;
    LastEnabledChangedTime: string;
    LoginId: string;
    NamespaceRoles: {
        namespace: string;
        roleId: string;
    }[];
    OldEmailAddress: string;
    PhoneVerified: boolean;
    Roles: string[];
    PlatformId?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
    EmailAddress?: string | null | undefined;
    PlatformUserId?: string | null | undefined;
    XUID?: string | null | undefined;
    PhoneNumber?: string | null | undefined;
    AvatarUrl?: string | null | undefined;
    NewEmailAddress?: string | null | undefined;
    Username?: string | null | undefined;
}>, "many">;
interface UserResponseArray extends z.TypeOf<typeof UserResponseArray> {
}

declare const UserResponseV4: z.ZodObject<{
    authType: z.ZodString;
    bans: z.ZodArray<z.ZodObject<{
        ban: z.ZodString;
        banId: z.ZodString;
        endDate: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ban: string;
        endDate: string;
        banId: string;
    }, {
        ban: string;
        endDate: string;
        banId: string;
    }>, "many">;
    country: z.ZodString;
    createdAt: z.ZodString;
    dateOfBirth: z.ZodString;
    deletionStatus: z.ZodBoolean;
    displayName: z.ZodString;
    emailAddress: z.ZodString;
    emailVerified: z.ZodBoolean;
    enabled: z.ZodBoolean;
    lastDateOfBirthChangedTime: z.ZodString;
    lastEnabledChangedTime: z.ZodString;
    namespace: z.ZodString;
    newEmailAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    oldEmailAddress: z.ZodString;
    permissions: z.ZodArray<z.ZodObject<{
        action: z.ZodNumber;
        resource: z.ZodString;
        schedAction: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        schedCron: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schedRange: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }, {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }>, "many">;
    phoneNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    phoneVerified: z.ZodBoolean;
    platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    roles: z.ZodArray<z.ZodString, "many">;
    uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodString;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    enabled: boolean;
    bans: {
        ban: string;
        endDate: string;
        banId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    roles: string[];
    userId: string;
    displayName: string;
    createdAt: string;
    country: string;
    authType: string;
    dateOfBirth: string;
    deletionStatus: boolean;
    emailAddress: string;
    emailVerified: boolean;
    lastDateOfBirthChangedTime: string;
    lastEnabledChangedTime: string;
    oldEmailAddress: string;
    phoneVerified: boolean;
    platformUserId?: string | null | undefined;
    username?: string | null | undefined;
    platformId?: string | null | undefined;
    newEmailAddress?: string | null | undefined;
    phoneNumber?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
}, {
    namespace: string;
    enabled: boolean;
    bans: {
        ban: string;
        endDate: string;
        banId: string;
    }[];
    permissions: {
        action: number;
        resource: string;
        schedAction?: number | null | undefined;
        schedCron?: string | null | undefined;
        schedRange?: string[] | null | undefined;
    }[];
    roles: string[];
    userId: string;
    displayName: string;
    createdAt: string;
    country: string;
    authType: string;
    dateOfBirth: string;
    deletionStatus: boolean;
    emailAddress: string;
    emailVerified: boolean;
    lastDateOfBirthChangedTime: string;
    lastEnabledChangedTime: string;
    oldEmailAddress: string;
    phoneVerified: boolean;
    platformUserId?: string | null | undefined;
    username?: string | null | undefined;
    platformId?: string | null | undefined;
    newEmailAddress?: string | null | undefined;
    phoneNumber?: string | null | undefined;
    uniqueDisplayName?: string | null | undefined;
}>;
interface UserResponseV4 extends z.TypeOf<typeof UserResponseV4> {
}

declare const UsersPlatformInfosRequestV3: z.ZodObject<{
    platformId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
    platformId?: string | null | undefined;
}, {
    userIds: string[];
    platformId?: string | null | undefined;
}>;
interface UsersPlatformInfosRequestV3 extends z.TypeOf<typeof UsersPlatformInfosRequestV3> {
}

declare const UsersPlatformInfosResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        avatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        displayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        platformInfos: z.ZodArray<z.ZodObject<{
            platformAvatarUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformGroup: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            platformId: z.ZodString;
            platformUserId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }, {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }>, "many">;
        uniqueDisplayName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        displayName?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }, {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        displayName?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        displayName?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }[];
}, {
    data: {
        userId: string;
        platformInfos: {
            platformId: string;
            platformUserId?: string | null | undefined;
            platformDisplayName?: string | null | undefined;
            platformGroup?: string | null | undefined;
            platformAvatarUrl?: string | null | undefined;
        }[];
        displayName?: string | null | undefined;
        avatarUrl?: string | null | undefined;
        uniqueDisplayName?: string | null | undefined;
    }[];
}>;
interface UsersPlatformInfosResponse extends z.TypeOf<typeof UsersPlatformInfosResponse> {
}

declare const UserVerificationRequestV3: z.ZodObject<{
    code: z.ZodString;
    contactType: z.ZodString;
    languageTag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    validateOnly: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    contactType: string;
    languageTag?: string | null | undefined;
    validateOnly?: boolean | null | undefined;
}, {
    code: string;
    contactType: string;
    languageTag?: string | null | undefined;
    validateOnly?: boolean | null | undefined;
}>;
interface UserVerificationRequestV3 extends z.TypeOf<typeof UserVerificationRequestV3> {
}

declare const VerifyRegistrationCode: z.ZodObject<{
    code: z.ZodString;
    emailAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
    emailAddress: string;
}, {
    code: string;
    emailAddress: string;
}>;
interface VerifyRegistrationCode extends z.TypeOf<typeof VerifyRegistrationCode> {
}

declare const WebLinkingResponse: z.ZodObject<{
    state: z.ZodString;
    third_party_url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    state: string;
    third_party_url: string;
}, {
    state: string;
    third_party_url: string;
}>;
interface WebLinkingResponse extends z.TypeOf<typeof WebLinkingResponse> {
}

export { ListAssignedUsersV4Response as $, RoleOverrideUpdateRequest as A, BansV3 as B, ClientsV3Response as C, DevicesResponseV4 as D, RoleOverrideSourceResponse as E, RoleOverrideStatsUpdateRequest as F, GetUserBanV3Response as G, RolePermissionResponseV3 as H, InputValidationsResponse as I, GetProfileUpdateStrategyConfigResponse as J, RoleResponseWithManagersAndPaginationV3 as K, ListBulkUserBanResponseV3 as L, RoleCreateV3Request as M, RoleV3 as N, ListRoleV4Response as O, PermissionSetDeleteGroupRequest as P, RoleV4Request as Q, RoleOverrideResponse as R, SimpleProfileUpdateStrategyConfigs as S, TokenThirdPartyResponse as T, UpdateProfileUpdateStrategyConfigRequest as U, V3ClientUpdateSecretRequest as V, RoleV4Response as W, RoleResponseV3 as X, RoleUpdateRequestV3 as Y, RoleAdminStatusResponseV3 as Z, RevokeUserV4Request as _, BanReasonsV3 as a, UserDeletionStatusResponse as a$, AssignUserV4Request as a0, AssignedUserV4Response as a1, RoleMembersRequestV3 as a2, RoleMembersResponseV3 as a3, RoleManagersRequestV3 as a4, RoleManagersResponsesV3 as a5, PermissionsV3 as a6, SsoPlatformCredentialResponseArray as a7, SsoPlatformCredentialResponse as a8, SsoPlatformCredentialRequest as a9, BanCreateRequest as aA, UserBanResponse as aB, UserBanResponseArray as aC, UserBanResponseV3 as aD, LinkingHistoryResponseWithPaginationV3 as aE, VerificationCodeResponse as aF, NamespaceRoleRequest as aG, ListBulkUserPlatformsResponse as aH, UpdateUserStatusRequest as aI, DisableUserRequest as aJ, CountryAgeRestrictionRequest as aK, Country as aL, UserPasswordUpdateRequest as aM, UserPasswordUpdateV3Request as aN, ListUsersWithPlatformAccountsResponse as aO, UserLinkedPlatformsResponseV3 as aP, CountryAgeRestrictionArray as aQ, CountryV3ResponseArray as aR, UserVerificationRequest as aS, PermissionDeleteRequest as aT, Permissions as aU, BanUpdateRequest as aV, GetUserBanSummaryV3 as aW, SendVerificationCodeRequestV3 as aX, PlatformUserIdRequest as aY, UserPlatforms as aZ, LinkPlatformAccountRequest as a_, CheckAvailabilityResponse as aa, ThirdPartyLoginPlatformCredentialResponseArray as ab, ThirdPartyLoginPlatformCredentialResponse as ac, ThirdPartyLoginPlatformCredentialRequest as ad, PlatformDomainDeleteRequest as ae, PlatformDomainUpdateRequest as af, PlatformDomainResponse as ag, UserResponseV3 as ah, SearchUsersByPlatformIdResponse as ai, UsersUpdateRequestV3 as aj, GetUsersResponseWithPaginationV3 as ak, GetBulkUserBansRequest as al, UserIDsRequest as am, ListUserInformationResult as an, InviteUserRequestV3 as ao, InviteUserResponseV3 as ap, SearchUsersResponseWithPaginationV3 as aq, UserResponse as ar, UserUpdateRequest as as, UserUpdateRequestV3 as at, AgeRestrictionResponse as au, AgeRestrictionRequest as av, AgeRestrictionResponseV3 as aw, AgeRestrictionRequestV3 as ax, ListEmailAddressRequest as ay, ListUserResponseV3 as az, BulkBanCreateRequestV3 as b, RoleAdminStatusResponse as b$, UpdateUserDeletionStatusRequest as b0, LoginHistoriesResponse as b1, UserIdentityUpdateRequestV3 as b2, DistinctPlatformResponseV3 as b3, GetUserMappingArray as b4, UpgradeHeadlessAccountWithVerificationCodeRequestV3 as b5, UnlinkUserPlatformRequest as b6, CountryAgeRestrictionV3Request as b7, CountryV3Response as b8, UserPlatformLinkHistories as b9, BanReasons as bA, ClientResponseArray as bB, ClientCreateRequest as bC, ClientCreationResponse as bD, ClientResponse as bE, ClientUpdateRequest as bF, ClientUpdateSecretRequest as bG, ClientPermissions as bH, InputValidationsPublicResponse as bI, InputValidationConfigVersion as bJ, JwkSet as bK, TokenResponse as bL, RevocationList as bM, TokenWithDeviceCookieResponseV3 as bN, TokenResponseV3 as bO, TokenIntrospectResponse as bP, CountryLocationResponse as bQ, OneTimeLinkingCodeResponse as bR, OneTimeLinkingCodeValidationResponse as bS, TargetTokenCodeResponse as bT, PlatformTokenRefreshResponseV3 as bU, RoleResponseWithManagersArray as bV, RoleCreateRequest as bW, Role as bX, RoleResponse as bY, RoleUpdateRequest as bZ, RoleNamesResponseV3 as b_, UserPlatformMetadata as ba, TokenThirdPartyLinkStatusResponse as bb, GetUserMappingV3 as bc, CreateJusticeUserResponse as bd, InviteUserRequestV4 as be, ListInvitationHistoriesV4Response as bf, EnabledFactorsResponseV4 as bg, UserMfaStatusResponseV4 as bh, BackupCodesResponseV4 as bi, DisableMfaRequest as bj, CreateUserRequestV4 as bk, CreateUserResponseV4 as bl, UserMfaTokenResponseV4 as bm, AuthenticatorKeyResponseV4 as bn, CreateTestUsersRequestV4 as bo, CreateTestUsersResponseV4 as bp, InvitationHistoryResponse as bq, CheckValidUserIdRequestV4 as br, ListValidUserIdResponseV4 as bs, EmailUpdateRequestV4 as bt, RemoveUserRoleV4Request as bu, ListUserRolesV4Response as bv, AddUserRoleV4Request as bw, BulkAccountTypeUpdateRequestV4 as bx, NamespaceInvitationHistoryUserV4Response as by, Bans as bz, BulkUnbanCreateRequestV3 as c, RoleMembersRequest as c0, RoleMembersResponse as c1, RoleManagersRequest as c2, RoleManagersResponse as c3, UpdatePermissionScheduleRequest as c4, PublicThirdPartyPlatformInfoArray as c5, UserCreateRequest as c6, UserCreateResponse as c7, UserProfileUpdateAllowStatus as c8, GetAdminUsersResponse as c9, UserInputValidationResponse as cA, UpgradeHeadlessAccountV3Request as cB, UserInformationV3 as cC, UpgradeHeadlessAccountRequest as cD, UserInvitationV3 as cE, GetUserMappingV3Array as cF, LinkRequest as cG, GetUserMapping as cH, GetUserJusticePlatformAccountResponse as cI, WebLinkingResponse as cJ, LinkPlatformAccountWithProgressionRequest as cK, UpgradeHeadlessAccountWithVerificationCodeRequest as cL, PublicInviteUserRequestV4 as cM, CreateTestUserRequestV4 as cN, UserPublicInfoResponseV4 as cO, UpgradeHeadlessAccountRequestV4 as cP, UserResponseV4 as cQ, PlatformUserIdRequestV4 as cR, UpgradeHeadlessAccountWithVerificationCodeRequestV4 as cS, SearchUsersResponse as ca, PublicUserResponse as cb, PublicUserInformationResponseV3 as cc, UserCreateRequestV3 as cd, UserCreateResponseV3 as ce, SendVerificationLinkRequest as cf, PublicUserUpdateRequestV3 as cg, GetLinkHeadlessAccountConflictResponse as ch, ResetPasswordRequest as ci, SendVerificationCodeRequest as cj, PublicUsersResponse as ck, ResetPasswordRequestV3 as cl, ForgotPasswordRequestV3 as cm, UserLinkedPlatformArray as cn, GetPublisherUserResponse as co, UserResponseArray as cp, PublicUserResponseV3 as cq, LinkHeadlessAccountRequest as cr, UsersPlatformInfosRequestV3 as cs, UsersPlatformInfosResponse as ct, UserInformation as cu, ListBulkUserResponse as cv, VerifyRegistrationCode as cw, SendRegisterVerificationCodeRequest as cx, UserVerificationRequestV3 as cy, UserInputValidationRequest as cz, ClientCreationV3Request as d, ClientV3Response as e, ClientsUpdateRequestV3 as f, ClientUpdateV3Request as g, ClientPermissionsV3 as h, ListTemplatesResponse as i, ListClientPermissionSet as j, ListUpsertModulesRequest as k, ConfigValueResponseV3 as l, CountryResponseArray as m, CountryBlacklistResponse as n, CountryBlacklistRequest as o, DeviceBansResponseV4 as p, DeviceBanRequestV4 as q, DeviceTypesResponseV4 as r, DeviceBannedResponseV4 as s, DeviceBanResponseV4 as t, DeviceBanUpdateRequestV4 as u, DeviceUsersResponseV4 as v, DeviceIdDecryptResponseV4 as w, InputValidationUpdatePayload as x, LoginAllowlistResponse as y, LoginAllowlistRequest as z };
