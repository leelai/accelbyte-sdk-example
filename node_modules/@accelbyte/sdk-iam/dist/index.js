import {
  AccountProgressionInfo,
  AgeRestrictionResponse,
  AgeRestrictionResponseV3,
  AllowedPermission,
  AssignedUserV4Response,
  AuthenticatorKeyResponseV4,
  AvatarConfig,
  BackupCodesResponseV4,
  Ban,
  BanReason,
  BanReasonV3,
  BanReasons,
  BanReasonsV3,
  BanV3,
  BannedBy,
  BannedByV3,
  Bans,
  Bans$,
  BansAdmin$,
  BansAdminApi,
  BansApi,
  BansV3,
  CheckAvailabilityResponse,
  ClientCreationResponse,
  ClientModulePermission,
  ClientPermissionSet,
  ClientResponse,
  ClientResponseArray,
  ClientSelectedGroup,
  ClientTemplate,
  ClientV3Response,
  Clients$,
  ClientsAdmin$,
  ClientsAdminApi,
  ClientsApi,
  ClientsConfigV3Admin$,
  ClientsConfigV3AdminApi,
  ClientsV3Response,
  Config$,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigApi,
  ConfigValueResponseV3,
  ConflictedUserPlatformAccounts,
  Country,
  Country$,
  CountryAdmin$,
  CountryAdminApi,
  CountryAgeRestriction,
  CountryAgeRestrictionArray,
  CountryApi,
  CountryBlacklistResponse,
  CountryLocationResponse,
  CountryResponse,
  CountryResponseArray,
  CountryV3Response,
  CountryV3ResponseArray,
  CreateJusticeUserResponse,
  CreateTestUserResponseV4,
  CreateTestUsersResponseV4,
  CreateUserResponseV4,
  DefaultFieldValue,
  DefaultFieldValueValue,
  Description,
  DeviceBanResponseV4,
  DeviceBannedResponseV4,
  DeviceBansResponseV4,
  DeviceIdDecryptResponseV4,
  DeviceResponseV4,
  DeviceTypeResponseV4,
  DeviceTypesResponseV4,
  DeviceUserResponseV4,
  DeviceUsersResponseV4,
  DevicesResponseV4,
  DevicesV4Admin$,
  DevicesV4AdminApi,
  DistinctLinkedPlatformV3,
  DistinctPlatformResponseV3,
  EnabledFactorsResponseV4,
  ErrorResponseWithConflictedUserPlatformAccounts,
  FailedBanUnbanUserV3,
  FieldUpdateAllowStatus,
  FilterJson,
  GetAdminUsersResponse,
  GetLinkHeadlessAccountConflictResponse,
  GetProfileUpdateStrategyConfigResponse,
  GetPublisherUserResponse,
  GetUserBanSummaryV3,
  GetUserBanV3Response,
  GetUserJusticePlatformAccountResponse,
  GetUserMapping,
  GetUserMappingArray,
  GetUserMappingV3,
  GetUserMappingV3Array,
  GetUsersResponseWithPaginationV3,
  InputValidationConfigVersion,
  InputValidationData,
  InputValidationDataPublic,
  InputValidationDescription,
  InputValidations$,
  InputValidationsAdmin$,
  InputValidationsAdminApi,
  InputValidationsApi,
  InputValidationsPublicResponse,
  InputValidationsResponse,
  InvitationHistoryResponse,
  InviteUserResponseV3,
  JwkKey,
  JwkSet,
  JwtBanV3,
  LinkRequest,
  LinkingHistoryResponseWithPaginationV3,
  ListAssignedUsersV4Response,
  ListBulkUserBanResponseV3,
  ListBulkUserPlatformsResponse,
  ListBulkUserResponse,
  ListClientPermissionSet,
  ListInvitationHistoriesV4Response,
  ListRoleV4Response,
  ListTemplatesResponse,
  ListUserInformationResult,
  ListUserResponseV3,
  ListUserRolesV4Response,
  ListUsersWithPlatformAccountsResponse,
  ListValidUserIdResponseV4,
  LoginAllowlistAdmin$,
  LoginAllowlistAdminApi,
  LoginAllowlistResponse,
  LoginHistoriesResponse,
  NamespaceInvitationHistoryUserV4Response,
  NamespaceRole,
  NetflixCertificates,
  OAuth$,
  OAuth20$,
  OAuth20Admin$,
  OAuth20AdminApi,
  OAuth20Api,
  OAuth20Extension$,
  OAuth20ExtensionApi,
  OAuth20V4$,
  OAuth20V4Api,
  OAuthApi,
  OneTimeLinkingCodeResponse,
  OneTimeLinkingCodeValidationResponse,
  OverrideRoleConfigV3Admin$,
  OverrideRoleConfigV3AdminApi,
  OverrideRolePermission,
  Pagination,
  PaginationV3,
  Permission,
  PermissionGroup,
  PermissionV3,
  PlatformAccount,
  PlatformDomainResponse,
  PlatformLinkingHistory,
  PlatformTokenRefreshResponseV3,
  PlatformUserInformation,
  PlatformUserInformationV3,
  ProfileUpdateConfig,
  ProfileUpdateStrategy$,
  ProfileUpdateStrategyAdmin$,
  ProfileUpdateStrategyAdminApi,
  ProfileUpdateStrategyApi,
  PublicThirdPartyPlatformInfo,
  PublicThirdPartyPlatformInfoArray,
  PublicUserInformationResponseV3,
  PublicUserInformationV3,
  PublicUserResponse,
  PublicUserResponseV3,
  PublicUsersResponse,
  RegisteredDomain,
  ReplaceRolePermission,
  RevocationList,
  Role,
  RoleAdminStatusResponse,
  RoleAdminStatusResponseV3,
  RoleManager,
  RoleManagerV3,
  RoleManagersResponse,
  RoleManagersResponsesV3,
  RoleMember,
  RoleMemberV3,
  RoleMembersResponse,
  RoleMembersResponseV3,
  RoleNamesResponseV3,
  RoleOverrideResponse,
  RoleOverrideSourceResponse,
  RolePermissionResponseV3,
  RoleResponse,
  RoleResponseV3,
  RoleResponseWithManagers,
  RoleResponseWithManagersAndPaginationV3,
  RoleResponseWithManagersArray,
  RoleResponseWithManagersV3,
  RoleV3,
  RoleV4Response,
  Roles$,
  RolesAdmin$,
  RolesAdminApi,
  RolesApi,
  SearchUsersByPlatformIdResponse,
  SearchUsersResponse,
  SearchUsersResponseWithPaginationV3,
  SimpleProfileUpdateStrategyConfigs,
  SimpleUserPlatformInfoV3,
  Sso$,
  SsoApi,
  SsoCredentialAdmin$,
  SsoCredentialAdminApi,
  SsoPlatformCredentialResponse,
  SsoPlatformCredentialResponseArray,
  SsoSaml20$,
  SsoSaml20Api,
  TargetTokenCodeResponse,
  ThirdPartyCredential$,
  ThirdPartyCredentialAdmin$,
  ThirdPartyCredentialAdminApi,
  ThirdPartyCredentialApi,
  ThirdPartyLoginPlatformCredentialResponse,
  ThirdPartyLoginPlatformCredentialResponseArray,
  TokenIntrospectResponse,
  TokenResponse,
  TokenResponseV3,
  TokenThirdPartyLinkStatusResponse,
  TokenThirdPartyResponse,
  TokenWithDeviceCookieResponseV3,
  UserActiveBanResponse,
  UserActiveBanResponseV3,
  UserActiveBanResponseV4,
  UserBanResponse,
  UserBanResponseArray,
  UserBanResponseV3,
  UserBanWithStatus,
  UserBaseInfo,
  UserCreateResponse,
  UserCreateResponseV3,
  UserDeletionStatusResponse,
  UserInfoResponse,
  UserInformation,
  UserInformationV3,
  UserInputValidationResponse,
  UserInvitationHistory,
  UserInvitationV3,
  UserLinkedPlatform,
  UserLinkedPlatformArray,
  UserLinkedPlatformV3,
  UserLinkedPlatformsResponseV3,
  UserLoginHistoryResponse,
  UserMfaStatusResponseV4,
  UserMfaTokenResponseV4,
  UserPermissionsResponseV3,
  UserPermissionsResponseV4,
  UserPlatformInfo,
  UserPlatformInfos,
  UserPlatformLinkHistories,
  UserPlatformLinkHistory,
  UserPlatformMetadata,
  UserPlatforms,
  UserProfileUpdateAllowStatus,
  UserPublicInfoResponseV4,
  UserResponse,
  UserResponseArray,
  UserResponseV3,
  UserResponseV4,
  UserRevocationListRecord,
  UserRolesV4Response,
  UserSearchByPlatformIdResult,
  UserSearchResult,
  UserWithLinkedPlatformAccounts,
  UserWithPlatformAccounts,
  UserWithPlatformInfo,
  Users$,
  UsersAdmin$,
  UsersAdminApi,
  UsersApi,
  UsersPlatformInfosResponse,
  UsersV4$,
  UsersV4Admin$,
  UsersV4AdminApi,
  UsersV4Api,
  ValidUserIdResponseV4,
  ValidationDetail,
  ValidationDetailPublic,
  VerificationCodeResponse,
  WebLinkingResponse
} from "./chunk-BQJDLLOZ.js";

// src/generated-definitions/AcceptedPoliciesRequest.ts
import { z } from "zod";
var AcceptedPoliciesRequest = z.object({
  isAccepted: z.boolean(),
  localizedPolicyVersionId: z.string(),
  policyId: z.string(),
  policyVersionId: z.string()
});

// src/generated-definitions/AddUserRoleV4Request.ts
import { z as z2 } from "zod";
var AddUserRoleV4Request = z2.object({ assignedNamespaces: z2.array(z2.string()), roleId: z2.string() });

// src/generated-definitions/AgeRestrictionRequest.ts
import { z as z3 } from "zod";
var AgeRestrictionRequest = z3.object({ AgeRestriction: z3.number().int(), Enable: z3.boolean() });

// src/generated-definitions/AgeRestrictionRequestV3.ts
import { z as z4 } from "zod";
var AgeRestrictionRequestV3 = z4.object({ ageRestriction: z4.number().int(), enable: z4.boolean() });

// src/generated-definitions/AssignUserV4Request.ts
import { z as z5 } from "zod";
var AssignUserV4Request = z5.object({ assignedNamespaces: z5.array(z5.string()), namespace: z5.string(), userId: z5.string() });

// src/generated-definitions/BanCreateRequest.ts
import { z as z6 } from "zod";
var BanCreateRequest = z6.object({
  ban: z6.string(),
  comment: z6.string(),
  endDate: z6.string(),
  reason: z6.string(),
  skipNotif: z6.boolean()
});

// src/generated-definitions/BanUpdateRequest.ts
import { z as z7 } from "zod";
var BanUpdateRequest = z7.object({ enabled: z7.boolean(), skipNotif: z7.boolean() });

// src/generated-definitions/BulkAccountTypeUpdateRequestV4.ts
import { z as z8 } from "zod";
var BulkAccountTypeUpdateRequestV4 = z8.object({ testAccount: z8.boolean(), userIds: z8.array(z8.string()) });

// src/generated-definitions/BulkBanCreateRequestV3.ts
import { z as z9 } from "zod";
var BulkBanCreateRequestV3 = z9.object({
  ban: z9.string(),
  comment: z9.string(),
  endDate: z9.string(),
  reason: z9.string(),
  skipNotif: z9.boolean(),
  userIds: z9.array(z9.string())
});

// src/generated-definitions/BulkUnbanCreateRequestV3.ts
import { z as z11 } from "zod";

// src/generated-definitions/UserUnbanCreateRequestV3.ts
import { z as z10 } from "zod";
var UserUnbanCreateRequestV3 = z10.object({ banId: z10.string(), userId: z10.string() });

// src/generated-definitions/BulkUnbanCreateRequestV3.ts
var BulkUnbanCreateRequestV3 = z11.object({ bans: z11.array(UserUnbanCreateRequestV3).nullish() });

// src/generated-definitions/CheckValidUserIdRequestV4.ts
import { z as z12 } from "zod";
var CheckValidUserIdRequestV4 = z12.object({ userIds: z12.array(z12.string()) });

// src/generated-definitions/ClientCreateRequest.ts
import { z as z13 } from "zod";
var ClientCreateRequest = z13.object({
  ClientId: z13.string(),
  ClientName: z13.string(),
  ClientPermissions: z13.array(Permission),
  Namespace: z13.string(),
  RedirectUri: z13.string(),
  Secret: z13.string(),
  TwoFactorEnabled: z13.boolean()
});

// src/generated-definitions/ClientCreationV3Request.ts
import { z as z14 } from "zod";
var ClientCreationV3Request = z14.object({
  audiences: z14.array(z14.string()),
  baseUri: z14.string(),
  clientId: z14.string(),
  clientName: z14.string(),
  clientPermissions: z14.array(PermissionV3).nullish(),
  clientPlatform: z14.string(),
  deletable: z14.boolean().nullish(),
  description: z14.string(),
  modulePermissions: z14.array(ClientModulePermission).nullish(),
  namespace: z14.string(),
  oauthAccessTokenExpiration: z14.number().int().nullish(),
  oauthAccessTokenExpirationTimeUnit: z14.string().nullish(),
  oauthClientType: z14.string(),
  oauthRefreshTokenExpiration: z14.number().int().nullish(),
  oauthRefreshTokenExpirationTimeUnit: z14.string().nullish(),
  parentNamespace: z14.string().nullish(),
  redirectUri: z14.string(),
  scopes: z14.array(z14.string()).nullish(),
  secret: z14.string(),
  skipLoginQueue: z14.boolean(),
  twoFactorEnabled: z14.boolean().nullish()
});

// src/generated-definitions/ClientPermission.ts
import { z as z15 } from "zod";
var ClientPermission = z15.object({ Action: z15.number().int(), Resource: z15.string() });

// src/generated-definitions/ClientPermissions.ts
import { z as z16 } from "zod";
var ClientPermissions = z16.object({ Permissions: z16.array(ClientPermission) });

// src/generated-definitions/ClientPermissionsV3.ts
import { z as z18 } from "zod";

// src/generated-definitions/ClientPermissionV3.ts
import { z as z17 } from "zod";
var ClientPermissionV3 = z17.object({ action: z17.number().int(), resource: z17.string() });

// src/generated-definitions/ClientPermissionsV3.ts
var ClientPermissionsV3 = z18.object({ permissions: z18.array(ClientPermissionV3) });

// src/generated-definitions/ClientsUpdateRequestV3.ts
import { z as z20 } from "zod";

// src/generated-definitions/ClientUpdateV3Request.ts
import { z as z19 } from "zod";
var ClientUpdateV3Request = z19.object({
  audiences: z19.array(z19.string()).nullish(),
  baseUri: z19.string().nullish(),
  clientName: z19.string().nullish(),
  clientPermissions: z19.array(PermissionV3).nullish(),
  clientPlatform: z19.string(),
  deletable: z19.boolean().nullish(),
  description: z19.string(),
  modulePermissions: z19.array(ClientModulePermission).nullish(),
  namespace: z19.string().nullish(),
  oauthAccessTokenExpiration: z19.number().int().nullish(),
  oauthAccessTokenExpirationTimeUnit: z19.string().nullish(),
  oauthRefreshTokenExpiration: z19.number().int().nullish(),
  oauthRefreshTokenExpirationTimeUnit: z19.string().nullish(),
  redirectUri: z19.string().nullish(),
  scopes: z19.array(z19.string()).nullish(),
  skipLoginQueue: z19.boolean().nullish(),
  twoFactorEnabled: z19.boolean().nullish()
});

// src/generated-definitions/ClientsUpdateRequestV3.ts
var ClientsUpdateRequestV3 = z20.object({ clientIds: z20.array(z20.string()), clientUpdateRequest: ClientUpdateV3Request });

// src/generated-definitions/ClientUpdateRequest.ts
import { z as z21 } from "zod";
var ClientUpdateRequest = z21.object({ ClientName: z21.string(), RedirectUri: z21.string(), TwoFactorEnabled: z21.boolean() });

// src/generated-definitions/ClientUpdateSecretRequest.ts
import { z as z22 } from "zod";
var ClientUpdateSecretRequest = z22.object({ NewSecret: z22.string() });

// src/generated-definitions/CountryAgeRestrictionRequest.ts
import { z as z23 } from "zod";
var CountryAgeRestrictionRequest = z23.object({ AgeRestriction: z23.number().int() });

// src/generated-definitions/CountryAgeRestrictionV3Request.ts
import { z as z24 } from "zod";
var CountryAgeRestrictionV3Request = z24.object({ ageRestriction: z24.number().int() });

// src/generated-definitions/CountryBlacklistRequest.ts
import { z as z25 } from "zod";
var CountryBlacklistRequest = z25.object({ blacklist: z25.array(z25.string()) });

// src/generated-definitions/CreateTestUserRequestV4.ts
import { z as z26 } from "zod";
var CreateTestUserRequestV4 = z26.object({
  acceptedPolicies: z26.array(AcceptedPoliciesRequest).nullish(),
  authType: z26.enum(["EMAILPASSWD"]),
  country: z26.string(),
  dateOfBirth: z26.string(),
  displayName: z26.string(),
  emailAddress: z26.string(),
  password: z26.string(),
  passwordMD5Sum: z26.string(),
  uniqueDisplayName: z26.string().nullish(),
  username: z26.string(),
  verified: z26.boolean()
});

// src/generated-definitions/CreateTestUsersRequestV4.ts
import { z as z28 } from "zod";

// src/generated-definitions/UserInfo.ts
import { z as z27 } from "zod";
var UserInfo = z27.object({ country: z27.string().nullish() });

// src/generated-definitions/CreateTestUsersRequestV4.ts
var CreateTestUsersRequestV4 = z28.object({ count: z28.number().int(), userInfo: UserInfo });

// src/generated-definitions/CreateUserRequestV4.ts
import { z as z29 } from "zod";
var CreateUserRequestV4 = z29.object({
  acceptedPolicies: z29.array(AcceptedPoliciesRequest).nullish(),
  authType: z29.enum(["EMAILPASSWD"]),
  code: z29.string().nullish(),
  country: z29.string(),
  dateOfBirth: z29.string().nullish(),
  displayName: z29.string().nullish(),
  emailAddress: z29.string(),
  password: z29.string().nullish(),
  passwordMD5Sum: z29.string().nullish(),
  reachMinimumAge: z29.boolean().nullish(),
  uniqueDisplayName: z29.string().nullish(),
  username: z29.string()
});

// src/generated-definitions/DeviceBanRequestV4.ts
import { z as z30 } from "zod";
var DeviceBanRequestV4 = z30.object({
  comment: z30.string(),
  deviceId: z30.string(),
  deviceType: z30.string(),
  enabled: z30.boolean(),
  endDate: z30.string(),
  ext: z30.record(z30.any()),
  reason: z30.string()
});

// src/generated-definitions/DeviceBanUpdateRequestV4.ts
import { z as z31 } from "zod";
var DeviceBanUpdateRequestV4 = z31.object({ enabled: z31.boolean() });

// src/generated-definitions/DisableMfaRequest.ts
import { z as z32 } from "zod";
var DisableMfaRequest = z32.object({ factor: z32.string().nullish(), mfaToken: z32.string().nullish() });

// src/generated-definitions/DisableUserRequest.ts
import { z as z33 } from "zod";
var DisableUserRequest = z33.object({ Reason: z33.string().nullish() });

// src/generated-definitions/EmailUpdateRequestV4.ts
import { z as z34 } from "zod";
var EmailUpdateRequestV4 = z34.object({ code: z34.string(), emailAddress: z34.string() });

// src/generated-definitions/ErrorResponse.ts
import { z as z35 } from "zod";
var ErrorResponse = z35.object({
  errorCode: z35.number().int(),
  errorMessage: z35.string(),
  messageVariables: z35.record(z35.string()).nullish(),
  requiredPermission: Permission.nullish()
});

// src/generated-definitions/ForgotPasswordRequestV3.ts
import { z as z36 } from "zod";
var ForgotPasswordRequestV3 = z36.object({ emailAddress: z36.string(), languageTag: z36.string().nullish() });

// src/generated-definitions/GetBulkUserBansRequest.ts
import { z as z37 } from "zod";
var GetBulkUserBansRequest = z37.object({ bulkUserId: z37.array(z37.string()) });

// src/generated-definitions/InputValidationUpdatePayload.ts
import { z as z40 } from "zod";

// src/generated-definitions/Validation.ts
import { z as z39 } from "zod";

// src/generated-definitions/ValidationDescription.ts
import { z as z38 } from "zod";
var ValidationDescription = z38.object({ language: z38.string(), message: z38.array(z38.string()) });

// src/generated-definitions/Validation.ts
var Validation = z39.object({
  allowAllSpecialCharacters: z39.boolean(),
  allowDigit: z39.boolean(),
  allowLetter: z39.boolean(),
  allowSpace: z39.boolean(),
  allowUnicode: z39.boolean(),
  avatarConfig: AvatarConfig.nullish(),
  blockedWord: z39.array(z39.string()),
  description: z39.array(ValidationDescription),
  isCustomRegex: z39.boolean(),
  letterCase: z39.string(),
  maxLength: z39.number().int(),
  maxRepeatingAlphaNum: z39.number().int(),
  maxRepeatingSpecialCharacter: z39.number().int(),
  minCharType: z39.number().int(),
  minLength: z39.number().int(),
  profanityFilter: z39.string(),
  regex: z39.string(),
  specialCharacterLocation: z39.string(),
  specialCharacters: z39.array(z39.string())
});

// src/generated-definitions/InputValidationUpdatePayload.ts
var InputValidationUpdatePayload = z40.object({ field: z40.string(), validation: Validation });

// src/generated-definitions/InviteUserRequestV3.ts
import { z as z41 } from "zod";
var InviteUserRequestV3 = z41.object({
  emailAddresses: z41.array(z41.string()),
  isAdmin: z41.boolean(),
  languageTag: z41.string().nullish(),
  namespace: z41.string().nullish(),
  roles: z41.array(z41.string())
});

// src/generated-definitions/InviteUserRequestV4.ts
import { z as z42 } from "zod";
var InviteUserRequestV4 = z42.object({
  assignedNamespaces: z42.array(z42.string()),
  emailAddresses: z42.array(z42.string()),
  isAdmin: z42.boolean(),
  isNewStudio: z42.boolean().nullish(),
  languageTag: z42.string().nullish(),
  namespace: z42.string().nullish(),
  roleId: z42.string().nullish()
});

// src/generated-definitions/LinkHeadlessAccountRequest.ts
import { z as z43 } from "zod";
var LinkHeadlessAccountRequest = z43.object({ chosenNamespaces: z43.array(z43.string()), oneTimeLinkCode: z43.string() });

// src/generated-definitions/LinkPlatformAccountRequest.ts
import { z as z44 } from "zod";
var LinkPlatformAccountRequest = z44.object({ platformId: z44.string(), platformUserId: z44.string() });

// src/generated-definitions/LinkPlatformAccountWithProgressionRequest.ts
import { z as z45 } from "zod";
var LinkPlatformAccountWithProgressionRequest = z45.object({ chosenNamespaces: z45.array(z45.string()), requestId: z45.string() });

// src/generated-definitions/ListEmailAddressRequest.ts
import { z as z46 } from "zod";
var ListEmailAddressRequest = z46.object({ listEmailAddressRequest: z46.array(z46.string()) });

// src/generated-definitions/ListUpsertModulesRequest.ts
import { z as z48 } from "zod";

// src/generated-definitions/PermissionSetUpsertRequest.ts
import { z as z47 } from "zod";
var PermissionSetUpsertRequest = z47.object({
  docLink: z47.string(),
  groups: z47.array(PermissionGroup),
  module: z47.string(),
  moduleId: z47.string()
});

// src/generated-definitions/ListUpsertModulesRequest.ts
var ListUpsertModulesRequest = z48.object({ modules: z48.array(PermissionSetUpsertRequest) });

// src/generated-definitions/LoginAllowlistRequest.ts
import { z as z49 } from "zod";
var LoginAllowlistRequest = z49.object({ active: z49.boolean(), roleIds: z49.array(z49.string()) });

// src/generated-definitions/LoginQueueTicketResponse.ts
import { z as z51 } from "zod";

// src/generated-definitions/TicketEndpointAction.ts
import { z as z50 } from "zod";
var TicketEndpointAction = z50.object({ action: z50.string(), href: z50.string() });

// src/generated-definitions/LoginQueueTicketResponse.ts
var LoginQueueTicketResponse = z51.object({
  cancel: TicketEndpointAction,
  estimatedWaitingTimeInSeconds: z51.number().int(),
  playerPollingTimeInSeconds: z51.number().int(),
  position: z51.number().int(),
  reconnectExpiredAt: z51.number().int(),
  refresh: TicketEndpointAction,
  ticket: z51.string()
});

// src/generated-definitions/NamespaceRoleRequest.ts
import { z as z52 } from "zod";
var NamespaceRoleRequest = z52.object({ namespace: z52.string(), roleId: z52.string() });

// src/generated-definitions/PermissionDeleteRequest.ts
import { z as z53 } from "zod";
var PermissionDeleteRequest = z53.object({ Action: z53.number().int(), Resource: z53.string() });

// src/generated-definitions/Permissions.ts
import { z as z54 } from "zod";
var Permissions = z54.object({ Permissions: z54.array(Permission) });

// src/generated-definitions/PermissionSetDeleteGroupRequest.ts
import { z as z55 } from "zod";
var PermissionSetDeleteGroupRequest = z55.object({ groupId: z55.string(), moduleId: z55.string() });

// src/generated-definitions/PermissionsV3.ts
import { z as z56 } from "zod";
var PermissionsV3 = z56.object({ permissions: z56.array(PermissionV3) });

// src/generated-definitions/PlatformDomainDeleteRequest.ts
import { z as z57 } from "zod";
var PlatformDomainDeleteRequest = z57.object({ domain: z57.string() });

// src/generated-definitions/PlatformDomainUpdateRequest.ts
import { z as z58 } from "zod";
var PlatformDomainUpdateRequest = z58.object({
  affectedClientIDs: z58.array(z58.string()),
  assignedNamespaces: z58.array(z58.string()),
  domain: z58.string(),
  roleId: z58.string()
});

// src/generated-definitions/PlatformUserIdRequest.ts
import { z as z59 } from "zod";
var PlatformUserIdRequest = z59.object({ platformUserIds: z59.array(z59.string()) });

// src/generated-definitions/PlatformUserIdRequestV4.ts
import { z as z60 } from "zod";
var PlatformUserIdRequestV4 = z60.object({ platformUserIds: z60.array(z60.string()) });

// src/generated-definitions/PublicInviteUserRequestV4.ts
import { z as z61 } from "zod";
var PublicInviteUserRequestV4 = z61.object({
  additionalData: z61.string().nullish(),
  emailAddress: z61.string(),
  languageTag: z61.string().nullish(),
  namespace: z61.string(),
  namespaceDisplayName: z61.string()
});

// src/generated-definitions/PublicUserUpdateRequestV3.ts
import { z as z62 } from "zod";
var PublicUserUpdateRequestV3 = z62.object({
  avatarUrl: z62.string().nullish(),
  country: z62.string().nullish(),
  dateOfBirth: z62.string().nullish(),
  displayName: z62.string().nullish(),
  languageTag: z62.string().nullish(),
  uniqueDisplayName: z62.string().nullish(),
  userName: z62.string().nullish()
});

// src/generated-definitions/RemoveUserRoleV4Request.ts
import { z as z63 } from "zod";
var RemoveUserRoleV4Request = z63.object({ assignedNamespaces: z63.array(z63.string()), roleId: z63.string() });

// src/generated-definitions/ResetPasswordRequest.ts
import { z as z64 } from "zod";
var ResetPasswordRequest = z64.object({ Code: z64.string(), LoginID: z64.string(), NewPassword: z64.string() });

// src/generated-definitions/ResetPasswordRequestV3.ts
import { z as z65 } from "zod";
var ResetPasswordRequestV3 = z65.object({
  clientId: z65.string().nullish(),
  code: z65.string(),
  emailAddress: z65.string(),
  languageTag: z65.string().nullish(),
  newPassword: z65.string()
});

// src/generated-definitions/RevokeUserV4Request.ts
import { z as z66 } from "zod";
var RevokeUserV4Request = z66.object({ namespace: z66.string(), userId: z66.string() });

// src/generated-definitions/RoleCreateRequest.ts
import { z as z67 } from "zod";
var RoleCreateRequest = z67.object({
  AdminRole: z67.boolean(),
  Managers: z67.array(RoleManager),
  Members: z67.array(RoleMember),
  Permissions: z67.array(Permission),
  RoleName: z67.string()
});

// src/generated-definitions/RoleCreateV3Request.ts
import { z as z68 } from "zod";
var RoleCreateV3Request = z68.object({
  adminRole: z68.boolean(),
  deletable: z68.boolean().nullish(),
  isWildcard: z68.boolean(),
  managers: z68.array(RoleManagerV3),
  members: z68.array(RoleMemberV3),
  permissions: z68.array(PermissionV3),
  roleName: z68.string()
});

// src/generated-definitions/RoleManagersRequest.ts
import { z as z69 } from "zod";
var RoleManagersRequest = z69.object({ Managers: z69.array(RoleManager) });

// src/generated-definitions/RoleManagersRequestV3.ts
import { z as z70 } from "zod";
var RoleManagersRequestV3 = z70.object({ managers: z70.array(RoleManagerV3) });

// src/generated-definitions/RoleMembersRequest.ts
import { z as z71 } from "zod";
var RoleMembersRequest = z71.object({ Members: z71.array(RoleMember) });

// src/generated-definitions/RoleMembersRequestV3.ts
import { z as z72 } from "zod";
var RoleMembersRequestV3 = z72.object({ members: z72.array(RoleMemberV3) });

// src/generated-definitions/RoleOverrideStatsUpdateRequest.ts
import { z as z73 } from "zod";
var RoleOverrideStatsUpdateRequest = z73.object({ active: z73.boolean() });

// src/generated-definitions/RoleOverrideUpdateRequest.ts
import { z as z74 } from "zod";
var RoleOverrideUpdateRequest = z74.object({
  additions: z74.array(OverrideRolePermission),
  exclusions: z74.array(OverrideRolePermission),
  overrides: z74.array(OverrideRolePermission),
  replacements: z74.array(ReplaceRolePermission)
});

// src/generated-definitions/RoleUpdateRequest.ts
import { z as z75 } from "zod";
var RoleUpdateRequest = z75.object({ RoleName: z75.string() });

// src/generated-definitions/RoleUpdateRequestV3.ts
import { z as z76 } from "zod";
var RoleUpdateRequestV3 = z76.object({ deletable: z76.boolean().nullish(), isWildcard: z76.boolean(), roleName: z76.string() });

// src/generated-definitions/RoleV4Request.ts
import { z as z77 } from "zod";
var RoleV4Request = z77.object({
  adminRole: z77.boolean(),
  deletable: z77.boolean().nullish(),
  isWildcard: z77.boolean(),
  roleName: z77.string()
});

// src/generated-definitions/SendRegisterVerificationCodeRequest.ts
import { z as z78 } from "zod";
var SendRegisterVerificationCodeRequest = z78.object({ emailAddress: z78.string(), languageTag: z78.string().nullish() });

// src/generated-definitions/SendVerificationCodeRequest.ts
import { z as z79 } from "zod";
var SendVerificationCodeRequest = z79.object({ Context: z79.string().nullish(), LanguageTag: z79.string(), LoginID: z79.string() });

// src/generated-definitions/SendVerificationCodeRequestV3.ts
import { z as z80 } from "zod";
var SendVerificationCodeRequestV3 = z80.object({
  context: z80.string().nullish(),
  emailAddress: z80.string(),
  languageTag: z80.string().nullish()
});

// src/generated-definitions/SendVerificationLinkRequest.ts
import { z as z81 } from "zod";
var SendVerificationLinkRequest = z81.object({ languageTag: z81.string().nullish() });

// src/generated-definitions/SsoPlatformCredentialRequest.ts
import { z as z82 } from "zod";
var SsoPlatformCredentialRequest = z82.object({
  acsUrl: z82.string(),
  apiKey: z82.string(),
  appId: z82.string(),
  federationMetadataUrl: z82.string(),
  isActive: z82.boolean(),
  redirectUri: z82.string(),
  secret: z82.string(),
  ssoUrl: z82.string()
});

// src/generated-definitions/ThirdPartyLoginPlatformCredentialRequest.ts
import { z as z83 } from "zod";
var ThirdPartyLoginPlatformCredentialRequest = z83.object({
  ACSURL: z83.string(),
  AWSCognitoRegion: z83.string(),
  AWSCognitoUserPool: z83.string(),
  AllowedClients: z83.array(z83.string()).nullish(),
  AppId: z83.string(),
  AuthorizationEndpoint: z83.string(),
  ClientId: z83.string(),
  EmptyStrFieldList: z83.array(z83.string()).nullish(),
  EnableServerLicenseValidation: z83.boolean().nullish(),
  Environment: z83.string(),
  FederationMetadataURL: z83.string(),
  GenericOauthFlow: z83.boolean(),
  IncludePUID: z83.boolean().nullish(),
  IsActive: z83.boolean(),
  Issuer: z83.string(),
  JWKSEndpoint: z83.string(),
  KeyID: z83.string(),
  LogoURL: z83.string().nullish(),
  NetflixCertificates,
  OrganizationId: z83.string(),
  PlatformName: z83.string(),
  RedirectUri: z83.string(),
  RegisteredDomains: z83.array(RegisteredDomain),
  Secret: z83.string(),
  TeamID: z83.string(),
  TokenAuthenticationType: z83.string(),
  TokenClaimsMapping: z83.record(z83.string()).nullish(),
  TokenEndpoint: z83.string(),
  UserInfoEndpoint: z83.string(),
  UserInfoHTTPMethod: z83.string(),
  scopes: z83.array(z83.string())
});

// src/generated-definitions/UnlinkUserPlatformRequest.ts
import { z as z84 } from "zod";
var UnlinkUserPlatformRequest = z84.object({ platformNamespace: z84.string().nullish() });

// src/generated-definitions/UpdatePermissionScheduleRequest.ts
import { z as z85 } from "zod";
var UpdatePermissionScheduleRequest = z85.object({
  SchedAction: z85.number().int().nullish(),
  SchedCron: z85.string().nullish(),
  SchedRange: z85.array(z85.string()).nullish()
});

// src/generated-definitions/UpdateProfileUpdateStrategyConfigRequest.ts
import { z as z86 } from "zod";
var UpdateProfileUpdateStrategyConfigRequest = z86.object({ config: ProfileUpdateConfig.nullish(), type: z86.string().nullish() });

// src/generated-definitions/UpdateUserDeletionStatusRequest.ts
import { z as z87 } from "zod";
var UpdateUserDeletionStatusRequest = z87.object({ deletionDate: z87.number().int().nullish(), enabled: z87.boolean() });

// src/generated-definitions/UpdateUserStatusRequest.ts
import { z as z88 } from "zod";
var UpdateUserStatusRequest = z88.object({ enabled: z88.boolean(), reason: z88.string().nullish() });

// src/generated-definitions/UpgradeHeadlessAccountRequest.ts
import { z as z89 } from "zod";
var UpgradeHeadlessAccountRequest = z89.object({ LoginID: z89.string(), Password: z89.string() });

// src/generated-definitions/UpgradeHeadlessAccountRequestV4.ts
import { z as z90 } from "zod";
var UpgradeHeadlessAccountRequestV4 = z90.object({ emailAddress: z90.string(), password: z90.string(), username: z90.string() });

// src/generated-definitions/UpgradeHeadlessAccountV3Request.ts
import { z as z91 } from "zod";
var UpgradeHeadlessAccountV3Request = z91.object({ emailAddress: z91.string(), password: z91.string() });

// src/generated-definitions/UpgradeHeadlessAccountWithVerificationCodeRequest.ts
import { z as z92 } from "zod";
var UpgradeHeadlessAccountWithVerificationCodeRequest = z92.object({ Code: z92.string(), Password: z92.string(), loginId: z92.string() });

// src/generated-definitions/UpgradeHeadlessAccountWithVerificationCodeRequestV3.ts
import { z as z93 } from "zod";
var UpgradeHeadlessAccountWithVerificationCodeRequestV3 = z93.object({
  code: z93.string(),
  country: z93.string().nullish(),
  dateOfBirth: z93.string().nullish(),
  displayName: z93.string().nullish(),
  emailAddress: z93.string(),
  password: z93.string(),
  uniqueDisplayName: z93.string().nullish(),
  validateOnly: z93.boolean().nullish()
});

// src/generated-definitions/UpgradeHeadlessAccountWithVerificationCodeRequestV4.ts
import { z as z94 } from "zod";
var UpgradeHeadlessAccountWithVerificationCodeRequestV4 = z94.object({
  code: z94.string(),
  country: z94.string().nullish(),
  dateOfBirth: z94.string().nullish(),
  displayName: z94.string().nullish(),
  emailAddress: z94.string(),
  password: z94.string(),
  reachMinimumAge: z94.boolean().nullish(),
  uniqueDisplayName: z94.string().nullish(),
  username: z94.string(),
  validateOnly: z94.boolean().nullish()
});

// src/generated-definitions/UserBan.ts
import { z as z95 } from "zod";
var UserBan = z95.object({ comment: z95.string(), endDate: z95.number().int(), reason: z95.string() });

// src/generated-definitions/UserBulkUpdateRequestV3.ts
import { z as z96 } from "zod";
var UserBulkUpdateRequestV3 = z96.object({ skipLoginQueue: z96.boolean() });

// src/generated-definitions/UserCreateRequest.ts
import { z as z97 } from "zod";
var UserCreateRequest = z97.object({
  AuthType: z97.string(),
  Country: z97.string(),
  DisplayName: z97.string(),
  LoginId: z97.string(),
  Password: z97.string(),
  PasswordMD5Sum: z97.string().nullish()
});

// src/generated-definitions/UserCreateRequestV3.ts
import { z as z98 } from "zod";
var UserCreateRequestV3 = z98.object({
  PasswordMD5Sum: z98.string().nullish(),
  acceptedPolicies: z98.array(AcceptedPoliciesRequest).nullish(),
  authType: z98.string(),
  code: z98.string(),
  country: z98.string(),
  dateOfBirth: z98.string().nullish(),
  displayName: z98.string(),
  emailAddress: z98.string(),
  password: z98.string(),
  reachMinimumAge: z98.boolean(),
  uniqueDisplayName: z98.string().nullish()
});

// src/generated-definitions/UserIdentityUpdateRequestV3.ts
import { z as z99 } from "zod";
var UserIdentityUpdateRequestV3 = z99.object({ emailAddress: z99.string().nullish(), password: z99.string().nullish() });

// src/generated-definitions/UserIDsRequest.ts
import { z as z100 } from "zod";
var UserIDsRequest = z100.object({ userIds: z100.array(z100.string()) });

// src/generated-definitions/UserInputValidationRequest.ts
import { z as z101 } from "zod";
var UserInputValidationRequest = z101.object({
  displayName: z101.string().nullish(),
  password: z101.string().nullish(),
  uniqueDisplayName: z101.string().nullish(),
  username: z101.string().nullish()
});

// src/generated-definitions/UserPasswordUpdateRequest.ts
import { z as z102 } from "zod";
var UserPasswordUpdateRequest = z102.object({ LanguageTag: z102.string(), NewPassword: z102.string(), OldPassword: z102.string() });

// src/generated-definitions/UserPasswordUpdateV3Request.ts
import { z as z103 } from "zod";
var UserPasswordUpdateV3Request = z103.object({
  languageTag: z103.string(),
  mfaToken: z103.string().nullish(),
  newPassword: z103.string(),
  oldPassword: z103.string()
});

// src/generated-definitions/UsersPlatformInfosRequestV3.ts
import { z as z104 } from "zod";
var UsersPlatformInfosRequestV3 = z104.object({ platformId: z104.string().nullish(), userIds: z104.array(z104.string()) });

// src/generated-definitions/UsersUpdateRequestV3.ts
import { z as z105 } from "zod";
var UsersUpdateRequestV3 = z105.object({ updateRequest: UserBulkUpdateRequestV3, userIds: z105.array(z105.string()) });

// src/generated-definitions/UserUpdateRequest.ts
import { z as z106 } from "zod";
var UserUpdateRequest = z106.object({
  Country: z106.string().nullish(),
  DateOfBirth: z106.string().nullish(),
  DisplayName: z106.string().nullish(),
  LanguageTag: z106.string().nullish()
});

// src/generated-definitions/UserUpdateRequestV3.ts
import { z as z107 } from "zod";
var UserUpdateRequestV3 = z107.object({
  avatarUrl: z107.string().nullish(),
  country: z107.string().nullish(),
  dateOfBirth: z107.string().nullish(),
  displayName: z107.string().nullish(),
  languageTag: z107.string().nullish(),
  skipLoginQueue: z107.boolean().nullish(),
  uniqueDisplayName: z107.string().nullish(),
  userName: z107.string().nullish()
});

// src/generated-definitions/UserVerificationRequest.ts
import { z as z108 } from "zod";
var UserVerificationRequest = z108.object({
  Code: z108.string(),
  ContactType: z108.string(),
  LanguageTag: z108.string(),
  validateOnly: z108.boolean()
});

// src/generated-definitions/UserVerificationRequestV3.ts
import { z as z109 } from "zod";
var UserVerificationRequestV3 = z109.object({
  code: z109.string(),
  contactType: z109.string(),
  languageTag: z109.string().nullish(),
  validateOnly: z109.boolean().nullish()
});

// src/generated-definitions/V3ClientUpdateSecretRequest.ts
import { z as z110 } from "zod";
var V3ClientUpdateSecretRequest = z110.object({ newSecret: z110.string() });

// src/generated-definitions/VerifyRegistrationCode.ts
import { z as z111 } from "zod";
var VerifyRegistrationCode = z111.object({ code: z111.string(), emailAddress: z111.string() });

// package.json
var name = "@accelbyte/sdk-iam";
var version = "6.0.0";
var author = "AccelByte Inc";

// src/Iam.ts
console.log(`${name}@${version}`);
var apis = {
  BansAdminApi,
  RolesAdminApi,
  UsersAdminApi,
  UsersV4AdminApi,
  InputValidationsAdminApi,
  ClientsConfigV3AdminApi,
  ClientsAdminApi,
  DevicesV4AdminApi,
  CountryAdminApi,
  OverrideRoleConfigV3AdminApi,
  ThirdPartyCredentialAdminApi,
  SsoCredentialAdminApi,
  LoginAllowlistAdminApi,
  ConfigAdminApi,
  ProfileUpdateStrategyAdminApi,
  OAuth20AdminApi,
  BansApi,
  RolesApi,
  ClientsApi,
  OAuth20ExtensionApi,
  OAuthApi,
  OAuth20Api,
  OAuth20V4Api,
  UsersApi,
  SsoApi,
  UsersV4Api,
  InputValidationsApi,
  CountryApi,
  SsoSaml20Api,
  ConfigApi,
  ThirdPartyCredentialApi,
  ProfileUpdateStrategyApi,
  version: () => console.log({
    version,
    name,
    author
  })
};
var Iam = apis;

// src/custom/clients/CodeChallenge.ts
import { BrowserHelper } from "@accelbyte/sdk";
import cryptoJs from "crypto-js";
import * as uuid from "uuid";
import { z as z112 } from "zod";
var CodeChallenge = class {
  static generateChallenge() {
    const verifier = base64URLEncode(cryptoJs.lib.WordArray.random(43));
    const challenge = base64URLEncode(cryptoJs.SHA256(verifier));
    return { verifier, challenge };
  }
  static generateCsrf() {
    return uuid.v4();
  }
  // helpers
  static stringifySentState(sentState) {
    return JSON.stringify(sentState);
  }
  static parseSentState(stringifiedSentState) {
    try {
      const parsed = JSON.parse(stringifiedSentState);
      if (!CodeChallengeSentState.parse(parsed)) throw new Error(parsed);
      return {
        sentState: parsed,
        error: null
      };
    } catch (error) {
      console.error(error);
      return { sentState: null, error };
    }
  }
};
//
CodeChallenge.load = () => {
  return parseStoredState(localStorage.getItem("pp:pkce:cd") || "");
};
CodeChallenge.save = (codeVerifier) => {
  if (BrowserHelper.isOnBrowser()) {
    localStorage.setItem("pp:pkce:cd", stringifyStoredState(codeVerifier));
  }
};
CodeChallenge.clear = () => {
  if (BrowserHelper.isOnBrowser()) {
    localStorage.removeItem("pp:pkce:cd");
  }
};
var CodeChallengeStoredState = z112.object({
  csrf: z112.string(),
  codeVerifier: z112.string()
});
var CodeChallengeSentState = z112.object({
  csrf: z112.string().uuid(),
  payload: z112.nullable(z112.string())
});
var base64URLEncode = (code) => {
  return cryptoJs.enc.Base64.stringify(code).replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
};
var parseStoredState = (stringifiedStoredState) => {
  try {
    const parsed = JSON.parse(stringifiedStoredState);
    if (!CodeChallengeStoredState.parse(parsed)) throw parsed;
    return {
      storedState: parsed,
      error: null
    };
  } catch (error) {
    console.error(error);
    return { storedState: null, error };
  }
};
var stringifyStoredState = (storedState) => {
  return JSON.stringify(storedState);
};

// src/custom/models/UserTypes.ts
import { z as z113 } from "zod";
var BanType = z113.enum(["ORDER_AND_PAYMENT"]);
var EligibleUser = UserResponseV4.pick({
  userId: true,
  emailVerified: true,
  displayName: true,
  country: true,
  emailAddress: true,
  bans: true,
  username: true,
  newEmailAddress: true,
  oldEmailAddress: true,
  deletionStatus: true
});

// src/custom/clients/IamHelper.ts
var IamHelper = class _IamHelper {
  static getAuthorizationCodeParams(urlSearchParams) {
    const searchParams = new URLSearchParams(urlSearchParams);
    const code = searchParams.get("code");
    const error = searchParams.get("error");
    const state = searchParams.get("state") || "";
    return {
      code,
      error,
      state
    };
  }
  static currentUserIsHeadlessAccount(user) {
    if (!user) return false;
    return user.emailAddress === "";
  }
  static currentUserNeedsVerification(user) {
    if (!user) return false;
    return !!user.emailAddress && !user.emailVerified;
  }
  static currentUserIsUpdatingEmail(user) {
    if (!user) return false;
    return EligibleUser.safeParse(user).success && !!user.newEmailAddress && user.emailAddress !== user.newEmailAddress && _IamHelper.currentUserNeedsVerification(user);
  }
  static currentUserIsEligible(user) {
    if (!user) return false;
    return EligibleUser.safeParse(user).success;
  }
  static isUserBanned(user) {
    const parsed = EligibleUser.safeParse(user);
    if (parsed.success) {
      const now = (/* @__PURE__ */ new Date()).getTime();
      return parsed.data.bans.find(
        (ban) => ban.ban === BanType.enum.ORDER_AND_PAYMENT && new Date(ban.endDate).getTime() > now
      ) !== void 0;
    }
    return false;
  }
  static currentUserDisplayNameIsEmpty(user, checkUniqueDisplayName = false) {
    if (!user || !checkUniqueDisplayName) return false;
    const isUniqueDisplayNameEmpty = !user.uniqueDisplayName?.length;
    return isUniqueDisplayNameEmpty;
  }
};

// src/custom/clients/IamOAuthClient.ts
import { ApiUtils as ApiUtils2, CodeGenUtil, Network as Network2, Validate as Validate2 } from "@accelbyte/sdk";
import { Buffer as Buffer2 } from "buffer";

// src/custom/clients/IamUserAuthorizationClient.ts
import {
  ApiUtils,
  BrowserHelper as BrowserHelper2,
  DesktopChecker,
  Network,
  RefreshToken,
  SdkDevice,
  UrlHelper,
  Validate
} from "@accelbyte/sdk";
import platform from "platform";
import { z as z115 } from "zod";

// src/custom/constants.ts
import cryptoJs2 from "crypto-js";
var IamConfigKey = /* @__PURE__ */ ((IamConfigKey2) => {
  IamConfigKey2["UNIQUE_DISPLAY_NAME_ENABLED"] = "uniqueDisplayNameEnabled";
  IamConfigKey2["USERNAME_DISABLED"] = "usernameDisabled";
  IamConfigKey2["MANDATORY_EMAIL_VERIFICATION_ENABLED"] = "mandatoryEmailVerificationEnabled";
  return IamConfigKey2;
})(IamConfigKey || {});
var mandatoryAccountUpgradeLocalStorageName = cryptoJs2.MD5("isMandatoryThirdPartyAccountUpgradeOrLinkEnabled").toString();

// src/custom/models/TwoFA.ts
import { z as z114 } from "zod";
var MFADataResponse = z114.object({
  mfa_token: z114.string(),
  factors: z114.array(z114.string()),
  default_factor: z114.string()
});
var AuthenticatorSecretKey = z114.object({
  secretKey: z114.string(),
  uri: z114.string()
});

// src/custom/clients/IamUserAuthorizationClient.ts
var AUTHORIZE_URL = "/iam/v3/oauth/authorize";
var MFA_DATA_STORAGE_KEY = "mfaData";
var TWOFA_PAGE = z115.enum(["authenticator", "backupCode", "email", "options", "verify"]);
var LoginErrorParam = z115.enum(["cancelled", "login_session_expired"]);
var LoginErrorCancelled = class extends Error {
};
var LoginErrorExpired = class extends Error {
};
var LoginErrorUnknown = class extends Error {
};
var LoginErrorUnmatchedState = class extends Error {
};
var _IamUserAuthorizationClient = class _IamUserAuthorizationClient {
  constructor(sdk, args) {
    this.sdk = sdk;
    this.loginWithAuthorizationCode = async ({ code, codeVerifier, deviceId }) => {
      Network.setDeviceTokenCookie();
      const config = {
        ...this.conf,
        headers: {
          "Device-Name": platform.name ? platform.name.toString() : "",
          "Device-Os": platform.os ? platform.os.toString() : "",
          "Device-Type": SdkDevice.getType(),
          ...(BrowserHelper2.isOnBrowser() || deviceId) && { "Device-Id": deviceId || SdkDevice.getDeviceId() },
          ...this.conf.headers
        }
      };
      const axios = Network.create(config);
      const data = {
        grant_type: "authorization_code",
        code,
        code_verifier: codeVerifier,
        client_id: this.options.clientId,
        redirect_uri: this.options.redirectURI
      };
      const result = await new OAuth20$(axios, this.namespace).postOauthToken_v3(data);
      const errorResponse = isAxiosError(result.error) && result.error.response;
      const mfaData = _IamUserAuthorizationClient.getMfaDataFromError(errorResponse);
      if (result.error && !mfaData?.mfaToken) throw result.error;
      Network.removeDeviceTokenCookie();
      CodeChallenge.clear();
      return { ...result, mfaData };
    };
    this.loginWithPasswordAuthorization = async ({ username, password, deviceId }) => {
      const axios = Network.create({
        ...this.conf,
        headers: {
          Authorization: `Basic ${Buffer.from(`${this.options.clientId}:`).toString("base64")}`,
          "Content-Type": "application/x-www-form-urlencoded",
          "Device-Name": platform.name ? platform.name.toString() : "",
          "Device-Os": platform.os ? platform.os.toString() : "",
          "Device-Type": SdkDevice.getType(),
          ...(BrowserHelper2.isOnBrowser() || deviceId) && { "Device-Id": deviceId || SdkDevice.getDeviceId() }
        }
      });
      const data = {
        password,
        username,
        grant_type: "password",
        client_id: this.options.clientId
      };
      const result = await new OAuth20$(axios, this.namespace).postOauthToken_v3(data);
      const errorResponse = isAxiosError(result.error) && result.error.response;
      const mfaData = _IamUserAuthorizationClient.getMfaDataFromError(errorResponse);
      if (result.error && !mfaData?.mfaToken) throw result.error;
      return { ...result, mfaData };
    };
    this.loginWithCodeAuthorization = async ({ code }) => {
      Network.setDeviceTokenCookie();
      const config = {
        ...this.conf,
        headers: {
          ...this.conf.headers,
          Authorization: `Basic ${Buffer.from(`${this.options.clientId}:`).toString("base64")}`
        }
      };
      const axios = Network.create(config);
      const data = {
        code
      };
      const result = await new OAuth20Extension$(axios, this.namespace).postTokenExchange_v3(data);
      const errorResponse = isAxiosError(result.error) && result.error.response;
      const mfaData = _IamUserAuthorizationClient.getMfaDataFromError(errorResponse);
      if (result.error) throw result.error;
      Network.removeDeviceTokenCookie();
      CodeChallenge.clear();
      return { ...result, mfaData };
    };
    this.exchangeSSOAuthorizationCode = async ({ code, error }) => {
      if (error) {
        throw _IamUserAuthorizationClient.deduceLoginError(error);
      }
      if (!code) return null;
      const loginResult = await this.loginWithCodeAuthorization({
        code
      });
      return {
        response: loginResult.response,
        mfaData: loginResult.mfaData,
        returnPath: null
      };
    };
    this.exchangeAuthorizationCode = async ({ code, error, state }) => {
      if (error) {
        throw _IamUserAuthorizationClient.deduceLoginError(error);
      }
      if (!code || !state) return null;
      const { result, error: stateError } = _IamUserAuthorizationClient.matchReceivedState(state);
      if (stateError) {
        console.error("unmatched state error: ", stateError);
        throw new LoginErrorUnmatchedState();
      }
      if (!result) return null;
      const { payload, codeVerifier } = result;
      const loginResult = await this.loginWithAuthorizationCode({
        code,
        codeVerifier
      });
      let returnPath;
      if (payload) {
        const statePayload = AuthorizationCodeExchangeStateHelper.readJSONString(payload);
        if (statePayload !== null) {
          returnPath = statePayload.path;
        }
      }
      return {
        response: loginResult.response,
        mfaData: loginResult.mfaData,
        returnPath
      };
    };
    this.createLoginURL = (returnPath, targetAuthPage, oneTimeLinkCode) => {
      const { verifier, challenge } = CodeChallenge.generateChallenge();
      const csrf = CodeChallenge.generateCsrf();
      const storedState = {
        codeVerifier: verifier,
        csrf
      };
      CodeChallenge.save(storedState);
      const sentState = {
        csrf,
        payload: returnPath ? AuthorizationCodeExchangeStateHelper.toJSONString({ path: returnPath }) : null
      };
      const searchParams = this.getSearchParams(sentState, challenge);
      let isMandatoryThirdPartyAccountUpgradeOrLinkEnabled = "";
      if (BrowserHelper2.isOnBrowser()) {
        isMandatoryThirdPartyAccountUpgradeOrLinkEnabled = localStorage.getItem(mandatoryAccountUpgradeLocalStorageName)?.toLowerCase() || "";
      }
      const createHeadless = isMandatoryThirdPartyAccountUpgradeOrLinkEnabled === "false";
      searchParams.append("createHeadless", createHeadless.toString());
      if (targetAuthPage) {
        searchParams.append("target_auth_page", targetAuthPage);
      }
      if (oneTimeLinkCode) {
        searchParams.append("oneTimeLinkCode", oneTimeLinkCode);
      }
      const url = new URL(UrlHelper.combineURLPaths(this.options.baseURL, `${AUTHORIZE_URL}?${searchParams.toString()}`));
      return url.toString();
    };
    this.createForgotPasswordURL = () => {
      const { verifier, challenge } = CodeChallenge.generateChallenge();
      const csrf = CodeChallenge.generateCsrf();
      const storedState = {
        codeVerifier: verifier,
        csrf
      };
      CodeChallenge.save(storedState);
      const sentState = {
        csrf,
        payload: null
      };
      const searchParams = this.getSearchParams(sentState, challenge);
      searchParams.append("target_auth_page", `forgot-password`);
      searchParams.append("createHeadless", "false");
      const url = new URL(UrlHelper.combineURLPaths(this.options.baseURL, `${AUTHORIZE_URL}?${searchParams.toString()}`));
      return url.toString();
    };
    /**
     * @internal
     */
    this.refreshToken = (_refreshToken) => {
      const { coreConfig } = this.sdk.assembly();
      const { refreshToken } = this.sdk.getToken();
      const refresh = new RefreshToken({
        config: { axiosConfig: this.conf, clientId: coreConfig.clientId, refreshToken: refreshToken || _refreshToken }
      });
      if (DesktopChecker.isDesktopApp()) {
        return Promise.resolve().then(() => refresh.run());
      }
      return refresh.runWithLock();
    };
    this.getSearchParams = (sentState, challenge) => {
      const searchParams = new URLSearchParams();
      searchParams.append("response_type", "code");
      searchParams.append("client_id", this.options.clientId);
      searchParams.append("redirect_uri", this.options.redirectURI);
      searchParams.append("state", CodeChallenge.stringifySentState(sentState));
      searchParams.append("code_challenge", challenge);
      searchParams.append("code_challenge_method", "S256");
      return searchParams;
    };
    const { coreConfig, axiosInstance } = sdk.assembly();
    this.conf = ApiUtils.mergeAxiosConfigs(axiosInstance.defaults, args?.axiosConfig?.request);
    this.namespace = args?.coreConfig?.namespace ? args?.coreConfig?.namespace : coreConfig?.namespace;
    this.options = {
      baseURL: coreConfig.baseURL,
      clientId: coreConfig.clientId,
      redirectURI: coreConfig.redirectURI
    };
  }
};
_IamUserAuthorizationClient.getMfaDataFromError = (errorResponse) => {
  const doesMFADataExist = Validate.safeParse(errorResponse.data, MFADataResponse);
  if (!doesMFADataExist) return;
  const { mfa_token: mfaToken, factors, default_factor: defaultFactor, email } = errorResponse.data;
  const result = { mfaToken, factors, defaultFactor, email };
  if (BrowserHelper2.isOnBrowser()) {
    localStorage.setItem(MFA_DATA_STORAGE_KEY, JSON.stringify(result));
  }
  return result;
};
_IamUserAuthorizationClient.getMfaDataFromStorage = () => {
  const storedMFAData = BrowserHelper2.isOnBrowser() && localStorage.getItem(MFA_DATA_STORAGE_KEY);
  return storedMFAData ? JSON.parse(storedMFAData) : null;
};
_IamUserAuthorizationClient.removeMfaDataFromStorage = () => {
  localStorage.removeItem(MFA_DATA_STORAGE_KEY);
};
_IamUserAuthorizationClient.matchReceivedState = (maybeSentState) => {
  const sentStateResult = CodeChallenge.parseSentState(maybeSentState);
  if (sentStateResult.error) return { error: sentStateResult.error, result: null };
  const storedStateResult = CodeChallenge.load();
  if (storedStateResult.error) return { error: storedStateResult.error, result: null };
  const sentState = sentStateResult.sentState;
  const storedState = storedStateResult.storedState;
  if (sentState.csrf !== storedState.csrf) return { error: null, result: null };
  return {
    error: null,
    result: {
      payload: sentState.payload,
      codeVerifier: storedState.codeVerifier
    }
  };
};
_IamUserAuthorizationClient.deduceLoginError = (error) => {
  switch (error) {
    case LoginErrorParam.Enum.login_session_expired:
      return new LoginErrorExpired();
    case LoginErrorParam.Enum.cancelled:
      return new LoginErrorCancelled();
    default:
      return new LoginErrorUnknown();
  }
};
var IamUserAuthorizationClient = _IamUserAuthorizationClient;
function isAxiosError(error) {
  return !!error && !!error.config;
}
var AuthorizationCodeExchangeState = z115.object({
  path: z115.string().optional()
});
var AuthorizationCodeExchangeStateHelper = class {
  static fromPath(path) {
    return { path };
  }
  static toJSONString(state) {
    return JSON.stringify(state);
  }
  static readJSONString(jsonString) {
    try {
      const parsedJsonString = JSON.parse(jsonString);
      return AuthorizationCodeExchangeState.parse(parsedJsonString);
    } catch (error) {
      return null;
    }
  }
};

// src/custom/clients/IamOAuthClient.ts
var IamOAuthClient = class {
  constructor(sdk, args) {
    /**
     * POST [/iam/v3/logout](api)
     *
     * This method is used to remove __access_token__, __refresh_token__ from cookie and revoke token from usage.
     *    Supported methods:
     *        - VerifyToken to verify token from header
     *        - AddTokenToRevocationList to revoke token with TTL
     */
    this.logout = () => {
      const axios = Network2.create({
        ...this.conf,
        headers: { "Content-Type": "text/plain" }
      });
      localStorage.removeItem(MFA_DATA_STORAGE_KEY);
      return new OAuth20Extension$(axios, this.namespace).createLogout_v3().then((response) => {
        this.sdk.removeToken();
        return response;
      });
    };
    /**
     * POST [/iam/v3/oauth/revoke](api)
     *
     * This method revokes a token.
     *           This method requires authorized requests header with Basic Authentication from client that establish the token.action code: 10706
     */
    this.revoke = ({ token }) => {
      const axios = Network2.create({
        ...this.conf,
        headers: {
          Authorization: `Basic ${Buffer2.from(`${this.options.clientId}:`).toString("base64")}`,
          "Content-Type": "application/x-www-form-urlencoded"
        }
      });
      return new OAuth20$(axios, this.namespace).postOauthRevoke_v3({ token });
    };
    /**
     * POST [/iam/v3/oauth/mfa/verify](api)
     *
     * Verify 2FA code
     * This method is used for verifying 2FA code.
     *          ##2FA remember device
     *          To remember device for 2FA, should provide cookie: device_token or header: Device-Token
     *
     */
    this.verify2FA = async ({ factor, code, mfaToken = null, rememberDevice }) => {
      Network2.setDeviceTokenCookie();
      const result = await this.newInstance().postOauthMfaVerify_v3({ factor, code, rememberDevice, mfaToken });
      if (result.error) throw result.error;
      Network2.removeDeviceTokenCookie();
      localStorage.removeItem(MFA_DATA_STORAGE_KEY);
      return result.response;
    };
    /**
     * POST [/iam/v3/oauth/mfa/code](api)
     */
    this.request2FAEmailCode = async ({ mfaToken = null, factor }) => {
      const result = await this.newInstance().postOauthMfaCode_v3({ mfaToken, clientId: this.options.clientId, factor });
      if (result.error) throw result.error;
      return result.response;
    };
    const { coreConfig, axiosInstance } = sdk.assembly();
    const baseURLOverride = args?.coreConfig?.baseURL;
    this.sdk = sdk;
    this.conf = ApiUtils2.mergeAxiosConfigs(axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...args?.axiosConfig?.request
    });
    this.namespace = args?.coreConfig?.namespace ? args?.coreConfig?.namespace : coreConfig?.namespace;
    this.options = {
      clientId: coreConfig?.clientId
    };
  }
  newInstance() {
    return new OAuth20$(Network2.create(this.conf), this.namespace);
  }
};
IamOAuthClient.exchangeTokenOauthByPlatformId = (platformId, client_id, data, sdkAssemblyConfig) => {
  const params = {};
  const url = "/iam/v3/oauth/platforms/{platformId}/token".replace("{platformId}", platformId);
  const resultPromise = Network2.create(sdkAssemblyConfig).post(url, CodeGenUtil.getFormUrlEncodedData(data), {
    ...params,
    headers: {
      ...params.headers,
      "content-type": "application/x-www-form-urlencoded",
      Authorization: `Basic ${Buffer2.from(client_id + ":").toString("base64")}`
    },
    withCredentials: false
  });
  return Validate2.responseType(() => resultPromise, TokenResponse, "TokenResponse");
};

// src/custom/clients/IamUserClient.ts
import { ApiUtils as ApiUtils3, Network as Network3, Validate as Validate3 } from "@accelbyte/sdk";

// src/custom/models/ReadyPlayerMe.ts
import { z as z116 } from "zod";
var ReadyPlayerMe = z116.object({
  renders: z116.array(z116.string())
});

// src/custom/clients/IamUserClient.ts
var IamUserClient = class {
  /**
   * @internal
   */
  constructor(sdk, args) {
    /**
     * GET [/iam/v3/public/users/me](api)
     *
     * get currently logged-in user
     */
    this.getCurrentUser = () => {
      return this.newInstance().getUsersMe_v3();
    };
    /**
     * Render 2D Avatar via readyplayer.me POST [](https://docs.readyplayer.me/ready-player-me/avatars/2d-avatars/render-api)
     * @internal
     */
    this.renderImageFromGlbModel = (data) => {
      const axios = Network3.create({
        ...this.conf
      });
      return Validate3.responseType(() => axios.post("https://render.readyplayer.me/render", data), ReadyPlayerMe, "ReadyPlayerMe");
    };
    const { coreConfig, axiosInstance } = sdk.assembly();
    this.conf = ApiUtils3.mergeAxiosConfigs(axiosInstance.defaults, args?.axiosConfig?.request);
    this.namespace = args?.coreConfig?.namespace ? args?.coreConfig?.namespace : coreConfig.namespace;
  }
  /**
   * @internal
   */
  newInstance(namespace) {
    return new Users$(Network3.create(this.conf), namespace || this.namespace);
  }
};

// src/custom/clients/InputValidationHelper.ts
import {
  validateDisplayName,
  validateEmail,
  validateForbiddenWords,
  validateLength,
  validateNotEmpty,
  validatePassword,
  validateRegex,
  ValidateRegexErrorType,
  validateUserName
} from "@accelbyte/validator";
import isEmpty from "validator/lib/isEmpty.js";
import { z as z117 } from "zod";
var ValidateableInputField = z117.enum(["username", "displayName", "password", "email", "dateOfBirth"]);
var _InputValidationHelper = class _InputValidationHelper {
  static getValidationDescription(key, validations) {
    const field = validations.find((validation) => validation.field === key);
    if (!field) return [];
    return field.validation.description.message.map((message) => {
      const trimmedMessage = message.trim();
      const lastChar = trimmedMessage.slice(trimmedMessage.length - 1);
      if (lastChar === ".") {
        return trimmedMessage.slice(0, -1);
      }
      return trimmedMessage;
    });
  }
};
_InputValidationHelper.validateDisplayName = (value, isRequired = false, validations, validateBadWord = false) => {
  const validation = _InputValidationHelper.getValidationByKey(ValidateableInputField.enum.displayName, validations);
  if (!validation) return null;
  return validateDisplayName(value, {
    // @ts-ignore  Why? -> error TS2345: Argument of type '{ blockedWord: string[]; maxLength: number; minLength: number; isRequired: boolean; allowUnicode: boolean; isCustomRegex: boolean; allowSpace: boolean; customRegex: string; letterCase: string; ... 4 more ...; validateBadWord: boolean; }' is not assignable to parameter of type 'ValidateDisplayNameOptions'.
    blockedWord: validation.blockedWord,
    maxLength: validation.maxLength,
    minLength: validation.minLength,
    isRequired,
    allowUnicode: validation.allowUnicode,
    isCustomRegex: validation.isCustomRegex,
    allowSpace: validation.allowSpace,
    customRegex: validation.regex,
    letterCase: validation.letterCase,
    allowAllSpecialCharacters: validation.allowAllSpecialCharacters,
    specialCharacters: validation.specialCharacters,
    maxRepeatingSpecialCharacter: validation.maxRepeatingSpecialCharacter,
    specialCharacterLocation: validation.specialCharacterLocation,
    validateBadWord
  });
};
_InputValidationHelper.validateUserName = (value, validations, validateBadWord = false) => {
  const validation = _InputValidationHelper.getValidationByKey(ValidateableInputField.enum.username, validations);
  if (!validation) return null;
  return validateUserName(value, {
    maxLength: validation.maxLength,
    minLength: validation.minLength,
    isCustomRegex: validation.isCustomRegex,
    customRegex: validation.regex,
    letterCase: validation.letterCase,
    allowSpace: validation.allowSpace,
    allowAllSpecialCharacters: validation.allowAllSpecialCharacters,
    specialCharacters: validation.specialCharacters,
    specialCharacterLocation: validation.specialCharacterLocation,
    validateBadWord
  });
};
_InputValidationHelper.validateDateOfBirth = (value, validations) => {
  const validation = _InputValidationHelper.getValidationByKey(ValidateableInputField.enum.dateOfBirth, validations);
  if (!validation) return null;
  return validateNotEmpty(value);
};
_InputValidationHelper.validatePassword = (value, validations) => {
  const validation = _InputValidationHelper.getValidationByKey(ValidateableInputField.enum.password, validations);
  if (!validation) return null;
  return validatePassword(value, {
    regex: validation.regex,
    minLength: validation.minLength,
    maxLength: validation.maxLength,
    maxRepeatingAlphaNum: validation.maxRepeatingAlphaNum,
    maxRepeatingSpecialCharacter: validation.maxRepeatingSpecialCharacter,
    minCharType: validation.minCharType,
    letterCase: validation.letterCase,
    allowSpace: validation.allowSpace,
    allowLetter: validation.allowLetter,
    allowDigit: validation.allowDigit,
    allowAllSpecialCharacters: validation.allowAllSpecialCharacters,
    isCustomRegex: validation.isCustomRegex,
    specialCharacters: validation.specialCharacters
  });
};
_InputValidationHelper.validateEmail = (value, validations) => {
  const validation = _InputValidationHelper.getValidationByKey(ValidateableInputField.enum.email, validations);
  if (!validation) return null;
  return validateEmail(value, {
    blockedWord: validation.blockedWord,
    customRegex: validation.regex,
    maxLength: validation.maxLength,
    minLength: validation.minLength,
    isRequired: true
  });
};
_InputValidationHelper.validateWithRegex = (value, { validation, isRequired = true }) => {
  let result;
  if (isEmpty(value) && !isRequired) return null;
  result = validateLength(value, { min: validation.minLength, max: validation.maxLength });
  if (!result) {
    result = validateForbiddenWords(value, validation.blockedWord || []);
  }
  if (!result && !validation.isCustomRegex) {
    const lastCharacter = value.slice(-1);
    const isLastCharacterSpecial = /[^a-zA-Z0-9]/.test(lastCharacter);
    if (isLastCharacterSpecial && value.length > 1) {
      result = validation.specialCharacterLocation === "middle" ? ValidateRegexErrorType.enum.invalidFormat : null;
    }
    if (!result && !validation.allowSpace) {
      const isSpaceFound = /\s/.test(value);
      result = isSpaceFound ? ValidateRegexErrorType.enum.invalidFormat : null;
    }
  }
  if (!result) {
    result = validateRegex(value, validation.regex, {
      allowUnicode: validation.allowUnicode || validation.isCustomRegex
    });
  }
  return result;
};
_InputValidationHelper.getValidationByKey = (key, validations) => {
  const inputValidation = validations.find((validator) => validator.field === key);
  if (!inputValidation) return;
  return inputValidation.validation;
};
// format blocked word to string
_InputValidationHelper.formatBlockedWord = (value, blockedWord) => {
  const blockedWordList = blockedWord.map((word) => {
    const lowercaseWord = word.toLowerCase();
    return value.toLocaleLowerCase().includes(lowercaseWord) ? lowercaseWord : "";
  }).filter(Boolean);
  const wordList = [...blockedWordList];
  const last = wordList.pop();
  return wordList.length ? `${wordList.join(", ")} or ${last}` : last;
};
var InputValidationHelper = _InputValidationHelper;

// src/custom/models/Config.ts
import { z as z118 } from "zod";
var IamConfigData = z118.object({
  usernameDisabled: z118.boolean().default(false),
  uniqueDisplayNameEnabled: z118.boolean().default(false),
  mandatoryEmailVerificationEnabled: z118.boolean().default(true)
});
export {
  AcceptedPoliciesRequest,
  AccountProgressionInfo,
  AddUserRoleV4Request,
  AgeRestrictionRequest,
  AgeRestrictionRequestV3,
  AgeRestrictionResponse,
  AgeRestrictionResponseV3,
  AllowedPermission,
  AssignUserV4Request,
  AssignedUserV4Response,
  AuthenticatorKeyResponseV4,
  AuthenticatorSecretKey,
  AvatarConfig,
  BackupCodesResponseV4,
  Ban,
  BanCreateRequest,
  BanReason,
  BanReasonV3,
  BanReasons,
  BanReasonsV3,
  BanType,
  BanUpdateRequest,
  BanV3,
  BannedBy,
  BannedByV3,
  Bans,
  Bans$,
  BansAdmin$,
  BansAdminApi,
  BansApi,
  BansV3,
  BulkAccountTypeUpdateRequestV4,
  BulkBanCreateRequestV3,
  BulkUnbanCreateRequestV3,
  CheckAvailabilityResponse,
  CheckValidUserIdRequestV4,
  ClientCreateRequest,
  ClientCreationResponse,
  ClientCreationV3Request,
  ClientModulePermission,
  ClientPermission,
  ClientPermissionSet,
  ClientPermissionV3,
  ClientPermissions,
  ClientPermissionsV3,
  ClientResponse,
  ClientResponseArray,
  ClientSelectedGroup,
  ClientTemplate,
  ClientUpdateRequest,
  ClientUpdateSecretRequest,
  ClientUpdateV3Request,
  ClientV3Response,
  Clients$,
  ClientsAdmin$,
  ClientsAdminApi,
  ClientsApi,
  ClientsConfigV3Admin$,
  ClientsConfigV3AdminApi,
  ClientsUpdateRequestV3,
  ClientsV3Response,
  CodeChallenge,
  Config$,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigApi,
  ConfigValueResponseV3,
  ConflictedUserPlatformAccounts,
  Country,
  Country$,
  CountryAdmin$,
  CountryAdminApi,
  CountryAgeRestriction,
  CountryAgeRestrictionArray,
  CountryAgeRestrictionRequest,
  CountryAgeRestrictionV3Request,
  CountryApi,
  CountryBlacklistRequest,
  CountryBlacklistResponse,
  CountryLocationResponse,
  CountryResponse,
  CountryResponseArray,
  CountryV3Response,
  CountryV3ResponseArray,
  CreateJusticeUserResponse,
  CreateTestUserRequestV4,
  CreateTestUserResponseV4,
  CreateTestUsersRequestV4,
  CreateTestUsersResponseV4,
  CreateUserRequestV4,
  CreateUserResponseV4,
  DefaultFieldValue,
  DefaultFieldValueValue,
  Description,
  DeviceBanRequestV4,
  DeviceBanResponseV4,
  DeviceBanUpdateRequestV4,
  DeviceBannedResponseV4,
  DeviceBansResponseV4,
  DeviceIdDecryptResponseV4,
  DeviceResponseV4,
  DeviceTypeResponseV4,
  DeviceTypesResponseV4,
  DeviceUserResponseV4,
  DeviceUsersResponseV4,
  DevicesResponseV4,
  DevicesV4Admin$,
  DevicesV4AdminApi,
  DisableMfaRequest,
  DisableUserRequest,
  DistinctLinkedPlatformV3,
  DistinctPlatformResponseV3,
  EligibleUser,
  EmailUpdateRequestV4,
  EnabledFactorsResponseV4,
  ErrorResponse,
  ErrorResponseWithConflictedUserPlatformAccounts,
  FailedBanUnbanUserV3,
  FieldUpdateAllowStatus,
  FilterJson,
  ForgotPasswordRequestV3,
  GetAdminUsersResponse,
  GetBulkUserBansRequest,
  GetLinkHeadlessAccountConflictResponse,
  GetProfileUpdateStrategyConfigResponse,
  GetPublisherUserResponse,
  GetUserBanSummaryV3,
  GetUserBanV3Response,
  GetUserJusticePlatformAccountResponse,
  GetUserMapping,
  GetUserMappingArray,
  GetUserMappingV3,
  GetUserMappingV3Array,
  GetUsersResponseWithPaginationV3,
  Iam,
  IamConfigData,
  IamConfigKey,
  IamHelper,
  IamOAuthClient,
  IamUserAuthorizationClient,
  IamUserClient,
  InputValidationConfigVersion,
  InputValidationData,
  InputValidationDataPublic,
  InputValidationDescription,
  InputValidationHelper,
  InputValidationUpdatePayload,
  InputValidations$,
  InputValidationsAdmin$,
  InputValidationsAdminApi,
  InputValidationsApi,
  InputValidationsPublicResponse,
  InputValidationsResponse,
  InvitationHistoryResponse,
  InviteUserRequestV3,
  InviteUserRequestV4,
  InviteUserResponseV3,
  JwkKey,
  JwkSet,
  JwtBanV3,
  LinkHeadlessAccountRequest,
  LinkPlatformAccountRequest,
  LinkPlatformAccountWithProgressionRequest,
  LinkRequest,
  LinkingHistoryResponseWithPaginationV3,
  ListAssignedUsersV4Response,
  ListBulkUserBanResponseV3,
  ListBulkUserPlatformsResponse,
  ListBulkUserResponse,
  ListClientPermissionSet,
  ListEmailAddressRequest,
  ListInvitationHistoriesV4Response,
  ListRoleV4Response,
  ListTemplatesResponse,
  ListUpsertModulesRequest,
  ListUserInformationResult,
  ListUserResponseV3,
  ListUserRolesV4Response,
  ListUsersWithPlatformAccountsResponse,
  ListValidUserIdResponseV4,
  LoginAllowlistAdmin$,
  LoginAllowlistAdminApi,
  LoginAllowlistRequest,
  LoginAllowlistResponse,
  LoginErrorCancelled,
  LoginErrorExpired,
  LoginErrorParam,
  LoginErrorUnknown,
  LoginErrorUnmatchedState,
  LoginHistoriesResponse,
  LoginQueueTicketResponse,
  MFADataResponse,
  MFA_DATA_STORAGE_KEY,
  NamespaceInvitationHistoryUserV4Response,
  NamespaceRole,
  NamespaceRoleRequest,
  NetflixCertificates,
  OAuth$,
  OAuth20$,
  OAuth20Admin$,
  OAuth20AdminApi,
  OAuth20Api,
  OAuth20Extension$,
  OAuth20ExtensionApi,
  OAuth20V4$,
  OAuth20V4Api,
  OAuthApi,
  OneTimeLinkingCodeResponse,
  OneTimeLinkingCodeValidationResponse,
  OverrideRoleConfigV3Admin$,
  OverrideRoleConfigV3AdminApi,
  OverrideRolePermission,
  Pagination,
  PaginationV3,
  Permission,
  PermissionDeleteRequest,
  PermissionGroup,
  PermissionSetDeleteGroupRequest,
  PermissionSetUpsertRequest,
  PermissionV3,
  Permissions,
  PermissionsV3,
  PlatformAccount,
  PlatformDomainDeleteRequest,
  PlatformDomainResponse,
  PlatformDomainUpdateRequest,
  PlatformLinkingHistory,
  PlatformTokenRefreshResponseV3,
  PlatformUserIdRequest,
  PlatformUserIdRequestV4,
  PlatformUserInformation,
  PlatformUserInformationV3,
  ProfileUpdateConfig,
  ProfileUpdateStrategy$,
  ProfileUpdateStrategyAdmin$,
  ProfileUpdateStrategyAdminApi,
  ProfileUpdateStrategyApi,
  PublicInviteUserRequestV4,
  PublicThirdPartyPlatformInfo,
  PublicThirdPartyPlatformInfoArray,
  PublicUserInformationResponseV3,
  PublicUserInformationV3,
  PublicUserResponse,
  PublicUserResponseV3,
  PublicUserUpdateRequestV3,
  PublicUsersResponse,
  ReadyPlayerMe,
  RegisteredDomain,
  RemoveUserRoleV4Request,
  ReplaceRolePermission,
  ResetPasswordRequest,
  ResetPasswordRequestV3,
  RevocationList,
  RevokeUserV4Request,
  Role,
  RoleAdminStatusResponse,
  RoleAdminStatusResponseV3,
  RoleCreateRequest,
  RoleCreateV3Request,
  RoleManager,
  RoleManagerV3,
  RoleManagersRequest,
  RoleManagersRequestV3,
  RoleManagersResponse,
  RoleManagersResponsesV3,
  RoleMember,
  RoleMemberV3,
  RoleMembersRequest,
  RoleMembersRequestV3,
  RoleMembersResponse,
  RoleMembersResponseV3,
  RoleNamesResponseV3,
  RoleOverrideResponse,
  RoleOverrideSourceResponse,
  RoleOverrideStatsUpdateRequest,
  RoleOverrideUpdateRequest,
  RolePermissionResponseV3,
  RoleResponse,
  RoleResponseV3,
  RoleResponseWithManagers,
  RoleResponseWithManagersAndPaginationV3,
  RoleResponseWithManagersArray,
  RoleResponseWithManagersV3,
  RoleUpdateRequest,
  RoleUpdateRequestV3,
  RoleV3,
  RoleV4Request,
  RoleV4Response,
  Roles$,
  RolesAdmin$,
  RolesAdminApi,
  RolesApi,
  SearchUsersByPlatformIdResponse,
  SearchUsersResponse,
  SearchUsersResponseWithPaginationV3,
  SendRegisterVerificationCodeRequest,
  SendVerificationCodeRequest,
  SendVerificationCodeRequestV3,
  SendVerificationLinkRequest,
  SimpleProfileUpdateStrategyConfigs,
  SimpleUserPlatformInfoV3,
  Sso$,
  SsoApi,
  SsoCredentialAdmin$,
  SsoCredentialAdminApi,
  SsoPlatformCredentialRequest,
  SsoPlatformCredentialResponse,
  SsoPlatformCredentialResponseArray,
  SsoSaml20$,
  SsoSaml20Api,
  TWOFA_PAGE,
  TargetTokenCodeResponse,
  ThirdPartyCredential$,
  ThirdPartyCredentialAdmin$,
  ThirdPartyCredentialAdminApi,
  ThirdPartyCredentialApi,
  ThirdPartyLoginPlatformCredentialRequest,
  ThirdPartyLoginPlatformCredentialResponse,
  ThirdPartyLoginPlatformCredentialResponseArray,
  TicketEndpointAction,
  TokenIntrospectResponse,
  TokenResponse,
  TokenResponseV3,
  TokenThirdPartyLinkStatusResponse,
  TokenThirdPartyResponse,
  TokenWithDeviceCookieResponseV3,
  UnlinkUserPlatformRequest,
  UpdatePermissionScheduleRequest,
  UpdateProfileUpdateStrategyConfigRequest,
  UpdateUserDeletionStatusRequest,
  UpdateUserStatusRequest,
  UpgradeHeadlessAccountRequest,
  UpgradeHeadlessAccountRequestV4,
  UpgradeHeadlessAccountV3Request,
  UpgradeHeadlessAccountWithVerificationCodeRequest,
  UpgradeHeadlessAccountWithVerificationCodeRequestV3,
  UpgradeHeadlessAccountWithVerificationCodeRequestV4,
  UserActiveBanResponse,
  UserActiveBanResponseV3,
  UserActiveBanResponseV4,
  UserBan,
  UserBanResponse,
  UserBanResponseArray,
  UserBanResponseV3,
  UserBanWithStatus,
  UserBaseInfo,
  UserBulkUpdateRequestV3,
  UserCreateRequest,
  UserCreateRequestV3,
  UserCreateResponse,
  UserCreateResponseV3,
  UserDeletionStatusResponse,
  UserIDsRequest,
  UserIdentityUpdateRequestV3,
  UserInfo,
  UserInfoResponse,
  UserInformation,
  UserInformationV3,
  UserInputValidationRequest,
  UserInputValidationResponse,
  UserInvitationHistory,
  UserInvitationV3,
  UserLinkedPlatform,
  UserLinkedPlatformArray,
  UserLinkedPlatformV3,
  UserLinkedPlatformsResponseV3,
  UserLoginHistoryResponse,
  UserMfaStatusResponseV4,
  UserMfaTokenResponseV4,
  UserPasswordUpdateRequest,
  UserPasswordUpdateV3Request,
  UserPermissionsResponseV3,
  UserPermissionsResponseV4,
  UserPlatformInfo,
  UserPlatformInfos,
  UserPlatformLinkHistories,
  UserPlatformLinkHistory,
  UserPlatformMetadata,
  UserPlatforms,
  UserProfileUpdateAllowStatus,
  UserPublicInfoResponseV4,
  UserResponse,
  UserResponseArray,
  UserResponseV3,
  UserResponseV4,
  UserRevocationListRecord,
  UserRolesV4Response,
  UserSearchByPlatformIdResult,
  UserSearchResult,
  UserUnbanCreateRequestV3,
  UserUpdateRequest,
  UserUpdateRequestV3,
  UserVerificationRequest,
  UserVerificationRequestV3,
  UserWithLinkedPlatformAccounts,
  UserWithPlatformAccounts,
  UserWithPlatformInfo,
  Users$,
  UsersAdmin$,
  UsersAdminApi,
  UsersApi,
  UsersPlatformInfosRequestV3,
  UsersPlatformInfosResponse,
  UsersUpdateRequestV3,
  UsersV4$,
  UsersV4Admin$,
  UsersV4AdminApi,
  UsersV4Api,
  V3ClientUpdateSecretRequest,
  ValidUserIdResponseV4,
  ValidateableInputField,
  Validation,
  ValidationDescription,
  ValidationDetail,
  ValidationDetailPublic,
  VerificationCodeResponse,
  VerifyRegistrationCode,
  WebLinkingResponse,
  mandatoryAccountUpgradeLocalStorageName
};
