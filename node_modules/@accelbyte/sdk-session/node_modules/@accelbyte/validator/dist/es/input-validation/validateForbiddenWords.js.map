{"version":3,"sources":["../../../src/input-validation/validateForbiddenWords.ts"],"names":[],"mappings":";;;;AAUa,MAAA,+BAAA,GAAkC,EAAE,IAAK,CAAA;AAAA,EACpD,0BAA0B,IAAK,CAAA,KAAA;AAAA,EAC/B,0BAA0B,IAAK,CAAA,sBAAA;AACjC,CAAC,EAAA;AAQY,MAAA,sBAAA,GAAyB,CACpC,KAAA,EACA,cACA,EAAA,EAAE,UAAa,GAAA,IAAA,EAAM,eAAkB,GAAA,KAAA,EAAyC,GAAA,EAC7E,KAAA;AACH,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,gCAAgC,IAAK,CAAA,KAAA,CAAA;AAAA,GAC9C;AAEA,EAAM,MAAA,sBAAA,GAAyB,cAAe,CAAA,MAAA,CAAO,OAAO,CAAA,CAAE,GAAI,CAAA,CAAA,IAAA,KAAS,eAAkB,GAAA,IAAA,GAAO,IAAK,CAAA,WAAA,EAAc,CAAA,CAAA;AACvH,EAAA,MAAM,UAAa,GAAA,eAAA,GAAkB,KAAQ,GAAA,KAAA,CAAM,WAAY,EAAA,CAAA;AAC/D,EAAA,MAAM,cAAc,sBAAuB,CAAA,IAAA,CAAK,UAAQ,UAAW,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA,CAAA;AAEjF,EAAO,OAAA,WAAA,GAAc,+BAAgC,CAAA,IAAA,CAAK,sBAAyB,GAAA,IAAA,CAAA;AACrF","file":"validateForbiddenWords.js","sourcesContent":["/*\n * Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\n\nexport const ValidateForbiddenWordsErrorType = z.enum([\n  CommonValidationErrorType.enum.empty,\n  CommonValidationErrorType.enum.containsForbiddenWords\n])\nexport type ValidateForbiddenWordsErrorType = z.infer<typeof ValidateForbiddenWordsErrorType>\n\ninterface ValidateForbiddenWordsOptions {\n  isRequired?: boolean\n  isCaseSensitive?: boolean\n}\n\nexport const validateForbiddenWords = (\n  value: string,\n  forbiddenWords: string[],\n  { isRequired = true, isCaseSensitive = false }: ValidateForbiddenWordsOptions = {}\n) => {\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateForbiddenWordsErrorType.enum.empty\n  }\n\n  const filteredForbiddenWords = forbiddenWords.filter(Boolean).map(word => (isCaseSensitive ? word : word.toLowerCase()))\n  const finalValue = isCaseSensitive ? value : value.toLowerCase()\n  const isForbidden = filteredForbiddenWords.some(word => finalValue.includes(word))\n\n  return isForbidden ? ValidateForbiddenWordsErrorType.enum.containsForbiddenWords : null\n}\n"]}