{"version":3,"sources":["../../../src/input-validation/validateUrl.ts"],"names":[],"mappings":";;;;;AAWa,MAAA,oBAAA,GAAuB,CAAE,CAAA,IAAA,CAAK,CAAC,GAAG,wBAAwB,OAAS,EAAA,yBAAA,CAA0B,IAAK,CAAA,aAAa,CAAC,EAAA;AAmB7H,MAAM,sBAAyB,GAAA,GAAA,CAAA;AAC/B,MAAM,sBAAyB,GAAA,wBAAA,CAAA;AAC/B,MAAM,yBAA4B,GAAA,UAAA,CAAA;AAErB,MAAA,WAAA,GAAc,CAAC,KAAA,EAAe,EAAE,UAAA,GAAa,MAAM,mBAAsB,GAAA,KAAA,EAA8B,GAAA,EAAO,KAAA;AACzH,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,qBAAqB,IAAK,CAAA,KAAA,CAAA;AAAA,GACnC;AAEA,EAAA,MAAM,uBAAuB,cAAe,CAAA,KAAA,EAAO,EAAE,GAAA,EAAK,wBAAwB,CAAA,CAAA;AAClF,EAAA,IAAI,sBAA6B,OAAA,oBAAA,CAAA;AAEjC,EAAI,IAAA;AACF,IAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,KAAK,CAAA,CAAA;AAEzB,IAAI,IAAA,+BAAA,CAAgC,GAAG,CAAG,EAAA;AACxC,MAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA,CAAA;AAAA,KAC/D;AAEA,IAAA,IAAI,CAAC,mBAAuB,IAAA,sBAAA,CAAuB,IAAK,CAAA,GAAA,CAAI,QAAQ,CAAG,EAAA;AACrE,MAAM,MAAA,IAAI,MAAM,wCAAwC,CAAA,CAAA;AAAA,KAC1D;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,WACA,GAAK,EAAA;AACZ,IAAA,OAAO,qBAAqB,IAAK,CAAA,aAAA,CAAA;AAAA,GACnC;AACF,EAAA;AAEA,MAAM,+BAAA,GAAkC,CAAC,GAAa,KAAA;AAEpD,EAAM,MAAA,MAAA,GAAS,CAAG,EAAA,GAAA,CAAI,QAAQ,CAAA,EAAA,CAAA,CAAA;AAC9B,EAAA,IAAI,iBAAiB,GAAI,CAAA,IAAA,CAAK,QAAQ,CAAG,EAAA,GAAA,CAAI,QAAQ,CAAI,EAAA,CAAA,CAAA,CAAA;AACzD,EAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AACzB,IAAA,cAAA,GAAiB,IAAI,QAAS,CAAA,MAAA,CAAA;AAAA,GACzB,MAAA;AACL,IAAA,cAAA,GAAiB,MAAO,CAAA,MAAA,CAAA;AAAA,GAC1B;AAEA,EAAA,MAAM,WAAc,GAAA,GAAA,CAAI,IAAK,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AACjD,EAAO,OAAA,yBAAA,CAA0B,KAAK,WAAW,CAAA,CAAA;AACnD,CAAA","file":"validateUrl.js","sourcesContent":["/*\n * Copyright (c) 2019-2024 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\nimport { validateLength, ValidateLengthErrorType } from './validateLength'\n\nexport const ValidateUrlErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat])\nexport type ValidateUrlErrorType = z.infer<typeof ValidateUrlErrorType>\n\nexport interface ValidateUrlOptions {\n  /**\n   * When set to `false`, URL with 0 length will return `null`.\n   *\n   * @default true\n   */\n  isRequired?: boolean\n  /**\n   * When set to `true`, it will allow custom protocol. It is discouraged to set this to `true` as it exposes room for XSS attack,\n   * as `javascript:` and `vbscript:` are both valid protocols.\n   *\n   * @default false\n   */\n  allowCustomProtocol?: boolean\n}\n\nconst DEFAULT_MAX_URL_LENGTH = 2000\nconst INVALID_PROTOCOL_REGEX = /(javascript|vbscript):/\nconst INVALID_PUNCTUATION_REGEX = /[{}|`~,]/\n\nexport const validateUrl = (value: string, { isRequired = true, allowCustomProtocol = false }: ValidateUrlOptions = {}) => {\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateUrlErrorType.enum.empty\n  }\n\n  const validateLengthResult = validateLength(value, { max: DEFAULT_MAX_URL_LENGTH })\n  if (validateLengthResult) return validateLengthResult\n\n  try {\n    const url = new URL(value)\n\n    if (isContainingInvalidPunctuations(url)) {\n      throw new Error('URL should not contain invalid punctuations')\n    }\n\n    if (!allowCustomProtocol && INVALID_PROTOCOL_REGEX.test(url.protocol)) {\n      throw new Error('URL should not use an invalid protocol')\n    }\n\n    return null\n  } catch (err) {\n    return ValidateUrlErrorType.enum.invalidFormat\n  }\n}\n\nconst isContainingInvalidPunctuations = (url: URL) => {\n  // From https://example.com/path?query=value#hash, take example.com/path?query=value#hash.\n  const scheme = `${url.protocol}//`\n  let schemeEndIndex = url.href.indexOf(`${url.protocol}//`)\n  if (schemeEndIndex === -1) {\n    schemeEndIndex = url.protocol.length\n  } else {\n    schemeEndIndex = scheme.length\n  }\n\n  const mainUrlBody = url.href.slice(schemeEndIndex)\n  return INVALID_PUNCTUATION_REGEX.test(mainUrlBody)\n}\n"]}