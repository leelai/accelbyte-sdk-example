{"version":3,"sources":["../../../src/input-validation/validateRegex.ts"],"names":[],"mappings":";;;;;AAWO,MAAM,yBAAyB,CAAE,CAAA,IAAA,CAAK,CAAC,yBAA0B,CAAA,IAAA,CAAK,aAAa,CAAC,EAAA;AAO9E,MAAA,aAAA,GAAgB,CAAC,KAAe,EAAA,KAAA,EAAe,EAAE,YAAe,GAAA,KAAA,EAAgC,GAAA,EAAO,KAAA;AAClH,EAAA,IAAI,gBAAgB,CAAC,OAAA,CAAQ,KAAK,CAAE,CAAA,IAAA,CAAK,KAAK,CAAG,EAAA;AAC/C,IAAA,OAAO,uBAAuB,IAAK,CAAA,aAAA,CAAA;AAAA,GACrC;AAEA,EAAA,IAAI,CAAC,YAAgB,IAAA,CAAC,OAAQ,CAAA,KAAA,EAAO,KAAK,CAAG,EAAA;AAC3C,IAAA,OAAO,uBAAuB,IAAK,CAAA,aAAA,CAAA;AAAA,GACrC;AAEA,EAAO,OAAA,IAAA,CAAA;AACT","file":"validateRegex.js","sourcesContent":["/*\n * Copyright (c) 2021-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport matches from 'validator/lib/matches.js'\nimport XRegExp from 'xregexp'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\n\nexport const ValidateRegexErrorType = z.enum([CommonValidationErrorType.enum.invalidFormat])\nexport type ValidateRegexErrorType = z.infer<typeof ValidateRegexErrorType>\n\nexport interface ValidateRegexOptions {\n  allowUnicode?: boolean\n}\n\nexport const validateRegex = (value: string, regex: string, { allowUnicode = false }: ValidateRegexOptions = {}) => {\n  if (allowUnicode && !XRegExp(regex).test(value)) {\n    return ValidateRegexErrorType.enum.invalidFormat\n  }\n\n  if (!allowUnicode && !matches(value, regex)) {\n    return ValidateRegexErrorType.enum.invalidFormat\n  }\n\n  return null\n}\n"]}