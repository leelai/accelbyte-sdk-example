import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { MAX_SHORT_TEXT_LENGTH } from './constant/numbers';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateDockerVersionErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validateDockerImageVersion = (value, { maxLength = MAX_SHORT_TEXT_LENGTH, isRequired = true } = {}) => {
  const REGEX = "[^A-Za-z0-9-_.]";
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateDockerVersionErrorType.enum.empty;
  }
  if (matches(value, REGEX)) {
    return ValidateDockerVersionErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max: maxLength });
};

export { ValidateDockerVersionErrorType, validateDockerImageVersion };
//# sourceMappingURL=validateDockerImageVersion.js.map
//# sourceMappingURL=validateDockerImageVersion.js.map