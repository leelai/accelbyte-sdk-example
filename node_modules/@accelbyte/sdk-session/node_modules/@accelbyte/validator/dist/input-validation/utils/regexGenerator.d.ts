import { z } from 'zod';

declare const LetterCaseEnum: z.ZodEnum<["lowercase", "uppercase", "mixed", "any"]>;
type LetterCaseType = z.infer<typeof LetterCaseEnum>;
declare const CharacterLocationEnum: z.ZodEnum<["anywhere", "middle"]>;
type CharacterLocationType = z.infer<typeof CharacterLocationEnum>;
declare const DEFAULT_USERNAME_RULE: {
    regex: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    letterCase: "any";
    specialCharacterLocation: "middle";
    allowUnicode: boolean;
    allowLetter: boolean;
    allowDigit: boolean;
    allowSpace: boolean;
    allowAllSpecialCharacters: boolean;
    isCustomRegex: boolean;
    specialCharacters: string[];
    blockedWord: never[];
};
declare const DEFAULT_DISPLAYNAME_RULE: {
    regex: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    letterCase: "any";
    specialCharacterLocation: "middle";
    allowUnicode: boolean;
    allowLetter: boolean;
    allowDigit: boolean;
    allowSpace: boolean;
    allowAllSpecialCharacters: boolean;
    isCustomRegex: boolean;
    specialCharacters: string[];
    blockedWord: never[];
};
declare const DEFAULT_PASSWORD_RULE: {
    regex: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    letterCase: "mixed";
    specialCharacterLocation: "anywhere";
    allowUnicode: boolean;
    allowLetter: boolean;
    allowDigit: boolean;
    allowSpace: boolean;
    allowAllSpecialCharacters: boolean;
    isCustomRegex: boolean;
    blockedWord: never[];
    specialCharacters: string[];
};
declare const DEFAULT_EMAIL_RULE: {
    regex: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    letterCase: "any";
    specialCharacterLocation: "middle";
    allowUnicode: boolean;
    allowLetter: boolean;
    allowDigit: boolean;
    allowSpace: boolean;
    allowAllSpecialCharacters: boolean;
    isCustomRegex: boolean;
    specialCharacters: string[];
    blockedWord: never[];
};
declare const EMAIL_DOMAIN_REGEX = "^(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,15}$";
interface RegexGeneratorParam {
    regex: string;
    maxRepeatingAlphaNum: number;
    maxRepeatingSpecialCharacter: number;
    minCharType: number;
    letterCase: string;
    specialCharacterLocation: string;
    allowUnicode: boolean;
    allowLetter: boolean;
    allowDigit: boolean;
    allowSpace: boolean;
    allowAllSpecialCharacters?: boolean;
    isCustomRegex: boolean;
    specialCharacters: string[];
}
declare const generatePattern: ({ regex, maxRepeatingAlphaNum, maxRepeatingSpecialCharacter, minCharType, letterCase, specialCharacterLocation, allowUnicode, allowLetter, allowDigit, allowSpace, allowAllSpecialCharacters, isCustomRegex, specialCharacters }: RegexGeneratorParam) => string;

export { CharacterLocationEnum, type CharacterLocationType, DEFAULT_DISPLAYNAME_RULE, DEFAULT_EMAIL_RULE, DEFAULT_PASSWORD_RULE, DEFAULT_USERNAME_RULE, EMAIL_DOMAIN_REGEX, LetterCaseEnum, type LetterCaseType, type RegexGeneratorParam, generatePattern };
