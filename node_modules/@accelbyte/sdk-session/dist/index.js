import {
  CertificateAdmin$,
  CertificateAdminApi,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigAlertResponse,
  Configuration,
  ConfigurationTemplateAdmin$,
  ConfigurationTemplateAdminApi,
  ConfigurationTemplateResponse,
  ConfigurationTemplatesResponse,
  DefaultDsmcConfig,
  DeleteBulkGameSessionsApiResponse,
  DsInformationResponse,
  DsmConfigRecord,
  DsmcDefaultConfigurationAdmin$,
  DsmcDefaultConfigurationAdminApi,
  EnvironmentVariableAdmin$,
  EnvironmentVariableAdminApi,
  EnvironmentVariableListResponse,
  EnvironmentVariableResponse,
  ExtendConfiguration,
  GameServer,
  GameSession$,
  GameSessionAdmin$,
  GameSessionAdminApi,
  GameSessionApi,
  GameSessionQueryResponse,
  GameSessionResponse,
  GlobalConfigurationAdmin$,
  GlobalConfigurationAdminApi,
  GlobalConfigurationResponse,
  KickResponse,
  MaxActiveAdmin$,
  MaxActiveAdminApi,
  MemberActiveSession,
  NativeSession,
  NativeSessionAdmin$,
  NativeSessionAdminApi,
  NativeSessionMember,
  NativeSessionPagingResponse,
  NativeSessionSetting,
  Pagination,
  Party$,
  PartyAdmin$,
  PartyAdminApi,
  PartyApi,
  PartyMembers,
  PartyQueryResponse,
  PartySessionResponse,
  PlatformCredentialAdmin$,
  PlatformCredentialAdminApi,
  PlatformCredentials,
  Player$,
  PlayerAdmin$,
  PlayerAdminApi,
  PlayerApi,
  PlayerAttributesResponseBody,
  PlayerAttributesResponseBodyArray,
  PlayerPlatform,
  PlayersCurrentPlatformResponse,
  PortConfigurationAms,
  PsnAppServerCredentials,
  PublicConfiguration,
  RecentPlayer$,
  RecentPlayerAdmin$,
  RecentPlayerAdminApi,
  RecentPlayerApi,
  RecentPlayerQueryResponse,
  ResponseDeleteBulkGameSessions,
  ServerSecret,
  SessionInviteResponse,
  SessionStorage$,
  SessionStorageAdmin$,
  SessionStorageAdminApi,
  SessionStorageApi,
  Team,
  UpdateGameSessionMemberStatusResponse,
  UserInfoResponse,
  UserPlatformInfo,
  UserResponse
} from "./chunk-4LGPC42K.js";

// src/generated-definitions/AppendTeamGameSessionRequest.ts
import { z } from "zod";
var AppendTeamGameSessionRequest = z.object({
  additionalMembers: z.array(PartyMembers),
  proposedTeams: z.array(Team),
  version: z.number().int()
});

// src/generated-definitions/ConfigAlertRequestCreate.ts
import { z as z2 } from "zod";
var ConfigAlertRequestCreate = z2.object({ durationDays: z2.number().int() });

// src/generated-definitions/CreateConfigurationTemplateRequest.ts
import { z as z3 } from "zod";
var CreateConfigurationTemplateRequest = z3.object({
  NativeSessionSetting: NativeSessionSetting.nullish(),
  PSNBaseUrl: z3.string().nullish(),
  appName: z3.string().nullish(),
  attributes: z3.record(z3.any()).nullish(),
  autoJoin: z3.boolean().nullish(),
  autoLeaveSession: z3.boolean().nullish(),
  clientVersion: z3.string(),
  customURLGRPC: z3.string().nullish(),
  deployment: z3.string(),
  disableCodeGeneration: z3.boolean().nullish(),
  disableResendInvite: z3.boolean().nullish(),
  dsManualSetReady: z3.boolean().nullish(),
  dsSource: z3.string().nullish(),
  enableSecret: z3.boolean().nullish(),
  fallbackClaimKeys: z3.array(z3.string()).nullish(),
  grpcSessionConfig: ExtendConfiguration.nullish(),
  immutableStorage: z3.boolean().nullish(),
  inactiveTimeout: z3.number().int(),
  inviteTimeout: z3.number().int(),
  joinability: z3.string(),
  leaderElectionGracePeriod: z3.number().int().nullish(),
  manualRejoin: z3.boolean().nullish(),
  maxActiveSessions: z3.number().int().nullish(),
  maxPlayers: z3.number().int(),
  minPlayers: z3.number().int(),
  name: z3.string(),
  persistent: z3.boolean(),
  preferredClaimKeys: z3.array(z3.string()).nullish(),
  requestedRegions: z3.array(z3.string()),
  textChat: z3.boolean(),
  tieTeamsSessionLifetime: z3.boolean().nullish(),
  type: z3.string()
});

// src/generated-definitions/CreateGameSessionRequest.ts
import { z as z5 } from "zod";

// src/generated-definitions/SessionStorageRequest.ts
import { z as z4 } from "zod";
var SessionStorageRequest = z4.object({ leader: z4.record(z4.any()) });

// src/generated-definitions/CreateGameSessionRequest.ts
var CreateGameSessionRequest = z5.object({
  appName: z5.string().nullish(),
  attributes: z5.record(z5.any()),
  autoJoin: z5.boolean().nullish(),
  backfillTicketID: z5.string(),
  clientVersion: z5.string(),
  configurationName: z5.string(),
  customURLGRPC: z5.string().nullish(),
  deployment: z5.string(),
  dsSource: z5.string().nullish(),
  fallbackClaimKeys: z5.array(z5.string()).nullish(),
  inactiveTimeout: z5.number().int(),
  inviteTimeout: z5.number().int(),
  joinability: z5.string(),
  matchPool: z5.string(),
  maxPlayers: z5.number().int(),
  minPlayers: z5.number().int(),
  preferredClaimKeys: z5.array(z5.string()).nullish(),
  requestedRegions: z5.array(z5.string()),
  serverName: z5.string(),
  storage: SessionStorageRequest.nullish(),
  teams: z5.array(Team),
  textChat: z5.boolean(),
  ticketIDs: z5.array(z5.string()),
  tieTeamsSessionLifetime: z5.boolean().nullish(),
  type: z5.string()
});

// src/generated-definitions/CreatePartyRequest.ts
import { z as z7 } from "zod";

// src/generated-definitions/RequestMember.ts
import { z as z6 } from "zod";
var RequestMember = z6.object({ ID: z6.string(), PlatformID: z6.string(), PlatformUserID: z6.string() });

// src/generated-definitions/CreatePartyRequest.ts
var CreatePartyRequest = z7.object({
  attributes: z7.record(z7.any()),
  configurationName: z7.string(),
  inactiveTimeout: z7.number().int(),
  inviteTimeout: z7.number().int(),
  joinability: z7.string(),
  maxPlayers: z7.number().int(),
  members: z7.array(RequestMember),
  minPlayers: z7.number().int(),
  textChat: z7.boolean(),
  type: z7.string()
});

// src/generated-definitions/DeleteBulkGameSessionRequest.ts
import { z as z8 } from "zod";
var DeleteBulkGameSessionRequest = z8.object({ ids: z8.array(z8.string()) });

// src/generated-definitions/Error.ts
import { z as z9 } from "zod";
var Error = z9.object({
  attributes: z9.record(z9.string()),
  errorCode: z9.number().int(),
  errorMessage: z9.string(),
  message: z9.string(),
  name: z9.string()
});

// src/generated-definitions/JoinByCodeRequest.ts
import { z as z10 } from "zod";
var JoinByCodeRequest = z10.object({ code: z10.string() });

// src/generated-definitions/PlayerAttributesRequestBody.ts
import { z as z11 } from "zod";
var PlayerAttributesRequestBody = z11.object({
  crossplayEnabled: z11.boolean(),
  currentPlatform: z11.string(),
  data: z11.record(z11.any()),
  platforms: z11.array(UserPlatformInfo),
  roles: z11.array(z11.string()).nullish(),
  simultaneousPlatform: z11.string()
});

// src/generated-definitions/PlayersCurrentPlatformRequest.ts
import { z as z12 } from "zod";
var PlayersCurrentPlatformRequest = z12.object({ userIDs: z12.array(z12.string()) });

// src/generated-definitions/PromoteLeaderRequest.ts
import { z as z13 } from "zod";
var PromoteLeaderRequest = z13.object({ leaderID: z13.string() });

// src/generated-definitions/PutGlobalConfigurationRequest.ts
import { z as z14 } from "zod";
var PutGlobalConfigurationRequest = z14.object({
  metricExcludedNamespaces: z14.array(z14.string()),
  regionRetryMapping: z14.record(z14.array(z14.string())),
  regionURLMapping: z14.array(z14.string()),
  testGameMode: z14.string(),
  testRegionURLMapping: z14.array(z14.string()),
  testTargetUserIDs: z14.array(z14.string())
});

// src/generated-definitions/PutPlatformCredentialsRequest.ts
import { z as z15 } from "zod";
var PutPlatformCredentialsRequest = z15.object({ psn: PsnAppServerCredentials });

// src/generated-definitions/RequestReconcileMaxActiveSession.ts
import { z as z16 } from "zod";
var RequestReconcileMaxActiveSession = z16.object({ userID: z16.string() });

// src/generated-definitions/SessionInviteRequest.ts
import { z as z17 } from "zod";
var SessionInviteRequest = z17.object({ platformID: z17.string(), userID: z17.string() });

// src/generated-definitions/SetDsReadyRequest.ts
import { z as z18 } from "zod";
var SetDsReadyRequest = z18.object({ ready: z18.boolean() });

// src/generated-definitions/UpdateConfigurationTemplateRequest.ts
import { z as z19 } from "zod";
var UpdateConfigurationTemplateRequest = z19.object({
  NativeSessionSetting: NativeSessionSetting.nullish(),
  PSNBaseUrl: z19.string().nullish(),
  appName: z19.string().nullish(),
  attributes: z19.record(z19.any()).nullish(),
  autoJoin: z19.boolean().nullish(),
  autoLeaveSession: z19.boolean().nullish(),
  clientVersion: z19.string(),
  customURLGRPC: z19.string().nullish(),
  deployment: z19.string(),
  disableCodeGeneration: z19.boolean().nullish(),
  disableResendInvite: z19.boolean().nullish(),
  dsManualSetReady: z19.boolean().nullish(),
  dsSource: z19.string().nullish(),
  enableSecret: z19.boolean().nullish(),
  fallbackClaimKeys: z19.array(z19.string()).nullish(),
  grpcSessionConfig: ExtendConfiguration.nullish(),
  immutableStorage: z19.boolean().nullish(),
  inactiveTimeout: z19.number().int(),
  inviteTimeout: z19.number().int(),
  joinability: z19.string(),
  leaderElectionGracePeriod: z19.number().int().nullish(),
  manualRejoin: z19.boolean().nullish(),
  maxActiveSessions: z19.number().int().nullish(),
  maxPlayers: z19.number().int(),
  minPlayers: z19.number().int(),
  name: z19.string(),
  persistent: z19.boolean(),
  preferredClaimKeys: z19.array(z19.string()).nullish(),
  requestedRegions: z19.array(z19.string()),
  textChat: z19.boolean(),
  tieTeamsSessionLifetime: z19.boolean().nullish(),
  type: z19.string()
});

// src/generated-definitions/UpdateGameSessionBackfillRequest.ts
import { z as z20 } from "zod";
var UpdateGameSessionBackfillRequest = z20.object({ backfillTicketID: z20.string() });

// src/generated-definitions/UpdateGameSessionRequest.ts
import { z as z21 } from "zod";
var UpdateGameSessionRequest = z21.object({
  attributes: z21.record(z21.any()),
  backfillTicketID: z21.string(),
  clientVersion: z21.string(),
  deployment: z21.string(),
  fallbackClaimKeys: z21.array(z21.string()).nullish(),
  inactiveTimeout: z21.number().int(),
  inviteTimeout: z21.number().int(),
  joinability: z21.string(),
  matchPool: z21.string(),
  maxPlayers: z21.number().int(),
  minPlayers: z21.number().int(),
  preferredClaimKeys: z21.array(z21.string()).nullish(),
  requestedRegions: z21.array(z21.string()),
  teams: z21.array(Team),
  ticketIDs: z21.array(z21.string()),
  tieTeamsSessionLifetime: z21.boolean().nullish(),
  type: z21.string(),
  version: z21.number().int()
});

// src/generated-definitions/UpdatePartyRequest.ts
import { z as z22 } from "zod";
var UpdatePartyRequest = z22.object({
  attributes: z22.record(z22.any()),
  inactiveTimeout: z22.number().int(),
  inviteTimeout: z22.number().int(),
  joinability: z22.string(),
  maxPlayers: z22.number().int(),
  minPlayers: z22.number().int(),
  type: z22.string(),
  version: z22.number().int()
});

// package.json
var name = "@accelbyte/sdk-session";
var version = "5.0.4";
var author = "AccelByte Inc";

// src/Session.ts
console.log(`${name}@${version}`);
var apis = {
  ConfigAdminApi,
  DsmcDefaultConfigurationAdminApi,
  EnvironmentVariableAdminApi,
  GlobalConfigurationAdminApi,
  PartyAdminApi,
  ConfigurationTemplateAdminApi,
  GameSessionAdminApi,
  RecentPlayerAdminApi,
  NativeSessionAdminApi,
  PlayerAdminApi,
  PlatformCredentialAdminApi,
  SessionStorageAdminApi,
  CertificateAdminApi,
  MaxActiveAdminApi,
  PartyApi,
  GameSessionApi,
  RecentPlayerApi,
  PlayerApi,
  SessionStorageApi,
  version: () => console.log({
    version,
    name,
    author
  })
};
var Session = apis;
export {
  AppendTeamGameSessionRequest,
  CertificateAdmin$,
  CertificateAdminApi,
  ConfigAdmin$,
  ConfigAdminApi,
  ConfigAlertRequestCreate,
  ConfigAlertResponse,
  Configuration,
  ConfigurationTemplateAdmin$,
  ConfigurationTemplateAdminApi,
  ConfigurationTemplateResponse,
  ConfigurationTemplatesResponse,
  CreateConfigurationTemplateRequest,
  CreateGameSessionRequest,
  CreatePartyRequest,
  DefaultDsmcConfig,
  DeleteBulkGameSessionRequest,
  DeleteBulkGameSessionsApiResponse,
  DsInformationResponse,
  DsmConfigRecord,
  DsmcDefaultConfigurationAdmin$,
  DsmcDefaultConfigurationAdminApi,
  EnvironmentVariableAdmin$,
  EnvironmentVariableAdminApi,
  EnvironmentVariableListResponse,
  EnvironmentVariableResponse,
  Error,
  ExtendConfiguration,
  GameServer,
  GameSession$,
  GameSessionAdmin$,
  GameSessionAdminApi,
  GameSessionApi,
  GameSessionQueryResponse,
  GameSessionResponse,
  GlobalConfigurationAdmin$,
  GlobalConfigurationAdminApi,
  GlobalConfigurationResponse,
  JoinByCodeRequest,
  KickResponse,
  MaxActiveAdmin$,
  MaxActiveAdminApi,
  MemberActiveSession,
  NativeSession,
  NativeSessionAdmin$,
  NativeSessionAdminApi,
  NativeSessionMember,
  NativeSessionPagingResponse,
  NativeSessionSetting,
  Pagination,
  Party$,
  PartyAdmin$,
  PartyAdminApi,
  PartyApi,
  PartyMembers,
  PartyQueryResponse,
  PartySessionResponse,
  PlatformCredentialAdmin$,
  PlatformCredentialAdminApi,
  PlatformCredentials,
  Player$,
  PlayerAdmin$,
  PlayerAdminApi,
  PlayerApi,
  PlayerAttributesRequestBody,
  PlayerAttributesResponseBody,
  PlayerAttributesResponseBodyArray,
  PlayerPlatform,
  PlayersCurrentPlatformRequest,
  PlayersCurrentPlatformResponse,
  PortConfigurationAms,
  PromoteLeaderRequest,
  PsnAppServerCredentials,
  PublicConfiguration,
  PutGlobalConfigurationRequest,
  PutPlatformCredentialsRequest,
  RecentPlayer$,
  RecentPlayerAdmin$,
  RecentPlayerAdminApi,
  RecentPlayerApi,
  RecentPlayerQueryResponse,
  RequestMember,
  RequestReconcileMaxActiveSession,
  ResponseDeleteBulkGameSessions,
  ServerSecret,
  Session,
  SessionInviteRequest,
  SessionInviteResponse,
  SessionStorage$,
  SessionStorageAdmin$,
  SessionStorageAdminApi,
  SessionStorageApi,
  SessionStorageRequest,
  SetDsReadyRequest,
  Team,
  UpdateConfigurationTemplateRequest,
  UpdateGameSessionBackfillRequest,
  UpdateGameSessionMemberStatusResponse,
  UpdateGameSessionRequest,
  UpdatePartyRequest,
  UserInfoResponse,
  UserPlatformInfo,
  UserResponse
};
