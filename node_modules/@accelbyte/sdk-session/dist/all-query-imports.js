import {
  CertificateAdminApi,
  ConfigAdminApi,
  ConfigurationTemplateAdminApi,
  DsmcDefaultConfigurationAdminApi,
  EnvironmentVariableAdminApi,
  GameSessionAdminApi,
  GameSessionApi,
  GlobalConfigurationAdminApi,
  MaxActiveAdminApi,
  NativeSessionAdminApi,
  PartyAdminApi,
  PartyApi,
  PlatformCredentialAdminApi,
  PlayerAdminApi,
  PlayerApi,
  RecentPlayerAdminApi,
  RecentPlayerApi,
  SessionStorageAdminApi,
  SessionStorageApi
} from "./chunk-4LGPC42K.js";

// src/generated-admin/queries/CertificateAdmin.query.ts
import { useMutation } from "@tanstack/react-query";
var Key_CertificateAdmin = /* @__PURE__ */ ((Key_CertificateAdmin2) => {
  Key_CertificateAdmin2["CertificatePfxPlatformXbl"] = "Session.CertificateAdmin.CertificatePfxPlatformXbl";
  return Key_CertificateAdmin2;
})(Key_CertificateAdmin || {});
var useCertificateAdminApi_UpdateCertificatePfxPlatformXblMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await CertificateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateCertificatePfxPlatformXbl(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Session.CertificateAdmin.CertificatePfxPlatformXbl" /* CertificatePfxPlatformXbl */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ConfigAdmin.query.ts
import { useMutation as useMutation2, useQuery } from "@tanstack/react-query";
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["ConfigLog"] = "Session.ConfigAdmin.ConfigLog";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_GetConfigLog = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfigLog();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Session.ConfigAdmin.ConfigLog" /* ConfigLog */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfigLogMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfigLog(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Session.ConfigAdmin.ConfigLog" /* ConfigLog */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/ConfigurationTemplateAdmin.query.ts
import { useMutation as useMutation3, useQuery as useQuery2 } from "@tanstack/react-query";
var Key_ConfigurationTemplateAdmin = /* @__PURE__ */ ((Key_ConfigurationTemplateAdmin2) => {
  Key_ConfigurationTemplateAdmin2["Dsconfigs"] = "Session.ConfigurationTemplateAdmin.Dsconfigs";
  Key_ConfigurationTemplateAdmin2["Configuration"] = "Session.ConfigurationTemplateAdmin.Configuration";
  Key_ConfigurationTemplateAdmin2["Configurations"] = "Session.ConfigurationTemplateAdmin.Configurations";
  Key_ConfigurationTemplateAdmin2["DsconfigsSync"] = "Session.ConfigurationTemplateAdmin.DsconfigsSync";
  Key_ConfigurationTemplateAdmin2["AlertsConfiguration"] = "Session.ConfigurationTemplateAdmin.AlertsConfiguration";
  Key_ConfigurationTemplateAdmin2["AlertsConfiguration_ByNS"] = "Session.ConfigurationTemplateAdmin.AlertsConfiguration_ByNS";
  Key_ConfigurationTemplateAdmin2["Configuration_ByName"] = "Session.ConfigurationTemplateAdmin.Configuration_ByName";
  return Key_ConfigurationTemplateAdmin2;
})(Key_ConfigurationTemplateAdmin || {});
var useConfigurationTemplateAdminApi_GetDsconfigs = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigurationTemplateAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDsconfigs();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Session.ConfigurationTemplateAdmin.Dsconfigs" /* Dsconfigs */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigurationTemplateAdminApi_CreateConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigurationTemplateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).createConfiguration(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Session.ConfigurationTemplateAdmin.Configuration" /* Configuration */],
    mutationFn,
    ...options
  });
};
var useConfigurationTemplateAdminApi_GetConfigurations = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigurationTemplateAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getConfigurations(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Session.ConfigurationTemplateAdmin.Configurations" /* Configurations */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigurationTemplateAdminApi_GetDsconfigsSync = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigurationTemplateAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDsconfigsSync();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Session.ConfigurationTemplateAdmin.DsconfigsSync" /* DsconfigsSync */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigurationTemplateAdminApi_DeleteAlertsConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigurationTemplateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteAlertsConfiguration();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Session.ConfigurationTemplateAdmin.AlertsConfiguration" /* AlertsConfiguration */],
    mutationFn,
    ...options
  });
};
var useConfigurationTemplateAdminApi_GetAlertsConfiguration = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigurationTemplateAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getAlertsConfiguration();
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Session.ConfigurationTemplateAdmin.AlertsConfiguration" /* AlertsConfiguration */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigurationTemplateAdminApi_UpdateAlertsConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigurationTemplateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAlertsConfiguration(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Session.ConfigurationTemplateAdmin.AlertsConfiguration" /* AlertsConfiguration */],
    mutationFn,
    ...options
  });
};
var useConfigurationTemplateAdminApi_UpdateAlertsConfiguration_ByNSMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigurationTemplateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateAlertsConfiguration_ByNS(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Session.ConfigurationTemplateAdmin.AlertsConfiguration_ByNS" /* AlertsConfiguration_ByNS */],
    mutationFn,
    ...options
  });
};
var useConfigurationTemplateAdminApi_DeleteConfiguration_ByNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigurationTemplateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteConfiguration_ByName(input.name);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Session.ConfigurationTemplateAdmin.Configuration_ByName" /* Configuration_ByName */],
    mutationFn,
    ...options
  });
};
var useConfigurationTemplateAdminApi_GetConfiguration_ByName = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigurationTemplateAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getConfiguration_ByName(input2.name);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Session.ConfigurationTemplateAdmin.Configuration_ByName" /* Configuration_ByName */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigurationTemplateAdminApi_UpdateConfiguration_ByNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigurationTemplateAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateConfiguration_ByName(input.name, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation3({
    mutationKey: ["Session.ConfigurationTemplateAdmin.Configuration_ByName" /* Configuration_ByName */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/DsmcDefaultConfigurationAdmin.query.ts
import { useQuery as useQuery3 } from "@tanstack/react-query";
var Key_DsmcDefaultConfigurationAdmin = /* @__PURE__ */ ((Key_DsmcDefaultConfigurationAdmin2) => {
  Key_DsmcDefaultConfigurationAdmin2["DsconfigsDefault"] = "Session.DsmcDefaultConfigurationAdmin.DsconfigsDefault";
  return Key_DsmcDefaultConfigurationAdmin2;
})(Key_DsmcDefaultConfigurationAdmin || {});
var useDsmcDefaultConfigurationAdminApi_GetDsconfigsDefault = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await DsmcDefaultConfigurationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getDsconfigsDefault();
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Session.DsmcDefaultConfigurationAdmin.DsconfigsDefault" /* DsconfigsDefault */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/EnvironmentVariableAdmin.query.ts
import { useQuery as useQuery4 } from "@tanstack/react-query";
var Key_EnvironmentVariableAdmin = /* @__PURE__ */ ((Key_EnvironmentVariableAdmin2) => {
  Key_EnvironmentVariableAdmin2["EnvironmentVariables"] = "Session.EnvironmentVariableAdmin.EnvironmentVariables";
  return Key_EnvironmentVariableAdmin2;
})(Key_EnvironmentVariableAdmin || {});
var useEnvironmentVariableAdminApi_GetEnvironmentVariables = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await EnvironmentVariableAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getEnvironmentVariables();
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Session.EnvironmentVariableAdmin.EnvironmentVariables" /* EnvironmentVariables */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/GameSessionAdmin.query.ts
import { useMutation as useMutation4, useQuery as useQuery5 } from "@tanstack/react-query";
var Key_GameSessionAdmin = /* @__PURE__ */ ((Key_GameSessionAdmin2) => {
  Key_GameSessionAdmin2["Gamesessions"] = "Session.GameSessionAdmin.Gamesessions";
  Key_GameSessionAdmin2["Gamesession"] = "Session.GameSessionAdmin.Gamesession";
  Key_GameSessionAdmin2["GamesessionBulk"] = "Session.GameSessionAdmin.GamesessionBulk";
  Key_GameSessionAdmin2["D_BySessionId"] = "Session.GameSessionAdmin.D_BySessionId";
  Key_GameSessionAdmin2["Kick_BySessionId_ByMemberId"] = "Session.GameSessionAdmin.Kick_BySessionId_ByMemberId";
  Key_GameSessionAdmin2["Statu_BySessionId_ByMemberId_ByStatusType"] = "Session.GameSessionAdmin.Statu_BySessionId_ByMemberId_ByStatusType";
  return Key_GameSessionAdmin2;
})(Key_GameSessionAdmin || {});
var useGameSessionAdminApi_GetGamesessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Session.GameSessionAdmin.Gamesessions" /* Gamesessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionAdminApi_FetchGamesession = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchGamesession();
    callback && callback(response);
    return response.data;
  };
  return useQuery5({
    queryKey: ["Session.GameSessionAdmin.Gamesession" /* Gamesession */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionAdminApi_DeleteGamesessionBulkMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteGamesessionBulk(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Session.GameSessionAdmin.GamesessionBulk" /* GamesessionBulk */],
    mutationFn,
    ...options
  });
};
var useGameSessionAdminApi_UpdateD_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateD_BySessionId(
      input.sessionId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Session.GameSessionAdmin.D_BySessionId" /* D_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionAdminApi_DeleteKick_BySessionId_ByMemberIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteKick_BySessionId_ByMemberId(input.sessionId, input.memberId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Session.GameSessionAdmin.Kick_BySessionId_ByMemberId" /* Kick_BySessionId_ByMemberId */],
    mutationFn,
    ...options
  });
};
var useGameSessionAdminApi_UpdateStatu_BySessionId_ByMemberId_ByStatusTypeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateStatu_BySessionId_ByMemberId_ByStatusType(input.sessionId, input.memberId, input.statusType);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation4({
    mutationKey: ["Session.GameSessionAdmin.Statu_BySessionId_ByMemberId_ByStatusType" /* Statu_BySessionId_ByMemberId_ByStatusType */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/GlobalConfigurationAdmin.query.ts
import { useMutation as useMutation5, useQuery as useQuery6 } from "@tanstack/react-query";
var Key_GlobalConfigurationAdmin = /* @__PURE__ */ ((Key_GlobalConfigurationAdmin2) => {
  Key_GlobalConfigurationAdmin2["GlobalConfiguration"] = "Session.GlobalConfigurationAdmin.GlobalConfiguration";
  Key_GlobalConfigurationAdmin2["GlobalConfigurations"] = "Session.GlobalConfigurationAdmin.GlobalConfigurations";
  return Key_GlobalConfigurationAdmin2;
})(Key_GlobalConfigurationAdmin || {});
var useGlobalConfigurationAdminApi_DeleteGlobalConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GlobalConfigurationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteGlobalConfiguration();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Session.GlobalConfigurationAdmin.GlobalConfiguration" /* GlobalConfiguration */],
    mutationFn,
    ...options
  });
};
var useGlobalConfigurationAdminApi_GetGlobalConfigurations = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GlobalConfigurationAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGlobalConfigurations();
    callback && callback(response);
    return response.data;
  };
  return useQuery6({
    queryKey: ["Session.GlobalConfigurationAdmin.GlobalConfigurations" /* GlobalConfigurations */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGlobalConfigurationAdminApi_UpdateGlobalConfigurationMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GlobalConfigurationAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateGlobalConfiguration(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation5({
    mutationKey: ["Session.GlobalConfigurationAdmin.GlobalConfiguration" /* GlobalConfiguration */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/MaxActiveAdmin.query.ts
import { useMutation as useMutation6, useQuery as useQuery7 } from "@tanstack/react-query";
var Key_MaxActiveAdmin = /* @__PURE__ */ ((Key_MaxActiveAdmin2) => {
  Key_MaxActiveAdmin2["Reconcile_ByName"] = "Session.MaxActiveAdmin.Reconcile_ByName";
  Key_MaxActiveAdmin2["Memberactivesession_ByName_ByUserId"] = "Session.MaxActiveAdmin.Memberactivesession_ByName_ByUserId";
  return Key_MaxActiveAdmin2;
})(Key_MaxActiveAdmin || {});
var useMaxActiveAdminApi_UpdateReconcile_ByNameMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await MaxActiveAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateReconcile_ByName(
      input.name,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation6({
    mutationKey: ["Session.MaxActiveAdmin.Reconcile_ByName" /* Reconcile_ByName */],
    mutationFn,
    ...options
  });
};
var useMaxActiveAdminApi_GetMemberactivesession_ByName_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await MaxActiveAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMemberactivesession_ByName_ByUserId(input2.name, input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery7({
    queryKey: ["Session.MaxActiveAdmin.Memberactivesession_ByName_ByUserId" /* Memberactivesession_ByName_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/NativeSessionAdmin.query.ts
import { useQuery as useQuery8 } from "@tanstack/react-query";
var Key_NativeSessionAdmin = /* @__PURE__ */ ((Key_NativeSessionAdmin2) => {
  Key_NativeSessionAdmin2["NativeSessions"] = "Session.NativeSessionAdmin.NativeSessions";
  return Key_NativeSessionAdmin2;
})(Key_NativeSessionAdmin || {});
var useNativeSessionAdminApi_GetNativeSessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await NativeSessionAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getNativeSessions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery8({
    queryKey: ["Session.NativeSessionAdmin.NativeSessions" /* NativeSessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/PartyAdmin.query.ts
import { useMutation as useMutation7, useQuery as useQuery9 } from "@tanstack/react-query";
var Key_PartyAdmin = /* @__PURE__ */ ((Key_PartyAdmin2) => {
  Key_PartyAdmin2["Parties"] = "Session.PartyAdmin.Parties";
  Key_PartyAdmin2["NativeSync_ByUserId"] = "Session.PartyAdmin.NativeSync_ByUserId";
  return Key_PartyAdmin2;
})(Key_PartyAdmin || {});
var usePartyAdminApi_GetParties = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PartyAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getParties(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery9({
    queryKey: ["Session.PartyAdmin.Parties" /* Parties */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePartyAdminApi_CreateNativeSync_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createNativeSync_ByUserId(
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation7({
    mutationKey: ["Session.PartyAdmin.NativeSync_ByUserId" /* NativeSync_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PlatformCredentialAdmin.query.ts
import { useMutation as useMutation8, useQuery as useQuery10 } from "@tanstack/react-query";
var Key_PlatformCredentialAdmin = /* @__PURE__ */ ((Key_PlatformCredentialAdmin2) => {
  Key_PlatformCredentialAdmin2["PlatformCredential"] = "Session.PlatformCredentialAdmin.PlatformCredential";
  Key_PlatformCredentialAdmin2["PlatformCredentials"] = "Session.PlatformCredentialAdmin.PlatformCredentials";
  return Key_PlatformCredentialAdmin2;
})(Key_PlatformCredentialAdmin || {});
var usePlatformCredentialAdminApi_DeletePlatformCredentialMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlatformCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deletePlatformCredential();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Session.PlatformCredentialAdmin.PlatformCredential" /* PlatformCredential */],
    mutationFn,
    ...options
  });
};
var usePlatformCredentialAdminApi_GetPlatformCredentials = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlatformCredentialAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getPlatformCredentials();
    callback && callback(response);
    return response.data;
  };
  return useQuery10({
    queryKey: ["Session.PlatformCredentialAdmin.PlatformCredentials" /* PlatformCredentials */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlatformCredentialAdminApi_UpdatePlatformCredentialMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlatformCredentialAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updatePlatformCredential(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation8({
    mutationKey: ["Session.PlatformCredentialAdmin.PlatformCredential" /* PlatformCredential */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/PlayerAdmin.query.ts
import { useQuery as useQuery11 } from "@tanstack/react-query";
var Key_PlayerAdmin = /* @__PURE__ */ ((Key_PlayerAdmin2) => {
  Key_PlayerAdmin2["UsersAttributes"] = "Session.PlayerAdmin.UsersAttributes";
  Key_PlayerAdmin2["Attributes_ByUserId"] = "Session.PlayerAdmin.Attributes_ByUserId";
  return Key_PlayerAdmin2;
})(Key_PlayerAdmin || {});
var usePlayerAdminApi_GetUsersAttributes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersAttributes(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Session.PlayerAdmin.UsersAttributes" /* UsersAttributes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerAdminApi_GetAttributes_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getAttributes_ByUserId(
      input2.userId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery11({
    queryKey: ["Session.PlayerAdmin.Attributes_ByUserId" /* Attributes_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/RecentPlayerAdmin.query.ts
import { useQuery as useQuery12 } from "@tanstack/react-query";
var Key_RecentPlayerAdmin = /* @__PURE__ */ ((Key_RecentPlayerAdmin2) => {
  Key_RecentPlayerAdmin2["RecentPlayer"] = "Session.RecentPlayerAdmin.RecentPlayer";
  Key_RecentPlayerAdmin2["RecentTeamPlayer"] = "Session.RecentPlayerAdmin.RecentTeamPlayer";
  return Key_RecentPlayerAdmin2;
})(Key_RecentPlayerAdmin || {});
var useRecentPlayerAdminApi_GetRecentPlayer = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecentPlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecentPlayer(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Session.RecentPlayerAdmin.RecentPlayer" /* RecentPlayer */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecentPlayerAdminApi_GetRecentTeamPlayer = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecentPlayerAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecentTeamPlayer(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery12({
    queryKey: ["Session.RecentPlayerAdmin.RecentTeamPlayer" /* RecentTeamPlayer */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/SessionStorageAdmin.query.ts
import { useMutation as useMutation9, useQuery as useQuery13 } from "@tanstack/react-query";
var Key_SessionStorageAdmin = /* @__PURE__ */ ((Key_SessionStorageAdmin2) => {
  Key_SessionStorageAdmin2["Storage_BySessionId"] = "Session.SessionStorageAdmin.Storage_BySessionId";
  Key_SessionStorageAdmin2["StorageUser_BySessionId_ByUserId"] = "Session.SessionStorageAdmin.StorageUser_BySessionId_ByUserId";
  return Key_SessionStorageAdmin2;
})(Key_SessionStorageAdmin || {});
var useSessionStorageAdminApi_DeleteStorage_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionStorageAdminApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteStorage_BySessionId(input.sessionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation9({
    mutationKey: ["Session.SessionStorageAdmin.Storage_BySessionId" /* Storage_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionStorageAdminApi_GetStorage_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionStorageAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getStorage_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Session.SessionStorageAdmin.Storage_BySessionId" /* Storage_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useSessionStorageAdminApi_GetStorageUser_BySessionId_ByUserId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await SessionStorageAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getStorageUser_BySessionId_ByUserId(input2.sessionId, input2.userId);
    callback && callback(response);
    return response.data;
  };
  return useQuery13({
    queryKey: ["Session.SessionStorageAdmin.StorageUser_BySessionId_ByUserId" /* StorageUser_BySessionId_ByUserId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/GameSession.query.ts
import { useMutation as useMutation10, useQuery as useQuery14 } from "@tanstack/react-query";
var Key_GameSession = /* @__PURE__ */ ((Key_GameSession2) => {
  Key_GameSession2["Gamesession"] = "Session.GameSession.Gamesession";
  Key_GameSession2["Gamesession_ByNS"] = "Session.GameSession.Gamesession_ByNS";
  Key_GameSession2["UsersMeGamesessions"] = "Session.GameSession.UsersMeGamesessions";
  Key_GameSession2["GamesessionJoinCode"] = "Session.GameSession.GamesessionJoinCode";
  Key_GameSession2["Gamesession_BySessionId"] = "Session.GameSession.Gamesession_BySessionId";
  Key_GameSession2["Code_BySessionId"] = "Session.GameSession.Code_BySessionId";
  Key_GameSession2["Join_BySessionId"] = "Session.GameSession.Join_BySessionId";
  Key_GameSession2["Leave_BySessionId"] = "Session.GameSession.Leave_BySessionId";
  Key_GameSession2["Team_BySessionId"] = "Session.GameSession.Team_BySessionId";
  Key_GameSession2["GamesessionServer_ByPodName"] = "Session.GameSession.GamesessionServer_ByPodName";
  Key_GameSession2["Invite_BySessionId"] = "Session.GameSession.Invite_BySessionId";
  Key_GameSession2["Leader_BySessionId"] = "Session.GameSession.Leader_BySessionId";
  Key_GameSession2["Reject_BySessionId"] = "Session.GameSession.Reject_BySessionId";
  Key_GameSession2["Secret_BySessionId"] = "Session.GameSession.Secret_BySessionId";
  Key_GameSession2["Backfill_BySessionId"] = "Session.GameSession.Backfill_BySessionId";
  Key_GameSession2["Cancel_BySessionId_ByUserId"] = "Session.GameSession.Cancel_BySessionId_ByUserId";
  Key_GameSession2["Kick_BySessionId_ByMemberId"] = "Session.GameSession.Kick_BySessionId_ByMemberId";
  return Key_GameSession2;
})(Key_GameSession || {});
var useGameSessionApi_CreateGamesessionMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createGamesession(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Gamesession" /* Gamesession */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_CreateGamesession_ByNSMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createGamesession_ByNS();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Gamesession_ByNS" /* Gamesession_ByNS */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_GetUsersMeGamesessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeGamesessions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Session.GameSession.UsersMeGamesessions" /* UsersMeGamesessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionApi_CreateGamesessionJoinCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createGamesessionJoinCode(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.GamesessionJoinCode" /* GamesessionJoinCode */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_DeleteGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteGamesession_BySessionId(input.sessionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesession_BySessionId(
      input2.sessionId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Session.GameSession.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionApi_PatchGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchGamesession_BySessionId(input.sessionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_UpdateGamesession_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).updateGamesession_BySessionId(input.sessionId, input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Gamesession_BySessionId" /* Gamesession_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_DeleteCode_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteCode_BySessionId(
      input.sessionId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Code_BySessionId" /* Code_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_UpdateCode_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateCode_BySessionId(
      input.sessionId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Code_BySessionId" /* Code_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_CreateJoin_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createJoin_BySessionId(
      input.sessionId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Join_BySessionId" /* Join_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_DeleteLeave_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteLeave_BySessionId(
      input.sessionId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Leave_BySessionId" /* Leave_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_UpdateTeam_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateTeam_BySessionId(
      input.sessionId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Team_BySessionId" /* Team_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_GetGamesessionServer_ByPodName = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesessionServer_ByPodName(input2.podName);
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Session.GameSession.GamesessionServer_ByPodName" /* GamesessionServer_ByPodName */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionApi_CreateInvite_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createInvite_BySessionId(
      input.sessionId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Invite_BySessionId" /* Invite_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_UpdateLeader_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateLeader_BySessionId(
      input.sessionId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Leader_BySessionId" /* Leader_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_DeleteReject_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteReject_BySessionId(
      input.sessionId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Reject_BySessionId" /* Reject_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_GetSecret_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getSecret_BySessionId(
      input2.sessionId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery14({
    queryKey: ["Session.GameSession.Secret_BySessionId" /* Secret_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionApi_UpdateBackfill_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateBackfill_BySessionId(
      input.sessionId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Backfill_BySessionId" /* Backfill_BySessionId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_DeleteCancel_BySessionId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteCancel_BySessionId_ByUserId(input.sessionId, input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Cancel_BySessionId_ByUserId" /* Cancel_BySessionId_ByUserId */],
    mutationFn,
    ...options
  });
};
var useGameSessionApi_DeleteKick_BySessionId_ByMemberIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await GameSessionApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).deleteKick_BySessionId_ByMemberId(input.sessionId, input.memberId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation10({
    mutationKey: ["Session.GameSession.Kick_BySessionId_ByMemberId" /* Kick_BySessionId_ByMemberId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Party.query.ts
import { useMutation as useMutation11, useQuery as useQuery15 } from "@tanstack/react-query";
var Key_Party = /* @__PURE__ */ ((Key_Party2) => {
  Key_Party2["Party"] = "Session.Party.Party";
  Key_Party2["UsersMeParties"] = "Session.Party.UsersMeParties";
  Key_Party2["Party_ByPartyId"] = "Session.Party.Party_ByPartyId";
  Key_Party2["Code_ByPartyId"] = "Session.Party.Code_ByPartyId";
  Key_Party2["Invite_ByPartyId"] = "Session.Party.Invite_ByPartyId";
  Key_Party2["Leader_ByPartyId"] = "Session.Party.Leader_ByPartyId";
  Key_Party2["PartyUserMeJoinCode"] = "Session.Party.PartyUserMeJoinCode";
  Key_Party2["UserMeJoin_ByPartyId"] = "Session.Party.UserMeJoin_ByPartyId";
  Key_Party2["UserMeLeave_ByPartyId"] = "Session.Party.UserMeLeave_ByPartyId";
  Key_Party2["UserMeReject_ByPartyId"] = "Session.Party.UserMeReject_ByPartyId";
  Key_Party2["Kick_ByPartyId_ByUserId"] = "Session.Party.Kick_ByPartyId_ByUserId";
  Key_Party2["Cancel_ByPartyId_ByUserId"] = "Session.Party.Cancel_ByPartyId_ByUserId";
  return Key_Party2;
})(Key_Party || {});
var usePartyApi_CreatePartyMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createParty(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Party" /* Party */],
    mutationFn,
    ...options
  });
};
var usePartyApi_GetUsersMeParties = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PartyApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeParties(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Session.Party.UsersMeParties" /* UsersMeParties */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePartyApi_GetParty_ByPartyId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PartyApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getParty_ByPartyId(input2.partyId);
    callback && callback(response);
    return response.data;
  };
  return useQuery15({
    queryKey: ["Session.Party.Party_ByPartyId" /* Party_ByPartyId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePartyApi_PatchParty_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchParty_ByPartyId(
      input.partyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Party_ByPartyId" /* Party_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_UpdateParty_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateParty_ByPartyId(
      input.partyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Party_ByPartyId" /* Party_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_DeleteCode_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteCode_ByPartyId(
      input.partyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Code_ByPartyId" /* Code_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_UpdateCode_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateCode_ByPartyId(
      input.partyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Code_ByPartyId" /* Code_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_CreateInvite_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createInvite_ByPartyId(
      input.partyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Invite_ByPartyId" /* Invite_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_UpdateLeader_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).updateLeader_ByPartyId(
      input.partyId,
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Leader_ByPartyId" /* Leader_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_CreatePartyUserMeJoinCodeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createPartyUserMeJoinCode(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.PartyUserMeJoinCode" /* PartyUserMeJoinCode */],
    mutationFn,
    ...options
  });
};
var usePartyApi_CreateUserMeJoin_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeJoin_ByPartyId(
      input.partyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.UserMeJoin_ByPartyId" /* UserMeJoin_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_DeleteUserMeLeave_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUserMeLeave_ByPartyId(
      input.partyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.UserMeLeave_ByPartyId" /* UserMeLeave_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_DeleteUserMeReject_ByPartyIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUserMeReject_ByPartyId(
      input.partyId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.UserMeReject_ByPartyId" /* UserMeReject_ByPartyId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_DeleteKick_ByPartyId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteKick_ByPartyId_ByUserId(
      input.partyId,
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Kick_ByPartyId_ByUserId" /* Kick_ByPartyId_ByUserId */],
    mutationFn,
    ...options
  });
};
var usePartyApi_DeleteCancel_ByPartyId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PartyApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteCancel_ByPartyId_ByUserId(
      input.partyId,
      input.userId
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation11({
    mutationKey: ["Session.Party.Cancel_ByPartyId_ByUserId" /* Cancel_ByPartyId_ByUserId */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/Player.query.ts
import { useMutation as useMutation12, useQuery as useQuery16 } from "@tanstack/react-query";
var Key_Player = /* @__PURE__ */ ((Key_Player2) => {
  Key_Player2["UserBulkPlatform"] = "Session.Player.UserBulkPlatform";
  Key_Player2["UserMeAttribute"] = "Session.Player.UserMeAttribute";
  Key_Player2["UsersMeAttributes"] = "Session.Player.UsersMeAttributes";
  return Key_Player2;
})(Key_Player || {});
var usePlayerApi_FetchUserBulkPlatform = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).fetchUserBulkPlatform(
      input2.data
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Session.Player.UserBulkPlatform" /* UserBulkPlatform */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerApi_DeleteUserMeAttributeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).deleteUserMeAttribute();
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Session.Player.UserMeAttribute" /* UserMeAttribute */],
    mutationFn,
    ...options
  });
};
var usePlayerApi_GetUsersMeAttributes = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await PlayerApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getUsersMeAttributes();
    callback && callback(response);
    return response.data;
  };
  return useQuery16({
    queryKey: ["Session.Player.UsersMeAttributes" /* UsersMeAttributes */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var usePlayerApi_CreateUserMeAttributeMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await PlayerApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createUserMeAttribute(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation12({
    mutationKey: ["Session.Player.UserMeAttribute" /* UserMeAttribute */],
    mutationFn,
    ...options
  });
};

// src/generated-public/queries/RecentPlayer.query.ts
import { useQuery as useQuery17 } from "@tanstack/react-query";
var Key_RecentPlayer = /* @__PURE__ */ ((Key_RecentPlayer2) => {
  Key_RecentPlayer2["RecentPlayer"] = "Session.RecentPlayer.RecentPlayer";
  Key_RecentPlayer2["RecentTeamPlayer"] = "Session.RecentPlayer.RecentTeamPlayer";
  return Key_RecentPlayer2;
})(Key_RecentPlayer || {});
var useRecentPlayerApi_GetRecentPlayer = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecentPlayerApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecentPlayer(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Session.RecentPlayer.RecentPlayer" /* RecentPlayer */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useRecentPlayerApi_GetRecentTeamPlayer = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await RecentPlayerApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getRecentTeamPlayer(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery17({
    queryKey: ["Session.RecentPlayer.RecentTeamPlayer" /* RecentTeamPlayer */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/SessionStorage.query.ts
import { useMutation as useMutation13 } from "@tanstack/react-query";
var Key_SessionStorage = /* @__PURE__ */ ((Key_SessionStorage2) => {
  Key_SessionStorage2["StorageLeader_BySessionId"] = "Session.SessionStorage.StorageLeader_BySessionId";
  Key_SessionStorage2["StorageUser_BySessionId_ByUserId"] = "Session.SessionStorage.StorageUser_BySessionId_ByUserId";
  return Key_SessionStorage2;
})(Key_SessionStorage || {});
var useSessionStorageApi_PatchStorageLeader_BySessionIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionStorageApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchStorageLeader_BySessionId(input.sessionId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Session.SessionStorage.StorageLeader_BySessionId" /* StorageLeader_BySessionId */],
    mutationFn,
    ...options
  });
};
var useSessionStorageApi_PatchStorageUser_BySessionId_ByUserIdMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await SessionStorageApi(sdk, {
      coreConfig: input.coreConfig,
      axiosConfig: input.axiosConfig
    }).patchStorageUser_BySessionId_ByUserId(input.sessionId, input.userId);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation13({
    mutationKey: ["Session.SessionStorage.StorageUser_BySessionId_ByUserId" /* StorageUser_BySessionId_ByUserId */],
    mutationFn,
    ...options
  });
};
export {
  Key_CertificateAdmin,
  Key_ConfigAdmin,
  Key_ConfigurationTemplateAdmin,
  Key_DsmcDefaultConfigurationAdmin,
  Key_EnvironmentVariableAdmin,
  Key_GameSession,
  Key_GameSessionAdmin,
  Key_GlobalConfigurationAdmin,
  Key_MaxActiveAdmin,
  Key_NativeSessionAdmin,
  Key_Party,
  Key_PartyAdmin,
  Key_PlatformCredentialAdmin,
  Key_Player,
  Key_PlayerAdmin,
  Key_RecentPlayer,
  Key_RecentPlayerAdmin,
  Key_SessionStorage,
  Key_SessionStorageAdmin,
  useCertificateAdminApi_UpdateCertificatePfxPlatformXblMutation,
  useConfigAdminApi_GetConfigLog,
  useConfigAdminApi_PatchConfigLogMutation,
  useConfigurationTemplateAdminApi_CreateConfigurationMutation,
  useConfigurationTemplateAdminApi_DeleteAlertsConfigurationMutation,
  useConfigurationTemplateAdminApi_DeleteConfiguration_ByNameMutation,
  useConfigurationTemplateAdminApi_GetAlertsConfiguration,
  useConfigurationTemplateAdminApi_GetConfiguration_ByName,
  useConfigurationTemplateAdminApi_GetConfigurations,
  useConfigurationTemplateAdminApi_GetDsconfigs,
  useConfigurationTemplateAdminApi_GetDsconfigsSync,
  useConfigurationTemplateAdminApi_UpdateAlertsConfigurationMutation,
  useConfigurationTemplateAdminApi_UpdateAlertsConfiguration_ByNSMutation,
  useConfigurationTemplateAdminApi_UpdateConfiguration_ByNameMutation,
  useDsmcDefaultConfigurationAdminApi_GetDsconfigsDefault,
  useEnvironmentVariableAdminApi_GetEnvironmentVariables,
  useGameSessionAdminApi_DeleteGamesessionBulkMutation,
  useGameSessionAdminApi_DeleteKick_BySessionId_ByMemberIdMutation,
  useGameSessionAdminApi_FetchGamesession,
  useGameSessionAdminApi_GetGamesessions,
  useGameSessionAdminApi_UpdateD_BySessionIdMutation,
  useGameSessionAdminApi_UpdateStatu_BySessionId_ByMemberId_ByStatusTypeMutation,
  useGameSessionApi_CreateGamesessionJoinCodeMutation,
  useGameSessionApi_CreateGamesessionMutation,
  useGameSessionApi_CreateGamesession_ByNSMutation,
  useGameSessionApi_CreateInvite_BySessionIdMutation,
  useGameSessionApi_CreateJoin_BySessionIdMutation,
  useGameSessionApi_DeleteCancel_BySessionId_ByUserIdMutation,
  useGameSessionApi_DeleteCode_BySessionIdMutation,
  useGameSessionApi_DeleteGamesession_BySessionIdMutation,
  useGameSessionApi_DeleteKick_BySessionId_ByMemberIdMutation,
  useGameSessionApi_DeleteLeave_BySessionIdMutation,
  useGameSessionApi_DeleteReject_BySessionIdMutation,
  useGameSessionApi_GetGamesessionServer_ByPodName,
  useGameSessionApi_GetGamesession_BySessionId,
  useGameSessionApi_GetSecret_BySessionId,
  useGameSessionApi_GetUsersMeGamesessions,
  useGameSessionApi_PatchGamesession_BySessionIdMutation,
  useGameSessionApi_UpdateBackfill_BySessionIdMutation,
  useGameSessionApi_UpdateCode_BySessionIdMutation,
  useGameSessionApi_UpdateGamesession_BySessionIdMutation,
  useGameSessionApi_UpdateLeader_BySessionIdMutation,
  useGameSessionApi_UpdateTeam_BySessionIdMutation,
  useGlobalConfigurationAdminApi_DeleteGlobalConfigurationMutation,
  useGlobalConfigurationAdminApi_GetGlobalConfigurations,
  useGlobalConfigurationAdminApi_UpdateGlobalConfigurationMutation,
  useMaxActiveAdminApi_GetMemberactivesession_ByName_ByUserId,
  useMaxActiveAdminApi_UpdateReconcile_ByNameMutation,
  useNativeSessionAdminApi_GetNativeSessions,
  usePartyAdminApi_CreateNativeSync_ByUserIdMutation,
  usePartyAdminApi_GetParties,
  usePartyApi_CreateInvite_ByPartyIdMutation,
  usePartyApi_CreatePartyMutation,
  usePartyApi_CreatePartyUserMeJoinCodeMutation,
  usePartyApi_CreateUserMeJoin_ByPartyIdMutation,
  usePartyApi_DeleteCancel_ByPartyId_ByUserIdMutation,
  usePartyApi_DeleteCode_ByPartyIdMutation,
  usePartyApi_DeleteKick_ByPartyId_ByUserIdMutation,
  usePartyApi_DeleteUserMeLeave_ByPartyIdMutation,
  usePartyApi_DeleteUserMeReject_ByPartyIdMutation,
  usePartyApi_GetParty_ByPartyId,
  usePartyApi_GetUsersMeParties,
  usePartyApi_PatchParty_ByPartyIdMutation,
  usePartyApi_UpdateCode_ByPartyIdMutation,
  usePartyApi_UpdateLeader_ByPartyIdMutation,
  usePartyApi_UpdateParty_ByPartyIdMutation,
  usePlatformCredentialAdminApi_DeletePlatformCredentialMutation,
  usePlatformCredentialAdminApi_GetPlatformCredentials,
  usePlatformCredentialAdminApi_UpdatePlatformCredentialMutation,
  usePlayerAdminApi_GetAttributes_ByUserId,
  usePlayerAdminApi_GetUsersAttributes,
  usePlayerApi_CreateUserMeAttributeMutation,
  usePlayerApi_DeleteUserMeAttributeMutation,
  usePlayerApi_FetchUserBulkPlatform,
  usePlayerApi_GetUsersMeAttributes,
  useRecentPlayerAdminApi_GetRecentPlayer,
  useRecentPlayerAdminApi_GetRecentTeamPlayer,
  useRecentPlayerApi_GetRecentPlayer,
  useRecentPlayerApi_GetRecentTeamPlayer,
  useSessionStorageAdminApi_DeleteStorage_BySessionIdMutation,
  useSessionStorageAdminApi_GetStorageUser_BySessionId_ByUserId,
  useSessionStorageAdminApi_GetStorage_BySessionId,
  useSessionStorageApi_PatchStorageLeader_BySessionIdMutation,
  useSessionStorageApi_PatchStorageUser_BySessionId_ByUserIdMutation
};
