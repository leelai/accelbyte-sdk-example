import { AccelByteSDK, ApiError, SdkSetConfigParam } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { P as PlatformCredentials, C as Configuration, D as DsmConfigRecord, b as ConfigurationTemplateResponse, a as CreateConfigurationTemplateRequest, c as ConfigurationTemplatesResponse, d as ConfigAlertResponse, e as ConfigAlertRequestCreate, U as UpdateConfigurationTemplateRequest, f as DefaultDsmcConfig, E as EnvironmentVariableListResponse, G as GameSessionQueryResponse, h as DeleteBulkGameSessionsApiResponse, g as DeleteBulkGameSessionRequest, S as SetDsReadyRequest, i as UpdateGameSessionMemberStatusResponse, j as GlobalConfigurationResponse, k as PutGlobalConfigurationRequest, R as RequestReconcileMaxActiveSession, M as MemberActiveSession, N as NativeSessionPagingResponse, l as PartyQueryResponse, m as PutPlatformCredentialsRequest, n as PlayerAttributesResponseBodyArray, o as PlayerAttributesResponseBody, p as RecentPlayerQueryResponse, r as GameSessionResponse, q as CreateGameSessionRequest, J as JoinByCodeRequest, s as UpdateGameSessionRequest, A as AppendTeamGameSessionRequest, t as SessionInviteRequest, u as PromoteLeaderRequest, v as ServerSecret, w as UpdateGameSessionBackfillRequest, y as PartySessionResponse, x as CreatePartyRequest, z as UpdatePartyRequest, B as SessionInviteResponse, K as KickResponse, F as PlayersCurrentPlatformRequest, H as PlayersCurrentPlatformResponse, I as PlayerAttributesRequestBody } from './UpdatePartyRequest-DT8qhInr.js';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_CertificateAdmin {
    CertificatePfxPlatformXbl = "Session.CertificateAdmin.CertificatePfxPlatformXbl"
}
/**
 * Upload certificates for xbox. Certificate must be in the valid form of PFX format.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_CertificateAdmin.CertificatePfxPlatformXbl, input]
 * }
 * ```
 */
declare const useCertificateAdminApi_UpdateCertificatePfxPlatformXblMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformCredentials, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file: File;
        password: string | null;
        certname: string | null;
        description?: string | null;
    };
}>, "mutationKey">, callback?: (data: PlatformCredentials) => void) => UseMutationResult<PlatformCredentials, AxiosError<ApiError>, SdkSetConfigParam & {
    data: {
        file: File;
        password: string | null;
        certname: string | null;
        description?: string | null;
    };
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_ConfigAdmin {
    ConfigLog = "Session.ConfigAdmin.ConfigLog"
}
/**
 * Get Log Configuration.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigLog, input]
 * }
 * ```
 */
declare const useConfigAdminApi_GetConfigLog: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<Configuration, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Configuration>) => void) => UseQueryResult<Configuration, AxiosError<ApiError>>;
/**
 * Update Log Configuration.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigLog, input]
 * }
 * ```
 */
declare const useConfigAdminApi_PatchConfigLogMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<Configuration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: Configuration;
}>, "mutationKey">, callback?: (data: Configuration) => void) => UseMutationResult<Configuration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: Configuration;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_ConfigurationTemplateAdmin {
    Dsconfigs = "Session.ConfigurationTemplateAdmin.Dsconfigs",
    Configuration = "Session.ConfigurationTemplateAdmin.Configuration",
    Configurations = "Session.ConfigurationTemplateAdmin.Configurations",
    DsconfigsSync = "Session.ConfigurationTemplateAdmin.DsconfigsSync",
    AlertsConfiguration = "Session.ConfigurationTemplateAdmin.AlertsConfiguration",
    AlertsConfiguration_ByNS = "Session.ConfigurationTemplateAdmin.AlertsConfiguration_ByNS",
    Configuration_ByName = "Session.ConfigurationTemplateAdmin.Configuration_ByName"
}
/**
 * Get a dsmc configuration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.Dsconfigs, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_GetDsconfigs: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<DsmConfigRecord, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DsmConfigRecord>) => void) => UseQueryResult<DsmConfigRecord, AxiosError<ApiError>>;
/**
 * Create template configuration to be applied across party and session. Session configuration mandatory : - name - joinability. supported values: - OPEN: user can join or rejoin the session without an invite - CLOSED: once a CLOSED session is created or a session joinability is updated to CLOSED, any change to session members is not allowed and remaining invites will all be canceled. - INVITE_ONLY: to join the session, user whether needs to be invited, or have the code (for join by code). when a user is KICKED/LEFT/REJECTED from this session, they will need to be re-invited to join. - FRIENDS_OF_MEMBERS: only if a user is friend with at least one of the session members, they can join via code. - FRIENDS_OF_LEADER: only if a user is friend with the session leader, they can join via code. - FRIENDS_OF_FRIENDS: only friends of the leader OR friends of friends of the leader can join via code. - autoJoin: when enabled, players will automatically join the initial game session creation. Game session will not send any invite and players dont need to act upon it. default: false (disabled) - Type (example value : P2P, DS, NONE) if type empty, type will be assign to NONE - MinPlayers (must greater or equal 0) - MaxPlayers (must greater than 0) - InviteTimeout (must greater or equal 0) if InviteTimeout equal 0 will be use default DefaultTimeoutSecond (60s) - InactiveTimeout (must greater or equal 0) if InactiveTimeout equal 0 will be use default DefaultTimeoutSecond (60s) - Persistent will only applies to session with type DS (example value true or false, default: false) - If Persistent True the session always active even DS removing or terminate and Session will be request DS again until DS Ready or Busy. - To Stop Session Not request again to DS or want Delete Session can Delete Session using endpoint DELETE /session/v1/public/namespaces/{namespace}/gamesessions/{sessionId} - If Persistent False the session will be inactive if all member left and DS terminate or removing - nativeSessionSetting: - XboxSessionTemplateName: the XBox session template name that correspondent to the AB session template, and is needed to define XBox session&#39;s joinRestriction and maxMembersCount when doing the session sync. - XboxServiceConfigID: the XBox service configuration ID. - PSNServiceLabel: the PSN service label. - SessionTitle: the session title. In PSN, this will be used to define name of the session thats displayed on PlayStation system UI. - ShouldSync: to define whether the service needs to do session sync with native platform(s). Default: false (disabled). - PSNSupportedPlatforms: the PSN supported platforms. In PSN, if ShouldSync true and PSNSupportedPlatforms is empty, then PS5 will be set as default value. - PSNBaseUrl this is for base URL PSN if not set will be default value https://s2s.sp-int.playstation.net. In a single namespace only 1 PSN Env that can be used. Multiple session template should refers to the same PSN Env as we have in IAM Service. - https://s2s.sp-int.playstation.net (DEV, need IP Whitelist) - https://s2s.prod-qa.playstation.net (QA Environment/PSN Certification) - https://s2s.np.playstation.net (Production) - localizedSessionName : for localized name and default language example payload : &#34;localizedSessionName&#34;:{ &#34;defaultLanguage&#34; : &#34;en-US&#34; &#34;localizedText&#34; :{ &#34;en-US&#34; : &#34;title&#34; } } - if the game client wants to enable push context to PSN, game client will need to store PSN_PUSH_CONTEXT_ID on the player attributes, otherwise Session service will try to populate from the session attributes or auto generate with random UUID if empty. - TieTeamsSessionLifetime (optional, default: false): If it is set to true, the lifetime of any partyId session inside teams attribute will be tied to the game session. Only applies when the teams partyId is game session. - DisableCodeGeneration (optional, default: false): If it is set to true, code will not be generated for party session automatically. - DSManualSetReady (optional, default: false): The DS need to call specific end point to flag the DS for game session is ready to accept client connection. - EnableSecret (optional, default: false): if configuration template is created with TypeDS and EnableSecret is True, A secret will be created - LeaderElectionGracePeriod this is on second (optional, default:0) this is only use for party session, if value &gt; 0 if leader disconnect will be wait until value reach and leader will be change after reach - ManualRejoin (optional, default: false): indicates if game client will handle manual rejoin upon websocket reconnection when enabled. - DisableResendInvite (optional, default: false): by default, the service will be sending invites until the user reacts to it. enabling this flag will prohibit the service to send reminder invites&#39;. - appName (optional, default: empty string). Extend application name that uploaded to AccelByte extends deployment. The application is for custom/external DS management. - customURLGRPC (optional: default: empty string). Url for grpc server that server custom/external DS management. This value will be ignore when appName is filled. Value formatted as host:port. Example: yourdomain.com:9989 - grpcSessionConfig (optional, default: empty object). Setting for grpc session extends. Session service will calls the grpc when any activity for the game sessions. - appName (required when customURL is empty) The extends app name that created and uploaded to AccelByte extends deployment. - customURL (required when appName is empty) The url for grpc server. Format is host:port. Example: mycustomdomain.com:9889. This will be ignore when appName is filled. - functionFlag (optional, default: -1) Flag to enable which function to calls when any event on the game sessions. The value is bitwise integer. - 0x1 is for created event. Event is sync, anything return from create event will be overide the final game session. - 0x2 is for updated event. Event is async. Called when any update on the game session. - 0x4 is for deleted event. Event is async. Callen when game session got deleted. Example: - value 3: enable for created and updated - value 7: enable for created, updated, and deleted, etc
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.Configuration, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_CreateConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ConfigurationTemplateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateConfigurationTemplateRequest;
}>, "mutationKey">, callback?: (data: ConfigurationTemplateResponse) => void) => UseMutationResult<ConfigurationTemplateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateConfigurationTemplateRequest;
}>;
/**
 * Get all template configurations in specified namespace.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.Configurations, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_GetConfigurations: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        name?: string | null;
        offset?: number;
        order?: string | null;
        orderBy?: string | null;
    };
}, options?: Omit<UseQueryOptions<ConfigurationTemplatesResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ConfigurationTemplatesResponse>) => void) => UseQueryResult<ConfigurationTemplatesResponse, AxiosError<ApiError>>;
/**
 * sync dsmc configuration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.DsconfigsSync, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_GetDsconfigsSync: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<DsmConfigRecord, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DsmConfigRecord>) => void) => UseQueryResult<DsmConfigRecord, AxiosError<ApiError>>;
/**
 * Delete configuration alert.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.AlertsConfiguration, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_DeleteAlertsConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get a configuration alert.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.AlertsConfiguration, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_GetAlertsConfiguration: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<ConfigAlertResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ConfigAlertResponse>) => void) => UseQueryResult<ConfigAlertResponse, AxiosError<ApiError>>;
/**
 * Create configuration alert configuration alert mandatory : - namespace - durationDays must be greater than 0
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.AlertsConfiguration, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_UpdateAlertsConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ConfigAlertResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ConfigAlertRequestCreate;
}>, "mutationKey">, callback?: (data: ConfigAlertResponse) => void) => UseMutationResult<ConfigAlertResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ConfigAlertRequestCreate;
}>;
/**
 * Update configuration alert configuration alert mandatory : - namespace - durationDays must be greater than 0
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.AlertsConfiguration_ByNS, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_UpdateAlertsConfiguration_ByNSMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ConfigAlertResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ConfigAlertRequestCreate;
}>, "mutationKey">, callback?: (data: ConfigAlertResponse) => void) => UseMutationResult<ConfigAlertResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: ConfigAlertRequestCreate;
}>;
/**
 * Delete a template configuration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.Configuration_ByName, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_DeleteConfiguration_ByNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    name: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    name: string;
}>;
/**
 * Get a template configuration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.Configuration_ByName, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_GetConfiguration_ByName: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    name: string;
}, options?: Omit<UseQueryOptions<ConfigurationTemplateResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ConfigurationTemplateResponse>) => void) => UseQueryResult<ConfigurationTemplateResponse, AxiosError<ApiError>>;
/**
 * Modify template configuration Session configuration mandatory : - name - joinability. supported values: - OPEN: user can join or rejoin the session without an invite - CLOSED: once a CLOSED session is created or a session joinability is updated to CLOSED, any change to session members is not allowed and remaining invites will all be canceled. - INVITE_ONLY: to join the session, user whether needs to be invited, or have the code (for join by code). when a user is KICKED/LEFT/REJECTED from this session, they will need to be re-invited to join. - FRIENDS_OF_MEMBERS: only if a user is friend with at least one of the session members, they can join via code. - FRIENDS_OF_LEADER: only if a user is friend with the session leader, they can join via code. - FRIENDS_OF_FRIENDS: only friends of the leader OR friends of friends of the leader can join via code. - autoJoin: when enabled, players will automatically join the initial game session creation. Game session will not send any invite and players dont need to act upon it. default: false (disabled) - Type (example value : P2P, DS, NONE) if type empty, type will be assign to NONE - MinPlayers (must greater or equal 0) - MaxPlayers (must greater than 0) - InviteTimeout (must greater or equal 0) if InviteTimeout equal 0 will be use default DefaultTimeoutSecond (60s) - InactiveTimeout (must greater or equal 0) if InactiveTimeout equal 0 will be use default DefaultTimeoutSecond (60s) - Persistent Flag only can use with type DS (example value true or false) - If Persistent True the session always active even DS removing or terminate and Session will be request DS again until DS Ready or Busy. - To Stop Session Not request again to DS or want Delete Session can Delete Session using endpoint DELETE /session/v1/public/namespaces/{namespace}/gamesessions/{sessionId} - If Persistent False the session will be inactive if all member left and DS terminate or removing - nativeSessionSetting: - XboxSessionTemplateName: the XBox session template name that correspondent to the AB session template, and is needed to define XBox session&#39;s joinRestriction and maxMembersCount when doing the session sync. - XboxServiceConfigID: the XBox service configuration ID. - PSNServiceLabel: the PSN service label. - SessionTitle: the session title. In PSN, this will be used to define name of the session thats displayed on PlayStation system UI. - ShouldSync: to define whether the service needs to do session sync with native platform(s). Default: false (disabled). - PSNSupportedPlatforms: the PSN supported platforms. In PSN, if ShouldSync true and PSNSupportedPlatforms is empty, then PS5 will be set as default value. - PSNBaseUrl this is for base URL PSN if not set will be default value https://s2s.sp-int.playstation.net. In a single namespace only 1 PSN Env that can be used. Multiple session template should refers to the same PSN Env as we have in IAM Service. - https://s2s.sp-int.playstation.net (DEV, need IP Whitelist) - https://s2s.prod-qa.playstation.net (QA Environment/PSN Certification) - https://s2s.np.playstation.net (Production) - localizedSessionName : for localized name and default language example payload : &#34;localizedSessionName&#34;:{ &#34;defaultLanguage&#34; : &#34;en-US&#34; &#34;localizedText&#34; :{ &#34;en-US&#34; : &#34;title&#34; } } - if the game client wants to enable push context to PSN, game client will need to store PSN_PUSH_CONTEXT_ID on the player attributes, otherwise Session service will try to populate from the session attributes or auto generate with random UUID if empty. - TieTeamsSessionLifetime: If it is set to true, the lifetime of any partyId session inside teams attribute will be tied to the game session. Only applies when the teams partyId is game session. - DisableCodeGeneration (optional, default: false): If it is set to true, code will not be generated for party session automatically. - DSManualSetReady (optional, default: false): The DS need to call specific end point to flag the DS for game session is ready to accept client connection. - EnableSecret (optional, default: false): if configuration template is created with TypeDS and EnableSecret is True, A secret will be created. - ManualRejoin (optional, default: false): indicates if game client will handle manual rejoin upon websocket reconnection when enabled. - DisableResendInvite (optional, default: false): by default, the service will be sending invites until the user reacts to it. enabling this flag will prohibit the service to send reminder invites&#39;. - appName (optional, default: empty string). Extend application name that uploaded to AccelByte extends deployment. The application is for custom/external DS management. - customURLGRPC (optional: default: empty string). Url for grpc server that server custom/external DS management. This value will be ignore when appName is filled. Value formatted as host:port. Example: yourdomain.com:9989 - grpcSessionConfig (optional, default: empty object). Setting for grpc session extends. Session service will calls the grpc when any activity for the game sessions. - appName (required when customURL is empty) The extends app name that created and uploaded to AccelByte extends deployment. - customURL (required when appName is empty) The url for grpc server. Format is host:port. Example: mycustomdomain.com:9889. This will be ignore when appName is filled. - functionFlag (optional, default: -1) Flag to enable which function to calls when any event on the game sessions. The value is bitwise integer. - 0x1 is for created event. Event is sync, anything return from create event will be overide the final game session. - 0x2 is for updated event. Event is async. Called when any update on the game session. - 0x4 is for deleted event. Event is async. Callen when game session got deleted. Example: - value 3: enable for created and updated - value 7: enable for created, updated, and deleted, etc
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigurationTemplateAdmin.Configuration_ByName, input]
 * }
 * ```
 */
declare const useConfigurationTemplateAdminApi_UpdateConfiguration_ByNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<ConfigurationTemplateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    name: string;
    data: UpdateConfigurationTemplateRequest;
}>, "mutationKey">, callback?: (data: ConfigurationTemplateResponse) => void) => UseMutationResult<ConfigurationTemplateResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    name: string;
    data: UpdateConfigurationTemplateRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_DsmcDefaultConfigurationAdmin {
    DsconfigsDefault = "Session.DsmcDefaultConfigurationAdmin.DsconfigsDefault"
}
/**
 * Get dsmc default configuration.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_DsmcDefaultConfigurationAdmin.DsconfigsDefault, input]
 * }
 * ```
 */
declare const useDsmcDefaultConfigurationAdminApi_GetDsconfigsDefault: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<DefaultDsmcConfig, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<DefaultDsmcConfig>) => void) => UseQueryResult<DefaultDsmcConfig, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_EnvironmentVariableAdmin {
    EnvironmentVariables = "Session.EnvironmentVariableAdmin.EnvironmentVariables"
}
/**
 * List of environment variables.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_EnvironmentVariableAdmin.EnvironmentVariables, input]
 * }
 * ```
 */
declare const useEnvironmentVariableAdminApi_GetEnvironmentVariables: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<EnvironmentVariableListResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<EnvironmentVariableListResponse>) => void) => UseQueryResult<EnvironmentVariableListResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_GameSessionAdmin {
    Gamesessions = "Session.GameSessionAdmin.Gamesessions",
    Gamesession = "Session.GameSessionAdmin.Gamesession",
    GamesessionBulk = "Session.GameSessionAdmin.GamesessionBulk",
    D_BySessionId = "Session.GameSessionAdmin.D_BySessionId",
    Kick_BySessionId_ByMemberId = "Session.GameSessionAdmin.Kick_BySessionId_ByMemberId",
    Statu_BySessionId_ByMemberId_ByStatusType = "Session.GameSessionAdmin.Statu_BySessionId_ByMemberId_ByStatusType"
}
/**
 * Get all game sessions.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionAdmin.Gamesessions, input]
 * }
 * ```
 */
declare const useGameSessionAdminApi_GetGamesessions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        configurationName?: string | null;
        dsPodName?: string | null;
        fromTime?: string | null;
        gameMode?: string | null;
        isPersistent?: string | null;
        isSoftDeleted?: string | null;
        joinability?: string | null;
        limit?: number;
        matchPool?: string | null;
        memberID?: string | null;
        offset?: number;
        order?: string | null;
        orderBy?: string | null;
        sessionID?: string | null;
        status?: string | null;
        statusV2?: string | null;
        toTime?: string | null;
    };
}, options?: Omit<UseQueryOptions<GameSessionQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionQueryResponse>) => void) => UseQueryResult<GameSessionQueryResponse, AxiosError<ApiError>>;
/**
 * Query game sessions by admin. By default, API will return a list of available game sessions (joinability: open). Session service has several DSInformation status to track DS request to DS providers: - NEED_TO_REQUEST: number of active players hasn&#39;t reached session&#39;s minPlayers therefore DS has not yet requested. - REQUESTED: DS is being requested to DSMC. - PREPARING: DS needs to call manual set ready for the game session - AVAILABLE: DS is ready to use. The DSMC status for this DS is either READY/BUSY. - FAILED_TO_REQUEST: DSMC fails to spin up a DS for session. - DS_ERROR: DS provider fails to spin up the DS or the DS itself becomes unreachable - DS_CANCELLED: when DSMC is preparing the DS, DSMC will give a temporary DS. In this phase, if you delete the game session, the DS request will be canceled. - ENDED: when a game session (match) has finished and DS has done its job, it will terminate itself. - UNKNOWN: if any unknown DS status is detected. DSInformation has 2 fields for DS status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. DS Source can be DSMC, AMS or custom. In DSMC, a DS request will be put in queue if they dont have available buffers, and DSMC will let the service knows when they finished spinning it up. While AMS doesn&#39;t have a concept of queue. Therefore some &#34;DSInformation.statusV2&#34; only applicable for DSMC. query parameter \&#34;availability\&#34; to filter sessions&#39; availability: all: return all sessions regardless it&#39;s full full: only return active sessions default behavior (unset or else): return only available sessions (not full)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionAdmin.Gamesession, input]
 * }
 * ```
 */
declare const useGameSessionAdminApi_FetchGamesession: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GameSessionQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionQueryResponse>) => void) => UseQueryResult<GameSessionQueryResponse, AxiosError<ApiError>>;
/**
 * Delete bulk game sessions.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionAdmin.GamesessionBulk, input]
 * }
 * ```
 */
declare const useGameSessionAdminApi_DeleteGamesessionBulkMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<DeleteBulkGameSessionsApiResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: DeleteBulkGameSessionRequest;
}>, "mutationKey">, callback?: (data: DeleteBulkGameSessionsApiResponse) => void) => UseMutationResult<DeleteBulkGameSessionsApiResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: DeleteBulkGameSessionRequest;
}>;
/**
 * When the session template has ds_manual_set_ready as true. Then the DS need to calls this end point in order to notify game client if the DS is ready to accept any game client connection.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionAdmin.D_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionAdminApi_UpdateD_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: SetDsReadyRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: SetDsReadyRequest;
}>;
/**
 * Kick member from a game session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionAdmin.Kick_BySessionId_ByMemberId, input]
 * }
 * ```
 */
declare const useGameSessionAdminApi_DeleteKick_BySessionId_ByMemberIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    memberId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    memberId: string;
}>;
/**
 * Update a game session member status.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionAdmin.Statu_BySessionId_ByMemberId_ByStatusType, input]
 * }
 * ```
 */
declare const useGameSessionAdminApi_UpdateStatu_BySessionId_ByMemberId_ByStatusTypeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<UpdateGameSessionMemberStatusResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    memberId: string;
    statusType: string;
}>, "mutationKey">, callback?: (data: UpdateGameSessionMemberStatusResponse) => void) => UseMutationResult<UpdateGameSessionMemberStatusResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    memberId: string;
    statusType: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_GlobalConfigurationAdmin {
    GlobalConfiguration = "Session.GlobalConfigurationAdmin.GlobalConfiguration",
    GlobalConfigurations = "Session.GlobalConfigurationAdmin.GlobalConfigurations"
}
/**
 * Delete of global configuration data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GlobalConfigurationAdmin.GlobalConfiguration, input]
 * }
 * ```
 */
declare const useGlobalConfigurationAdminApi_DeleteGlobalConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Record of global configuration data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GlobalConfigurationAdmin.GlobalConfigurations, input]
 * }
 * ```
 */
declare const useGlobalConfigurationAdminApi_GetGlobalConfigurations: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<GlobalConfigurationResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GlobalConfigurationResponse>) => void) => UseQueryResult<GlobalConfigurationResponse, AxiosError<ApiError>>;
/**
 * Upsert global configuration data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GlobalConfigurationAdmin.GlobalConfiguration, input]
 * }
 * ```
 */
declare const useGlobalConfigurationAdminApi_UpdateGlobalConfigurationMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GlobalConfigurationResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PutGlobalConfigurationRequest;
}>, "mutationKey">, callback?: (data: GlobalConfigurationResponse) => void) => UseMutationResult<GlobalConfigurationResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PutGlobalConfigurationRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_MaxActiveAdmin {
    Reconcile_ByName = "Session.MaxActiveAdmin.Reconcile_ByName",
    Memberactivesession_ByName_ByUserId = "Session.MaxActiveAdmin.Memberactivesession_ByName_ByUserId"
}
/**
 *  Reconcile Max Active Session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_MaxActiveAdmin.Reconcile_ByName, input]
 * }
 * ```
 */
declare const useMaxActiveAdminApi_UpdateReconcile_ByNameMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    name: string;
    data: RequestReconcileMaxActiveSession;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    name: string;
    data: RequestReconcileMaxActiveSession;
}>;
/**
 *  Get Member Active Session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_MaxActiveAdmin.Memberactivesession_ByName_ByUserId, input]
 * }
 * ```
 */
declare const useMaxActiveAdminApi_GetMemberactivesession_ByName_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    name: string;
    userId: string;
}, options?: Omit<UseQueryOptions<MemberActiveSession, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<MemberActiveSession>) => void) => UseQueryResult<MemberActiveSession, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_NativeSessionAdmin {
    NativeSessions = "Session.NativeSessionAdmin.NativeSessions"
}
/**
 * List of native sessions.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_NativeSessionAdmin.NativeSessions, input]
 * }
 * ```
 */
declare const useNativeSessionAdminApi_GetNativeSessions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        order?: string | null;
    };
}, options?: Omit<UseQueryOptions<NativeSessionPagingResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<NativeSessionPagingResponse>) => void) => UseQueryResult<NativeSessionPagingResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_PartyAdmin {
    Parties = "Session.PartyAdmin.Parties",
    NativeSync_ByUserId = "Session.PartyAdmin.NativeSync_ByUserId"
}
/**
 * Query parties.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PartyAdmin.Parties, input]
 * }
 * ```
 */
declare const usePartyAdminApi_GetParties: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        isSoftDeleted?: string | null;
        joinability?: string | null;
        key?: string | null;
        leaderID?: string | null;
        limit?: number;
        memberID?: string | null;
        memberStatus?: string | null;
        offset?: number;
        order?: string | null;
        orderBy?: string | null;
        partyID?: string | null;
        value?: string | null;
    };
}, options?: Omit<UseQueryOptions<PartyQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyQueryResponse>) => void) => UseQueryResult<PartyQueryResponse, AxiosError<ApiError>>;
/**
 * Trigger user&#39;s active party session to native platform.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PartyAdmin.NativeSync_ByUserId, input]
 * }
 * ```
 */
declare const usePartyAdminApi_CreateNativeSync_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    userId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlatformCredentialAdmin {
    PlatformCredential = "Session.PlatformCredentialAdmin.PlatformCredential",
    PlatformCredentials = "Session.PlatformCredentialAdmin.PlatformCredentials"
}
/**
 * Delete platform credentials used for Native Session sync.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlatformCredentialAdmin.PlatformCredential, input]
 * }
 * ```
 */
declare const usePlatformCredentialAdminApi_DeletePlatformCredentialMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get platform credentials used for Native Session sync. PSN: - clientID: Auth Server (Client Credential) ClientID - clientSecret: Auth Server (Client Credential) Secret. For security, only the first few characters are shown. - scope: should be psn:s2s.service (For Sync non PSN member to PSN Session)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlatformCredentialAdmin.PlatformCredentials, input]
 * }
 * ```
 */
declare const usePlatformCredentialAdminApi_GetPlatformCredentials: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PlatformCredentials, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlatformCredentials>) => void) => UseQueryResult<PlatformCredentials, AxiosError<ApiError>>;
/**
 * Update platform credentials for Native Session sync. Currently supports PSN platform. Send an empty body to clear data. PSN: - clientID: Auth Server (Client Credential) ClientID - clientSecret: Auth Server (Client Credential) Secret - scope: psn:s2s.service (For Sync non PSN member to PSN Session)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlatformCredentialAdmin.PlatformCredential, input]
 * }
 * ```
 */
declare const usePlatformCredentialAdminApi_UpdatePlatformCredentialMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlatformCredentials, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PutPlatformCredentialsRequest;
}>, "mutationKey">, callback?: (data: PlatformCredentials) => void) => UseMutationResult<PlatformCredentials, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PutPlatformCredentialsRequest;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_PlayerAdmin {
    UsersAttributes = "Session.PlayerAdmin.UsersAttributes",
    Attributes_ByUserId = "Session.PlayerAdmin.Attributes_ByUserId"
}
/**
 * Admin get attributes of players. Field descriptions: - userID : user who owns the attributes. - crossplayEnabled : set to true if the player wants to enable crossplay to their session (default: false). - platforms : list of the player&#39;s 3rd party platform account information. - name : platform name. supported platforms: STEAM, XBOX, PSN - userID : platform userID - data : other data that the player wants to store. - PSN_PUSH_CONTEXT_ID: if provided, session will refer to this when performing session sync with PSN, otherwise will populate from session attributes, otherwise will populate from session attributes - currentPlatform : latest user game platform. - roles : user role for matchmaking role base support.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.UsersAttributes, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetUsersAttributes: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        users?: string | null;
    };
}, options?: Omit<UseQueryOptions<PlayerAttributesResponseBodyArray, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerAttributesResponseBodyArray>) => void) => UseQueryResult<PlayerAttributesResponseBodyArray, AxiosError<ApiError>>;
/**
 * Admin get attributes of a player. Field descriptions: - userID : user who owns the attributes. - crossplayEnabled : set to true if the player wants to enable crossplay to their session (default: false). - platforms : list of the player&#39;s 3rd party platform account information. - name : platform name. supported platforms: STEAM, XBOX, PSN - userID : platform userID - data : other data that the player wants to store. - PSN_PUSH_CONTEXT_ID: if provided, session will refer to this when performing session sync with PSN, otherwise will populate from session attributes - currentPlatform : latest user game platform. - roles : user role for matchmaking role base support.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_PlayerAdmin.Attributes_ByUserId, input]
 * }
 * ```
 */
declare const usePlayerAdminApi_GetAttributes_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
}, options?: Omit<UseQueryOptions<PlayerAttributesResponseBody, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerAttributesResponseBody>) => void) => UseQueryResult<PlayerAttributesResponseBody, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_RecentPlayerAdmin {
    RecentPlayer = "Session.RecentPlayerAdmin.RecentPlayer",
    RecentTeamPlayer = "Session.RecentPlayerAdmin.RecentTeamPlayer"
}
/**
 * Query recent player with given user id. If user id parameter is empty: 1. Using User Token : It will get the user id from the token 2. Using client token : it will throw an error Please ensure environment variable &#34;RECENT_PLAYER_ENABLED&#34; is set to &#34;TRUE&#34; to use this feature.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecentPlayerAdmin.RecentPlayer, input]
 * }
 * ```
 */
declare const useRecentPlayerAdminApi_GetRecentPlayer: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RecentPlayerQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RecentPlayerQueryResponse>) => void) => UseQueryResult<RecentPlayerQueryResponse, AxiosError<ApiError>>;
/**
 * Query recent player who were on the same team with given user id. If user id parameter is empty: 1. Using User Token : It will get the user id from the token 2. Using client token : it will throw an error Please ensure environment variable &#34;RECENT_TEAM_PLAYER_ENABLED&#34; is set to &#34;TRUE&#34; to use this feature.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecentPlayerAdmin.RecentTeamPlayer, input]
 * }
 * ```
 */
declare const useRecentPlayerAdminApi_GetRecentTeamPlayer: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        userId?: string | null;
    };
}, options?: Omit<UseQueryOptions<RecentPlayerQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RecentPlayerQueryResponse>) => void) => UseQueryResult<RecentPlayerQueryResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_SessionStorageAdmin {
    Storage_BySessionId = "Session.SessionStorageAdmin.Storage_BySessionId",
    StorageUser_BySessionId_ByUserId = "Session.SessionStorageAdmin.StorageUser_BySessionId_ByUserId"
}
/**
 *  Delete Session Storage By sessionID Session Storage feature only available for Gamesession
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionStorageAdmin.Storage_BySessionId, input]
 * }
 * ```
 */
declare const useSessionStorageAdminApi_DeleteStorage_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 *  Read Session Storage by sessionID Session Storage feature only available for Gamesession
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionStorageAdmin.Storage_BySessionId, input]
 * }
 * ```
 */
declare const useSessionStorageAdminApi_GetStorage_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;
/**
 *  Read Session Storage by sessionID and userID Session Storage feature only available for Gamesession
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionStorageAdmin.StorageUser_BySessionId_ByUserId, input]
 * }
 * ```
 */
declare const useSessionStorageAdminApi_GetStorageUser_BySessionId_ByUserId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
    userId: string;
}, options?: Omit<UseQueryOptions<unknown, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<unknown>) => void) => UseQueryResult<unknown, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_GameSession {
    Gamesession = "Session.GameSession.Gamesession",
    Gamesession_ByNS = "Session.GameSession.Gamesession_ByNS",
    UsersMeGamesessions = "Session.GameSession.UsersMeGamesessions",
    GamesessionJoinCode = "Session.GameSession.GamesessionJoinCode",
    Gamesession_BySessionId = "Session.GameSession.Gamesession_BySessionId",
    Code_BySessionId = "Session.GameSession.Code_BySessionId",
    Join_BySessionId = "Session.GameSession.Join_BySessionId",
    Leave_BySessionId = "Session.GameSession.Leave_BySessionId",
    Team_BySessionId = "Session.GameSession.Team_BySessionId",
    GamesessionServer_ByPodName = "Session.GameSession.GamesessionServer_ByPodName",
    Invite_BySessionId = "Session.GameSession.Invite_BySessionId",
    Leader_BySessionId = "Session.GameSession.Leader_BySessionId",
    Reject_BySessionId = "Session.GameSession.Reject_BySessionId",
    Secret_BySessionId = "Session.GameSession.Secret_BySessionId",
    Backfill_BySessionId = "Session.GameSession.Backfill_BySessionId",
    Cancel_BySessionId_ByUserId = "Session.GameSession.Cancel_BySessionId_ByUserId",
    Kick_BySessionId_ByMemberId = "Session.GameSession.Kick_BySessionId_ByMemberId"
}
/**
 * Create a game session. Session configuration &#34;name&#34; is mandatory, this API will refer following values from the session template if they&#39;re not provided in the request: - type - joinability - autoJoin. If enabled (set to true), players provided in the request will automatically joined the initial game session creation. Game session will not send any invite and players dont need to act upon it. - minPlayers - maxPlayers - inviteTimeout - inactiveTimeout - attributes - dsSource - tieTeamsSessionLifetime - matchPool - clientVersion - deployment - serverName - textChat - autoJoin - requestedRegions - dsSource - preferredClaimKeys - fallbackClaimKeys - customURLGRPC When the tieTeamsSessionLifetime is true, the lifetime of any partyId inside teams attribute will be tied to the game session. Only applies when the teams partyId is a game session. Session has 2 fields for user status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. User statuses: 1. INVITED: by default, to join a session (except session with OPEN joinability or if session configuration has &#34;autoJoin&#34; sets to True) a user will receive an invite. The invitee will have the chance to respond within &#34;inviteTimeout&#34; which you can configure through session configuration. 2. TIMEOUT: when a user is invited to a session, they will receive an invite. Unless &#34;disableResendInvite&#34; sets to True in the session configuration, the user will also receive invite reminder every 30s until they respond to the invite. 3. REJECTED: when a user rejects an invite. To rejoin an INVITE_ONLY session, they will need to be re-invited and accept the invite. 4. JOINED: there are few ways of a user to join a session, by invite, direct join (depends on session joinability) or join by code. upon invite, once a user accepts an invite, their status will be changed to JOINED. 5. LEFT: user can leave a session. in case of party, a user can only be in 1 party at a time. therefore when they decide to create or join another party, they will be automatically removed from their initial party and their status will be changed to LEFT. 6. KICKED: only party leader can kick a member. 7. DISCONNECTED: if user still have reserved seat in the session and they disconnect lobby websocket, their status in the session will be changed to DISCONNECTED and field &#34;members.previousStatus&#34; of that user will contains the initial status before they disconnect lobby websocket. the user will be given chance to reconnect within &#34;inactiveTimeout&#34; which you can configure through session configuration. 8. CONNECTED: when a user reconnect their lobby websocket, their status will change from DISCONNECTED to CONNECTED, only if they previously JOINED session. if they were on INVITED state before the disconnect happened, the user&#39;s status will return back to INVITED after they reconnect. 9. DROPPED: when &#34;inactiveTimeout&#34; is due and user never re-establish their websocket connection, we will drop them from the session. 10. TERMINATED: only applies to game session. If a game session (match) is ended, DS will end/delete the session and we will mark all remaining users&#39; status to be TERMINATED. 11. CANCELLED: when a session joinability changes to CLOSED, any remaining invites will be canceled. User is considered as active if they&#39;re present in the session, which their status either CONNECTED or JOINED. User has a reserved seat in the session if their status either INVITED, JOINED, CONNECTED, DISCONNECTED. When user&#39;s&#39; status change to other than these mentioned statuses, we will release the seat for other players to occupy. Managing the relation between session and lobby websocket connection: - Session relies on lobby to consider player&#39;s connection health to our backend. therefore a disruption to lobby websocket will be reflected in the user&#39;s status in all of their session(s). - If user still have a reserved seat in the session and they disconnect lobby websocket, their status in session(s) will be changed to DISCONNECTED and field &#34;members.previousStatus&#34; of that user will contains the initial status before they disconnect lobby websocket. This &#34;members.previousStatus&#34; used to track user&#39;s previous status before they disconnect websocket, since we still reserve a seat for them, therefore this field will be empty again after they websocket. - If the disconnected user is the leader of the session they&#39;re disconnected from, we will wait until &#34;leaderElectionGracePeriod&#34; is due, to promote the next oldest member as the new leader of the session. You can configure &#34;leaderElectionGracePeriod&#34; through session configuration. - The user will be given chance to reconnect within &#34;inactiveTimeout&#34; which you can configure through session configuration. If until &#34;inactiveTimeout&#34; is due and the user doesn&#39;t reconnect their websocket, they will be removed from session and their status will change to DROPPED. If the dropped user was the leader of the session, we will promote the next oldest member as leader. - By default, we will update user&#39;s status to what it was before disconnect, when the user reconnects lobby websocket, unless &#34;manualRejoin&#34; sets to True in the session configuration. When &#34;manualRejoin&#34; is enabled, after lobby websocket reconnect, the game client will need to manually invoke join session again to rejoin the session. - If the user was on INVITED state before the disconnect happened, the user&#39;s status will return back to INVITED after they reconnect. When the session type is a DS, a DS creation request will be sent if number of active players reaches session&#39;s minPlayers. Session service has several DSInformation status to track DS request to DS providers: - NEED_TO_REQUEST: number of active players hasn&#39;t reached session&#39;s minPlayers therefore DS has not yet requested. - REQUESTED: DS is being requested to DSMC. - PREPARING: DS needs to call manual set ready for the game session - AVAILABLE: DS is ready to use. The DSMC status for this DS is either READY/BUSY. - FAILED_TO_REQUEST: DSMC fails to spin up a DS for session. - DS_ERROR: DS provider fails to spin up the DS or the DS itself becomes unreachable - DS_CANCELLED: when DSMC is preparing the DS, DSMC will give a temporary DS. In this phase, if you delete the game session, the DS request will be canceled. - ENDED: when a game session (match) has finished and DS has done its job, it will terminate itself. - UNKNOWN: if any unknown DS status is detected. DSInformation has 2 fields for DS status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. DS Source can be DSMC, AMS or custom. In DSMC, a DS request will be put in queue if they dont have available buffers, and DSMC will let the service knows when they finished spinning it up. While AMS doesn&#39;t have a concept of queue. Therefore some &#34;DSInformation.statusV2&#34; only applicable for DSMC. By default, DS requests are sent to DSMC, but if dsSource is set to &#34;AMS&#34;: - A DS will be requested from AMS instead of DSMC. - The server will be chosen based on a set of claim keys, in order of preference, to match with fleets. - The claim key list is built build from the preferredClaimKeys, fallbackClaimKeys, and clientVersion as follows: [preferredClaimKeys.., clientVersion, fallbackClaimKeys...] for session override can follow guideline in here https://docs.accelbyte.io/gaming-services/services/extend/override-ags-feature/getting-started-with-session-customization/
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Gamesession, input]
 * }
 * ```
 */
declare const useGameSessionApi_CreateGamesessionMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateGameSessionRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreateGameSessionRequest;
}>;
/**
 * Query game sessions. By default, API will return a list of available game sessions (joinability: open). Session service has several DSInformation status to track DS request to DS providers: - NEED_TO_REQUEST: number of active players hasn&#39;t reached session&#39;s minPlayers therefore DS has not yet requested. - REQUESTED: DS is being requested to DSMC. - PREPARING: DS needs to call manual set ready for the game session - AVAILABLE: DS is ready to use. The DSMC status for this DS is either READY/BUSY. - FAILED_TO_REQUEST: DSMC fails to spin up a DS for session. - DS_ERROR: DS provider fails to spin up the DS or the DS itself becomes unreachable - DS_CANCELLED: when DSMC is preparing the DS, DSMC will give a temporary DS. In this phase, if you delete the game session, the DS request will be canceled. - ENDED: when a game session (match) has finished and DS has done its job, it will terminate itself. - UNKNOWN: if any unknown DS status is detected. DSInformation has 2 fields for DS status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. DS Source can be DSMC, AMS or custom. In DSMC, a DS request will be put in queue if they dont have available buffers, and DSMC will let the service knows when they finished spinning it up. While AMS doesn&#39;t have a concept of queue. Therefore some &#34;DSInformation.statusV2&#34; only applicable for DSMC. query parameter \&#34;availability\&#34; to filter sessions&#39; availability: all: return all sessions regardless it&#39;s full full: only return active sessions default behavior (unset or else): return only available sessions (not full)
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Gamesession_ByNS, input]
 * }
 * ```
 */
declare const useGameSessionApi_CreateGamesession_ByNSMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionQueryResponse, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: GameSessionQueryResponse) => void) => UseMutationResult<GameSessionQueryResponse, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Query user&#39;s game sessions. By default, API will return a list of user&#39;s active game sessions (INVITED,JOINED,CONNECTED). Session service has several DSInformation status to track DS request to DS providers: - NEED_TO_REQUEST: number of active players hasn&#39;t reached session&#39;s minPlayers therefore DS has not yet requested. - REQUESTED: DS is being requested to DSMC. - PREPARING: DS needs to call manual set ready for the game session - AVAILABLE: DS is ready to use. The DSMC status for this DS is either READY/BUSY. - FAILED_TO_REQUEST: DSMC fails to spin up a DS for session. - DS_ERROR: DS provider fails to spin up the DS or the DS itself becomes unreachable - DS_CANCELLED: when DSMC is preparing the DS, DSMC will give a temporary DS. In this phase, if you delete the game session, the DS request will be canceled. - ENDED: when a game session (match) has finished and DS has done its job, it will terminate itself. - UNKNOWN: if any unknown DS status is detected. DSInformation has 2 fields for DS status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. DS Source can be DSMC, AMS or custom. In DSMC, a DS request will be put in queue if they dont have available buffers, and DSMC will let the service knows when they finished spinning it up. While AMS doesn&#39;t have a concept of queue. Therefore some &#34;DSInformation.statusV2&#34; only applicable for DSMC.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.UsersMeGamesessions, input]
 * }
 * ```
 */
declare const useGameSessionApi_GetUsersMeGamesessions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        order?: string | null;
        orderBy?: string | null;
        status?: string | null;
    };
}, options?: Omit<UseQueryOptions<GameSessionQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionQueryResponse>) => void) => UseQueryResult<GameSessionQueryResponse, AxiosError<ApiError>>;
/**
 * Join a session by code. The user can join a session as long as the code is valid
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.GamesessionJoinCode, input]
 * }
 * ```
 */
declare const useGameSessionApi_CreateGamesessionJoinCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: JoinByCodeRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: JoinByCodeRequest;
}>;
/**
 * Delete a game session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_DeleteGamesession_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 * Get game session detail. Session will only be accessible from active players in the session, and client with the permission, except the joinability is set to OPEN. Session service has several DSInformation status to track DS request to DS providers: - NEED_TO_REQUEST: number of active players hasn&#39;t reached session&#39;s minPlayers therefore DS has not yet requested. - REQUESTED: DS is being requested to DSMC. - PREPARING: DS needs to call manual set ready for the game session - AVAILABLE: DS is ready to use. The DSMC status for this DS is either READY/BUSY. - FAILED_TO_REQUEST: DSMC fails to spin up a DS for session. - DS_ERROR: DS provider fails to spin up the DS or the DS itself becomes unreachable - DS_CANCELLED: when DSMC is preparing the DS, DSMC will give a temporary DS. In this phase, if you delete the game session, the DS request will be canceled. - ENDED: when a game session (match) has finished and DS has done its job, it will terminate itself. - UNKNOWN: if any unknown DS status is detected. DSInformation has 2 fields for DS status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. DS Source can be DSMC, AMS or custom. In DSMC, a DS request will be put in queue if they dont have available buffers, and DSMC will let the service knows when they finished spinning it up. While AMS doesn&#39;t have a concept of queue. Therefore some &#34;DSInformation.statusV2&#34; only applicable for DSMC.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_GetGamesession_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
}, options?: Omit<UseQueryOptions<GameSessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionResponse>) => void) => UseQueryResult<GameSessionResponse, AxiosError<ApiError>>;
/**
 * Update specified fields from game session data.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_PatchGamesession_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: UpdateGameSessionRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: UpdateGameSessionRequest;
}>;
/**
 * Updates a game session, this endpoint will override stored gamesession data. To update only specified fields, please use following endpoint: method : PATCH API : /session/v1/public/namespaces/{namespace}/gamesessions/{sessionId} To update DS attributes (clientVersion, deployment, requestedRegions) it will only be applied only as long as no DS has been requested, otherwise ignored.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_UpdateGamesession_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: UpdateGameSessionRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: UpdateGameSessionRequest;
}>;
/**
 * Revoke code of the game session. Only leader can revoke a code.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Code_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_DeleteCode_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 * Generate a new code for the game session. Only leader can generate a code.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Code_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_UpdateCode_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 * Join a game session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Join_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_CreateJoin_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 * Leave a game session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Leave_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_DeleteLeave_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 * Append new member or team to session
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Team_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_UpdateTeam_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: AppendTeamGameSessionRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: AppendTeamGameSessionRequest;
}>;
/**
 * Get game session detail by podname. Session service has several DSInformation status to track DS request to DS providers: - NEED_TO_REQUEST: number of active players hasn&#39;t reached session&#39;s minPlayers therefore DS has not yet requested. - REQUESTED: DS is being requested to DSMC. - PREPARING: DS needs to call manual set ready for the game session - AVAILABLE: DS is ready to use. The DSMC status for this DS is either READY/BUSY. - FAILED_TO_REQUEST: DSMC fails to spin up a DS for session. - DS_ERROR: DS provider fails to spin up the DS or the DS itself becomes unreachable - DS_CANCELLED: when DSMC is preparing the DS, DSMC will give a temporary DS. In this phase, if you delete the game session, the DS request will be canceled. - ENDED: when a game session (match) has finished and DS has done its job, it will terminate itself. - UNKNOWN: if any unknown DS status is detected. DSInformation has 2 fields for DS status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. DS Source can be DSMC, AMS or custom. In DSMC, a DS request will be put in queue if they dont have available buffers, and DSMC will let the service knows when they finished spinning it up. While AMS doesn&#39;t have a concept of queue. Therefore some &#34;DSInformation.statusV2&#34; only applicable for DSMC.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.GamesessionServer_ByPodName, input]
 * }
 * ```
 */
declare const useGameSessionApi_GetGamesessionServer_ByPodName: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    podName: string;
}, options?: Omit<UseQueryOptions<GameSessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionResponse>) => void) => UseQueryResult<GameSessionResponse, AxiosError<ApiError>>;
/**
 * Invite a user to a game session. platformID represents the native platform of the invitee. API will return the corresponding native platform&#39;s userID. supported platforms: - STEAM - XBOX - PSN
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Invite_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_CreateInvite_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: SessionInviteRequest;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: SessionInviteRequest;
}>;
/**
 * Promote game session member to become the new game session leader. This API requires the NAMESPACE:{namespace}:SESSION:GAME [UPDATE] permission. This API can be operated by: - User (game session member) who is the current leader of the game session - Game Client - Dedicated Server (DS) This API will promote game session leader candidate with the following criteria: - Leader candidate is a member of the game session - Leader candidate has a &#34;CONNECTED&#34; or &#34;JOINED&#34; status - If the leader candidate is the current leader, then no promotion process is carried out
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Leader_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_UpdateLeader_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: PromoteLeaderRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: PromoteLeaderRequest;
}>;
/**
 * Reject a game session invitation.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Reject_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_DeleteReject_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 *  Used by game Client to Get Secret constraints - EnableSecret = true - Type = &#34;DS&#34; - secret value will only be produced if enableSecret is true and type is DS if enableSecret = false - empty secret will be returned as 200 OK Expected caller of this API - Game Client to get server secret In the Response you will get following: - 200 OK { &#34;secret&#34;: &lt;string&gt; } If there is error: - 400 Invalid path parameters - 401 unauthorized - 404 StatusNotFound - 500 Internal server error
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Secret_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_GetSecret_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
}, options?: Omit<UseQueryOptions<ServerSecret, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<ServerSecret>) => void) => UseQueryResult<ServerSecret, AxiosError<ApiError>>;
/**
 * Update game session backfill ticket id. Will override game session backfill ticket based on given request parameter
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Backfill_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionApi_UpdateBackfill_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: UpdateGameSessionBackfillRequest;
}>, "mutationKey">, callback?: (data: GameSessionResponse) => void) => UseMutationResult<GameSessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    data: UpdateGameSessionBackfillRequest;
}>;
/**
 * cancel a game session invitation.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Cancel_BySessionId_ByUserId, input]
 * }
 * ```
 */
declare const useGameSessionApi_DeleteCancel_BySessionId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    userId: string;
}>;
/**
 * Kick member from a game session, only leader can kick member.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSession.Kick_BySessionId_ByMemberId, input]
 * }
 * ```
 */
declare const useGameSessionApi_DeleteKick_BySessionId_ByMemberIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    memberId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    memberId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Party {
    Party = "Session.Party.Party",
    UsersMeParties = "Session.Party.UsersMeParties",
    Party_ByPartyId = "Session.Party.Party_ByPartyId",
    Code_ByPartyId = "Session.Party.Code_ByPartyId",
    Invite_ByPartyId = "Session.Party.Invite_ByPartyId",
    Leader_ByPartyId = "Session.Party.Leader_ByPartyId",
    PartyUserMeJoinCode = "Session.Party.PartyUserMeJoinCode",
    UserMeJoin_ByPartyId = "Session.Party.UserMeJoin_ByPartyId",
    UserMeLeave_ByPartyId = "Session.Party.UserMeLeave_ByPartyId",
    UserMeReject_ByPartyId = "Session.Party.UserMeReject_ByPartyId",
    Kick_ByPartyId_ByUserId = "Session.Party.Kick_ByPartyId_ByUserId",
    Cancel_ByPartyId_ByUserId = "Session.Party.Cancel_ByPartyId_ByUserId"
}
/**
 * A join code will be autogenerated if the party is joinable. A user can be in 1 party at a time, therefore the requester will be removed from their previous party (if any) and automatically added/joined into this newly created party as a leader. Session configuration name is optional. Default configuration name if empty: { &#34;name&#34;: &#34;default&#34;, &#34;type&#34;: &#34;NONE&#34;, &#34;joinability&#34;: &#34;OPEN&#34;, &#34;minPlayers&#34;: 1, &#34;maxPlayers&#34;: 8, &#34;inviteTimeout&#34;: 60, &#34;inactiveTimeout&#34;: 60, &#34;textChat&#34;: false } When session configuration &#34;name&#34; is provided, we will refer to the template if these fields are empty: - textChat - minPlayers - maxPlayers - inviteTimeout - inactiveTimeout - type - joinability - configurationName - attributes Supported platforms: 1. STEAM 2. PSN 3. XBOX Reserved attributes key: 1. preference: used to store preference of the leader and it is non-replaceable to keep the initial behavior of the session regardless the leader changes. 2. NATIVESESSIONTITLE: used for session sync, to define name of session displayed on PlayStation system UI. Session has 2 fields for user status: &#34;status&#34; and &#34;statusV2&#34;. The &#34;status&#34; is there for backward-compatibility, therefore we encourage to just rely on &#34;statusV2&#34; for the more updated statuses. User statuses: 1. INVITED: by default, to join a session (except session with OPEN joinability or if session configuration has &#34;autoJoin&#34; sets to True) a user will receive an invite. The invitee will have the chance to respond within &#34;inviteTimeout&#34; which you can configure through session configuration. 2. TIMEOUT: when a user is invited to a session, they will receive an invite. Unless &#34;disableResendInvite&#34; sets to True in the session configuration, the user will also receive invite reminder every 30s until they respond to the invite. 3. REJECTED: when a user rejects an invite. To rejoin an INVITE_ONLY session, they will need to be re-invited and accept the invite. 4. JOINED: there are few ways of a user to join a session, by invite, direct join (depends on session joinability) or join by code. upon invite, once a user accepts an invite, their status will be changed to JOINED. 5. LEFT: user can leave a session. in case of party, a user can only be in 1 party at a time. therefore when they decide to create or join another party, they will be automatically removed from their initial party and their status will be changed to LEFT. 6. KICKED: only party leader can kick a member. 7. DISCONNECTED: if user still have reserved seat in the session and they disconnect lobby websocket, their status in the session will be changed to DISCONNECTED and field &#34;members.previousStatus&#34; of that user will contains the initial status before they disconnect lobby websocket. the user will be given chance to reconnect within &#34;inactiveTimeout&#34; which you can configure through session configuration. 8. CONNECTED: when a user reconnect their lobby websocket, their status will change from DISCONNECTED to CONNECTED, only if they previously JOINED session. if they were on INVITED state before the disconnect happened, the user&#39;s status will return back to INVITED after they reconnect. 9. DROPPED: when &#34;inactiveTimeout&#34; is due and user never re-establish their websocket connection, we will drop them from the session. 10. TERMINATED: only applies to game session. If a game session (match) is ended, DS will end/delete the session and we will mark all remaining users&#39; status to be TERMINATED. 11. CANCELLED: when a session joinability changes to CLOSED, any remaining invites will be canceled. User is considered as active if they&#39;re present in the session, which their status either CONNECTED or JOINED. User has a reserved seat in the session if their status either INVITED, JOINED, CONNECTED, DISCONNECTED. When user&#39;s&#39; status change to other than these mentioned statuses, we will release the seat for other players to occupy. Managing the relation between session and lobby websocket connection: - Session relies on lobby to consider player&#39;s connection health to our backend. therefore a disruption to lobby websocket will be reflected in the user&#39;s status in all of their session(s). - If user still have a reserved seat in the session and they disconnect lobby websocket, their status in session(s) will be changed to DISCONNECTED and field &#34;members.previousStatus&#34; of that user will contains the initial status before they disconnect lobby websocket. This &#34;members.previousStatus&#34; used to track user&#39;s previous status before they disconnect websocket, since we still reserve a seat for them, therefore this field will be empty again after they websocket. - If the disconnected user is the leader of the session they&#39;re disconnected from, we will wait until &#34;leaderElectionGracePeriod&#34; is due, to promote the next oldest member as the new leader of the session. You can configure &#34;leaderElectionGracePeriod&#34; through session configuration. - The user will be given chance to reconnect within &#34;inactiveTimeout&#34; which you can configure through session configuration. If until &#34;inactiveTimeout&#34; is due and the user doesn&#39;t reconnect their websocket, they will be removed from session and their status will change to DROPPED. If the dropped user was the leader of the session, we will promote the next oldest member as leader. - By default, we will update user&#39;s status to what it was before disconnect, when the user reconnects lobby websocket, unless &#34;manualRejoin&#34; sets to True in the session configuration. When &#34;manualRejoin&#34; is enabled, after lobby websocket reconnect, the game client will need to manually invoke join session again to rejoin the session. - If the user was on INVITED state before the disconnect happened, the user&#39;s status will return back to INVITED after they reconnect.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Party, input]
 * }
 * ```
 */
declare const usePartyApi_CreatePartyMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreatePartyRequest;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: CreatePartyRequest;
}>;
/**
 * Query user&#39;s parties. By default, API will return a list of user&#39;s active parties.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.UsersMeParties, input]
 * }
 * ```
 */
declare const usePartyApi_GetUsersMeParties: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        order?: string | null;
        orderBy?: string | null;
        status?: string | null;
    };
}, options?: Omit<UseQueryOptions<PartyQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyQueryResponse>) => void) => UseQueryResult<PartyQueryResponse, AxiosError<ApiError>>;
/**
 * Get party details.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Party_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_GetParty_ByPartyId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    partyId: string;
}, options?: Omit<UseQueryOptions<PartySessionResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartySessionResponse>) => void) => UseQueryResult<PartySessionResponse, AxiosError<ApiError>>;
/**
 * Update specified fields from party data. Note: Join type can only be updated by the party&#39;s leader. Reserved attributes key: 1. preference: used to store preference of the leader and it is non-replaceable to keep the initial behavior of the session regardless the leader changes. 2. NATIVESESSIONTITLE: used for session sync, to define name of session displayed on PlayStation system UI.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Party_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_PatchParty_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: UpdatePartyRequest;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: UpdatePartyRequest;
}>;
/**
 * Updates party blob, this endpoint will override stored party data. Join type can only be updated by the party&#39;s leader. To update only specified fields, please use following endpoint: method : PATCH API : /session/v1/public/namespaces/{namespace}/gamesessions/{sessionId} Reserved attributes key: 1. preference: used to store preference of the leader and it is non-replaceable to keep the initial behavior of the session regardless the leader changes. 2. NATIVESESSIONTITLE: used for session sync, to define name of session displayed on PlayStation system UI.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Party_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_UpdateParty_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: UpdatePartyRequest;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: UpdatePartyRequest;
}>;
/**
 * Revoke code of the party. Only leader can revoke a code.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Code_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_DeleteCode_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>;
/**
 * Generate a new code for the party. Only leader can generate a code.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Code_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_UpdateCode_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>;
/**
 * Invite a user to a party. platformID represents the native platform of the invitee. API will return the corresponding native platform&#39;s userID. supported platforms: - STEAM - XBOX - PSN
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Invite_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_CreateInvite_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<SessionInviteResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: SessionInviteRequest;
}>, "mutationKey">, callback?: (data: SessionInviteResponse) => void) => UseMutationResult<SessionInviteResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: SessionInviteRequest;
}>;
/**
 * Promotes a party member to be a party leader. Only leader can promote a new leader.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Leader_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_UpdateLeader_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PromoteLeaderRequest;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    data: PromoteLeaderRequest;
}>;
/**
 * Join a party by code. The user can join a party as long as the code is valid
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.PartyUserMeJoinCode, input]
 * }
 * ```
 */
declare const usePartyApi_CreatePartyUserMeJoinCodeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: JoinByCodeRequest;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: JoinByCodeRequest;
}>;
/**
 * Join a party. The user can either join a party they have been invited to, or any party with an &#34;open&#34; joinable setting.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.UserMeJoin_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_CreateUserMeJoin_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>, "mutationKey">, callback?: (data: PartySessionResponse) => void) => UseMutationResult<PartySessionResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>;
/**
 * Leave a party
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.UserMeLeave_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_DeleteUserMeLeave_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>;
/**
 * Reject a party invitation.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.UserMeReject_ByPartyId, input]
 * }
 * ```
 */
declare const usePartyApi_DeleteUserMeReject_ByPartyIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
}>;
/**
 * Kick a player from a party. Requires invoker to be the party leader.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Kick_ByPartyId_ByUserId, input]
 * }
 * ```
 */
declare const usePartyApi_DeleteKick_ByPartyId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<KickResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    userId: string;
}>, "mutationKey">, callback?: (data: KickResponse) => void) => UseMutationResult<KickResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    userId: string;
}>;
/**
 * Cancel a party invitation.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Party.Cancel_ByPartyId_ByUserId, input]
 * }
 * ```
 */
declare const usePartyApi_DeleteCancel_ByPartyId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    partyId: string;
    userId: string;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_Player {
    UserBulkPlatform = "Session.Player.UserBulkPlatform",
    UserMeAttribute = "Session.Player.UserMeAttribute",
    UsersMeAttributes = "Session.Player.UsersMeAttributes"
}
/**
 * Get bulk players current platform.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.UserBulkPlatform, input]
 * }
 * ```
 */
declare const usePlayerApi_FetchUserBulkPlatform: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    data: PlayersCurrentPlatformRequest;
}, options?: Omit<UseQueryOptions<PlayersCurrentPlatformResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayersCurrentPlatformResponse>) => void) => UseQueryResult<PlayersCurrentPlatformResponse, AxiosError<ApiError>>;
/**
 * Reset player attributes.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.UserMeAttribute, input]
 * }
 * ```
 */
declare const usePlayerApi_DeleteUserMeAttributeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam>;
/**
 * Get player attributes. Field descriptions: - userID : user who owns the attributes. - crossplayEnabled : set to true if the player wants to enable crossplay to their session (default: false). - platforms : list of the player&#39;s 3rd party platform account information. - name : platform name. supported platforms: STEAM, XBOX, PSN - userID : platform userID - data : other data that the player wants to store. - PSN_PUSH_CONTEXT_ID: if provided, session will refer to this when performing session sync with PSN, otherwise will populate from session attributes - currentPlatform : latest user game platform. - roles : user role for matchmaking role base support.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.UsersMeAttributes, input]
 * }
 * ```
 */
declare const usePlayerApi_GetUsersMeAttributes: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<PlayerAttributesResponseBody, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PlayerAttributesResponseBody>) => void) => UseQueryResult<PlayerAttributesResponseBody, AxiosError<ApiError>>;
/**
 * This API behaves to upsert player&#39;s attributes. Field descriptions: - userID : user who owns the attributes. - crossplayEnabled : set to true if the player wants to enable crossplay to their session (default: false). - platforms : list of the player&#39;s 3rd party platform account information. - name : platform name. supported platforms: STEAM, XBOX, PSN - userID : platform userID - data : other data that the player wants to store. - PSN_PUSH_CONTEXT_ID: if provided, session will refer to this when performing session sync with PSN, otherwise will populate from session attributes - currentPlatform : latest user game platform. - roles : user role for matchmaking role base support.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_Player.UserMeAttribute, input]
 * }
 * ```
 */
declare const usePlayerApi_CreateUserMeAttributeMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<PlayerAttributesResponseBody, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlayerAttributesRequestBody;
}>, "mutationKey">, callback?: (data: PlayerAttributesResponseBody) => void) => UseMutationResult<PlayerAttributesResponseBody, AxiosError<ApiError>, SdkSetConfigParam & {
    data: PlayerAttributesRequestBody;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_RecentPlayer {
    RecentPlayer = "Session.RecentPlayer.RecentPlayer",
    RecentTeamPlayer = "Session.RecentPlayer.RecentTeamPlayer"
}
/**
 * Query user&#39;s recent player. Please ensure environment variable &#34;RECENT_PLAYER_ENABLED&#34; is set to &#34;TRUE&#34; to use this feature.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecentPlayer.RecentPlayer, input]
 * }
 * ```
 */
declare const useRecentPlayerApi_GetRecentPlayer: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<RecentPlayerQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RecentPlayerQueryResponse>) => void) => UseQueryResult<RecentPlayerQueryResponse, AxiosError<ApiError>>;
/**
 * Query user&#39;s recent player who were on the same team. Please ensure environment variable &#34;RECENT_TEAM_PLAYER_ENABLED&#34; is set to &#34;TRUE&#34; to use this feature.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_RecentPlayer.RecentTeamPlayer, input]
 * }
 * ```
 */
declare const useRecentPlayerApi_GetRecentTeamPlayer: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
    };
}, options?: Omit<UseQueryOptions<RecentPlayerQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<RecentPlayerQueryResponse>) => void) => UseQueryResult<RecentPlayerQueryResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_SessionStorage {
    StorageLeader_BySessionId = "Session.SessionStorage.StorageLeader_BySessionId",
    StorageUser_BySessionId_ByUserId = "Session.SessionStorage.StorageUser_BySessionId_ByUserId"
}
/**
 *  Update Insert Session Storage Leader. only Leader can update or insert user session storage data Leader. can store generic json example json can store : { &#34;leader&#34;: { &#34;leader&#34;: 1 }, &#34;data&#34;: 123 } game Admin can update or insert session storage Session Storage feature only available for Gamesession
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionStorage.StorageLeader_BySessionId, input]
 * }
 * ```
 */
declare const useSessionStorageApi_PatchStorageLeader_BySessionIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
}>;
/**
 *  Update Insert Session Storage User. user can only update or insert user session storage data itself. can store generic json example json can store : { &#34;storage&#34;: { &#34;storage&#34;: 1 }, &#34;data&#34;: 123 } game Admin can update or insert session storage Session Storage feature only available for Gamesession
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_SessionStorage.StorageUser_BySessionId_ByUserId, input]
 * }
 * ```
 */
declare const useSessionStorageApi_PatchStorageUser_BySessionId_ByUserIdMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    userId: string;
}>, "mutationKey">, callback?: (data: unknown) => void) => UseMutationResult<unknown, AxiosError<ApiError>, SdkSetConfigParam & {
    sessionId: string;
    userId: string;
}>;

export { Key_CertificateAdmin, Key_ConfigAdmin, Key_ConfigurationTemplateAdmin, Key_DsmcDefaultConfigurationAdmin, Key_EnvironmentVariableAdmin, Key_GameSession, Key_GameSessionAdmin, Key_GlobalConfigurationAdmin, Key_MaxActiveAdmin, Key_NativeSessionAdmin, Key_Party, Key_PartyAdmin, Key_PlatformCredentialAdmin, Key_Player, Key_PlayerAdmin, Key_RecentPlayer, Key_RecentPlayerAdmin, Key_SessionStorage, Key_SessionStorageAdmin, useCertificateAdminApi_UpdateCertificatePfxPlatformXblMutation, useConfigAdminApi_GetConfigLog, useConfigAdminApi_PatchConfigLogMutation, useConfigurationTemplateAdminApi_CreateConfigurationMutation, useConfigurationTemplateAdminApi_DeleteAlertsConfigurationMutation, useConfigurationTemplateAdminApi_DeleteConfiguration_ByNameMutation, useConfigurationTemplateAdminApi_GetAlertsConfiguration, useConfigurationTemplateAdminApi_GetConfiguration_ByName, useConfigurationTemplateAdminApi_GetConfigurations, useConfigurationTemplateAdminApi_GetDsconfigs, useConfigurationTemplateAdminApi_GetDsconfigsSync, useConfigurationTemplateAdminApi_UpdateAlertsConfigurationMutation, useConfigurationTemplateAdminApi_UpdateAlertsConfiguration_ByNSMutation, useConfigurationTemplateAdminApi_UpdateConfiguration_ByNameMutation, useDsmcDefaultConfigurationAdminApi_GetDsconfigsDefault, useEnvironmentVariableAdminApi_GetEnvironmentVariables, useGameSessionAdminApi_DeleteGamesessionBulkMutation, useGameSessionAdminApi_DeleteKick_BySessionId_ByMemberIdMutation, useGameSessionAdminApi_FetchGamesession, useGameSessionAdminApi_GetGamesessions, useGameSessionAdminApi_UpdateD_BySessionIdMutation, useGameSessionAdminApi_UpdateStatu_BySessionId_ByMemberId_ByStatusTypeMutation, useGameSessionApi_CreateGamesessionJoinCodeMutation, useGameSessionApi_CreateGamesessionMutation, useGameSessionApi_CreateGamesession_ByNSMutation, useGameSessionApi_CreateInvite_BySessionIdMutation, useGameSessionApi_CreateJoin_BySessionIdMutation, useGameSessionApi_DeleteCancel_BySessionId_ByUserIdMutation, useGameSessionApi_DeleteCode_BySessionIdMutation, useGameSessionApi_DeleteGamesession_BySessionIdMutation, useGameSessionApi_DeleteKick_BySessionId_ByMemberIdMutation, useGameSessionApi_DeleteLeave_BySessionIdMutation, useGameSessionApi_DeleteReject_BySessionIdMutation, useGameSessionApi_GetGamesessionServer_ByPodName, useGameSessionApi_GetGamesession_BySessionId, useGameSessionApi_GetSecret_BySessionId, useGameSessionApi_GetUsersMeGamesessions, useGameSessionApi_PatchGamesession_BySessionIdMutation, useGameSessionApi_UpdateBackfill_BySessionIdMutation, useGameSessionApi_UpdateCode_BySessionIdMutation, useGameSessionApi_UpdateGamesession_BySessionIdMutation, useGameSessionApi_UpdateLeader_BySessionIdMutation, useGameSessionApi_UpdateTeam_BySessionIdMutation, useGlobalConfigurationAdminApi_DeleteGlobalConfigurationMutation, useGlobalConfigurationAdminApi_GetGlobalConfigurations, useGlobalConfigurationAdminApi_UpdateGlobalConfigurationMutation, useMaxActiveAdminApi_GetMemberactivesession_ByName_ByUserId, useMaxActiveAdminApi_UpdateReconcile_ByNameMutation, useNativeSessionAdminApi_GetNativeSessions, usePartyAdminApi_CreateNativeSync_ByUserIdMutation, usePartyAdminApi_GetParties, usePartyApi_CreateInvite_ByPartyIdMutation, usePartyApi_CreatePartyMutation, usePartyApi_CreatePartyUserMeJoinCodeMutation, usePartyApi_CreateUserMeJoin_ByPartyIdMutation, usePartyApi_DeleteCancel_ByPartyId_ByUserIdMutation, usePartyApi_DeleteCode_ByPartyIdMutation, usePartyApi_DeleteKick_ByPartyId_ByUserIdMutation, usePartyApi_DeleteUserMeLeave_ByPartyIdMutation, usePartyApi_DeleteUserMeReject_ByPartyIdMutation, usePartyApi_GetParty_ByPartyId, usePartyApi_GetUsersMeParties, usePartyApi_PatchParty_ByPartyIdMutation, usePartyApi_UpdateCode_ByPartyIdMutation, usePartyApi_UpdateLeader_ByPartyIdMutation, usePartyApi_UpdateParty_ByPartyIdMutation, usePlatformCredentialAdminApi_DeletePlatformCredentialMutation, usePlatformCredentialAdminApi_GetPlatformCredentials, usePlatformCredentialAdminApi_UpdatePlatformCredentialMutation, usePlayerAdminApi_GetAttributes_ByUserId, usePlayerAdminApi_GetUsersAttributes, usePlayerApi_CreateUserMeAttributeMutation, usePlayerApi_DeleteUserMeAttributeMutation, usePlayerApi_FetchUserBulkPlatform, usePlayerApi_GetUsersMeAttributes, useRecentPlayerAdminApi_GetRecentPlayer, useRecentPlayerAdminApi_GetRecentTeamPlayer, useRecentPlayerApi_GetRecentPlayer, useRecentPlayerApi_GetRecentTeamPlayer, useSessionStorageAdminApi_DeleteStorage_BySessionIdMutation, useSessionStorageAdminApi_GetStorageUser_BySessionId_ByUserId, useSessionStorageAdminApi_GetStorage_BySessionId, useSessionStorageApi_PatchStorageLeader_BySessionIdMutation, useSessionStorageApi_PatchStorageUser_BySessionId_ByUserIdMutation };
