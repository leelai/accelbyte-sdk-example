import {
  ConfigAdminApi,
  GameSessionDetailAdminApi,
  GameSessionDetailApi,
  XRayAdminApi
} from "./chunk-GZHUCLSA.js";

// src/generated-admin/queries/ConfigAdmin.query.ts
import { useMutation, useQuery } from "@tanstack/react-query";
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["ConfigLog"] = "Sessionhistory.ConfigAdmin.ConfigLog";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_GetConfigLog = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfigLog();
    callback && callback(response);
    return response.data;
  };
  return useQuery({
    queryKey: ["Sessionhistory.ConfigAdmin.ConfigLog" /* ConfigLog */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfigLogMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfigLog(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return useMutation({
    mutationKey: ["Sessionhistory.ConfigAdmin.ConfigLog" /* ConfigLog */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/GameSessionDetailAdmin.query.ts
import { useQuery as useQuery2 } from "@tanstack/react-query";
var Key_GameSessionDetailAdmin = /* @__PURE__ */ ((Key_GameSessionDetailAdmin2) => {
  Key_GameSessionDetailAdmin2["Parties"] = "Sessionhistory.GameSessionDetailAdmin.Parties";
  Key_GameSessionDetailAdmin2["Tickets"] = "Sessionhistory.GameSessionDetailAdmin.Tickets";
  Key_GameSessionDetailAdmin2["Matchmaking"] = "Sessionhistory.GameSessionDetailAdmin.Matchmaking";
  Key_GameSessionDetailAdmin2["Gamesessions"] = "Sessionhistory.GameSessionDetailAdmin.Gamesessions";
  Key_GameSessionDetailAdmin2["Ticket_ByTicketId"] = "Sessionhistory.GameSessionDetailAdmin.Ticket_ByTicketId";
  Key_GameSessionDetailAdmin2["Party_BySessionId"] = "Sessionhistory.GameSessionDetailAdmin.Party_BySessionId";
  Key_GameSessionDetailAdmin2["Gamesession_BySessionId"] = "Sessionhistory.GameSessionDetailAdmin.Gamesession_BySessionId";
  Key_GameSessionDetailAdmin2["MatchmakingTicket_ByTicketId"] = "Sessionhistory.GameSessionDetailAdmin.MatchmakingTicket_ByTicketId";
  Key_GameSessionDetailAdmin2["MatchmakingSession_BySessionId"] = "Sessionhistory.GameSessionDetailAdmin.MatchmakingSession_BySessionId";
  return Key_GameSessionDetailAdmin2;
})(Key_GameSessionDetailAdmin || {});
var useGameSessionDetailAdminApi_GetParties = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getParties(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Parties" /* Parties */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetTickets = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTickets(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Tickets" /* Tickets */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetMatchmaking = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchmaking(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Matchmaking" /* Matchmaking */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetGamesessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Gamesessions" /* Gamesessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetTicket_ByTicketId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicket_ByTicketId(input2.ticketId);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Ticket_ByTicketId" /* Ticket_ByTicketId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetParty_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getParty_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Party_BySessionId" /* Party_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesession_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMatchmakingTicket_ByTicketId(input2.ticketId);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.MatchmakingTicket_ByTicketId" /* MatchmakingTicket_ByTicketId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMatchmakingSession_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return useQuery2({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.MatchmakingSession_BySessionId" /* MatchmakingSession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/XRayAdmin.query.ts
import { useMutation as useMutation2, useQuery as useQuery3 } from "@tanstack/react-query";
var Key_XRayAdmin = /* @__PURE__ */ ((Key_XRayAdmin2) => {
  Key_XRayAdmin2["XrayTicket_v2"] = "Sessionhistory.XRayAdmin.XrayTicket_v2";
  Key_XRayAdmin2["XrayTicketBulk_v2"] = "Sessionhistory.XRayAdmin.XrayTicketBulk_v2";
  Key_XRayAdmin2["XrayTicket_ByTicketId_v2"] = "Sessionhistory.XRayAdmin.XrayTicket_ByTicketId_v2";
  Key_XRayAdmin2["XrayMetricsTotalMatch_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalMatch_v2";
  Key_XRayAdmin2["XrayMetricsAcquiringDs_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsAcquiringDs_v2";
  Key_XRayAdmin2["XrayMatchPool_ByPoolName_v2"] = "Sessionhistory.XRayAdmin.XrayMatchPool_ByPoolName_v2";
  Key_XRayAdmin2["TicketsXray_ByUserId_v2"] = "Sessionhistory.XRayAdmin.TicketsXray_ByUserId_v2";
  Key_XRayAdmin2["TicketsXray_ByMatchId_v2"] = "Sessionhistory.XRayAdmin.TicketsXray_ByMatchId_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketMatch_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketMatch_v2";
  Key_XRayAdmin2["HistoriesXray_ByMatchId_v2"] = "Sessionhistory.XRayAdmin.HistoriesXray_ByMatchId_v2";
  Key_XRayAdmin2["XrayMetricsTotalActiveSession_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalActiveSession_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketCreated_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCreated_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketExpired_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketExpired_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketCanceled_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCanceled_v2";
  Key_XRayAdmin2["XrayMetricsMatchLengthDurationAvg_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationAvg_v2";
  Key_XRayAdmin2["XrayMetricsMatchLengthDurationP99_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationP99_v2";
  Key_XRayAdmin2["TicketHistoriesXray_ByMatchId_v2"] = "Sessionhistory.XRayAdmin.TicketHistoriesXray_ByMatchId_v2";
  Key_XRayAdmin2["XrayMetricsAcquiringDsWaitTimeAvg_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsAcquiringDsWaitTimeAvg_v2";
  Key_XRayAdmin2["XrayMetricsTotalPlayerPersessionAvg_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalPlayerPersessionAvg_v2";
  Key_XRayAdmin2["TicksXray_ByPoolName_ByPodName_v2"] = "Sessionhistory.XRayAdmin.TicksXray_ByPoolName_ByPodName_v2";
  Key_XRayAdmin2["MatchesXray_ByPoolName_ByPodName_ByTickId_v2"] = "Sessionhistory.XRayAdmin.MatchesXray_ByPoolName_ByPodName_ByTickId_v2";
  Key_XRayAdmin2["TicketsXray_ByPoolName_ByPodName_ByTickId_v2"] = "Sessionhistory.XRayAdmin.TicketsXray_ByPoolName_ByPodName_ByTickId_v2";
  return Key_XRayAdmin2;
})(Key_XRayAdmin || {});
var useXRayAdminApi_CreateXrayTicketMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await XRayAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createXrayTicket_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionhistory.XRayAdmin.XrayTicket_v2" /* XrayTicket_v2 */],
    mutationFn,
    ...options
  });
};
var useXRayAdminApi_CreateXrayTicketBulkMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await XRayAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createXrayTicketBulk_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return useMutation2({
    mutationKey: ["Sessionhistory.XRayAdmin.XrayTicketBulk_v2" /* XrayTicketBulk_v2 */],
    mutationFn,
    ...options
  });
};
var useXRayAdminApi_GetXrayTicket_ByTicketId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getXrayTicket_ByTicketId_v2(
      input2.ticketId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayTicket_ByTicketId_v2" /* XrayTicket_ByTicketId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalMatch_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getXrayMetricsTotalMatch_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalMatch_v2" /* XrayMetricsTotalMatch_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsAcquiringDs_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getXrayMetricsAcquiringDs_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsAcquiringDs_v2" /* XrayMetricsAcquiringDs_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMatchPool_ByPoolName_v2(input2.poolName, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMatchPool_ByPoolName_v2" /* XrayMatchPool_ByPoolName_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketsXray_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTicketsXray_ByUserId_v2(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.TicketsXray_ByUserId_v2" /* TicketsXray_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketsXray_ByMatchId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTicketsXray_ByMatchId_v2(
      input2.matchId
    );
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.TicketsXray_ByMatchId_v2" /* TicketsXray_ByMatchId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketMatch_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketMatch_v2" /* XrayMetricsTotalTicketMatch_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetHistoriesXray_ByMatchId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistoriesXray_ByMatchId_v2(input2.matchId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.HistoriesXray_ByMatchId_v2" /* HistoriesXray_ByMatchId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalActiveSession_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalActiveSession_v2" /* XrayMetricsTotalActiveSession_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketCreated_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCreated_v2" /* XrayMetricsTotalTicketCreated_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketExpired_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketExpired_v2" /* XrayMetricsTotalTicketExpired_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketCanceled_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCanceled_v2" /* XrayMetricsTotalTicketCanceled_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsMatchLengthDurationAvg_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationAvg_v2" /* XrayMetricsMatchLengthDurationAvg_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsMatchLengthDurationP99_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationP99_v2" /* XrayMetricsMatchLengthDurationP99_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicketHistoriesXray_ByMatchId_v2(input2.matchId);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.TicketHistoriesXray_ByMatchId_v2" /* TicketHistoriesXray_ByMatchId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsAcquiringDsWaitTimeAvg_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsAcquiringDsWaitTimeAvg_v2" /* XrayMetricsAcquiringDsWaitTimeAvg_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalPlayerPersessionAvg_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalPlayerPersessionAvg_v2" /* XrayMetricsTotalPlayerPersessionAvg_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicksXray_ByPoolName_ByPodName_v2(input2.poolName, input2.podName, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.TicksXray_ByPoolName_ByPodName_v2" /* TicksXray_ByPoolName_ByPodName_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMatchesXray_ByPoolName_ByPodName_ByTickId_v2(input2.poolName, input2.podName, input2.tickId);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.MatchesXray_ByPoolName_ByPodName_ByTickId_v2" /* MatchesXray_ByPoolName_ByPodName_ByTickId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicketsXray_ByPoolName_ByPodName_ByTickId_v2(input2.poolName, input2.podName, input2.tickId);
    callback && callback(response);
    return response.data;
  };
  return useQuery3({
    queryKey: ["Sessionhistory.XRayAdmin.TicketsXray_ByPoolName_ByPodName_ByTickId_v2" /* TicketsXray_ByPoolName_ByPodName_ByTickId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/GameSessionDetail.query.ts
import { useQuery as useQuery4 } from "@tanstack/react-query";
var Key_GameSessionDetail = /* @__PURE__ */ ((Key_GameSessionDetail2) => {
  Key_GameSessionDetail2["UsersMeGamesessions"] = "Sessionhistory.GameSessionDetail.UsersMeGamesessions";
  return Key_GameSessionDetail2;
})(Key_GameSessionDetail || {});
var useGameSessionDetailApi_GetUsersMeGamesessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeGamesessions(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return useQuery4({
    queryKey: ["Sessionhistory.GameSessionDetail.UsersMeGamesessions" /* UsersMeGamesessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
export {
  Key_ConfigAdmin,
  Key_GameSessionDetail,
  Key_GameSessionDetailAdmin,
  Key_XRayAdmin,
  useConfigAdminApi_GetConfigLog,
  useConfigAdminApi_PatchConfigLogMutation,
  useGameSessionDetailAdminApi_GetGamesession_BySessionId,
  useGameSessionDetailAdminApi_GetGamesessions,
  useGameSessionDetailAdminApi_GetMatchmaking,
  useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId,
  useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId,
  useGameSessionDetailAdminApi_GetParties,
  useGameSessionDetailAdminApi_GetParty_BySessionId,
  useGameSessionDetailAdminApi_GetTicket_ByTicketId,
  useGameSessionDetailAdminApi_GetTickets,
  useGameSessionDetailApi_GetUsersMeGamesessions,
  useXRayAdminApi_CreateXrayTicketBulkMutation_v2,
  useXRayAdminApi_CreateXrayTicketMutation_v2,
  useXRayAdminApi_GetHistoriesXray_ByMatchId_v2,
  useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2,
  useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2,
  useXRayAdminApi_GetTicketsXray_ByMatchId_v2,
  useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2,
  useXRayAdminApi_GetTicketsXray_ByUserId_v2,
  useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2,
  useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2,
  useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2,
  useXRayAdminApi_GetXrayMetricsAcquiringDs_v2,
  useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2,
  useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2,
  useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2,
  useXRayAdminApi_GetXrayMetricsTotalMatch_v2,
  useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2,
  useXRayAdminApi_GetXrayTicket_ByTicketId_v2
};
