"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/all-query-imports.ts
var all_query_imports_exports = {};
__export(all_query_imports_exports, {
  Key_ConfigAdmin: () => Key_ConfigAdmin,
  Key_GameSessionDetail: () => Key_GameSessionDetail,
  Key_GameSessionDetailAdmin: () => Key_GameSessionDetailAdmin,
  Key_XRayAdmin: () => Key_XRayAdmin,
  useConfigAdminApi_GetConfigLog: () => useConfigAdminApi_GetConfigLog,
  useConfigAdminApi_PatchConfigLogMutation: () => useConfigAdminApi_PatchConfigLogMutation,
  useGameSessionDetailAdminApi_GetGamesession_BySessionId: () => useGameSessionDetailAdminApi_GetGamesession_BySessionId,
  useGameSessionDetailAdminApi_GetGamesessions: () => useGameSessionDetailAdminApi_GetGamesessions,
  useGameSessionDetailAdminApi_GetMatchmaking: () => useGameSessionDetailAdminApi_GetMatchmaking,
  useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId: () => useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId,
  useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId: () => useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId,
  useGameSessionDetailAdminApi_GetParties: () => useGameSessionDetailAdminApi_GetParties,
  useGameSessionDetailAdminApi_GetParty_BySessionId: () => useGameSessionDetailAdminApi_GetParty_BySessionId,
  useGameSessionDetailAdminApi_GetTicket_ByTicketId: () => useGameSessionDetailAdminApi_GetTicket_ByTicketId,
  useGameSessionDetailAdminApi_GetTickets: () => useGameSessionDetailAdminApi_GetTickets,
  useGameSessionDetailApi_GetUsersMeGamesessions: () => useGameSessionDetailApi_GetUsersMeGamesessions,
  useXRayAdminApi_CreateXrayTicketBulkMutation_v2: () => useXRayAdminApi_CreateXrayTicketBulkMutation_v2,
  useXRayAdminApi_CreateXrayTicketMutation_v2: () => useXRayAdminApi_CreateXrayTicketMutation_v2,
  useXRayAdminApi_GetHistoriesXray_ByMatchId_v2: () => useXRayAdminApi_GetHistoriesXray_ByMatchId_v2,
  useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2: () => useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2,
  useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2: () => useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2,
  useXRayAdminApi_GetTicketsXray_ByMatchId_v2: () => useXRayAdminApi_GetTicketsXray_ByMatchId_v2,
  useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2: () => useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2,
  useXRayAdminApi_GetTicketsXray_ByUserId_v2: () => useXRayAdminApi_GetTicketsXray_ByUserId_v2,
  useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2: () => useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2,
  useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2: () => useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2,
  useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2: () => useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2,
  useXRayAdminApi_GetXrayMetricsAcquiringDs_v2: () => useXRayAdminApi_GetXrayMetricsAcquiringDs_v2,
  useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2: () => useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2,
  useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2: () => useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2,
  useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2: () => useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2,
  useXRayAdminApi_GetXrayMetricsTotalMatch_v2: () => useXRayAdminApi_GetXrayMetricsTotalMatch_v2,
  useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2: () => useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2: () => useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2: () => useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2: () => useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2: () => useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2,
  useXRayAdminApi_GetXrayTicket_ByTicketId_v2: () => useXRayAdminApi_GetXrayTicket_ByTicketId_v2
});
module.exports = __toCommonJS(all_query_imports_exports);

// src/generated-admin/queries/ConfigAdmin.query.ts
var import_react_query = require("@tanstack/react-query");

// src/generated-admin/ConfigAdminApi.ts
var import_sdk2 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/ConfigAdmin$.ts
var import_sdk = require("@accelbyte/sdk");

// src/generated-definitions/Configuration.ts
var import_zod = require("zod");
var Configuration = import_zod.z.object({ logLevel: import_zod.z.enum(["debug", "error", "fatal", "info", "panic", "trace", "warning"]).nullish() });

// src/generated-admin/endpoints/ConfigAdmin$.ts
var ConfigAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get Log Configuration.&lt;br&gt;
   */
  getConfigLog() {
    const params = {};
    const url = "/sessionhistory/v1/admin/config/log";
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, Configuration, "Configuration");
  }
  /**
   * Update Log Configuration.&lt;br&gt;
   */
  patchConfigLog(data) {
    const params = {};
    const url = "/sessionhistory/v1/admin/config/log";
    const resultPromise = this.axiosInstance.patch(url, data, { params });
    return import_sdk.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, Configuration, "Configuration");
  }
};

// src/generated-admin/ConfigAdminApi.ts
function ConfigAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk2.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk2.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getConfigLog() {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getConfigLog();
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function patchConfigLog(data) {
    const $ = new ConfigAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.patchConfigLog(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get Log Configuration.&lt;br&gt;
     */
    getConfigLog,
    /**
     * Update Log Configuration.&lt;br&gt;
     */
    patchConfigLog
  };
}

// src/generated-admin/queries/ConfigAdmin.query.ts
var Key_ConfigAdmin = /* @__PURE__ */ ((Key_ConfigAdmin2) => {
  Key_ConfigAdmin2["ConfigLog"] = "Sessionhistory.ConfigAdmin.ConfigLog";
  return Key_ConfigAdmin2;
})(Key_ConfigAdmin || {});
var useConfigAdminApi_GetConfigLog = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await ConfigAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getConfigLog();
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query.useQuery)({
    queryKey: ["Sessionhistory.ConfigAdmin.ConfigLog" /* ConfigLog */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useConfigAdminApi_PatchConfigLogMutation = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await ConfigAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).patchConfigLog(input.data);
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query.useMutation)({
    mutationKey: ["Sessionhistory.ConfigAdmin.ConfigLog" /* ConfigLog */],
    mutationFn,
    ...options
  });
};

// src/generated-admin/queries/GameSessionDetailAdmin.query.ts
var import_react_query2 = require("@tanstack/react-query");

// src/generated-admin/GameSessionDetailAdminApi.ts
var import_sdk4 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/GameSessionDetailAdmin$.ts
var import_sdk3 = require("@accelbyte/sdk");

// src/generated-definitions/GameSessionDetail.ts
var import_zod10 = require("zod");

// src/generated-definitions/History.ts
var import_zod9 = require("zod");

// src/generated-definitions/GameSession.ts
var import_zod8 = require("zod");

// src/generated-definitions/DsInformation.ts
var import_zod3 = require("zod");

// src/generated-definitions/GameServer.ts
var import_zod2 = require("zod");
var GameServer = import_zod2.z.object({
  alternate_ips: import_zod2.z.array(import_zod2.z.string()).nullish(),
  custom_attribute: import_zod2.z.string().nullish(),
  deployment: import_zod2.z.string().nullish(),
  game_version: import_zod2.z.string().nullish(),
  image_version: import_zod2.z.string().nullish(),
  ip: import_zod2.z.string().nullish(),
  is_override_game_version: import_zod2.z.boolean().nullish(),
  last_update: import_zod2.z.string().nullish(),
  namespace: import_zod2.z.string().nullish(),
  pod_name: import_zod2.z.string().nullish(),
  port: import_zod2.z.number().int().nullish(),
  ports: import_zod2.z.record(import_zod2.z.number().int()).nullish(),
  protocol: import_zod2.z.string().nullish(),
  provider: import_zod2.z.string().nullish(),
  region: import_zod2.z.string().nullish(),
  session_id: import_zod2.z.string().nullish(),
  status: import_zod2.z.string().nullish()
});

// src/generated-definitions/DsInformation.ts
var DsInformation = import_zod3.z.object({
  RequestedAt: import_zod3.z.string().nullish(),
  Server: GameServer.nullish(),
  Status: import_zod3.z.string().nullish(),
  StatusV2: import_zod3.z.string().nullish()
});

// src/generated-definitions/GameSessionTeam.ts
var import_zod5 = require("zod");

// src/generated-definitions/PartyMembers.ts
var import_zod4 = require("zod");
var PartyMembers = import_zod4.z.object({ partyID: import_zod4.z.string().nullish(), userIDs: import_zod4.z.array(import_zod4.z.string()).nullish() });

// src/generated-definitions/GameSessionTeam.ts
var GameSessionTeam = import_zod5.z.object({ parties: import_zod5.z.array(PartyMembers).nullish(), userIDs: import_zod5.z.array(import_zod5.z.string()).nullish() });

// src/generated-definitions/SessionConfig.ts
var import_zod6 = require("zod");
var SessionConfig = import_zod6.z.object({
  ClientVersion: import_zod6.z.string().nullish(),
  Deployment: import_zod6.z.string().nullish(),
  InactiveTimeout: import_zod6.z.number().int().nullish(),
  InviteTimeout: import_zod6.z.number().int().nullish(),
  Joinability: import_zod6.z.string().nullish(),
  MaxPlayers: import_zod6.z.number().int().nullish(),
  MinPlayers: import_zod6.z.number().int().nullish(),
  Name: import_zod6.z.string().nullish(),
  Persistent: import_zod6.z.boolean().nullish(),
  RequestedRegions: import_zod6.z.array(import_zod6.z.string()).nullish(),
  Type: import_zod6.z.string().nullish()
});

// src/generated-definitions/User.ts
var import_zod7 = require("zod");
var User = import_zod7.z.object({
  ID: import_zod7.z.string().nullish(),
  PlatformID: import_zod7.z.string().nullish(),
  PlatformUserID: import_zod7.z.string().nullish(),
  Status: import_zod7.z.string().nullish(),
  StatusV2: import_zod7.z.string().nullish(),
  UpdatedAt: import_zod7.z.string().nullish()
});

// src/generated-definitions/GameSession.ts
var GameSession = import_zod8.z.object({
  Attributes: import_zod8.z.record(import_zod8.z.any()).nullish(),
  BackfillTicketID: import_zod8.z.string().nullish(),
  Code: import_zod8.z.string().nullish(),
  Configuration: SessionConfig.nullish(),
  ConfigurationName: import_zod8.z.string().nullish(),
  CreatedAt: import_zod8.z.string().nullish(),
  CreatedBy: import_zod8.z.string().nullish(),
  DSInformation: DsInformation.nullish(),
  GameMode: import_zod8.z.string().nullish(),
  ID: import_zod8.z.string().nullish(),
  IsFull: import_zod8.z.boolean().nullish(),
  LeaderID: import_zod8.z.string().nullish(),
  MatchPool: import_zod8.z.string().nullish(),
  Members: import_zod8.z.array(User).nullish(),
  Namespace: import_zod8.z.string().nullish(),
  ProcessingTime: import_zod8.z.number().int().nullish(),
  Teams: import_zod8.z.array(GameSessionTeam).nullish(),
  TicketIDs: import_zod8.z.array(import_zod8.z.string()).nullish(),
  UpdatedAt: import_zod8.z.string().nullish(),
  Version: import_zod8.z.number().int().nullish(),
  isActive: import_zod8.z.boolean().nullish()
});

// src/generated-definitions/History.ts
var History = import_zod9.z.object({
  eventName: import_zod9.z.string(),
  payload: GameSession,
  requesterClientID: import_zod9.z.string().nullish(),
  requesterUserID: import_zod9.z.string().nullish(),
  timestamp: import_zod9.z.string()
});

// src/generated-definitions/GameSessionDetail.ts
var GameSessionDetail = import_zod10.z.object({
  created_at: import_zod10.z.string(),
  histories: import_zod10.z.array(History),
  namespace: import_zod10.z.string(),
  sessionID: import_zod10.z.string(),
  session_template: import_zod10.z.string()
});

// src/generated-definitions/GameSessionDetailQueryResponse.ts
var import_zod12 = require("zod");

// src/generated-definitions/Pagination.ts
var import_zod11 = require("zod");
var Pagination = import_zod11.z.object({ first: import_zod11.z.string(), last: import_zod11.z.string(), next: import_zod11.z.string(), previous: import_zod11.z.string() });

// src/generated-definitions/GameSessionDetailQueryResponse.ts
var GameSessionDetailQueryResponse = import_zod12.z.object({ data: import_zod12.z.array(GameSessionDetail), paging: Pagination });

// src/generated-definitions/MatchmakingDetail.ts
var import_zod23 = require("zod");

// src/generated-definitions/MatchmakingHistory.ts
var import_zod22 = require("zod");

// src/generated-definitions/BackfillProposal.ts
var import_zod18 = require("zod");

// src/generated-definitions/Team.ts
var import_zod14 = require("zod");

// src/generated-definitions/PartyTeam.ts
var import_zod13 = require("zod");
var PartyTeam = import_zod13.z.object({ PartyID: import_zod13.z.string().nullish(), UserIDs: import_zod13.z.array(import_zod13.z.string()).nullish() });

// src/generated-definitions/Team.ts
var Team = import_zod14.z.object({ Parties: import_zod14.z.array(PartyTeam).nullish(), UserIDs: import_zod14.z.array(import_zod14.z.string()).nullish() });

// src/generated-definitions/Ticket.ts
var import_zod17 = require("zod");

// src/generated-definitions/PlayerData.ts
var import_zod15 = require("zod");
var PlayerData = import_zod15.z.object({
  Attributes: import_zod15.z.record(import_zod15.z.any()).nullish(),
  PartyID: import_zod15.z.string().nullish(),
  PlatformID: import_zod15.z.string().nullish(),
  PlayerID: import_zod15.z.string().nullish()
});

// src/generated-definitions/ProposedProposal.ts
var import_zod16 = require("zod");
var ProposedProposal = import_zod16.z.object({
  BackfillID: import_zod16.z.string().nullish(),
  ProposalID: import_zod16.z.string().nullish(),
  Status: import_zod16.z.string().nullish()
});

// src/generated-definitions/Ticket.ts
var Ticket = import_zod17.z.object({
  CreatedAt: import_zod17.z.string().nullish(),
  Latencies: import_zod17.z.record(import_zod17.z.number().int()).nullish(),
  MatchPool: import_zod17.z.string().nullish(),
  MatchedAt: import_zod17.z.string().nullish(),
  Namespace: import_zod17.z.string().nullish(),
  PartySessionID: import_zod17.z.string().nullish(),
  Players: import_zod17.z.array(PlayerData).nullish(),
  ProposedProposal: ProposedProposal.nullish(),
  TicketAttributes: import_zod17.z.record(import_zod17.z.any()).nullish(),
  TicketID: import_zod17.z.string().nullish()
});

// src/generated-definitions/BackfillProposal.ts
var BackfillProposal = import_zod18.z.object({
  AddedTickets: import_zod18.z.array(Ticket).nullish(),
  BackfillTicketID: import_zod18.z.string().nullish(),
  CreatedAt: import_zod18.z.string().nullish(),
  MatchPool: import_zod18.z.string().nullish(),
  MatchSessionID: import_zod18.z.string().nullish(),
  ProposalID: import_zod18.z.string().nullish(),
  ProposedTeams: import_zod18.z.array(Team).nullish()
});

// src/generated-definitions/BackfillTicket.ts
var import_zod21 = require("zod");

// src/generated-definitions/Match.ts
var import_zod20 = require("zod");

// src/generated-definitions/MatchTicket.ts
var import_zod19 = require("zod");
var MatchTicket = import_zod19.z.object({
  CreatedAt: import_zod19.z.string().nullish(),
  IsPivot: import_zod19.z.boolean().nullish(),
  Latencies: import_zod19.z.record(import_zod19.z.number().int()).nullish(),
  MatchPool: import_zod19.z.string().nullish(),
  MatchedAt: import_zod19.z.string().nullish(),
  Namespace: import_zod19.z.string().nullish(),
  PartySessionID: import_zod19.z.string().nullish(),
  Players: import_zod19.z.array(PlayerData).nullish(),
  ProposedProposal: ProposedProposal.nullish(),
  RegionPreference: import_zod19.z.array(import_zod19.z.string()).nullish(),
  TicketAttributes: import_zod19.z.record(import_zod19.z.any()).nullish(),
  TicketID: import_zod19.z.string().nullish(),
  TimeToMatch: import_zod19.z.number().nullish()
});

// src/generated-definitions/Match.ts
var Match = import_zod20.z.object({
  Backfill: import_zod20.z.boolean().nullish(),
  ClientVersion: import_zod20.z.string().nullish(),
  MatchAttributes: import_zod20.z.record(import_zod20.z.any()).nullish(),
  PivotID: import_zod20.z.string().nullish(),
  RegionPreference: import_zod20.z.array(import_zod20.z.string()).nullish(),
  ServerName: import_zod20.z.string().nullish(),
  Teams: import_zod20.z.array(Team).nullish(),
  Tickets: import_zod20.z.array(MatchTicket).nullish(),
  Timestamp: import_zod20.z.string().nullish()
});

// src/generated-definitions/BackfillTicket.ts
var BackfillTicket = import_zod21.z.object({
  CreatedAt: import_zod21.z.string().nullish(),
  MatchPool: import_zod21.z.string().nullish(),
  MatchSessionID: import_zod21.z.string().nullish(),
  MatchSessionVersion: import_zod21.z.number().int().nullish(),
  PartialMatch: Match.nullish(),
  TicketID: import_zod21.z.string().nullish()
});

// src/generated-definitions/MatchmakingHistory.ts
var MatchmakingHistory = import_zod22.z.object({
  backfillProposal: BackfillProposal.nullish(),
  backfillTicket: BackfillTicket.nullish(),
  eventName: import_zod22.z.string().nullish(),
  requestedUserID: import_zod22.z.string().nullish(),
  ticket: Ticket.nullish(),
  timestamp: import_zod22.z.string().nullish(),
  unbackfillReason: import_zod22.z.string().nullish()
});

// src/generated-definitions/MatchmakingDetail.ts
var MatchmakingDetail = import_zod23.z.object({
  createdAt: import_zod23.z.string().nullish(),
  expiredAt: import_zod23.z.string().nullish(),
  gameSessionID: import_zod23.z.string().nullish(),
  histories: import_zod23.z.array(MatchmakingHistory).nullish(),
  matchPool: import_zod23.z.string().nullish(),
  matchRule: import_zod23.z.string().nullish(),
  namespace: import_zod23.z.string().nullish(),
  partySessionID: import_zod23.z.string().nullish(),
  ticketID: import_zod23.z.string().nullish()
});

// src/generated-definitions/MatchmakingDetailQueryResponse.ts
var import_zod24 = require("zod");
var MatchmakingDetailQueryResponse = import_zod24.z.object({ data: import_zod24.z.array(MatchmakingDetail), paging: Pagination });

// src/generated-definitions/PartyDetail.ts
var import_zod28 = require("zod");

// src/generated-definitions/PartyHistory.ts
var import_zod27 = require("zod");

// src/generated-definitions/Party.ts
var import_zod26 = require("zod");

// src/generated-definitions/SessionConfiguration.ts
var import_zod25 = require("zod");
var SessionConfiguration = import_zod25.z.object({
  ClientVersion: import_zod25.z.string().nullish(),
  Deployment: import_zod25.z.string().nullish(),
  InactiveTimeout: import_zod25.z.number().int().nullish(),
  InviteTimeout: import_zod25.z.number().int().nullish(),
  Joinability: import_zod25.z.string().nullish(),
  MaxPlayers: import_zod25.z.number().int().nullish(),
  MinPlayers: import_zod25.z.number().int().nullish(),
  Persistent: import_zod25.z.boolean().nullish(),
  RequestedRegions: import_zod25.z.array(import_zod25.z.string()).nullish(),
  TextChat: import_zod25.z.boolean().nullish(),
  Type: import_zod25.z.string().nullish()
});

// src/generated-definitions/Party.ts
var Party = import_zod26.z.object({
  Attributes: import_zod26.z.record(import_zod26.z.any()).nullish(),
  Code: import_zod26.z.string().nullish(),
  Configuration: SessionConfiguration.nullish(),
  ConfigurationName: import_zod26.z.string().nullish(),
  CreatedAt: import_zod26.z.string().nullish(),
  CreatedBy: import_zod26.z.string().nullish(),
  ExpiredAt: import_zod26.z.string().nullish(),
  ID: import_zod26.z.string().nullish(),
  IsActive: import_zod26.z.boolean().nullish(),
  IsFull: import_zod26.z.boolean().nullish(),
  LeaderID: import_zod26.z.string().nullish(),
  Members: import_zod26.z.array(User).nullish(),
  Namespace: import_zod26.z.string().nullish(),
  UpdatedAt: import_zod26.z.string().nullish(),
  Version: import_zod26.z.number().int().nullish()
});

// src/generated-definitions/PartyHistory.ts
var PartyHistory = import_zod27.z.object({
  eventName: import_zod27.z.string(),
  payload: Party,
  requesterClientID: import_zod27.z.string().nullish(),
  requesterUserID: import_zod27.z.string().nullish(),
  timestamp: import_zod27.z.string()
});

// src/generated-definitions/PartyDetail.ts
var PartyDetail = import_zod28.z.object({
  created_at: import_zod28.z.string(),
  histories: import_zod28.z.array(PartyHistory),
  namespace: import_zod28.z.string(),
  partySessionID: import_zod28.z.string(),
  session_template: import_zod28.z.string()
});

// src/generated-definitions/PartyDetailQueryResponse.ts
var import_zod29 = require("zod");
var PartyDetailQueryResponse = import_zod29.z.object({ data: import_zod29.z.array(PartyDetail), paging: Pagination });

// src/generated-definitions/TicketDetailQueryResponse.ts
var import_zod40 = require("zod");

// src/generated-definitions/TicketObservabilityDetail.ts
var import_zod39 = require("zod");

// src/generated-definitions/TicketObservability.ts
var import_zod37 = require("zod");

// src/generated-definitions/TicketData.ts
var import_zod36 = require("zod");

// src/generated-definitions/AllianceRule.ts
var import_zod30 = require("zod");
var AllianceRule = import_zod30.z.object({
  max_number: import_zod30.z.number().int(),
  min_number: import_zod30.z.number().int(),
  player_max_number: import_zod30.z.number().int(),
  player_min_number: import_zod30.z.number().int()
});

// src/generated-definitions/MatchingRule.ts
var import_zod31 = require("zod");
var MatchingRule = import_zod31.z.object({ attribute: import_zod31.z.string(), criteria: import_zod31.z.string(), reference: import_zod31.z.number() });

// src/generated-definitions/MatchmakingResult.ts
var import_zod35 = require("zod");

// src/generated-definitions/MatchingAlly.ts
var import_zod34 = require("zod");

// src/generated-definitions/MatchingParty.ts
var import_zod33 = require("zod");

// src/generated-definitions/PartyMember.ts
var import_zod32 = require("zod");
var PartyMember = import_zod32.z.object({ extra_attributes: import_zod32.z.record(import_zod32.z.any()).nullish(), user_id: import_zod32.z.string() });

// src/generated-definitions/MatchingParty.ts
var MatchingParty = import_zod33.z.object({
  first_ticket_created_at: import_zod33.z.number().int(),
  party_attributes: import_zod33.z.record(import_zod33.z.any()).nullish(),
  party_id: import_zod33.z.string(),
  party_members: import_zod33.z.array(PartyMember),
  ticket_id: import_zod33.z.string()
});

// src/generated-definitions/MatchingAlly.ts
var MatchingAlly = import_zod34.z.object({ matching_parties: import_zod34.z.array(MatchingParty) });

// src/generated-definitions/MatchmakingResult.ts
var MatchmakingResult = import_zod35.z.object({
  channel: import_zod35.z.string().nullish(),
  client_version: import_zod35.z.string().nullish(),
  deployment: import_zod35.z.string().nullish(),
  error_code: import_zod35.z.number().int().nullish(),
  error_message: import_zod35.z.string().nullish(),
  game_mode: import_zod35.z.string().nullish(),
  joinable: import_zod35.z.boolean().nullish(),
  match_id: import_zod35.z.string(),
  match_session_id: import_zod35.z.string().nullish(),
  matching_allies: import_zod35.z.array(MatchingAlly),
  namespace: import_zod35.z.string().nullish(),
  party_attributes: import_zod35.z.record(import_zod35.z.any()).nullish(),
  party_id: import_zod35.z.string().nullish(),
  queued_at: import_zod35.z.number().int(),
  region: import_zod35.z.string().nullish(),
  server_name: import_zod35.z.string().nullish(),
  status: import_zod35.z.string().nullish(),
  ticket_id: import_zod35.z.string(),
  updated_at: import_zod35.z.string()
});

// src/generated-definitions/TicketData.ts
var TicketData = import_zod36.z.object({
  action: import_zod36.z.string(),
  activeAllianceRule: AllianceRule.nullish(),
  activeMatchingRule: import_zod36.z.array(MatchingRule).nullish(),
  elapsedTime: import_zod36.z.number().nullish(),
  function: import_zod36.z.string().nullish(),
  gameMode: import_zod36.z.string(),
  isBackfillMatch: import_zod36.z.boolean(),
  isPivot: import_zod36.z.boolean(),
  isRuleSetFlexed: import_zod36.z.boolean(),
  iteration: import_zod36.z.number().int().nullish(),
  matchID: import_zod36.z.string().nullish(),
  matchedRegion: import_zod36.z.string(),
  memberAttributes: import_zod36.z.record(import_zod36.z.any()),
  namespace: import_zod36.z.string(),
  partyID: import_zod36.z.string(),
  podName: import_zod36.z.string(),
  remainingPlayersPerTicket: import_zod36.z.array(import_zod36.z.number().int()).nullish(),
  remainingTickets: import_zod36.z.number().int().nullish(),
  session: MatchmakingResult.nullish(),
  sessionTickID: import_zod36.z.string(),
  tickID: import_zod36.z.number().int(),
  timeToMatchSec: import_zod36.z.number().nullish(),
  timestamp: import_zod36.z.string(),
  totalPlayers: import_zod36.z.number().int(),
  unbackfillReason: import_zod36.z.string().nullish(),
  unmatchReason: import_zod36.z.string().nullish()
});

// src/generated-definitions/TicketObservability.ts
var TicketObservability = import_zod37.z.object({ ticket: TicketData });

// src/generated-definitions/TicketObservabilityHistory.ts
var import_zod38 = require("zod");
var TicketObservabilityHistory = import_zod38.z.object({
  Action: import_zod38.z.string(),
  ExpiredAt: import_zod38.z.string(),
  ID: import_zod38.z.string(),
  Payload: import_zod38.z.record(import_zod38.z.any()),
  PodName: import_zod38.z.string(),
  TickID: import_zod38.z.number().int(),
  Timestamp: import_zod38.z.string(),
  party_id: import_zod38.z.string(),
  ticket_id: import_zod38.z.string()
});

// src/generated-definitions/TicketObservabilityDetail.ts
var TicketObservabilityDetail = import_zod39.z.object({
  action: import_zod39.z.string(),
  createdAt: import_zod39.z.string(),
  expiredAt: import_zod39.z.string(),
  game_mode: import_zod39.z.string(),
  history: import_zod39.z.array(TicketObservabilityHistory).nullish(),
  lastData: TicketObservability.nullish(),
  matchId: import_zod39.z.string(),
  namespace: import_zod39.z.string(),
  party_id: import_zod39.z.string(),
  regions: import_zod39.z.string(),
  remainingPlayersPerTicket: import_zod39.z.array(import_zod39.z.number().int()).nullish(),
  remainingTickets: import_zod39.z.number().int(),
  requestedRegion: import_zod39.z.array(import_zod39.z.string()).nullish(),
  ticket: Ticket.nullish(),
  ticket_id: import_zod39.z.string(),
  timeToMatchSec: import_zod39.z.number().nullish(),
  updatedAt: import_zod39.z.string(),
  userIDs: import_zod39.z.array(import_zod39.z.string()).nullish()
});

// src/generated-definitions/TicketDetailQueryResponse.ts
var TicketDetailQueryResponse = import_zod40.z.object({ data: import_zod40.z.array(TicketObservabilityDetail), paging: Pagination });

// src/generated-admin/endpoints/GameSessionDetailAdmin$.ts
var GameSessionDetailAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get all parties.
   */
  getParties(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/parties".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      PartyDetailQueryResponse,
      "PartyDetailQueryResponse"
    );
  }
  /**
   * Get all matchmaking ticket.
   */
  getTickets(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/tickets".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      TicketDetailQueryResponse,
      "TicketDetailQueryResponse"
    );
  }
  /**
   * Get all matchmaking.
   */
  getMatchmaking(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/matchmaking".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      MatchmakingDetailQueryResponse,
      "MatchmakingDetailQueryResponse"
    );
  }
  /**
   * Get all game sessions.
   */
  getGamesessions(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/gamesessions".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      GameSessionDetailQueryResponse,
      "GameSessionDetailQueryResponse"
    );
  }
  /**
   * Get detail matchmaking ticket history by ticket ID.
   */
  getTicket_ByTicketId(ticketId) {
    const params = {};
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/tickets/{ticketId}".replace("{namespace}", this.namespace).replace("{ticketId}", ticketId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      TicketObservabilityDetail,
      "TicketObservabilityDetail"
    );
  }
  /**
   * Get party detail.
   */
  getParty_BySessionId(sessionId) {
    const params = {};
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/parties/{sessionId}".replace("{namespace}", this.namespace).replace("{sessionId}", sessionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, PartyDetail, "PartyDetail");
  }
  /**
   * Get game session detail.
   */
  getGamesession_BySessionId(sessionId) {
    const params = {};
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/gamesessions/{sessionId}".replace("{namespace}", this.namespace).replace("{sessionId}", sessionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, GameSessionDetail, "GameSessionDetail");
  }
  /**
   * Get detail matchmaking history by ticket ID.
   */
  getMatchmakingTicket_ByTicketId(ticketId) {
    const params = {};
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/matchmaking/ticket/{ticketId}".replace("{namespace}", this.namespace).replace("{ticketId}", ticketId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, MatchmakingDetail, "MatchmakingDetail");
  }
  /**
   * Get detail matchmaking history by session ID.
   */
  getMatchmakingSession_BySessionId(sessionId) {
    const params = {};
    const url = "/sessionhistory/v1/admin/namespaces/{namespace}/matchmaking/session/{sessionId}".replace("{namespace}", this.namespace).replace("{sessionId}", sessionId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk3.Validate.validateOrReturnResponse(this.useSchemaValidation, () => resultPromise, MatchmakingDetail, "MatchmakingDetail");
  }
};

// src/generated-admin/GameSessionDetailAdminApi.ts
function GameSessionDetailAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk4.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk4.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getParties(queryParams) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getParties(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTickets(queryParams) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTickets(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMatchmaking(queryParams) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMatchmaking(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesessions(queryParams) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesessions(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTicket_ByTicketId(ticketId) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTicket_ByTicketId(ticketId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getParty_BySessionId(sessionId) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getParty_BySessionId(sessionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getGamesession_BySessionId(sessionId) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getGamesession_BySessionId(sessionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMatchmakingTicket_ByTicketId(ticketId) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMatchmakingTicket_ByTicketId(ticketId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMatchmakingSession_BySessionId(sessionId) {
    const $ = new GameSessionDetailAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMatchmakingSession_BySessionId(sessionId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get all parties.
     */
    getParties,
    /**
     * Get all matchmaking ticket.
     */
    getTickets,
    /**
     * Get all matchmaking.
     */
    getMatchmaking,
    /**
     * Get all game sessions.
     */
    getGamesessions,
    /**
     * Get detail matchmaking ticket history by ticket ID.
     */
    getTicket_ByTicketId,
    /**
     * Get party detail.
     */
    getParty_BySessionId,
    /**
     * Get game session detail.
     */
    getGamesession_BySessionId,
    /**
     * Get detail matchmaking history by ticket ID.
     */
    getMatchmakingTicket_ByTicketId,
    /**
     * Get detail matchmaking history by session ID.
     */
    getMatchmakingSession_BySessionId
  };
}

// src/generated-admin/queries/GameSessionDetailAdmin.query.ts
var Key_GameSessionDetailAdmin = /* @__PURE__ */ ((Key_GameSessionDetailAdmin2) => {
  Key_GameSessionDetailAdmin2["Parties"] = "Sessionhistory.GameSessionDetailAdmin.Parties";
  Key_GameSessionDetailAdmin2["Tickets"] = "Sessionhistory.GameSessionDetailAdmin.Tickets";
  Key_GameSessionDetailAdmin2["Matchmaking"] = "Sessionhistory.GameSessionDetailAdmin.Matchmaking";
  Key_GameSessionDetailAdmin2["Gamesessions"] = "Sessionhistory.GameSessionDetailAdmin.Gamesessions";
  Key_GameSessionDetailAdmin2["Ticket_ByTicketId"] = "Sessionhistory.GameSessionDetailAdmin.Ticket_ByTicketId";
  Key_GameSessionDetailAdmin2["Party_BySessionId"] = "Sessionhistory.GameSessionDetailAdmin.Party_BySessionId";
  Key_GameSessionDetailAdmin2["Gamesession_BySessionId"] = "Sessionhistory.GameSessionDetailAdmin.Gamesession_BySessionId";
  Key_GameSessionDetailAdmin2["MatchmakingTicket_ByTicketId"] = "Sessionhistory.GameSessionDetailAdmin.MatchmakingTicket_ByTicketId";
  Key_GameSessionDetailAdmin2["MatchmakingSession_BySessionId"] = "Sessionhistory.GameSessionDetailAdmin.MatchmakingSession_BySessionId";
  return Key_GameSessionDetailAdmin2;
})(Key_GameSessionDetailAdmin || {});
var useGameSessionDetailAdminApi_GetParties = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getParties(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Parties" /* Parties */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetTickets = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTickets(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Tickets" /* Tickets */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetMatchmaking = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getMatchmaking(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Matchmaking" /* Matchmaking */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetGamesessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getGamesessions(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Gamesessions" /* Gamesessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetTicket_ByTicketId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicket_ByTicketId(input2.ticketId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Ticket_ByTicketId" /* Ticket_ByTicketId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetParty_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getParty_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Party_BySessionId" /* Party_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetGamesession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getGamesession_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.Gamesession_BySessionId" /* Gamesession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMatchmakingTicket_ByTicketId(input2.ticketId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.MatchmakingTicket_ByTicketId" /* MatchmakingTicket_ByTicketId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMatchmakingSession_BySessionId(input2.sessionId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query2.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetailAdmin.MatchmakingSession_BySessionId" /* MatchmakingSession_BySessionId */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-admin/queries/XRayAdmin.query.ts
var import_react_query3 = require("@tanstack/react-query");

// src/generated-admin/XRayAdminApi.ts
var import_sdk6 = require("@accelbyte/sdk");

// src/generated-admin/endpoints/XRayAdmin$.ts
var import_sdk5 = require("@accelbyte/sdk");

// src/generated-definitions/XRayAcquiringDsQueryResponse.ts
var import_zod42 = require("zod");

// src/generated-definitions/AcquiringDs.ts
var import_zod41 = require("zod");
var AcquiringDs = import_zod41.z.object({
  createdAt: import_zod41.z.string().nullish(),
  matchPool: import_zod41.z.string().nullish(),
  namespace: import_zod41.z.string().nullish(),
  region: import_zod41.z.string().nullish(),
  success: import_zod41.z.boolean().nullish(),
  value: import_zod41.z.number().int().nullish()
});

// src/generated-definitions/XRayAcquiringDsQueryResponse.ts
var XRayAcquiringDsQueryResponse = import_zod42.z.object({ data: import_zod42.z.array(AcquiringDs) });

// src/generated-definitions/XRayAcquiringDsWaitTimeQueryResponse.ts
var import_zod44 = require("zod");

// src/generated-definitions/AcquiringDsWaitTime.ts
var import_zod43 = require("zod");
var AcquiringDsWaitTime = import_zod43.z.object({
  createdAt: import_zod43.z.string().nullish(),
  matchPool: import_zod43.z.string().nullish(),
  namespace: import_zod43.z.string().nullish(),
  value: import_zod43.z.number().nullish()
});

// src/generated-definitions/XRayAcquiringDsWaitTimeQueryResponse.ts
var XRayAcquiringDsWaitTimeQueryResponse = import_zod44.z.object({ data: import_zod44.z.array(AcquiringDsWaitTime) });

// src/generated-definitions/XRayBulkTicketObservabilityResponse.ts
var import_zod45 = require("zod");
var XRayBulkTicketObservabilityResponse = import_zod45.z.object({ ticketIDs: import_zod45.z.array(import_zod45.z.string()) });

// src/generated-definitions/XRayCanceledMatchmakingTicketQueryResponse.ts
var import_zod47 = require("zod");

// src/generated-definitions/CanceledMatchmakingTicket.ts
var import_zod46 = require("zod");
var CanceledMatchmakingTicket = import_zod46.z.object({
  createdAt: import_zod46.z.string().nullish(),
  matchPool: import_zod46.z.string().nullish(),
  namespace: import_zod46.z.string().nullish(),
  value: import_zod46.z.number().int().nullish()
});

// src/generated-definitions/XRayCanceledMatchmakingTicketQueryResponse.ts
var XRayCanceledMatchmakingTicketQueryResponse = import_zod47.z.object({ data: import_zod47.z.array(CanceledMatchmakingTicket) });

// src/generated-definitions/XRayCreatedMatchmakingTicketQueryResponse.ts
var import_zod49 = require("zod");

// src/generated-definitions/CreatedMatchmakingTicket.ts
var import_zod48 = require("zod");
var CreatedMatchmakingTicket = import_zod48.z.object({
  createdAt: import_zod48.z.string().nullish(),
  matchPool: import_zod48.z.string().nullish(),
  namespace: import_zod48.z.string().nullish(),
  value: import_zod48.z.number().int().nullish()
});

// src/generated-definitions/XRayCreatedMatchmakingTicketQueryResponse.ts
var XRayCreatedMatchmakingTicketQueryResponse = import_zod49.z.object({ data: import_zod49.z.array(CreatedMatchmakingTicket) });

// src/generated-definitions/XRayExpiredMatchmakingTicketQueryResponse.ts
var import_zod51 = require("zod");

// src/generated-definitions/ExpiredMatchmakingTicket.ts
var import_zod50 = require("zod");
var ExpiredMatchmakingTicket = import_zod50.z.object({
  createdAt: import_zod50.z.string().nullish(),
  matchPool: import_zod50.z.string().nullish(),
  namespace: import_zod50.z.string().nullish(),
  value: import_zod50.z.number().int().nullish()
});

// src/generated-definitions/XRayExpiredMatchmakingTicketQueryResponse.ts
var XRayExpiredMatchmakingTicketQueryResponse = import_zod51.z.object({ data: import_zod51.z.array(ExpiredMatchmakingTicket) });

// src/generated-definitions/XRayMatchHistorQueryResponse.ts
var import_zod53 = require("zod");

// src/generated-definitions/EventMatchHistory.ts
var import_zod52 = require("zod");
var EventMatchHistory = import_zod52.z.object({
  action: import_zod52.z.string(),
  match: Match.nullish(),
  matchID: import_zod52.z.string(),
  matchpool: import_zod52.z.string(),
  namespace: import_zod52.z.string(),
  podName: import_zod52.z.string(),
  ruleSet: import_zod52.z.string().nullish(),
  tickID: import_zod52.z.string().nullish(),
  timestamp: import_zod52.z.string()
});

// src/generated-definitions/XRayMatchHistorQueryResponse.ts
var XRayMatchHistorQueryResponse = import_zod53.z.object({ data: import_zod53.z.array(EventMatchHistory), paging: Pagination });

// src/generated-definitions/XRayMatchLengthDurationQueryResponse.ts
var import_zod55 = require("zod");

// src/generated-definitions/MatchLengthDuration.ts
var import_zod54 = require("zod");
var MatchLengthDuration = import_zod54.z.object({
  createdAt: import_zod54.z.string().nullish(),
  matchPool: import_zod54.z.string().nullish(),
  namespace: import_zod54.z.string().nullish(),
  value: import_zod54.z.number().nullish()
});

// src/generated-definitions/XRayMatchLengthDurationQueryResponse.ts
var XRayMatchLengthDurationQueryResponse = import_zod55.z.object({ data: import_zod55.z.array(MatchLengthDuration) });

// src/generated-definitions/XRayMatchMatchmakingQueryResponse.ts
var import_zod57 = require("zod");

// src/generated-definitions/MatchMatchmaking.ts
var import_zod56 = require("zod");
var MatchMatchmaking = import_zod56.z.object({
  createdAt: import_zod56.z.string().nullish(),
  matchPool: import_zod56.z.string().nullish(),
  namespace: import_zod56.z.string().nullish(),
  value: import_zod56.z.number().int().nullish()
});

// src/generated-definitions/XRayMatchMatchmakingQueryResponse.ts
var XRayMatchMatchmakingQueryResponse = import_zod57.z.object({ data: import_zod57.z.array(MatchMatchmaking) });

// src/generated-definitions/XRayMatchMatchmakingTicketQueryResponse.ts
var import_zod59 = require("zod");

// src/generated-definitions/MatchMatchmakingTicket.ts
var import_zod58 = require("zod");
var MatchMatchmakingTicket = import_zod58.z.object({
  createdAt: import_zod58.z.string().nullish(),
  matchPool: import_zod58.z.string().nullish(),
  namespace: import_zod58.z.string().nullish(),
  value: import_zod58.z.number().int().nullish()
});

// src/generated-definitions/XRayMatchMatchmakingTicketQueryResponse.ts
var XRayMatchMatchmakingTicketQueryResponse = import_zod59.z.object({ data: import_zod59.z.array(MatchMatchmakingTicket) });

// src/generated-definitions/XRayMatchPoolPodTickMatchResponse.ts
var import_zod60 = require("zod");
var XRayMatchPoolPodTickMatchResponse = import_zod60.z.object({ data: import_zod60.z.array(EventMatchHistory) });

// src/generated-definitions/XRayMatchPoolPodTickQueryResponse.ts
var import_zod62 = require("zod");

// src/generated-definitions/XRayMatchPoolPodTickResult.ts
var import_zod61 = require("zod");
var XRayMatchPoolPodTickResult = import_zod61.z.object({
  podName: import_zod61.z.string(),
  tickId: import_zod61.z.string(),
  timestamp: import_zod61.z.string(),
  totalMatchBackfilled: import_zod61.z.number().int(),
  totalMatchCreated: import_zod61.z.number().int(),
  totalMatchToBackfill: import_zod61.z.number().int(),
  totalTicketBackfilled: import_zod61.z.number().int(),
  totalTicketForBackfill: import_zod61.z.number().int(),
  totalTicketForMatch: import_zod61.z.number().int(),
  totalTicketInQueue: import_zod61.z.number().int(),
  totalTicketMatched: import_zod61.z.number().int()
});

// src/generated-definitions/XRayMatchPoolPodTickQueryResponse.ts
var XRayMatchPoolPodTickQueryResponse = import_zod62.z.object({ data: import_zod62.z.array(XRayMatchPoolPodTickResult), paging: Pagination });

// src/generated-definitions/XRayMatchPoolPodTickTicketResponse.ts
var import_zod64 = require("zod");

// src/generated-definitions/TicketStatus.ts
var import_zod63 = require("zod");
var TicketStatus = import_zod63.z.object({ matched: import_zod63.z.boolean(), ticket: Ticket });

// src/generated-definitions/XRayMatchPoolPodTickTicketResponse.ts
var XRayMatchPoolPodTickTicketResponse = import_zod64.z.object({ data: import_zod64.z.array(TicketStatus) });

// src/generated-definitions/XRayMatchPoolQueryResponse.ts
var import_zod66 = require("zod");

// src/generated-definitions/XRayMatchPoolResult.ts
var import_zod65 = require("zod");
var XRayMatchPoolResult = import_zod65.z.object({ podName: import_zod65.z.string() });

// src/generated-definitions/XRayMatchPoolQueryResponse.ts
var XRayMatchPoolQueryResponse = import_zod66.z.object({ data: import_zod66.z.array(XRayMatchPoolResult) });

// src/generated-definitions/XRayMatchTicketHistoryQueryResponse.ts
var import_zod68 = require("zod");

// src/generated-definitions/XRayMatchTicketHistory.ts
var import_zod67 = require("zod");
var XRayMatchTicketHistory = import_zod67.z.object({
  action: import_zod67.z.string(),
  match: EventMatchHistory.nullish(),
  ticket: Ticket.nullish(),
  timestamp: import_zod67.z.string()
});

// src/generated-definitions/XRayMatchTicketHistoryQueryResponse.ts
var XRayMatchTicketHistoryQueryResponse = import_zod68.z.object({ data: import_zod68.z.array(XRayMatchTicketHistory) });

// src/generated-definitions/XRayMatchesQueryResponse.ts
var import_zod70 = require("zod");

// src/generated-definitions/XRayTicketMatchesResult.ts
var import_zod69 = require("zod");
var XRayTicketMatchesResult = import_zod69.z.object({
  CreatedAt: import_zod69.z.string().nullish(),
  IsPivot: import_zod69.z.boolean().nullish(),
  Latencies: import_zod69.z.record(import_zod69.z.number().int()).nullish(),
  MatchPool: import_zod69.z.string().nullish(),
  MatchedAt: import_zod69.z.string().nullish(),
  Namespace: import_zod69.z.string().nullish(),
  PartySessionID: import_zod69.z.string().nullish(),
  Players: import_zod69.z.array(PlayerData).nullish(),
  ProposedProposal: ProposedProposal.nullish(),
  RegionPreference: import_zod69.z.array(import_zod69.z.string()).nullish(),
  TicketAttributes: import_zod69.z.record(import_zod69.z.any()).nullish(),
  TicketID: import_zod69.z.string().nullish(),
  TimeToMatch: import_zod69.z.number().nullish()
});

// src/generated-definitions/XRayMatchesQueryResponse.ts
var XRayMatchesQueryResponse = import_zod70.z.object({ data: import_zod70.z.array(XRayTicketMatchesResult) });

// src/generated-definitions/XRayTicketObservabilityResponse.ts
var import_zod71 = require("zod");
var XRayTicketObservabilityResponse = import_zod71.z.object({ ticketID: import_zod71.z.string() });

// src/generated-definitions/XRayTicketQueryResponse.ts
var import_zod73 = require("zod");

// src/generated-definitions/XRayTicketResult.ts
var import_zod72 = require("zod");
var XRayTicketResult = import_zod72.z.object({
  elapsedTime: import_zod72.z.number(),
  id: import_zod72.z.string(),
  isBackfill: import_zod72.z.boolean().nullish(),
  isPivot: import_zod72.z.boolean().nullish(),
  matchpool: import_zod72.z.string(),
  memberAttributes: import_zod72.z.record(import_zod72.z.any()).nullish(),
  podName: import_zod72.z.string(),
  reason: import_zod72.z.string(),
  region: import_zod72.z.string(),
  tickId: import_zod72.z.string(),
  ticketId: import_zod72.z.string(),
  ticketStatus: import_zod72.z.string(),
  timestamp: import_zod72.z.string(),
  totalPlayers: import_zod72.z.number().int().nullish()
});

// src/generated-definitions/XRayTicketQueryResponse.ts
var XRayTicketQueryResponse = import_zod73.z.object({ data: import_zod73.z.array(XRayTicketResult), paging: Pagination });

// src/generated-definitions/XRayTotalActiveSessionQueryResponse.ts
var import_zod75 = require("zod");

// src/generated-definitions/TotalActiveSession.ts
var import_zod74 = require("zod");
var TotalActiveSession = import_zod74.z.object({
  createdAt: import_zod74.z.string().nullish(),
  matchPool: import_zod74.z.string().nullish(),
  namespace: import_zod74.z.string().nullish(),
  region: import_zod74.z.string().nullish(),
  value: import_zod74.z.number().int().nullish()
});

// src/generated-definitions/XRayTotalActiveSessionQueryResponse.ts
var XRayTotalActiveSessionQueryResponse = import_zod75.z.object({ data: import_zod75.z.array(TotalActiveSession) });

// src/generated-definitions/XRayTotalPlayerPersessionAvgQueryResponse.ts
var import_zod77 = require("zod");

// src/generated-definitions/TotalPlayerPersession.ts
var import_zod76 = require("zod");
var TotalPlayerPersession = import_zod76.z.object({
  createdAt: import_zod76.z.string().nullish(),
  matchPool: import_zod76.z.string().nullish(),
  namespace: import_zod76.z.string().nullish(),
  region: import_zod76.z.string().nullish(),
  value: import_zod76.z.number().nullish()
});

// src/generated-definitions/XRayTotalPlayerPersessionAvgQueryResponse.ts
var XRayTotalPlayerPersessionAvgQueryResponse = import_zod77.z.object({ data: import_zod77.z.array(TotalPlayerPersession) });

// src/generated-admin/endpoints/XRayAdmin$.ts
var XRayAdmin$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Create ticket observability request Request body details (all attributes are optional): Timestamp : timestamp when calling this endpoint Action : support one of the following value: 1. &#34;matchFound&#34; 2. &#34;matchNotFound&#34; 3. &#34;flexed&#34; TicketID : ticket ID MatchID : match ID will be filled only when match found Namespace : ticket current namespace GameMode : ticket current matchpool ActiveAllianceRule : current active alliance ruleset ActiveMatchingRule : current active matching ruleset Function : name of the function that called the endpoint Iteration : total iteration before match found TimeToMatchSec : time to match (in seconds) will be filled only when match found UnmatchReason : reason when unable to find match RemainingTickets : remaining ticket when unable to find match RemainingPlayersPerTicket : remaining players when unable to find match UnbackfillReason : reason when unable to backfill IsBackfillMatch : flag to distinguish between new match and backfill match IsRuleSetFlexed : flag if ruleset is getting flexed TickID : tick id for the matchmaking tick SessionTickID : session tick id for differentiate session when doing matches
   */
  createXrayTicket_v2(data) {
    const params = {};
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/tickets".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayTicketObservabilityResponse,
      "XRayTicketObservabilityResponse"
    );
  }
  /**
   * Create bulk ticket observability request Request body details (all attributes are optional): Timestamp : timestamp when calling this endpoint Action : support one of the following value: 1. &#34;matchFound&#34; 2. &#34;matchNotFound&#34; 3. &#34;flexed&#34; PartyID : ticket Party ID MatchID : match ID will be filled only when match found Namespace : ticket current namespace GameMode : ticket current matchpool ActiveAllianceRule : current active alliance ruleset ActiveMatchingRule : current active matching ruleset Function : name of the function that called the endpoint Iteration : total iteration before match found TimeToMatchSec : time to match (in seconds) will be filled only when match found UnmatchReason : reason when unable to find match RemainingTickets : remaining ticket when unable to find match RemainingPlayersPerTicket : remaining players when unable to find match UnbackfillReason : reason when unable to backfill IsBackfillMatch : flag to distinguish between new match and backfill match IsRuleSetFlexed : flag if ruleset is getting flexed TickID : tick id for the matchmaking tick SessionTickID : session tick id for differentiate session when doing matches
   */
  createXrayTicketBulk_v2(data) {
    const params = {};
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/tickets/bulk".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.post(url, data, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayBulkTicketObservabilityResponse,
      "XRayBulkTicketObservabilityResponse"
    );
  }
  /**
   * Query xray timeline by ticketID
   */
  getXrayTicket_ByTicketId_v2(ticketId, queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/tickets/{ticketId}".replace("{namespace}", this.namespace).replace("{ticketId}", ticketId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayTicketQueryResponse,
      "XRayTicketQueryResponse"
    );
  }
  /**
   * Query total match.
   */
  getXrayMetricsTotalMatch_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-match".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchMatchmakingQueryResponse,
      "XRayMatchMatchmakingQueryResponse"
    );
  }
  /**
   * Query total success and failed claim DS.
   */
  getXrayMetricsAcquiringDs_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/acquiring-ds".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayAcquiringDsQueryResponse,
      "XRayAcquiringDsQueryResponse"
    );
  }
  /**
   * Query xray match pool. query can using matchpool array with separate &#34;,&#34;
   */
  getXrayMatchPool_ByPoolName_v2(poolName, queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/match-pools/{poolName}".replace("{namespace}", this.namespace).replace("{poolName}", String(poolName));
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchPoolQueryResponse,
      "XRayMatchPoolQueryResponse"
    );
  }
  /**
   * Query xray timeline by userID or ticketID
   */
  getTicketsXray_ByUserId_v2(userId, queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/users/{userId}/tickets".replace("{namespace}", this.namespace).replace("{userId}", userId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayTicketQueryResponse,
      "XRayTicketQueryResponse"
    );
  }
  /**
   * Query xray timeline by matchID.
   */
  getTicketsXray_ByMatchId_v2(matchId) {
    const params = {};
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/matches/{matchId}/tickets".replace("{namespace}", this.namespace).replace("{matchId}", matchId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchesQueryResponse,
      "XRayMatchesQueryResponse"
    );
  }
  /**
   * Query total ticket match.
   */
  getXrayMetricsTotalTicketMatch_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-ticket-match".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchMatchmakingTicketQueryResponse,
      "XRayMatchMatchmakingTicketQueryResponse"
    );
  }
  /**
   * Query xray match histories.
   */
  getHistoriesXray_ByMatchId_v2(matchId, queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/matches/{matchId}/histories".replace("{namespace}", this.namespace).replace("{matchId}", matchId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchHistorQueryResponse,
      "XRayMatchHistorQueryResponse"
    );
  }
  /**
   * Query total active session.
   */
  getXrayMetricsTotalActiveSession_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-active-session".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayTotalActiveSessionQueryResponse,
      "XRayTotalActiveSessionQueryResponse"
    );
  }
  /**
   * Query total ticket created.
   */
  getXrayMetricsTotalTicketCreated_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-ticket-created".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayCreatedMatchmakingTicketQueryResponse,
      "XRayCreatedMatchmakingTicketQueryResponse"
    );
  }
  /**
   * Query total ticket expired.
   */
  getXrayMetricsTotalTicketExpired_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-ticket-expired".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayExpiredMatchmakingTicketQueryResponse,
      "XRayExpiredMatchmakingTicketQueryResponse"
    );
  }
  /**
   * Query total ticket canceled.
   */
  getXrayMetricsTotalTicketCanceled_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-ticket-canceled".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayCanceledMatchmakingTicketQueryResponse,
      "XRayCanceledMatchmakingTicketQueryResponse"
    );
  }
  /**
   * Query match length duration avg. time in seconds
   */
  getXrayMetricsMatchLengthDurationAvg_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/match-length-duration-avg".replace(
      "{namespace}",
      this.namespace
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchLengthDurationQueryResponse,
      "XRayMatchLengthDurationQueryResponse"
    );
  }
  /**
   * Query match length duration p99. time in seconds
   */
  getXrayMetricsMatchLengthDurationP99_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/match-length-duration-p99".replace(
      "{namespace}",
      this.namespace
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchLengthDurationQueryResponse,
      "XRayMatchLengthDurationQueryResponse"
    );
  }
  /**
   * Query xray match ticket histories.
   */
  getTicketHistoriesXray_ByMatchId_v2(matchId) {
    const params = {};
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/matches/{matchId}/ticket-histories".replace("{namespace}", this.namespace).replace("{matchId}", matchId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchTicketHistoryQueryResponse,
      "XRayMatchTicketHistoryQueryResponse"
    );
  }
  /**
   * Query acquiring ds wait time average. time in seconds
   */
  getXrayMetricsAcquiringDsWaitTimeAvg_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/acquiring-ds-wait-time-avg".replace(
      "{namespace}",
      this.namespace
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayAcquiringDsWaitTimeQueryResponse,
      "XRayAcquiringDsWaitTimeQueryResponse"
    );
  }
  /**
   * Query total player persession average.
   */
  getXrayMetricsTotalPlayerPersessionAvg_v2(queryParams) {
    const params = { ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/metrics/total-player-persession-avg".replace(
      "{namespace}",
      this.namespace
    );
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayTotalPlayerPersessionAvgQueryResponse,
      "XRayTotalPlayerPersessionAvgQueryResponse"
    );
  }
  /**
   * Query xray match pool ticks.
   */
  getTicksXray_ByPoolName_ByPodName_v2(poolName, podName, queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/match-pools/{poolName}/pods/{podName}/ticks".replace("{namespace}", this.namespace).replace("{poolName}", poolName).replace("{podName}", podName);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchPoolPodTickQueryResponse,
      "XRayMatchPoolPodTickQueryResponse"
    );
  }
  /**
   * Query xray match pool tick matches by tick id.
   */
  getMatchesXray_ByPoolName_ByPodName_ByTickId_v2(poolName, podName, tickId) {
    const params = {};
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/match-pools/{poolName}/pods/{podName}/ticks/{tickId}/matches".replace("{namespace}", this.namespace).replace("{poolName}", poolName).replace("{podName}", podName).replace("{tickId}", tickId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchPoolPodTickMatchResponse,
      "XRayMatchPoolPodTickMatchResponse"
    );
  }
  /**
   * Query xray match pool tick tickets detail by tick id.
   */
  getTicketsXray_ByPoolName_ByPodName_ByTickId_v2(poolName, podName, tickId) {
    const params = {};
    const url = "/sessionhistory/v2/admin/namespaces/{namespace}/xray/match-pools/{poolName}/pods/{podName}/ticks/{tickId}/tickets".replace("{namespace}", this.namespace).replace("{poolName}", poolName).replace("{podName}", podName).replace("{tickId}", tickId);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk5.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      XRayMatchPoolPodTickTicketResponse,
      "XRayMatchPoolPodTickTicketResponse"
    );
  }
};

// src/generated-admin/XRayAdminApi.ts
function XRayAdminApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk6.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk6.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function createXrayTicket_v2(data) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createXrayTicket_v2(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function createXrayTicketBulk_v2(data) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.createXrayTicketBulk_v2(data);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayTicket_ByTicketId_v2(ticketId, queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayTicket_ByTicketId_v2(ticketId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalMatch_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalMatch_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsAcquiringDs_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsAcquiringDs_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMatchPool_ByPoolName_v2(poolName, queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMatchPool_ByPoolName_v2(poolName, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTicketsXray_ByUserId_v2(userId, queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTicketsXray_ByUserId_v2(userId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTicketsXray_ByMatchId_v2(matchId) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTicketsXray_ByMatchId_v2(matchId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalTicketMatch_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalTicketMatch_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getHistoriesXray_ByMatchId_v2(matchId, queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getHistoriesXray_ByMatchId_v2(matchId, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalActiveSession_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalActiveSession_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalTicketCreated_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalTicketCreated_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalTicketExpired_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalTicketExpired_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalTicketCanceled_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalTicketCanceled_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsMatchLengthDurationAvg_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsMatchLengthDurationAvg_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsMatchLengthDurationP99_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsMatchLengthDurationP99_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTicketHistoriesXray_ByMatchId_v2(matchId) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTicketHistoriesXray_ByMatchId_v2(matchId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsAcquiringDsWaitTimeAvg_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsAcquiringDsWaitTimeAvg_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getXrayMetricsTotalPlayerPersessionAvg_v2(queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getXrayMetricsTotalPlayerPersessionAvg_v2(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTicksXray_ByPoolName_ByPodName_v2(poolName, podName, queryParams) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTicksXray_ByPoolName_ByPodName_v2(poolName, podName, queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getMatchesXray_ByPoolName_ByPodName_ByTickId_v2(poolName, podName, tickId) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getMatchesXray_ByPoolName_ByPodName_ByTickId_v2(poolName, podName, tickId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  async function getTicketsXray_ByPoolName_ByPodName_ByTickId_v2(poolName, podName, tickId) {
    const $ = new XRayAdmin$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getTicketsXray_ByPoolName_ByPodName_ByTickId_v2(poolName, podName, tickId);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Create ticket observability request Request body details (all attributes are optional): Timestamp : timestamp when calling this endpoint Action : support one of the following value: 1. &#34;matchFound&#34; 2. &#34;matchNotFound&#34; 3. &#34;flexed&#34; TicketID : ticket ID MatchID : match ID will be filled only when match found Namespace : ticket current namespace GameMode : ticket current matchpool ActiveAllianceRule : current active alliance ruleset ActiveMatchingRule : current active matching ruleset Function : name of the function that called the endpoint Iteration : total iteration before match found TimeToMatchSec : time to match (in seconds) will be filled only when match found UnmatchReason : reason when unable to find match RemainingTickets : remaining ticket when unable to find match RemainingPlayersPerTicket : remaining players when unable to find match UnbackfillReason : reason when unable to backfill IsBackfillMatch : flag to distinguish between new match and backfill match IsRuleSetFlexed : flag if ruleset is getting flexed TickID : tick id for the matchmaking tick SessionTickID : session tick id for differentiate session when doing matches
     */
    createXrayTicket_v2,
    /**
     * Create bulk ticket observability request Request body details (all attributes are optional): Timestamp : timestamp when calling this endpoint Action : support one of the following value: 1. &#34;matchFound&#34; 2. &#34;matchNotFound&#34; 3. &#34;flexed&#34; PartyID : ticket Party ID MatchID : match ID will be filled only when match found Namespace : ticket current namespace GameMode : ticket current matchpool ActiveAllianceRule : current active alliance ruleset ActiveMatchingRule : current active matching ruleset Function : name of the function that called the endpoint Iteration : total iteration before match found TimeToMatchSec : time to match (in seconds) will be filled only when match found UnmatchReason : reason when unable to find match RemainingTickets : remaining ticket when unable to find match RemainingPlayersPerTicket : remaining players when unable to find match UnbackfillReason : reason when unable to backfill IsBackfillMatch : flag to distinguish between new match and backfill match IsRuleSetFlexed : flag if ruleset is getting flexed TickID : tick id for the matchmaking tick SessionTickID : session tick id for differentiate session when doing matches
     */
    createXrayTicketBulk_v2,
    /**
     * Query xray timeline by ticketID
     */
    getXrayTicket_ByTicketId_v2,
    /**
     * Query total match.
     */
    getXrayMetricsTotalMatch_v2,
    /**
     * Query total success and failed claim DS.
     */
    getXrayMetricsAcquiringDs_v2,
    /**
     * Query xray match pool. query can using matchpool array with separate &#34;,&#34;
     */
    getXrayMatchPool_ByPoolName_v2,
    /**
     * Query xray timeline by userID or ticketID
     */
    getTicketsXray_ByUserId_v2,
    /**
     * Query xray timeline by matchID.
     */
    getTicketsXray_ByMatchId_v2,
    /**
     * Query total ticket match.
     */
    getXrayMetricsTotalTicketMatch_v2,
    /**
     * Query xray match histories.
     */
    getHistoriesXray_ByMatchId_v2,
    /**
     * Query total active session.
     */
    getXrayMetricsTotalActiveSession_v2,
    /**
     * Query total ticket created.
     */
    getXrayMetricsTotalTicketCreated_v2,
    /**
     * Query total ticket expired.
     */
    getXrayMetricsTotalTicketExpired_v2,
    /**
     * Query total ticket canceled.
     */
    getXrayMetricsTotalTicketCanceled_v2,
    /**
     * Query match length duration avg. time in seconds
     */
    getXrayMetricsMatchLengthDurationAvg_v2,
    /**
     * Query match length duration p99. time in seconds
     */
    getXrayMetricsMatchLengthDurationP99_v2,
    /**
     * Query xray match ticket histories.
     */
    getTicketHistoriesXray_ByMatchId_v2,
    /**
     * Query acquiring ds wait time average. time in seconds
     */
    getXrayMetricsAcquiringDsWaitTimeAvg_v2,
    /**
     * Query total player persession average.
     */
    getXrayMetricsTotalPlayerPersessionAvg_v2,
    /**
     * Query xray match pool ticks.
     */
    getTicksXray_ByPoolName_ByPodName_v2,
    /**
     * Query xray match pool tick matches by tick id.
     */
    getMatchesXray_ByPoolName_ByPodName_ByTickId_v2,
    /**
     * Query xray match pool tick tickets detail by tick id.
     */
    getTicketsXray_ByPoolName_ByPodName_ByTickId_v2
  };
}

// src/generated-admin/queries/XRayAdmin.query.ts
var Key_XRayAdmin = /* @__PURE__ */ ((Key_XRayAdmin2) => {
  Key_XRayAdmin2["XrayTicket_v2"] = "Sessionhistory.XRayAdmin.XrayTicket_v2";
  Key_XRayAdmin2["XrayTicketBulk_v2"] = "Sessionhistory.XRayAdmin.XrayTicketBulk_v2";
  Key_XRayAdmin2["XrayTicket_ByTicketId_v2"] = "Sessionhistory.XRayAdmin.XrayTicket_ByTicketId_v2";
  Key_XRayAdmin2["XrayMetricsTotalMatch_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalMatch_v2";
  Key_XRayAdmin2["XrayMetricsAcquiringDs_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsAcquiringDs_v2";
  Key_XRayAdmin2["XrayMatchPool_ByPoolName_v2"] = "Sessionhistory.XRayAdmin.XrayMatchPool_ByPoolName_v2";
  Key_XRayAdmin2["TicketsXray_ByUserId_v2"] = "Sessionhistory.XRayAdmin.TicketsXray_ByUserId_v2";
  Key_XRayAdmin2["TicketsXray_ByMatchId_v2"] = "Sessionhistory.XRayAdmin.TicketsXray_ByMatchId_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketMatch_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketMatch_v2";
  Key_XRayAdmin2["HistoriesXray_ByMatchId_v2"] = "Sessionhistory.XRayAdmin.HistoriesXray_ByMatchId_v2";
  Key_XRayAdmin2["XrayMetricsTotalActiveSession_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalActiveSession_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketCreated_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCreated_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketExpired_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketExpired_v2";
  Key_XRayAdmin2["XrayMetricsTotalTicketCanceled_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCanceled_v2";
  Key_XRayAdmin2["XrayMetricsMatchLengthDurationAvg_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationAvg_v2";
  Key_XRayAdmin2["XrayMetricsMatchLengthDurationP99_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationP99_v2";
  Key_XRayAdmin2["TicketHistoriesXray_ByMatchId_v2"] = "Sessionhistory.XRayAdmin.TicketHistoriesXray_ByMatchId_v2";
  Key_XRayAdmin2["XrayMetricsAcquiringDsWaitTimeAvg_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsAcquiringDsWaitTimeAvg_v2";
  Key_XRayAdmin2["XrayMetricsTotalPlayerPersessionAvg_v2"] = "Sessionhistory.XRayAdmin.XrayMetricsTotalPlayerPersessionAvg_v2";
  Key_XRayAdmin2["TicksXray_ByPoolName_ByPodName_v2"] = "Sessionhistory.XRayAdmin.TicksXray_ByPoolName_ByPodName_v2";
  Key_XRayAdmin2["MatchesXray_ByPoolName_ByPodName_ByTickId_v2"] = "Sessionhistory.XRayAdmin.MatchesXray_ByPoolName_ByPodName_ByTickId_v2";
  Key_XRayAdmin2["TicketsXray_ByPoolName_ByPodName_ByTickId_v2"] = "Sessionhistory.XRayAdmin.TicketsXray_ByPoolName_ByPodName_ByTickId_v2";
  return Key_XRayAdmin2;
})(Key_XRayAdmin || {});
var useXRayAdminApi_CreateXrayTicketMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await XRayAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createXrayTicket_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query3.useMutation)({
    mutationKey: ["Sessionhistory.XRayAdmin.XrayTicket_v2" /* XrayTicket_v2 */],
    mutationFn,
    ...options
  });
};
var useXRayAdminApi_CreateXrayTicketBulkMutation_v2 = (sdk, options, callback) => {
  const mutationFn = async (input) => {
    const response = await XRayAdminApi(sdk, { coreConfig: input.coreConfig, axiosConfig: input.axiosConfig }).createXrayTicketBulk_v2(
      input.data
    );
    callback && callback(response.data);
    return response.data;
  };
  return (0, import_react_query3.useMutation)({
    mutationKey: ["Sessionhistory.XRayAdmin.XrayTicketBulk_v2" /* XrayTicketBulk_v2 */],
    mutationFn,
    ...options
  });
};
var useXRayAdminApi_GetXrayTicket_ByTicketId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getXrayTicket_ByTicketId_v2(
      input2.ticketId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayTicket_ByTicketId_v2" /* XrayTicket_ByTicketId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalMatch_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getXrayMetricsTotalMatch_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalMatch_v2" /* XrayMetricsTotalMatch_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsAcquiringDs_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getXrayMetricsAcquiringDs_v2(
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsAcquiringDs_v2" /* XrayMetricsAcquiringDs_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMatchPool_ByPoolName_v2(input2.poolName, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMatchPool_ByPoolName_v2" /* XrayMatchPool_ByPoolName_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketsXray_ByUserId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTicketsXray_ByUserId_v2(
      input2.userId,
      input2.queryParams
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.TicketsXray_ByUserId_v2" /* TicketsXray_ByUserId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketsXray_ByMatchId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, { coreConfig: input2.coreConfig, axiosConfig: input2.axiosConfig }).getTicketsXray_ByMatchId_v2(
      input2.matchId
    );
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.TicketsXray_ByMatchId_v2" /* TicketsXray_ByMatchId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketMatch_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketMatch_v2" /* XrayMetricsTotalTicketMatch_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetHistoriesXray_ByMatchId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getHistoriesXray_ByMatchId_v2(input2.matchId, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.HistoriesXray_ByMatchId_v2" /* HistoriesXray_ByMatchId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalActiveSession_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalActiveSession_v2" /* XrayMetricsTotalActiveSession_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketCreated_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCreated_v2" /* XrayMetricsTotalTicketCreated_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketExpired_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketExpired_v2" /* XrayMetricsTotalTicketExpired_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalTicketCanceled_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCanceled_v2" /* XrayMetricsTotalTicketCanceled_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsMatchLengthDurationAvg_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationAvg_v2" /* XrayMetricsMatchLengthDurationAvg_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsMatchLengthDurationP99_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationP99_v2" /* XrayMetricsMatchLengthDurationP99_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicketHistoriesXray_ByMatchId_v2(input2.matchId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.TicketHistoriesXray_ByMatchId_v2" /* TicketHistoriesXray_ByMatchId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsAcquiringDsWaitTimeAvg_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsAcquiringDsWaitTimeAvg_v2" /* XrayMetricsAcquiringDsWaitTimeAvg_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getXrayMetricsTotalPlayerPersessionAvg_v2(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.XrayMetricsTotalPlayerPersessionAvg_v2" /* XrayMetricsTotalPlayerPersessionAvg_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicksXray_ByPoolName_ByPodName_v2(input2.poolName, input2.podName, input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.TicksXray_ByPoolName_ByPodName_v2" /* TicksXray_ByPoolName_ByPodName_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getMatchesXray_ByPoolName_ByPodName_ByTickId_v2(input2.poolName, input2.podName, input2.tickId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.MatchesXray_ByPoolName_ByPodName_ByTickId_v2" /* MatchesXray_ByPoolName_ByPodName_ByTickId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
var useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2 = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await XRayAdminApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getTicketsXray_ByPoolName_ByPodName_ByTickId_v2(input2.poolName, input2.podName, input2.tickId);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query3.useQuery)({
    queryKey: ["Sessionhistory.XRayAdmin.TicketsXray_ByPoolName_ByPodName_ByTickId_v2" /* TicketsXray_ByPoolName_ByPodName_ByTickId_v2 */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};

// src/generated-public/queries/GameSessionDetail.query.ts
var import_react_query4 = require("@tanstack/react-query");

// src/generated-public/GameSessionDetailApi.ts
var import_sdk8 = require("@accelbyte/sdk");

// src/generated-public/endpoints/GameSessionDetail$.ts
var import_sdk7 = require("@accelbyte/sdk");
var GameSessionDetail$ = class {
  // @ts-ignore
  // prettier-ignore
  constructor(axiosInstance, namespace, useSchemaValidation = true) {
    this.axiosInstance = axiosInstance;
    this.namespace = namespace;
    this.useSchemaValidation = useSchemaValidation;
  }
  /**
   * Get all game sessions history for current user.
   */
  getUsersMeGamesessions(queryParams) {
    const params = { limit: 20, ...queryParams };
    const url = "/sessionhistory/v1/public/namespaces/{namespace}/users/me/gamesessions".replace("{namespace}", this.namespace);
    const resultPromise = this.axiosInstance.get(url, { params });
    return import_sdk7.Validate.validateOrReturnResponse(
      this.useSchemaValidation,
      () => resultPromise,
      GameSessionDetailQueryResponse,
      "GameSessionDetailQueryResponse"
    );
  }
};

// src/generated-public/GameSessionDetailApi.ts
function GameSessionDetailApi(sdk, args) {
  const sdkAssembly = sdk.assembly();
  const namespace = args?.coreConfig?.namespace ?? sdkAssembly.coreConfig.namespace;
  const useSchemaValidation = args?.coreConfig?.useSchemaValidation ?? sdkAssembly.coreConfig.useSchemaValidation;
  let axiosInstance = sdkAssembly.axiosInstance;
  const requestConfigOverrides = args?.axiosConfig?.request;
  const baseURLOverride = args?.coreConfig?.baseURL;
  const interceptorsOverride = args?.axiosConfig?.interceptors ?? [];
  if (requestConfigOverrides || baseURLOverride || interceptorsOverride.length > 0) {
    const requestConfig = import_sdk8.ApiUtils.mergeAxiosConfigs(sdkAssembly.axiosInstance.defaults, {
      ...baseURLOverride ? { baseURL: baseURLOverride } : {},
      ...requestConfigOverrides
    });
    axiosInstance = import_sdk8.Network.create(requestConfig);
    for (const interceptor of interceptorsOverride) {
      if (interceptor.type === "request") {
        axiosInstance.interceptors.request.use(interceptor.onRequest, interceptor.onError);
      }
      if (interceptor.type === "response") {
        axiosInstance.interceptors.response.use(interceptor.onSuccess, interceptor.onError);
      }
    }
  }
  async function getUsersMeGamesessions(queryParams) {
    const $ = new GameSessionDetail$(axiosInstance, namespace, useSchemaValidation);
    const resp = await $.getUsersMeGamesessions(queryParams);
    if (resp.error) throw resp.error;
    return resp.response;
  }
  return {
    /**
     * Get all game sessions history for current user.
     */
    getUsersMeGamesessions
  };
}

// src/generated-public/queries/GameSessionDetail.query.ts
var Key_GameSessionDetail = /* @__PURE__ */ ((Key_GameSessionDetail2) => {
  Key_GameSessionDetail2["UsersMeGamesessions"] = "Sessionhistory.GameSessionDetail.UsersMeGamesessions";
  return Key_GameSessionDetail2;
})(Key_GameSessionDetail || {});
var useGameSessionDetailApi_GetUsersMeGamesessions = (sdk, input, options, callback) => {
  const queryFn = (sdk2, input2) => async () => {
    const response = await GameSessionDetailApi(sdk2, {
      coreConfig: input2.coreConfig,
      axiosConfig: input2.axiosConfig
    }).getUsersMeGamesessions(input2.queryParams);
    callback && callback(response);
    return response.data;
  };
  return (0, import_react_query4.useQuery)({
    queryKey: ["Sessionhistory.GameSessionDetail.UsersMeGamesessions" /* UsersMeGamesessions */, input],
    queryFn: queryFn(sdk, input),
    ...options
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Key_ConfigAdmin,
  Key_GameSessionDetail,
  Key_GameSessionDetailAdmin,
  Key_XRayAdmin,
  useConfigAdminApi_GetConfigLog,
  useConfigAdminApi_PatchConfigLogMutation,
  useGameSessionDetailAdminApi_GetGamesession_BySessionId,
  useGameSessionDetailAdminApi_GetGamesessions,
  useGameSessionDetailAdminApi_GetMatchmaking,
  useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId,
  useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId,
  useGameSessionDetailAdminApi_GetParties,
  useGameSessionDetailAdminApi_GetParty_BySessionId,
  useGameSessionDetailAdminApi_GetTicket_ByTicketId,
  useGameSessionDetailAdminApi_GetTickets,
  useGameSessionDetailApi_GetUsersMeGamesessions,
  useXRayAdminApi_CreateXrayTicketBulkMutation_v2,
  useXRayAdminApi_CreateXrayTicketMutation_v2,
  useXRayAdminApi_GetHistoriesXray_ByMatchId_v2,
  useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2,
  useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2,
  useXRayAdminApi_GetTicketsXray_ByMatchId_v2,
  useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2,
  useXRayAdminApi_GetTicketsXray_ByUserId_v2,
  useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2,
  useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2,
  useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2,
  useXRayAdminApi_GetXrayMetricsAcquiringDs_v2,
  useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2,
  useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2,
  useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2,
  useXRayAdminApi_GetXrayMetricsTotalMatch_v2,
  useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2,
  useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2,
  useXRayAdminApi_GetXrayTicket_ByTicketId_v2
});
