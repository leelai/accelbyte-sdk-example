import { AccelByteSDK, SdkSetConfigParam, ApiError } from '@accelbyte/sdk';
import { AxiosError, AxiosResponse } from 'axios';
import { UseQueryOptions, UseQueryResult, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
import { C as Configuration, P as PartyDetailQueryResponse, T as TicketDetailQueryResponse, M as MatchmakingDetailQueryResponse, G as GameSessionDetailQueryResponse, a as TicketObservabilityDetail, b as PartyDetail, c as GameSessionDetail, d as MatchmakingDetail, e as XRayTicketObservabilityResponse, X as XRayTicketObservabilityRequest, g as XRayBulkTicketObservabilityResponse, f as XRayBulkTicketObservabilityRequest, h as XRayTicketQueryResponse, i as XRayMatchMatchmakingQueryResponse, j as XRayAcquiringDsQueryResponse, k as XRayMatchPoolQueryResponse, l as XRayMatchesQueryResponse, m as XRayMatchMatchmakingTicketQueryResponse, n as XRayMatchHistorQueryResponse, o as XRayTotalActiveSessionQueryResponse, p as XRayCreatedMatchmakingTicketQueryResponse, q as XRayExpiredMatchmakingTicketQueryResponse, r as XRayCanceledMatchmakingTicketQueryResponse, s as XRayMatchLengthDurationQueryResponse, t as XRayMatchTicketHistoryQueryResponse, u as XRayAcquiringDsWaitTimeQueryResponse, v as XRayTotalPlayerPersessionAvgQueryResponse, w as XRayMatchPoolPodTickQueryResponse, x as XRayMatchPoolPodTickMatchResponse, y as XRayMatchPoolPodTickTicketResponse } from './XRayTotalPlayerPersessionAvgQueryResponse-BPHpQFDQ.js';
import 'zod';

/**
 * AUTO GENERATED
 */

declare enum Key_ConfigAdmin {
    ConfigLog = "Sessionhistory.ConfigAdmin.ConfigLog"
}
/**
 * Get Log Configuration.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigLog, input]
 * }
 * ```
 */
declare const useConfigAdminApi_GetConfigLog: (sdk: AccelByteSDK, input: SdkSetConfigParam, options?: Omit<UseQueryOptions<Configuration, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<Configuration>) => void) => UseQueryResult<Configuration, AxiosError<ApiError>>;
/**
 * Update Log Configuration.&lt;br&gt;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_ConfigAdmin.ConfigLog, input]
 * }
 * ```
 */
declare const useConfigAdminApi_PatchConfigLogMutation: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<Configuration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: Configuration;
}>, "mutationKey">, callback?: (data: Configuration) => void) => UseMutationResult<Configuration, AxiosError<ApiError>, SdkSetConfigParam & {
    data: Configuration;
}>;

/**
 * AUTO GENERATED
 */

declare enum Key_GameSessionDetailAdmin {
    Parties = "Sessionhistory.GameSessionDetailAdmin.Parties",
    Tickets = "Sessionhistory.GameSessionDetailAdmin.Tickets",
    Matchmaking = "Sessionhistory.GameSessionDetailAdmin.Matchmaking",
    Gamesessions = "Sessionhistory.GameSessionDetailAdmin.Gamesessions",
    Ticket_ByTicketId = "Sessionhistory.GameSessionDetailAdmin.Ticket_ByTicketId",
    Party_BySessionId = "Sessionhistory.GameSessionDetailAdmin.Party_BySessionId",
    Gamesession_BySessionId = "Sessionhistory.GameSessionDetailAdmin.Gamesession_BySessionId",
    MatchmakingTicket_ByTicketId = "Sessionhistory.GameSessionDetailAdmin.MatchmakingTicket_ByTicketId",
    MatchmakingSession_BySessionId = "Sessionhistory.GameSessionDetailAdmin.MatchmakingSession_BySessionId"
}
/**
 * Get all parties.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Parties, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetParties: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        order?: string | null;
        orderBy?: string | null;
        partyID?: string | null;
        userID?: string | null;
    };
}, options?: Omit<UseQueryOptions<PartyDetailQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyDetailQueryResponse>) => void) => UseQueryResult<PartyDetailQueryResponse, AxiosError<ApiError>>;
/**
 * Get all matchmaking ticket.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Tickets, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetTickets: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endDate?: string | null;
        gameMode?: string | null;
        limit?: number;
        offset?: number;
        order?: string | null;
        partyID?: string | null;
        region?: string | null;
        startDate?: string | null;
        userIDs?: string | null;
    };
}, options?: Omit<UseQueryOptions<TicketDetailQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TicketDetailQueryResponse>) => void) => UseQueryResult<TicketDetailQueryResponse, AxiosError<ApiError>>;
/**
 * Get all matchmaking.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Matchmaking, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetMatchmaking: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        gameSessionID?: string | null;
        limit?: number;
        offset?: number;
        order?: string | null;
        orderBy?: string | null;
        ticketID?: string | null;
        userID?: string | null;
    };
}, options?: Omit<UseQueryOptions<MatchmakingDetailQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<MatchmakingDetailQueryResponse>) => void) => UseQueryResult<MatchmakingDetailQueryResponse, AxiosError<ApiError>>;
/**
 * Get all game sessions.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Gamesessions, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetGamesessions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        endDate?: string | null;
        gameSessionID?: string | null;
        limit?: number;
        offset?: number;
        order?: string | null;
        orderBy?: string | null;
        startDate?: string | null;
        userID?: string | null;
    };
}, options?: Omit<UseQueryOptions<GameSessionDetailQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionDetailQueryResponse>) => void) => UseQueryResult<GameSessionDetailQueryResponse, AxiosError<ApiError>>;
/**
 * Get detail matchmaking ticket history by ticket ID.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Ticket_ByTicketId, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetTicket_ByTicketId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    ticketId: string;
}, options?: Omit<UseQueryOptions<TicketObservabilityDetail, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<TicketObservabilityDetail>) => void) => UseQueryResult<TicketObservabilityDetail, AxiosError<ApiError>>;
/**
 * Get party detail.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Party_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetParty_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
}, options?: Omit<UseQueryOptions<PartyDetail, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<PartyDetail>) => void) => UseQueryResult<PartyDetail, AxiosError<ApiError>>;
/**
 * Get game session detail.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.Gamesession_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetGamesession_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
}, options?: Omit<UseQueryOptions<GameSessionDetail, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionDetail>) => void) => UseQueryResult<GameSessionDetail, AxiosError<ApiError>>;
/**
 * Get detail matchmaking history by ticket ID.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.MatchmakingTicket_ByTicketId, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    ticketId: string;
}, options?: Omit<UseQueryOptions<MatchmakingDetail, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<MatchmakingDetail>) => void) => UseQueryResult<MatchmakingDetail, AxiosError<ApiError>>;
/**
 * Get detail matchmaking history by session ID.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetailAdmin.MatchmakingSession_BySessionId, input]
 * }
 * ```
 */
declare const useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    sessionId: string;
}, options?: Omit<UseQueryOptions<MatchmakingDetail, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<MatchmakingDetail>) => void) => UseQueryResult<MatchmakingDetail, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_XRayAdmin {
    XrayTicket_v2 = "Sessionhistory.XRayAdmin.XrayTicket_v2",
    XrayTicketBulk_v2 = "Sessionhistory.XRayAdmin.XrayTicketBulk_v2",
    XrayTicket_ByTicketId_v2 = "Sessionhistory.XRayAdmin.XrayTicket_ByTicketId_v2",
    XrayMetricsTotalMatch_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalMatch_v2",
    XrayMetricsAcquiringDs_v2 = "Sessionhistory.XRayAdmin.XrayMetricsAcquiringDs_v2",
    XrayMatchPool_ByPoolName_v2 = "Sessionhistory.XRayAdmin.XrayMatchPool_ByPoolName_v2",
    TicketsXray_ByUserId_v2 = "Sessionhistory.XRayAdmin.TicketsXray_ByUserId_v2",
    TicketsXray_ByMatchId_v2 = "Sessionhistory.XRayAdmin.TicketsXray_ByMatchId_v2",
    XrayMetricsTotalTicketMatch_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketMatch_v2",
    HistoriesXray_ByMatchId_v2 = "Sessionhistory.XRayAdmin.HistoriesXray_ByMatchId_v2",
    XrayMetricsTotalActiveSession_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalActiveSession_v2",
    XrayMetricsTotalTicketCreated_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCreated_v2",
    XrayMetricsTotalTicketExpired_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketExpired_v2",
    XrayMetricsTotalTicketCanceled_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalTicketCanceled_v2",
    XrayMetricsMatchLengthDurationAvg_v2 = "Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationAvg_v2",
    XrayMetricsMatchLengthDurationP99_v2 = "Sessionhistory.XRayAdmin.XrayMetricsMatchLengthDurationP99_v2",
    TicketHistoriesXray_ByMatchId_v2 = "Sessionhistory.XRayAdmin.TicketHistoriesXray_ByMatchId_v2",
    XrayMetricsAcquiringDsWaitTimeAvg_v2 = "Sessionhistory.XRayAdmin.XrayMetricsAcquiringDsWaitTimeAvg_v2",
    XrayMetricsTotalPlayerPersessionAvg_v2 = "Sessionhistory.XRayAdmin.XrayMetricsTotalPlayerPersessionAvg_v2",
    TicksXray_ByPoolName_ByPodName_v2 = "Sessionhistory.XRayAdmin.TicksXray_ByPoolName_ByPodName_v2",
    MatchesXray_ByPoolName_ByPodName_ByTickId_v2 = "Sessionhistory.XRayAdmin.MatchesXray_ByPoolName_ByPodName_ByTickId_v2",
    TicketsXray_ByPoolName_ByPodName_ByTickId_v2 = "Sessionhistory.XRayAdmin.TicketsXray_ByPoolName_ByPodName_ByTickId_v2"
}
/**
 * Create ticket observability request Request body details (all attributes are optional): Timestamp : timestamp when calling this endpoint Action : support one of the following value: 1. &#34;matchFound&#34; 2. &#34;matchNotFound&#34; 3. &#34;flexed&#34; TicketID : ticket ID MatchID : match ID will be filled only when match found Namespace : ticket current namespace GameMode : ticket current matchpool ActiveAllianceRule : current active alliance ruleset ActiveMatchingRule : current active matching ruleset Function : name of the function that called the endpoint Iteration : total iteration before match found TimeToMatchSec : time to match (in seconds) will be filled only when match found UnmatchReason : reason when unable to find match RemainingTickets : remaining ticket when unable to find match RemainingPlayersPerTicket : remaining players when unable to find match UnbackfillReason : reason when unable to backfill IsBackfillMatch : flag to distinguish between new match and backfill match IsRuleSetFlexed : flag if ruleset is getting flexed TickID : tick id for the matchmaking tick SessionTickID : session tick id for differentiate session when doing matches
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayTicket_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_CreateXrayTicketMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<XRayTicketObservabilityResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XRayTicketObservabilityRequest;
}>, "mutationKey">, callback?: (data: XRayTicketObservabilityResponse) => void) => UseMutationResult<XRayTicketObservabilityResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XRayTicketObservabilityRequest;
}>;
/**
 * Create bulk ticket observability request Request body details (all attributes are optional): Timestamp : timestamp when calling this endpoint Action : support one of the following value: 1. &#34;matchFound&#34; 2. &#34;matchNotFound&#34; 3. &#34;flexed&#34; PartyID : ticket Party ID MatchID : match ID will be filled only when match found Namespace : ticket current namespace GameMode : ticket current matchpool ActiveAllianceRule : current active alliance ruleset ActiveMatchingRule : current active matching ruleset Function : name of the function that called the endpoint Iteration : total iteration before match found TimeToMatchSec : time to match (in seconds) will be filled only when match found UnmatchReason : reason when unable to find match RemainingTickets : remaining ticket when unable to find match RemainingPlayersPerTicket : remaining players when unable to find match UnbackfillReason : reason when unable to backfill IsBackfillMatch : flag to distinguish between new match and backfill match IsRuleSetFlexed : flag if ruleset is getting flexed TickID : tick id for the matchmaking tick SessionTickID : session tick id for differentiate session when doing matches
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayTicketBulk_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_CreateXrayTicketBulkMutation_v2: (sdk: AccelByteSDK, options?: Omit<UseMutationOptions<XRayBulkTicketObservabilityResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XRayBulkTicketObservabilityRequest;
}>, "mutationKey">, callback?: (data: XRayBulkTicketObservabilityResponse) => void) => UseMutationResult<XRayBulkTicketObservabilityResponse, AxiosError<ApiError>, SdkSetConfigParam & {
    data: XRayBulkTicketObservabilityRequest;
}>;
/**
 * Query xray timeline by ticketID
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayTicket_ByTicketId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayTicket_ByTicketId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    ticketId: string;
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<XRayTicketQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayTicketQueryResponse>) => void) => UseQueryResult<XRayTicketQueryResponse, AxiosError<ApiError>>;
/**
 * Query total match.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalMatch_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalMatch_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayMatchMatchmakingQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchMatchmakingQueryResponse>) => void) => UseQueryResult<XRayMatchMatchmakingQueryResponse, AxiosError<ApiError>>;
/**
 * Query total success and failed claim DS.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsAcquiringDs_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsAcquiringDs_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayAcquiringDsQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayAcquiringDsQueryResponse>) => void) => UseQueryResult<XRayAcquiringDsQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray match pool. query can using matchpool array with separate &#34;,&#34;
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMatchPool_ByPoolName_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    poolName: string[];
    queryParams: {
        endDate: string | null;
        startDate: string | null;
    };
}, options?: Omit<UseQueryOptions<XRayMatchPoolQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchPoolQueryResponse>) => void) => UseQueryResult<XRayMatchPoolQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray timeline by userID or ticketID
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.TicketsXray_ByUserId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetTicketsXray_ByUserId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    userId: string;
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<XRayTicketQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayTicketQueryResponse>) => void) => UseQueryResult<XRayTicketQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray timeline by matchID.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.TicketsXray_ByMatchId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetTicketsXray_ByMatchId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    matchId: string;
}, options?: Omit<UseQueryOptions<XRayMatchesQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchesQueryResponse>) => void) => UseQueryResult<XRayMatchesQueryResponse, AxiosError<ApiError>>;
/**
 * Query total ticket match.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalTicketMatch_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayMatchMatchmakingTicketQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchMatchmakingTicketQueryResponse>) => void) => UseQueryResult<XRayMatchMatchmakingTicketQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray match histories.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.HistoriesXray_ByMatchId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetHistoriesXray_ByMatchId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    matchId: string;
    queryParams?: {
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<XRayMatchHistorQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchHistorQueryResponse>) => void) => UseQueryResult<XRayMatchHistorQueryResponse, AxiosError<ApiError>>;
/**
 * Query total active session.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalActiveSession_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
        region?: string | null;
    };
}, options?: Omit<UseQueryOptions<XRayTotalActiveSessionQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayTotalActiveSessionQueryResponse>) => void) => UseQueryResult<XRayTotalActiveSessionQueryResponse, AxiosError<ApiError>>;
/**
 * Query total ticket created.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalTicketCreated_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayCreatedMatchmakingTicketQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayCreatedMatchmakingTicketQueryResponse>) => void) => UseQueryResult<XRayCreatedMatchmakingTicketQueryResponse, AxiosError<ApiError>>;
/**
 * Query total ticket expired.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalTicketExpired_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayExpiredMatchmakingTicketQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayExpiredMatchmakingTicketQueryResponse>) => void) => UseQueryResult<XRayExpiredMatchmakingTicketQueryResponse, AxiosError<ApiError>>;
/**
 * Query total ticket canceled.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalTicketCanceled_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayCanceledMatchmakingTicketQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayCanceledMatchmakingTicketQueryResponse>) => void) => UseQueryResult<XRayCanceledMatchmakingTicketQueryResponse, AxiosError<ApiError>>;
/**
 * Query match length duration avg. time in seconds
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsMatchLengthDurationAvg_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayMatchLengthDurationQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchLengthDurationQueryResponse>) => void) => UseQueryResult<XRayMatchLengthDurationQueryResponse, AxiosError<ApiError>>;
/**
 * Query match length duration p99. time in seconds
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsMatchLengthDurationP99_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayMatchLengthDurationQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchLengthDurationQueryResponse>) => void) => UseQueryResult<XRayMatchLengthDurationQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray match ticket histories.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.TicketHistoriesXray_ByMatchId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    matchId: string;
}, options?: Omit<UseQueryOptions<XRayMatchTicketHistoryQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchTicketHistoryQueryResponse>) => void) => UseQueryResult<XRayMatchTicketHistoryQueryResponse, AxiosError<ApiError>>;
/**
 * Query acquiring ds wait time average. time in seconds
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsAcquiringDsWaitTimeAvg_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayAcquiringDsWaitTimeQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayAcquiringDsWaitTimeQueryResponse>) => void) => UseQueryResult<XRayAcquiringDsWaitTimeQueryResponse, AxiosError<ApiError>>;
/**
 * Query total player persession average.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.XrayMetricsTotalPlayerPersessionAvg_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        matchPool?: string[];
    };
}, options?: Omit<UseQueryOptions<XRayTotalPlayerPersessionAvgQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayTotalPlayerPersessionAvgQueryResponse>) => void) => UseQueryResult<XRayTotalPlayerPersessionAvgQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray match pool ticks.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.TicksXray_ByPoolName_ByPodName_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    poolName: string;
    podName: string;
    queryParams: {
        endDate: string | null;
        startDate: string | null;
        all?: boolean | null;
        limit?: number;
        offset?: number;
    };
}, options?: Omit<UseQueryOptions<XRayMatchPoolPodTickQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchPoolPodTickQueryResponse>) => void) => UseQueryResult<XRayMatchPoolPodTickQueryResponse, AxiosError<ApiError>>;
/**
 * Query xray match pool tick matches by tick id.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.MatchesXray_ByPoolName_ByPodName_ByTickId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    poolName: string;
    podName: string;
    tickId: string;
}, options?: Omit<UseQueryOptions<XRayMatchPoolPodTickMatchResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchPoolPodTickMatchResponse>) => void) => UseQueryResult<XRayMatchPoolPodTickMatchResponse, AxiosError<ApiError>>;
/**
 * Query xray match pool tick tickets detail by tick id.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_XRayAdmin.TicketsXray_ByPoolName_ByPodName_ByTickId_v2, input]
 * }
 * ```
 */
declare const useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    poolName: string;
    podName: string;
    tickId: string;
}, options?: Omit<UseQueryOptions<XRayMatchPoolPodTickTicketResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<XRayMatchPoolPodTickTicketResponse>) => void) => UseQueryResult<XRayMatchPoolPodTickTicketResponse, AxiosError<ApiError>>;

/**
 * AUTO GENERATED
 */

declare enum Key_GameSessionDetail {
    UsersMeGamesessions = "Sessionhistory.GameSessionDetail.UsersMeGamesessions"
}
/**
 * Get all game sessions history for current user.
 *
 * #### Default Query Options
 * The default options include:
 * ```
 * {
 *    queryKey: [Key_GameSessionDetail.UsersMeGamesessions, input]
 * }
 * ```
 */
declare const useGameSessionDetailApi_GetUsersMeGamesessions: (sdk: AccelByteSDK, input: SdkSetConfigParam & {
    queryParams?: {
        limit?: number;
        offset?: number;
        order?: string | null;
    };
}, options?: Omit<UseQueryOptions<GameSessionDetailQueryResponse, AxiosError<ApiError>>, "queryKey">, callback?: (data: AxiosResponse<GameSessionDetailQueryResponse>) => void) => UseQueryResult<GameSessionDetailQueryResponse, AxiosError<ApiError>>;

export { Key_ConfigAdmin, Key_GameSessionDetail, Key_GameSessionDetailAdmin, Key_XRayAdmin, useConfigAdminApi_GetConfigLog, useConfigAdminApi_PatchConfigLogMutation, useGameSessionDetailAdminApi_GetGamesession_BySessionId, useGameSessionDetailAdminApi_GetGamesessions, useGameSessionDetailAdminApi_GetMatchmaking, useGameSessionDetailAdminApi_GetMatchmakingSession_BySessionId, useGameSessionDetailAdminApi_GetMatchmakingTicket_ByTicketId, useGameSessionDetailAdminApi_GetParties, useGameSessionDetailAdminApi_GetParty_BySessionId, useGameSessionDetailAdminApi_GetTicket_ByTicketId, useGameSessionDetailAdminApi_GetTickets, useGameSessionDetailApi_GetUsersMeGamesessions, useXRayAdminApi_CreateXrayTicketBulkMutation_v2, useXRayAdminApi_CreateXrayTicketMutation_v2, useXRayAdminApi_GetHistoriesXray_ByMatchId_v2, useXRayAdminApi_GetMatchesXray_ByPoolName_ByPodName_ByTickId_v2, useXRayAdminApi_GetTicketHistoriesXray_ByMatchId_v2, useXRayAdminApi_GetTicketsXray_ByMatchId_v2, useXRayAdminApi_GetTicketsXray_ByPoolName_ByPodName_ByTickId_v2, useXRayAdminApi_GetTicketsXray_ByUserId_v2, useXRayAdminApi_GetTicksXray_ByPoolName_ByPodName_v2, useXRayAdminApi_GetXrayMatchPool_ByPoolName_v2, useXRayAdminApi_GetXrayMetricsAcquiringDsWaitTimeAvg_v2, useXRayAdminApi_GetXrayMetricsAcquiringDs_v2, useXRayAdminApi_GetXrayMetricsMatchLengthDurationAvg_v2, useXRayAdminApi_GetXrayMetricsMatchLengthDurationP99_v2, useXRayAdminApi_GetXrayMetricsTotalActiveSession_v2, useXRayAdminApi_GetXrayMetricsTotalMatch_v2, useXRayAdminApi_GetXrayMetricsTotalPlayerPersessionAvg_v2, useXRayAdminApi_GetXrayMetricsTotalTicketCanceled_v2, useXRayAdminApi_GetXrayMetricsTotalTicketCreated_v2, useXRayAdminApi_GetXrayMetricsTotalTicketExpired_v2, useXRayAdminApi_GetXrayMetricsTotalTicketMatch_v2, useXRayAdminApi_GetXrayTicket_ByTicketId_v2 };
