{"version":3,"sources":["../../../../src/permission-guard/utils/namespaceRole.ts"],"names":[],"mappings":";;AAUO,SAAS,cAAc,KAAoC,EAAA;AAChE,EAAA,OAAO,KAAM,CAAA,MAAA,CAAO,CAAC,QAAA,EAAoB,IAA0B,KAAA;AACjE,IAAI,IAAA,IAAA,CAAK,cAAc,IAAM,EAAA;AAC3B,MAAS,QAAA,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,CAAA;AAAA,KAC3B;AACA,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,EAAE,CAAA,CAAA;AACP,CAAA;AAGO,SAAS,sBAAA,CAAuB,gBAAiC,KAA2C,EAAA;AACjH,EAAO,OAAA,cAAA,CAAe,OAAO,CAAiB,aAAA,KAAA;AAC5C,IAAO,OAAA,KAAA,CAAM,KAAK,CAAQ,IAAA,KAAA,IAAA,CAAK,cAAc,IAAQ,IAAA,IAAA,CAAK,MAAW,KAAA,aAAA,CAAc,MAAM,CAAA,CAAA;AAAA,GAC1F,CAAA,CAAA;AACH,CAAA;AAGO,SAAS,qBAAA,CAAsB,gBAAiC,SAA8B,EAAA;AACnG,EAAA,OAAO,cAAe,CAAA,MAAA,CAAO,CAAC,QAAA,EAAoB,IAAwB,KAAA;AACxE,IAAA,IAAI,SAAW,EAAA;AACb,MAAA,IAAI,IAAK,CAAA,SAAA,KAAc,SAAa,IAAA,IAAA,CAAK,cAAc,aAAe,EAAA;AACpE,QAAS,QAAA,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,CAAA;AAAA,OAC3B;AAAA,KACK,MAAA;AACL,MAAS,QAAA,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,CAAA;AAAA,KAC3B;AACA,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,EAAE,CAAA,CAAA;AACP,CAAA;AAGO,SAAS,mBAAA,CAAoB,OAA0B,WAA0C,EAAA;AACtG,EAAA,OAAO,MAAM,MAAO,CAAA,CAAA,IAAA,KAAQ,WAAY,CAAA,QAAA,CAAS,KAAK,MAAM,CAAA,IAAK,KAAM,CAAA,OAAA,CAAQ,KAAK,WAAW,CAAA,IAAK,IAAK,CAAA,WAAA,CAAY,SAAS,CAAC,CAAA,CAAA;AACjI,CAAA;AAGO,SAAS,0BAA0B,KAA4C,EAAA;AACpF,EAAA,OAAO,KAAM,CAAA,MAAA,CAAO,CAAC,GAAA,EAAuB,IAA0B,KAAA;AACpE,IAAO,OAAA,GAAA,CAAI,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,GACpC,EAAG,EAAE,CAAA,CAAA;AACP,CAAA;AAGO,SAAS,oCAAoC,2BAA8E,EAAA;AAChI,EAAA,OAAO,2BAA4B,CAAA,MAAA,CAAO,CAAC,GAAA,EAAuB,IAAS,KAAA;AACzE,IAAO,OAAA,GAAA,CAAI,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,GACpC,EAAG,EAAE,CAAA,CAAA;AACP,CAAA;AAGO,SAAS,kBAAA,CAAmB,oBAA8B,UAAsB,EAAA;AACrF,EAAA,OAAO,WAAW,IAAK,CAAA,CAAA,IAAA,KAAQ,kBAAmB,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA,CAAA;AAClE,CAAA;AAGa,MAAA,0BAAA,GAA6B,CAAC,UAAA,EAA4B,SAAsC,KAAA;AAC3G,EAAO,OAAA;AAAA,IACL,QAAU,EAAA,UAAA,CAAW,QAAS,CAAA,OAAA,CAAQ,eAAe,SAAS,CAAA;AAAA,IAC9D,QAAQ,UAAW,CAAA,MAAA;AAAA,GACrB,CAAA;AACF","file":"namespaceRole.js","sourcesContent":["/*\n * Copyright (c) 2021 AccelByte Inc. All Rights Reserved.\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport { NamespaceRole, NamespaceRoleWithPermission, RolePermission, RoleWithManager } from '../models/role'\nimport { WILDCARD_SIGN } from '../types'\n\n// Get list of admin role id\nexport function getAdminRoles(roles: RoleWithManager[]): string[] {\n  return roles.reduce((filtered: string[], role: RoleWithManager) => {\n    if (role.adminRole === true) {\n      filtered.push(role.roleId)\n    }\n    return filtered\n  }, [])\n}\n\n// Get list of admin namespace role\nexport function getAdminNamespaceRoles(namespaceRoles: NamespaceRole[], roles: RoleWithManager[]): NamespaceRole[] {\n  return namespaceRoles.filter(namespaceRole => {\n    return roles.find(role => role.adminRole === true && role.roleId === namespaceRole.roleId)\n  })\n}\n\n// Get list of role id based on selected namespace\nexport function getRoleIdsByNamespace(namespaceRoles: NamespaceRole[], namespace?: string): string[] {\n  return namespaceRoles.reduce((filtered: string[], role: NamespaceRole) => {\n    if (namespace) {\n      if (role.namespace === namespace || role.namespace === WILDCARD_SIGN) {\n        filtered.push(role.roleId)\n      }\n    } else {\n      filtered.push(role.roleId)\n    }\n    return filtered\n  }, [])\n}\n\n// Get list of roles owned by current user\nexport function getCurrentUserRoles(roles: RoleWithManager[], userRoleIds: string[]): RoleWithManager[] {\n  return roles.filter(role => userRoleIds.includes(role.roleId) && Array.isArray(role.permissions) && role.permissions.length > 0)\n}\n\n// Get list of permission owned by current user\nexport function getCurrentUserPermissions(roles: RoleWithManager[]): RolePermission[] {\n  return roles.reduce((acc: RolePermission[], role: RoleWithManager) => {\n    return acc.concat(role.permissions)\n  }, [])\n}\n\n// Get list of permission with namespace owned by current user\nexport function getCurrentUserNamespacedPermissions(namespaceRoleWithPermission: NamespaceRoleWithPermission[]): RolePermission[] {\n  return namespaceRoleWithPermission.reduce((acc: RolePermission[], curr) => {\n    return acc.concat(curr.permissions)\n  }, [])\n}\n\n// Check whether current user has admin role\nexport function isUserHasAdminRole(userNamespaceRoles: string[], adminRoles: string[]) {\n  return adminRoles.some(role => userNamespaceRoles.includes(role))\n}\n\n// Replace {namespace} string with real namespace value\nexport const replacePermissionNamespace = (permission: RolePermission, namespace: string): RolePermission => {\n  return {\n    resource: permission.resource.replace('{namespace}', namespace),\n    action: permission.action\n  }\n}\n"]}