import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateProductKeyErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const MAX_LENGTH = 120;
const validateProductKey = (value, { isRequired = true, max = MAX_LENGTH } = {}) => {
  const REGEX = "^([a-z0-9]+)(_?[a-z0-9])*$";
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateProductKeyErrorType.enum.empty;
  }
  if (!matches(value, REGEX) && value.length <= max) {
    return ValidateProductKeyErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max });
};

export { ValidateProductKeyErrorType, validateProductKey };
//# sourceMappingURL=validateProductKey.js.map
//# sourceMappingURL=validateProductKey.js.map