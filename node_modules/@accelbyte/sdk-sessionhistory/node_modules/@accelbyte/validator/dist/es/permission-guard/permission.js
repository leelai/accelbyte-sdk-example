import { CrudBitType, WILDCARD_SIGN, CrudType } from './types';

class PermissionGuard {
  constructor(props = {}) {
    this.permissionCheck = {};
    this.subscriber = /* @__PURE__ */ new Set();
    this.hasPermission = (permission) => {
      const key = JSON.stringify(permission);
      const currentUser = this.user;
      if (currentUser) {
        const userPermissionExist = Array.isArray(currentUser.permissions) && currentUser.permissions.length > 0;
        if (!userPermissionExist) {
          this.permissionCheck = {};
          return this.permissionCheck[key];
        }
        this.permissionCheck[key] = this.checkHasPermission(currentUser.permissions, permission);
      }
      return this.permissionCheck[key];
    };
    this.getCrudTypeByCrudBit = (action) => {
      const actionBits = Object.keys(CrudBitType).map(Number).filter(Boolean);
      return actionBits.map((bit) => (action & bit) === bit && CrudBitType[bit]).filter(Boolean);
    };
    this.hasPermissionByCrudBit = (permission, action) => {
      const isUserHasPermission = this.getCrudTypeByCrudBit(permission.action).map((action2) => action2.toUpperCase()).find((permissionAction) => permissionAction === action.toUpperCase());
      if (!isUserHasPermission) {
        return false;
      }
      return this.hasPermission({ action, resource: permission.resource });
    };
    this.reset = () => {
      this.permissionCheck = {};
    };
    this.setUser = (user) => {
      this.user = user;
      this.notifySubscribers();
    };
    this.setCurrentNamespace = (currentNamespace) => {
      this.currentNamespace = currentNamespace;
      this.notifySubscribers();
    };
    this.setClientId = (clientId) => {
      this.clientId = clientId;
      this.notifySubscribers();
    };
    this.checkHasPermission = (userPermissions, { resource, action }) => {
      return Array.isArray(userPermissions) && userPermissions.some((permission) => {
        return !!permission && this.isResourceIncluded(permission, resource) && this.isActionIncluded(permission, action);
      });
    };
    this.isResourceIncluded = (permission, resource) => {
      if (!permission.resource || !resource) {
        return false;
      }
      if (permission.resource === resource) {
        return true;
      }
      const hasAPairOfBracketsRegexp = /{[A-z]*}/;
      if (!hasAPairOfBracketsRegexp.test(permission.resource) && !hasAPairOfBracketsRegexp.test(resource) && permission.resource === resource) {
        return true;
      }
      const requiredResourceArr = resource.split(":");
      const testResourceArr = permission.resource.split(":");
      const maxSectionLength = requiredResourceArr.length > testResourceArr.length ? testResourceArr.length : requiredResourceArr.length;
      const isDifferentSection = requiredResourceArr.slice(0, maxSectionLength).some((_, index) => !this.isVariableCovered(testResourceArr[index], requiredResourceArr[index]));
      if (isDifferentSection) {
        return false;
      }
      if (testResourceArr.length === requiredResourceArr.length) {
        return true;
      }
      const resourceSlice = testResourceArr.slice(requiredResourceArr.length, testResourceArr.length);
      return resourceSlice.length > 0 && resourceSlice.every((section) => section === WILDCARD_SIGN);
    };
    this.isActionIncluded = (permission, action) => {
      const modeType = Object.keys(CrudType);
      return Number(permission.action).toString(2).split("").reverse().some((item, index) => item === "1" && modeType[index] === action);
    };
    this.isVariableCovered = (access, required) => {
      if (access === WILDCARD_SIGN) {
        return true;
      }
      const insideBracketRegexp = /^{[A-z]*}$/;
      const accessIsInsideBracket = insideBracketRegexp.test(access);
      const requiredIsInsideBracket = insideBracketRegexp.test(required);
      if (!accessIsInsideBracket && !requiredIsInsideBracket || !this.user) {
        return access === required;
      }
      const actualAccessVal = !accessIsInsideBracket ? access : this.replaceResourceVal(access, {
        namespace: this.user.namespace,
        userId: this.user.userId,
        clientId: this.clientId
      });
      const actualRequiredVal = !requiredIsInsideBracket ? required : this.replaceResourceVal(required, {
        namespace: this.currentNamespace,
        userId: this.user.userId,
        clientId: this.clientId
      });
      return actualAccessVal === actualRequiredVal;
    };
    this.replaceResourceVal = (value, replacement) => {
      return Object.keys(replacement).reduce((val, key) => val.replace(`{${key}}`, replacement[key]), value);
    };
    this.user = props.user || null;
    this.currentNamespace = props.currentNamespace || "";
    this.clientId = props.clientId || "";
  }
  listen(listener) {
    this.subscriber.add(listener);
  }
  unlisten(listener) {
    this.subscriber.delete(listener);
  }
  notifySubscribers() {
    Array.from(this.subscriber).forEach((a) => a());
  }
}

export { PermissionGuard };
//# sourceMappingURL=permission.js.map
//# sourceMappingURL=permission.js.map