import isEmpty from 'validator/lib/isEmpty.js';
import matches from 'validator/lib/matches.js';
import { z } from 'zod';
import { CommonValidationErrorType } from './constant/errorType';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateMemorySizeNonNomadErrorType = z.enum([
  ...ValidateLengthErrorType.options,
  CommonValidationErrorType.enum.invalidFormat
]);
const validateMemorySizeNonNomad = (value, { isRequired = true } = {}) => {
  const MAX_LENGTH = 9;
  const REGEX = "^[0-9]+Mi$";
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateMemorySizeNonNomadErrorType.enum.empty;
  }
  if (!matches(value, REGEX)) {
    return ValidateMemorySizeNonNomadErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max: MAX_LENGTH });
};

export { ValidateMemorySizeNonNomadErrorType, validateMemorySizeNonNomad };
//# sourceMappingURL=validateMemorySizeNonNomad.js.map
//# sourceMappingURL=validateMemorySizeNonNomad.js.map