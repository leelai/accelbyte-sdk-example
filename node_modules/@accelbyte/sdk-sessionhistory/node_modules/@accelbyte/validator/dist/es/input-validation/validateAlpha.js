import isAlpha from 'validator/lib/isAlpha.js';
import isEmpty from 'validator/lib/isEmpty.js';
import isLowercase from 'validator/lib/isLowercase.js';
import isUppercase from 'validator/lib/isUppercase.js';
import { z } from 'zod';
import { CommonValidationErrorType, ThrownErrorType } from './constant/errorType';
import { ValidateLengthErrorType, validateLength } from './validateLength';

const ValidateAlphaErrorType = z.enum([...ValidateLengthErrorType.options, CommonValidationErrorType.enum.invalidFormat]);
const validateAlpha = (value, { maxLength = 256, isRequired = true, isUppercaseOnly = false, isLowercaseOnly = false } = {}) => {
  if (isLowercaseOnly && isUppercaseOnly) {
    throw new Error(ThrownErrorType.enum.invalidOption);
  }
  if (isEmpty(value)) {
    if (!isRequired) {
      return null;
    }
    return ValidateAlphaErrorType.enum.empty;
  }
  if (isUppercaseOnly && !isUppercase(value)) {
    return ValidateAlphaErrorType.enum.invalidFormat;
  }
  if (isLowercaseOnly && !isLowercase(value)) {
    return ValidateAlphaErrorType.enum.invalidFormat;
  }
  if (!isAlpha(value)) {
    return ValidateAlphaErrorType.enum.invalidFormat;
  }
  return validateLength(value, { max: maxLength });
};

export { ValidateAlphaErrorType, validateAlpha };
//# sourceMappingURL=validateAlpha.js.map
//# sourceMappingURL=validateAlpha.js.map