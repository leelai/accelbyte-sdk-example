{"version":3,"sources":["../../../src/input-validation/validateComplexPassword.ts"],"names":[],"mappings":";;;;;AAWa,MAAA,gCAAA,GAAmC,CAAE,CAAA,IAAA,CAAK,CAAC,yBAAA,CAA0B,KAAK,KAAO,EAAA,yBAAA,CAA0B,IAAK,CAAA,aAAa,CAAC,EAAA;AAU9H,MAAA,uBAAA,GAA0B,CAAC,KAAe,EAAA,EAAE,aAAa,IAAK,EAAA,GAAoC,EAAO,KAAA;AACpH,EAAM,MAAA,KAAA;AAAA;AAAA,IAEJ,kPAAA;AAAA,GAAA,CAAA;AACF,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,iCAAiC,IAAK,CAAA,KAAA,CAAA;AAAA,GAC/C;AACA,EAAA,IAAI,CAAC,OAAA,CAAQ,KAAO,EAAA,KAAK,CAAG,EAAA;AAC1B,IAAA,OAAO,iCAAiC,IAAK,CAAA,aAAA,CAAA;AAAA,GAC/C;AAEA,EAAO,OAAA,IAAA,CAAA;AACT","file":"validateComplexPassword.js","sourcesContent":["/*\n * Copyright (c) 2019-2023 AccelByte Inc. All Rights Reserved\n * This is licensed software from AccelByte Inc, for limitations\n * and restrictions contact your company contract manager.\n */\n\nimport isEmpty from 'validator/lib/isEmpty.js'\nimport matches from 'validator/lib/matches.js'\nimport { z } from 'zod'\nimport { CommonValidationErrorType } from './constant/errorType'\n\nexport const ValidateComplexPasswordErrorType = z.enum([CommonValidationErrorType.enum.empty, CommonValidationErrorType.enum.invalidFormat])\nexport type ValidateComplexPasswordErrorType = z.infer<typeof ValidateComplexPasswordErrorType>\n\nexport interface ValidateComplexPasswordOptions {\n  isRequired?: boolean\n}\n\n/* DEPRECATED\n * please use validateComplexPasswordAsObject instead of this function\n * */\nexport const validateComplexPassword = (value: string, { isRequired = true }: ValidateComplexPasswordOptions = {}) => {\n  const REGEX =\n    // tslint:disable-next-line\n    '^(?:(?=.*\\\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))(?!.*(.)\\\\1{2,})[A-Za-z0-9!~<>,;:_=?*+#.\"&§%°()\\\\|\\\\[\\\\]\\\\-\\\\$\\\\^\\\\@\\\\/]{8,32}$'\n  if (isEmpty(value)) {\n    if (!isRequired) {\n      return null\n    }\n    return ValidateComplexPasswordErrorType.enum.empty\n  }\n  if (!matches(value, REGEX)) {\n    return ValidateComplexPasswordErrorType.enum.invalidFormat\n  }\n\n  return null\n}\n"]}